<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>iterm2+zsh命令自动补全</title>
    <link href="/2023/09/13/iterm2-zsh%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
    <url>/2023/09/13/iterm2-zsh%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>地址: <a href="https://iterm2.com/">https://iterm2.com/</a></p><h3 id="设置为默认terminal"><a href="#设置为默认terminal" class="headerlink" title="设置为默认terminal"></a>设置为默认terminal</h3><p><img src="/images/iterm/iterm-1.png" alt="title"></p><h3 id="设置默认Shell"><a href="#设置默认Shell" class="headerlink" title="设置默认Shell"></a>设置默认Shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看系统安装的所有Shell</span><br>cat /etc/Shells<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">修改默认Shell为zsh</span><br>chsh -s /bin/zsh <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">查看当前使用的Shell</span><br>echo $Shell<br></code></pre></td></tr></table></figure><h2 id="zsh命令自动补全插件"><a href="#zsh命令自动补全插件" class="headerlink" title="zsh命令自动补全插件"></a>zsh命令自动补全插件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">编辑配置文件</span><br>vim ~/.zshrc<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">找到plugins配置，在括号内增加zsh-autosuggestions,与其他插件之间使用空格分隔开</span><br>plugins=(git zsh-autosuggestions)<br>source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh<br>source ~/.bash_profile # source一下其他环境变量<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">退出编辑后执行使配置生效</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/iterm/iterm-2.png" alt="title"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>服务端开发面试手册(Java)</title>
    <link href="/2023/08/31/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%8C/"/>
    <url>/2023/08/31/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/asset/服务端开发与面试知识手册.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git操作</title>
    <link href="/2023/08/31/git%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/08/31/git%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="Git合并操作"><a href="#Git合并操作" class="headerlink" title="Git合并操作"></a>Git合并操作</h3><p><img src="/images/git/git-0.png" alt="title"></p><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><p>使用git merge将master分支合并到feature分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure><p>上面的操作会在feature分支上产生一个新的commit，它是c4和c7的合并为c8，c8包含了master分支上的所有修改，结果如下图所示：</p><p><img src="/images/git/git-1.png" alt="title"></p><h4 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h4><p>rebase将feature分支的基移到master分支的开头(即c4)，将所有的新提交合并到主分支中。与在feature分支中创建合并提交不同，rebase通过在feature分支中为每个commit创建全新的commit来重写提交历史，<strong>在c4的基础上，依次重新提交在feature分支上的每一次修改。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure><p><img src="/images/git/git-2.png" alt="title"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 合并最近的分支</span></span><br><span class="line">git rebase -i HEAD~3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 弹出一个文本编辑窗口，前三行即最近三次的commit</span></span><br><span class="line">pick 344a29d test1</span><br><span class="line">pick 36f77fe test2</span><br><span class="line">pick 88cb498 test3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 含义</span></span><br><span class="line">p, pick = use commit</span><br><span class="line">s, squash = use commit, but 合并到前面的分支上</span><br><span class="line">f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span><br><span class="line">d, drop = remove commit 删除这个分支</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在合并过程中若发生冲突，需要自己对比修改本地文件，解决完冲突后执行</span></span><br><span class="line">git add .</span><br><span class="line">git rebase --continue</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 中途不想合并了，则可以执行：</span></span><br><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><h4 id="git-squash"><a href="#git-squash" class="headerlink" title="git squash"></a>git squash</h4><p>在git merge中，每一次merge就会产生一个额外的commit，如果在工程中有许多bug和一些微小改变的commit，那么可以使用–squash选项将feature分支中的所有commit取出，然后压缩这些commit为一个并加入到master分支中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --squash feature</span><br></pre></td></tr></table></figure><p><img src="/images/git/git-3.png" alt="title"></p><h3 id="Git保存操作"><a href="#Git保存操作" class="headerlink" title="Git保存操作"></a>Git保存操作</h3><p>想切换分支，正在处理当前项目的一个未完成部分。不想对半成品进行提交。Git 缓存允许你这样做。<strong>git stash 命令</strong>使你能够在不提交当前分支的情况下切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保存</span></span><br><span class="line">git stash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出保存的文件</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新恢复保存的文件</span></span><br><span class="line">git stash apply &lt;stash id&gt;</span><br><span class="line">git stash pop &lt;stash id&gt;  # 一样的效果，会删除&lt;stash id&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除</span></span><br><span class="line">git stash drop &lt;stash id&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus</title>
    <link href="/2023/08/30/prometheus/"/>
    <url>/2023/08/30/prometheus/</url>
    
    <content type="html"><![CDATA[<h4 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h4><h5 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-redis-prometheus-rocketmq%E7%AF%87/2.png" alt="title"></p><ul><li>Prometheus Server：用于抓取和存储时间序列化数据</li><li>Exporters：主动拉取数据的插件</li><li>Pushgateway：被动拉取数据的插件</li><li>Altermanager：告警发送模块</li><li>Prometheus web UI：界面化，也包含结合Grafana进行数据展示或告警发送</li><li>默认端口号为: 9090</li></ul><h5 id="Prometheus如何存储数据"><a href="#Prometheus如何存储数据" class="headerlink" title="Prometheus如何存储数据"></a>Prometheus如何存储数据</h5><p>TSDB存储原理: <a href="https://zhuanlan.zhihu.com/p/498612076">https://zhuanlan.zhihu.com/p/498612076</a></p><ul><li><p>采用time-series(时间序列)方式，存储在本地硬盘</p></li><li><p>time-series数据库以<strong>每2小时间</strong>隔来分block(块)存储，<strong>每个块又分为多个chunk文件</strong>，chunk文件用来存放采集的数据的数据，metadata和索引文件；</p></li><li><p>index文件是对metrics和labels进行索引之后存储在chunk中，<strong>chunk是作为基本存储单位</strong>，index和metadata作为子集；</p></li><li><p>prometheus平时采集到的数据先存放在内存之中，对内存消耗大，以缓存的方式可以加快搜索和访问</p></li><li><p>在prometheus宕机时，prometheus有一种保护机制WAL，<strong>将数据定期存入硬盘中以chunk来表示</strong>，在重新启动时，可以恢复进内存当中。</p></li><li><p>当通过API删除序列时，<strong>删除的记录存储在单独的tombstone文件中</strong>(而不是立即从块文件中删除数据)</p></li></ul><h5 id="数据采集的方式"><a href="#数据采集的方式" class="headerlink" title="数据采集的方式"></a>数据采集的方式</h5><ul><li><p>pull</p><ul><li>被监控主机安装各类已有的exporters</li><li>exporters以守护进程的模式运行，并开始采集数据</li><li>exporters是http_server，可以对http请求作出响应，并返回K/V数据，也就是metrics</li><li>prometheus通过用pull的方式（HTTP_GET）去访问每个节点上的exporter并采集回需要的数据</li></ul></li><li><p>push</p><ul><li>被监控主机安装官方的pushgateway插件</li><li>通过自行编写的各种脚本，将监控数据组织成K/V的形式（metrics形式）发送给pushgateway</li><li>pushgateway再推送给prometheus</li><li>pushgateway只是一个中间转发的媒介，可以被安装在任何地方</li></ul></li></ul><h5 id="什么是metrics"><a href="#什么是metrics" class="headerlink" title="什么是metrics"></a>什么是metrics</h5><ul><li>metrics是对采集过来的数据的一种统称</li><li>类型:<ul><li>Gauges: 最简单的度量指标，只有一个简单的返回值，或者叫做瞬时状态</li><li>Counters: Counters就是计数器</li><li>Histograms：柱状图，用于观察结果采样<ul><li>histograms 公开桶式观察计数，而<strong>histogram</strong> 的桶中的分位数计算在服务器端使用 histogram_quantile() 函数。每个配置的存储桶有一个时间序列。</li></ul></li><li>Summary：类似Histogram，用于表示一段时间内数据采样结果<ul><li><strong>summaries</strong> 在客户端侧计算数据流的分位数并直接公开它们</li></ul></li></ul></li></ul><h5 id="什么是node-exporter"><a href="#什么是node-exporter" class="headerlink" title="什么是node-exporter"></a>什么是node-exporter</h5><blockquote><p>Prometheus为了支持各种中间件以及第三方的监控提供了exporter，监控适配器，将不同指标类型和格式的数据统一转化为Prometheus能够识别的指标类型。他们将这些异构的数据转化为标准的Prometheus格式，并提供HTTP查询接口。 </p><p><strong>默认监听9100端口</strong> </p></blockquote><ul><li>Node exporter主要通过读取Linux的/proc以及/sys目录下的系统文件获取操作系统运行状态</li><li>redis exporter通过Redis命令行获取指标</li><li>mysql exporter通过读取数据库监控表获取MySQL的性能数据</li></ul><h5 id="PromQL"><a href="#PromQL" class="headerlink" title="PromQL"></a>PromQL</h5><blockquote><p>PromQL是Prometheus内置的数据查询语言，其提供对时间序列数据丰富的查询，聚合以及逻辑运算能力的支持</p></blockquote><p><strong>matric固定格式</strong>: <code>&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_memory_MemFree_bytes&#123;instance=&quot;node02&quot;,job=&quot;node02&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>监控名称查询</strong>: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如下查询了cpu的空闲和非空闲时的使用时间</span></span><br><span class="line">node_cpu_seconds_total&#123;mode=&#x27;idle&#x27;&#125; </span><br><span class="line">node_cpu_seconds_total&#123;mode!=&#x27;idle&#x27;&#125; </span><br><span class="line">node_systemd_unit_state&#123;instance=&#x27;47.98.138.176:9100&#x27;, job=&#x27;node&#x27;, name=&#x27;docker.service&#x27;&#125;</span><br></pre></td></tr></table></figure><p><strong>范围查询:</strong> </p><ul><li><code>s</code> - 秒</li><li><code>m</code> - 分钟</li><li><code>h</code> - 小时</li><li><code>d</code> - 天</li><li><code>w</code> - 周</li><li><code>y</code> - 年</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pushgateway_http_requests_total&#123;instance=~&quot;pushgateway&quot;,method=&#x27;get&#x27;&#125;[1m]</span><br></pre></td></tr></table></figure><p><strong>时间位移查询</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pushgateway_http_requests_total&#123;instance=~&quot;pushgateway&quot;,method=&#x27;get&#x27;&#125; offset 1d</span><br></pre></td></tr></table></figure><p><strong>聚合查询</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询昨天1天内pushgeteway中get的请求总量之和</span></span><br><span class="line">sum(pushgateway_http_requests_total&#123;instance=~&quot;pushgateway&quot;,method=&#x27;get&#x27;&#125; offset 1d)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照mode计算主机CPU的平均使用时间</span></span><br><span class="line">avg(node_cpu_seconds_total)by(mode)</span><br></pre></td></tr></table></figure><h5 id="DownSample原理"><a href="#DownSample原理" class="headerlink" title="DownSample原理"></a>DownSample原理</h5><p><strong>前提</strong>是：数据的处理符合结合律，多个采样点的值的合并不会影响最终的计算结果。</p><p><strong>原理</strong>: 降采样说白了就是降低数据的分辨率, 将一定时间间隔内的点，基于一定规则，聚合为一个或者一组值，从而达到降低采样点数，将少数据量，减轻数据查询的压力。比如: 30s采集周期，5min的时间间隔就是将6个点转化为1个点</p><ul><li>时间间隔：经验值5min or 1h<ul><li>5min: 当查询时间跨度在40h-240h之间</li><li>1h: 查询时间大于10天</li></ul></li><li>聚合规则<ul><li>max：典型的max_over_time</li><li>Min: min_over_time</li><li>Sum: sum_over_time</li><li>Count: count_over_time</li><li>avg: 取时间间隔内点的平均值</li><li>counter: 计算变化率，典型的有rate,increase</li></ul></li></ul><h5 id="step-duration区别"><a href="#step-duration区别" class="headerlink" title="step duration区别"></a>step duration区别</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-redis-prometheus-rocketmq%E7%AF%87/6.png" alt="title"></p><h5 id="rate与irate区别"><a href="#rate与irate区别" class="headerlink" title="rate与irate区别"></a>rate与irate区别</h5><p><code>rate(v range-vector)</code> 计算范围向量中时间序列的每秒平均增长率。单调性中断（例如由于目标重新启动而导致的计数器重置）会自动调整。此外，计算还会推断到时间范围的末尾，从而允许遗漏刮擦或刮擦周期与范围时间段的不完美对齐。<strong>duration的末尾的点减起始点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value = end-start</span><br><span class="line">time = endTime - startTime</span><br><span class="line">rate = value / time</span><br></pre></td></tr></table></figure><p><code>irate(v range-vector)</code> 计算范围向量中时间序列的每秒瞬时增长率。这是基于最后两个数据点。单调性中断（例如由于目标重新启动而导致的计数器重置）会自动调整。<strong>duration中最后两个时间点斜率</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value = end1 - end2</span><br><span class="line">time = end1Time - end2Time</span><br><span class="line">rate = value / time</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker for Mac修改默认APIServer配置</title>
    <link href="/2022/04/08/Docker-for-Mac%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4APIServer%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/04/08/Docker-for-Mac%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4APIServer%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>使用的是mac上的<a href="https://so.csdn.net/so/search?q=docker&spm=1001.2101.3001.7020">docker</a> desktop, 各种情况需要修改k8s-apiserver信息</p><h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><blockquote><p>docker run -it –privileged –pid=host debian nsenter -t 1 -m -u -n -i sh</p></blockquote><p>进入之后，修改k8s配置文件</p><blockquote><p>vim /etc/kubernetes/manifests/kube-apiserver.yaml</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>校招总结</title>
    <link href="/2021/12/21/%E6%A0%A1%E6%8B%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/21/%E6%A0%A1%E6%8B%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2021年的校招接近尾声，自己陆陆续续的从今年的年初开始到现在也拿到了大大小小几个的offer。这里对校招过程以及现在能想到的一些情况做一个相对全面的总结。</p><h3 id="校招几个要点"><a href="#校招几个要点" class="headerlink" title="校招几个要点"></a>校招几个要点</h3><h4 id="定位、目标"><a href="#定位、目标" class="headerlink" title="定位、目标"></a>定位、目标</h4><p>我是今年的正月十五左右想开始准备的我的春招，由于本身自己也有做过算法相关的工作，主要是图神经网络相关的然后敲代码研发的能力也尚可，但是对于自己未来要走什么方向还是比较盲目的。只有选择好了方向，后面的准备工作，无论是简历、刷题才会更加有目标，最害怕的就是准备到一半然后再换方向</p><p>算法方面，由于我自己当时没有算法方面的文章，单纯是对这方面存在比较浓厚的兴趣，顶多看过不少相关的论文，复现过几个论文里面的神经网络的模型。春招之前对算法的印象是“卷”、“诸神黄昏”、“没有A会拿不到好的offer”但是平均薪资要比研发多。当然，这里的多是相对而言的，算法🥬=研发sp，算法sp=研发ssp以此类推。所以我自己就很纠结。到底是走算法、还是走研发？谁不想要钱多呢？自己当时也纠结了很久，因为我算法是个菜鸡，架不住钱多，然后自己觉得研发我已经看透了，无非就是CRUD一些无聊的东西。我对自己的认知是算法我能拿个🥬，但是研发sp还是比较稳当的。最后也跟自己的一些朋友，我家里人讨论了一下这个问题。我父亲对我说的一句话点醒了我: “觉得研发干的很无趣是因为你接触的多，了解的多；算法你很感兴趣是因为你接触的相对少，等接触的多了，成为你的工作了，你大概率也会感觉算法无聊”。最后选择研发，这句话也是起到了一定的作用。当然，自己也了解到一些岗位具有算法以及研发的性质，比如说：算法中台</p><p>研发方面，考虑的一点就是，<strong>如何让自己变的不容易被替代</strong>。这个确确实实是根据自己对于当前阶段研发的认知以及自己的能力决定的自己要走云原生这个方向。刚刚也提到过，做纯业务层面的研发，我感觉我看透了, 无论加上何种复杂的中间件，本质上还是纯纯的CRUD。本身自己实验室是做DevOps的，自己对于Ops方向还是蛮感兴趣的，然后自己也了解到现在“万物上云”的态势，所以选择云原生范畴还是比较顺利的。</p><h4 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h4><p>简历方面自然不必多说，这是必不可少的。网上对于做简历的教程更是五花八门，但是要注意是：</p><ul><li>针对不同的岗位，采取不同的简历。做简历之前，对着招聘JD里面的岗位描述(能力要求)来完善自己的简历</li><li>描述项目经历的时候，要重点说出你干了什么，你的工作为项目做出了哪方面的提升，最后的成果是什么</li><li>项目之外的其他方面的特质是什么？具体要如何体现这些特质(STAR法则)</li><li>自己简历上的东西一定要会，而且要讲的绘声绘色</li></ul><h4 id="刷题、笔试、面试"><a href="#刷题、笔试、面试" class="headerlink" title="刷题、笔试、面试"></a>刷题、笔试、面试</h4><ul><li>因为我是研发岗，面向的基本上是leetcode中等的题目，我是跟着<a href="https://labuladong.gitee.io/algo/">labuladong</a>进行刷题的，基本上都自己手敲了一遍</li><li>要学会根据自己的面试、牛客面经来总结自己的面经，面试完然后丰富补充自己的面经。我自己总结的都放在本博客里面了</li><li>要学会引导面试官问你的问题，要自己把握面试过程，而不是被动接受面试官的提问</li></ul><h4 id="关键的时间节点"><a href="#关键的时间节点" class="headerlink" title="关键的时间节点"></a>关键的时间节点</h4><ul><li>2月～6月: 基本上到正月二十左右就会有单位进行春招了，但是不用着急，大批量的应该是在3-4月份，可以一遍复习一遍整理自己的面经</li><li>6月～9月：我们实验室三个月时间实习，在实习的过程中，你会在准备自己的秋招，而且今年并不是“金九银十”今年8月份都有很多人拿到了offer了。这个时间短内的信息收集、面试也很重要，不要一直闷头实习耽误了自己的秋招</li><li>9月～11月：这就是所谓的金九银十了，越早HC越多，拿到的概率越大。然后多看看offershow去查薪资准备argue吧。</li><li>11月～2月：还没有拿到心意的offer不要紧，这里会有补录环节。要摒弃一个观点，并不是补录了offer就差，我也看到相同的岗位补录比秋招高的</li></ul><h4 id="最后要提示的要点"><a href="#最后要提示的要点" class="headerlink" title="最后要提示的要点"></a>最后要提示的要点</h4><ul><li>一定要多留几手，不要相信实习单位说你肯定能转正的话。而且有些业务可能会被裁员，教育/房地产</li><li>关键的资料要做好备份，分类。尤其是不同的招聘系统填写的内容往往是重复的，想考公务员的同学要额外整理备份一些奖惩、家庭情况、发表的文章等留下备份，最后直接复制粘贴就行</li><li>算法不一定非得要发顶会论文，我同学就有0论文面试通过字节算法的例子。虽然，11月份中了ICSE</li><li>面试难度难的不一定是好的</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mac-docker-connector</title>
    <link href="/2021/10/16/mac-docker-connector/"/>
    <url>/2021/10/16/mac-docker-connector/</url>
    
    <content type="html"><![CDATA[<h1 id="mac-docker-connector"><a href="#mac-docker-connector" class="headerlink" title="mac-docker-connector"></a>mac-docker-connector</h1><p>转自: <a href="https://github.com/wenjunxiao/mac-docker-connector/edit/master/README-ZH.md">https://github.com/wenjunxiao/mac-docker-connector/edit/master/README-ZH.md</a> </p><p> <code>Docker for Mac</code> 没有提供从宿主的macOS通过容器IP访问容器的方式。参考<a href="https://docs.docker.com/docker-for-mac/networking/#i-cannot-ping-my-containers">Known limitations, use cases, and workarounds</a>。通过一个<a href="https://pjw.io/articles/2018/04/25/access-to-the-container-network-of-docker-for-mac/">复杂解决方法</a>得到灵感，主要方式在宿主的macOS和Docker的Hypervisor之间建立一个VPN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------+          +-----------------+</span><br><span class="line">|            |          |    Hypervisor   |</span><br><span class="line">|   macOS    |          |  +-----------+  |</span><br><span class="line">|            |          |  | Container |  |</span><br><span class="line">|            |   vpn    |  +-----------+  |</span><br><span class="line">| VPN Client |&lt;--------&gt;|   VPN Server    |</span><br><span class="line">+------------+          +-----------------+</span><br></pre></td></tr></table></figure><p>  但是宿主的macOS无法直接访问Hypervisor，VPN服务容器需要使用<code>host</code>以便与Hypervisor在同一网络环境中，必须使用一个转发容器（比如<code>socat</code>)导出端口到macOS，然后转发到VPN服务。考虑到VPN连接的双工的，因此我们可以把VPN服务和客户端反转一下，变成下面的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------+          +-----------------+</span><br><span class="line">|            |          |    Hypervisor   |</span><br><span class="line">|   macOS    |          |  +-----------+  |</span><br><span class="line">|            |          |  | Container |  |</span><br><span class="line">|            |   vpn    |  +-----------+  |</span><br><span class="line">| VPN Server |&lt;--------&gt;|   VPN Client    |</span><br><span class="line">+------------+          +-----------------+</span><br></pre></td></tr></table></figure><p>  尽管如此, 我们需要做更多额外的工作来使用openvpn，比如证书、配置等。<br>  这对于只是通过IP访问容器的需求来说，这些工作略显麻烦。<br>  我们只需要建立一个连接通道，无需证书，也可以无需客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------+          +-----------------+</span><br><span class="line">|            |          |    Hypervisor   |</span><br><span class="line">|   macOS    |          |  +-----------+  |</span><br><span class="line">|            |          |  | Container |  |</span><br><span class="line">|            |   udp    |  +-----------+  |</span><br><span class="line">| TUN Server |&lt;--------&gt;|   TUN Client    |</span><br><span class="line">+------------+          +-----------------+</span><br></pre></td></tr></table></figure><p>  鉴于Docker官方文档<a href="https://docs.docker.com/network/iptables/">Docker and iptables</a>中描述那样,<br>  两个子网之间的互通性有时也是需要的，因此还可以通过<code>iptables</code>来提供两个子网之间的互相连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------------+ </span><br><span class="line">|           Hypervisor          | </span><br><span class="line">| +----------+     +----------+ | </span><br><span class="line">| | subnet 1 |&lt;---&gt;| subnet 2 | |</span><br><span class="line">| +----------+     +----------+ |</span><br><span class="line">+-------------------------------+</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>  先安装Mac端的服务<code>mac-docker-connector</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap wenjunxiao/brew</span><br><span class="line">$ brew install docker-connector</span><br></pre></td></tr></table></figure><p>  首次配置通过以下命令把所有Docker所有<code>bridge</code>子网放入配置文件，后续的增减可以参考后面的详细配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network ls --filter driver=bridge --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;&quot;</span> | xargs docker network inspect --format <span class="string">&quot;route &#123;&#123;range .IPAM.Config&#125;&#125;&#123;&#123;.Subnet&#125;&#125;&#123;&#123;end&#125;&#125;&quot;</span> &gt;&gt; /usr/<span class="built_in">local</span>/etc/docker-connector.conf</span><br></pre></td></tr></table></figure><p>  启动Mac端的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brew services start docker-connector</span><br></pre></td></tr></table></figure><p>  安装Docker端的容器<code>mac-docker-connector</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull wenjunxiao/mac-docker-connector</span><br></pre></td></tr></table></figure><p>  启动Docker端的容器，其中网络必须是<code>host</code>，并且添加<code>NET_ADMIN</code>特性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --restart always --net host --cap-add NET_ADMIN --name mac-connector wenjunxiao/mac-docker-connector</span><br></pre></td></tr></table></figure><p>  如果你向导出你自己的容器给其他人，让其他人可以访问你在容器中搭建的服务，其他人必须安装另一个客户端<a href="./accessor">docker-accessor</a>，同时你必须开启<code>expose</code>（这默认是关闭的）和提供访问的令牌(<code>token</code>)，<br>  更详细的配置说明参考配置说明</p><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>  基本的配置选项，通常你不需要修改他们，除非你的环境冲突（比如端口被占用，子网已使用）。<br>  一旦需要变更，那么Docker容器<code>mac-docker-connector</code>也需要使用相同的参数重新启动</p><ul><li><p><code>addr</code> 虚拟网络地址, 默认 <code>192.168.251.1/24</code>（可以修改，但容器端需要同步修改参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr 192.168.251.1/24</span><br></pre></td></tr></table></figure></li><li><p><code>port</code> UDP服务监听端口, 默认<code>2511</code>（可以修改，但容器端需要同步修改参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port 2511</span><br></pre></td></tr></table></figure></li><li><p><code>mtu</code> 网络的MTU值，默认<code>1400</code>（可以修改，但容器端需要同步修改参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtu 1400</span><br></pre></td></tr></table></figure></li><li><p><code>host</code> UDP监听的地址，仅用于Docker容器<code>mac-docker-connector</code>连接使用，处于安全和适应移动办公设置成<code>127.0.0.1</code>（通常无需修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host 127.0.0.1</span><br></pre></td></tr></table></figure><p>动态热加载的配置选项，修改配置文件之后无需启动，立即生效（除非禁用<code>watch</code>）,可以在需要的时候随时增减</p></li><li><p><code>route</code> 添加一条访问Docker容器子网的的路由，通常在你通过<code>docker network create --subnet x.x.x.x/mask name</code>命令创建一个<code>bridge</code>子网时需要添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route 172.100.0.0/16</span><br></pre></td></tr></table></figure></li><li><p><code>iptables</code> 插入(<code>+</code>)或删除(<code>-</code>)一条<code>iptables</code>规则，用于两个子网之间互相访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables 172.0.1.0+172.0.2.0</span><br><span class="line">iptables 172.0.3.0-172.0.4.0</span><br></pre></td></tr></table></figure><p>IP是无掩码子网的地址，通过<code>+</code>连接表示插入一条可以互相访问的规则，通过<code>-</code>连接表示删除它们之间互相访问的规则</p></li><li><p><code>expose</code> 导出你本地的容器给其他人，指定其他人用于连接的开放端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expose 0.0.0.0:2512</span><br></pre></td></tr></table></figure><p>导出的地址必须是其他人可以通过<a href="./accessor">docker-accessor</a>访问的地址</p></li><li><p><code>token</code> 定义其他人访问你的服务的令牌，以及连接成功之后分配的虚拟网络IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token token-name 192.168.251.3</span><br></pre></td></tr></table></figure><p>令牌是自定义的字符串，并且在配置文件中唯一，IP则必须是<code>addr</code>配置的虚拟网络中有效的IP</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k8s常见问题</title>
    <link href="/2021/10/10/k8s%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/10/k8s%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="minikube-无法加载本机docker"><a href="#minikube-无法加载本机docker" class="headerlink" title="minikube 无法加载本机docker"></a>minikube 无法加载本机docker</h3><p>minikube会内置docker但有时因为网络原因，内置docker拉取不到镜像。如果在本机docker下有该镜像，如需要hyperledger/fabric-ca:1.4.9镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一个console下</span></span><br><span class="line">docker save hyperledger/fabric-ca:1.4.9 -o ca_1.4.9.tar</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个console下</span></span><br><span class="line">eval $(minikube docker-env)</span><br><span class="line">docker load -i ca_1.4.9.tar</span><br><span class="line">rm -rf ca_1.4.9.tar</span><br></pre></td></tr></table></figure><h3 id="将镜像加载到kind的node中"><a href="#将镜像加载到kind的node中" class="headerlink" title="将镜像加载到kind的node中"></a>将镜像加载到kind的node中</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kind load docker-image image_name --name kind</span><br></pre></td></tr></table></figure><h3 id="特殊镜像资源"><a href="#特殊镜像资源" class="headerlink" title="特殊镜像资源"></a>特殊镜像资源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0 -&gt; zhangfuli/gcr-io-kubebuilder-kube-rbac-proxy:v0.5.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统篇-2021秋招准备</title>
    <link href="/2021/08/02/2021%E7%A7%8B%E6%8B%9B%E5%87%86%E5%A4%87-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/"/>
    <url>/2021/08/02/2021%E7%A7%8B%E6%8B%9B%E5%87%86%E5%A4%87-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、CPU上下文"><a href="#1、CPU上下文" class="headerlink" title="1、CPU上下文"></a>1、CPU上下文</h4><p>CPU 寄存器和程序计数器就是 CPU 上下文，因为它们都是 CPU 在运行任何任务前，必须的依赖环境。</p><ul><li>CPU 寄存器是 CPU 内置的容量小、但速度极快的内存。</li><li>程序计数器则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。</li></ul><h4 id="2、什么是上下文切换"><a href="#2、什么是上下文切换" class="headerlink" title="2、什么是上下文切换"></a>2、什么是上下文切换</h4><p>即使是单核CPU也支持多线程执行代码，CPU通过给每个线程分配CPU时间片来实现这个机制。时间片是CPU分配给各个线程的时间，因为时间片非常短，所以CPU通过不停地切换线程执行，让我们感觉多个线程时同时执行的，时间片一般是几十毫秒（ms）。</p><p>CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再次加载这个任务的状态，从任务保存到再加载的过程就是一次上下文切换</p><h5 id="进程切换分两步"><a href="#进程切换分两步" class="headerlink" title="进程切换分两步"></a>进程切换分两步</h5><ul><li>切换页目录以使用新的地址空间</li><li>切换内核栈和硬件上下文</li></ul><h5 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h5><ul><li><p>切换虚拟内存空间依然是相同的</p></li><li><p>切换内核栈和硬件上下文</p></li><li><p><strong>线程的调度只有拥有最高权限的内核空间才可以完成</strong>，所以线程的切换涉及到<strong>一次用户态到内核态的切换，以及一次内核态到用户态的切换</strong></p></li></ul><p>区别与联系</p><ul><li>内核的这种切换过程伴随的最显著的性能损耗是将寄存器中的内容切换出</li><li>上下文的切换会扰乱处理器的缓存机制。简单的说，一旦去切换上下文，处理器中所有已经缓存的内存地址一瞬间都作废了</li><li>当改变虚拟内存空间的时候，处理的页表缓冲被全部刷新，这将导致内存的访问在一段时间内相当的低效，在线程的切换中，不会出现这个问题。</li></ul><h5 id="协程切换"><a href="#协程切换" class="headerlink" title="协程切换"></a>协程切换</h5><ul><li>在用户态做</li><li>协程切换相比线程切换<strong>做的事情更少</strong>，协程切换只涉及基本的<strong>CPU上下文切换</strong>，所谓的 CPU 上下文，就是一堆寄存器，里面保存了 CPU运行任务所需要的信息。<strong>当前协程的 CPU 寄存器状态保存起来，然后将需要切换进来的协程的 CPU 寄存器状态加载的 CPU 寄存器上</strong>就 ok 了</li></ul><h4 id="3、阻塞、非阻塞、多路复用、信号驱动、异步IO"><a href="#3、阻塞、非阻塞、多路复用、信号驱动、异步IO" class="headerlink" title="3、阻塞、非阻塞、多路复用、信号驱动、异步IO"></a>3、阻塞、非阻塞、多路复用、信号驱动、异步IO</h4><h5 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h5><ul><li><strong>描述:</strong> 用户请求数据，系统内核（kernel）准备数据，用户进程被阻塞，数据被准备好后，kernel会将数据拷贝到用户内存，拷贝的过程中用户进程也被阻塞，直到kernel返回结果后，用户进程才解除阻塞。</li><li><strong>解决:</strong> 在服务器端使用多进程或多线程，让每个连接都拥有独立的线程或进程</li><li><strong>暴露的问题：</strong>连接请求多的时候，占用系统资源，降低系统对外界响应速度</li><li><strong>改进方案：</strong><ul><li>线程池：减少创建和销毁线程的频率</li><li>连接池：维持连接的缓存池，尽量重用已有的连接、减少创建和关闭连接的频率</li><li>问题：池有上限</li></ul></li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/25.png" alt="title"></p><h5 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h5><ul><li><strong>描述：</strong><ul><li>当用户进程发出read操作时，进程并没有被阻塞，内核马上返回给进程响应，如果数据还没准备好，此时会返回一个error。进程在返回之后，可以干点别的事情，然后再发起recvfrom系统调用。</li><li>重复上面的过程，循环往复的进行recvfrom系统调用。这个过程通常被称之为轮询。<strong>轮询检查内核数据，直到数据准备好，再拷贝数据到进程，进行数据处理</strong>。需要注意，拷贝数据整个过程，进程仍然是属于阻塞的状态。</li></ul></li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/26.png" alt="title"></p><h5 id="多路复用IO"><a href="#多路复用IO" class="headerlink" title="多路复用IO"></a>多路复用IO</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/22.jpg" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/27.png" alt="title"></p><ul><li><strong>描述:</strong> <ul><li>select/epoll这个函数会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程 ，select/epoll的好处就在于单个线程/进程，就可以同时处理多个网络连接的IO</li><li>当用户进程调用了select，那么整个进程会被阻塞，系统内核会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel系统内核拷贝到用户进程</li></ul></li><li><strong>与阻塞IO区别</strong>:<ul><li>多路复用需要使用两个系统调用：select和recvfrom，而阻塞IO只调用了一个系统调用(recvfrom)。但是，用select的优势在于它可以同时处理多个connection</li><li>如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用多线程 + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能<strong>处理更多的连接</strong>。</li><li>在多路复用模型中，对于每一个socket，一般都设置成为non-blocking，但是，整个用户的process其实是一直被阻塞的。只不过process是被select这个函数阻塞的，而不是被socket IO给阻塞</li></ul></li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/30.png" alt="title"></p><p>在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点</p><ul><li><p>表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调</p></li><li><p><strong>poll没有最大文件描述符数量的限制</strong></p></li><li><p>select低效是因为每次它都需要轮询。但低效也是相对的，视情况而定，也可通过良好的设计改善 </p></li></ul><h5 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h5><ul><li><strong>描述：</strong>允许套接口进行信号驱动I/O, 并安装信号处理函数，进程继续运行并不阻塞。当数据准备好时，进程会收到一个SIGIO信号，可以在信号处理函数中调用I/O操作函数处理数据。当数据报准备好读取时，内核就为该进程产生一个SIGIO信号。我们随后既可以在信号处理函数中调用recvfrom读取数据报，并通知主循环数据已准备好待处理，也可以立即通知主循环，让它来读取数据报。无论如何处理SIGIO信号，这种模型的优势在于等待数据报到达(第一阶段)期间，进程可以继续执行，不被阻塞。免去了select的阻塞与轮询，当有活跃套接字时，由注册的handler处理。</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/28.png" alt="title"></p><h5 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h5><ul><li><strong>描述:</strong> <ul><li>异步IO是真正非阻塞的，它不会对请求进程产生任何的阻塞，因此对高并发的网络服务器实现至关重要</li><li>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从系统内核的角度，当它收到一个asynchronous（异步） read之后，首先它会立刻返回，所以不会对用户进程产生任何阻塞。</li><li>系统内核会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel系统内核会给用户进程发送一个signal，告诉它read操作完成了</li></ul></li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/29.png" alt="title"></p><p><strong>总结</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/24.jpeg" alt="title"></p><p>阻塞式I/O、非阻塞式I/O、I/O复用、信号驱动式I/O他们的第二阶段都相同，也就是都会阻塞到recvfrom调用上面就是图中“发起”的动作</p><p>IO分两阶段：</p><ul><li><p>数据准备阶段</p></li><li><p>内核空间复制回用户进程缓冲区阶段</p></li></ul><h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><ul><li>阻塞IO: 用的是最老式的鱼竿，所以呢，得一直守着，等到鱼上钩了再拉杆；</li><li>非阻塞IO: 鱼竿有个功能，能够显示是否有鱼上钩，所以呢，B就和旁边的MM聊天，隔会再看看有没有鱼上钩，有的话就迅速拉杆；</li><li>多路复用IO: 用的鱼竿和B差不多，鱼竿有显示是否上钩的功能，但他想了一个好办法，就是同时放好几根鱼竿（select/poll/epoll），然后守在旁边，一旦有显示说鱼上钩了，它就将对应的鱼竿拉起来；</li><li>异步IO: 是个有钱人，干脆雇了一个人（kernel）帮他钓鱼，一旦那个人把鱼钓上来了，就给D发个短信，并送鱼上门；</li><li>信号驱动IO: 鱼竿比较高级，鱼竿自带一个信号器，E不需要守着鱼竿，鱼上钩后，信号器自动给E发送短信通知，E过来取鱼。</li></ul><h4 id="4、内存溢出、内存泄漏"><a href="#4、内存溢出、内存泄漏" class="headerlink" title="4、内存溢出、内存泄漏"></a>4、内存溢出、内存泄漏</h4><h5 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h5><ul><li>内存溢出: 指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出</li><li>内存泄漏: 指程序在申请内存new/malloc后，无法释放delete/free已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。memory leak会最终会导致out of memory！</li></ul><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><ul><li><p>内存泄漏</p><ul><li>程序循环new创建出来的对象没有及时的delete掉，导致了内存的泄露</li><li>delete掉一个void*类型的指针，导致没有调用到对象的析构函数，析构的所有清理工作都没有去执行从而导致内存的泄露</li><li>new创建了一组对象数组，内存回收的时候却只调用了delete而非delete []来处理，导致只有对象数组的第一个对象的析构函数得到执行并回收了内存占用，数组的其他对象所占内存得不到回收，导致内存泄露；</li></ul></li><li><p>内存溢出</p><ul><li>内存分配未成功，却使用了它</li><li>内存分配尽管成功，可是尚未初始化就引用它</li><li>内存分配成功而且已经初始化，但操作越过了内存的边界</li><li>使用free 或delete 释放了内存后，没有将指针设置为NULL。导致产生“野指针”</li><li>程序中的对象调用关系过于复杂，实在难以搞清楚某个对象到底是否已经释放了内存，此时应该又一次设计数据结构，从根本上解决对象管理的混乱局面</li><li>忘记为数组和动态内存赋初值，导致未被初始化的内存被作为右值使用</li></ul></li></ul><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><ul><li><p>内存溢出：</p><ul><li><p>避免上面所说的导致内存溢出原因</p></li><li><p>在使用内存之前检查指针是否为NULL。假设指针p 是函数的參数，那么在函数的入口处用assert(p!=NULL)进行检查。假设是用malloc 或new 来申请内存，应该用if(p==NULL)或if(p!=NULL)进行防错处理</p></li></ul></li><li><p>内存泄露</p><ul><li>良好的编码习惯，尽量在涉及内存的程序段，检測出内存泄露</li><li>重载 new 和 delete。将分配的内存以链表的形式自行管理，使用完成之后从链表中删除，程序结束时可检查改链表，当中记录了内存泄露的文件</li><li>使用智能指针</li><li>一些常见的工具软件BoundsChecker，它主要定位程序运行时期发生的各种错误</li><li>调试运行DEBUG版程序，运用以下技术：CRT(C run-time libraries)、运行时函数调用堆栈、内存泄漏时提示的内存分配序号(集成开发环境OUTPUT窗口)，综合分析内存泄漏的原因，排除内存泄漏</li></ul></li></ul><h4 id="5、进程"><a href="#5、进程" class="headerlink" title="5、进程"></a>5、进程</h4><h5 id="进程间通信的方式"><a href="#进程间通信的方式" class="headerlink" title="进程间通信的方式"></a>进程间通信的方式</h5><ul><li><p>无名管道通信(pipe)：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系</p></li><li><p>高级管道通信(popen)：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式</p></li><li><p>有名管道通信(named pipe)： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p></li><li><p>消息队列通信(message queue): 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点</p></li><li><p>信号量通信(semophore): 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段</p></li><li><p>信号(sinal): 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生</p></li><li><p>共享内存通信(shared memory): 共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信</p></li><li><p>套接字通信(socket)： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信</p></li></ul><h5 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h5><p>僵尸进程是当子进程比父进程先结束，而父进程又没有回收子进程，释放子进程占用的资源，此时子进程将成为一个僵尸进程。如果父进程先退出 ，子进程被init接管，子进程退出后init会回收其占用的相关资源</p><p>由于子进程的结束和父进程的运行是一个异步过程，即父进程永远无法预测子进程 到底什么时候结束. 那么会不会因为父进程太忙来不及wait子进程，或者说不知道 子进程什么时候结束，而丢失子进程结束时的状态信息呢? 不会。因为UNⅨ提供了一种机制可以保证只要<a href="https://baike.baidu.com/item/%E7%88%B6%E8%BF%9B%E7%A8%8B">父进程</a>想知道子进程结束时的状态信息， 就可以得到。这种机制就是： 在每个进程退出的时候，<a href="https://baike.baidu.com/item/%E5%86%85%E6%A0%B8">内核</a>释放该进程所有的资源，包括打开的文件，占用的内存等。但是仍然为其保留一定的信息（包括进程号the process ID，退出状态the termination status of the process，运行时间the amount of CPU time taken by the process等）。直到<a href="https://baike.baidu.com/item/%E7%88%B6%E8%BF%9B%E7%A8%8B">父进程</a>通过wait / waitpid来取时才释放. 但这样就导致了问题，如果进程不调用wait / waitpid的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生<a href="https://baike.baidu.com/item/%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B">僵尸进程</a>，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。</p><p><strong>僵尸进程的避免</strong></p><p>⒈父进程通过wait和waitpid等函数等待子进程结束，这会导致父进程挂起。</p><p>⒉ 如果父进程很忙，那么可以用signal函数为SIGCHLD安装handler，因为子进程结束后， 父进程会收到该信号，可以在handler中调用wait回收。</p><p>⒊ 如果<a href="https://baike.baidu.com/item/%E7%88%B6%E8%BF%9B%E7%A8%8B">父进程</a>不关心子进程什么时候结束，那么可以用signal（SIGCHLD,SIG_IGN） 通知<a href="https://baike.baidu.com/item/%E5%86%85%E6%A0%B8">内核</a>，自己对子进程的结束不感兴趣，那么子进程结束后，内核会回收， 并不再给父进程发送信号。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang篇-2021秋招准备</title>
    <link href="/2021/08/02/2021%E7%A7%8B%E6%8B%9B%E5%87%86%E5%A4%87-golang%E7%AF%87/"/>
    <url>/2021/08/02/2021%E7%A7%8B%E6%8B%9B%E5%87%86%E5%A4%87-golang%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、GPM"><a href="#1、GPM" class="headerlink" title="1、GPM"></a>1、GPM</h4><ul><li><p>G（Goroutine） ：我们所说的协程，为用户级的轻量级线程，每个Goroutine对象中的sched保存着其上下文信息</p></li><li><p>M（Machine） ：对内核级线程的封装，数量对应真实的CPU数（真正干活的对象）</p></li><li><p>P（Processor） </p><ul><li>即为G和M的调度对象，用来调度G和M之间的关联关系，其数量可通过GOMAXPROCS()来设置，默认为核心数</li><li>P为M的执行提供了上下文，保存了M执行G的一些基本信息，保存了等待执行的G队列……<br>M只有绑定P才可以去执行G</li></ul></li></ul><p>每个Processor对象都拥有一个LRQ（Local Run Queue），未分配的Goroutine对象保存在GRQ（Global Run Queue ）中，等待分配给某一个P的LRQ中，每个LRQ里面包含若干个用户创建的Goroutine对象，同时Processor作为桥梁对Machine和Goroutine进行了解耦，也就是说Goroutine如果想要使用Machine需要绑定一个Processor才行，上图中共有两个M和两个P也就是说我们可以同时并行处理两个goroutine</p><p><img src="/images/2021%E7%A7%8B%E6%8B%9B%E5%87%86%E5%A4%87-golang%E7%AF%87/1.png" alt="title"></p><p><img src="/images/2021%E7%A7%8B%E6%8B%9B%E5%87%86%E5%A4%87-golang%E7%AF%87/2.png" alt="title"></p><h4 id="2、Channel"><a href="#2、Channel" class="headerlink" title="2、Channel"></a>2、Channel</h4><h5 id="无缓冲channel与有缓冲channel"><a href="#无缓冲channel与有缓冲channel" class="headerlink" title="无缓冲channel与有缓冲channel"></a>无缓冲channel与有缓冲channel</h5><ul><li><p>无缓冲的是默认，同步</p></li><li><p>缓冲是1的缓冲式，异步<br>其实是彻底错误的，无缓冲的与有缓冲channel有着重大差别</p></li></ul><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c1:=make(chan int) 无缓冲</span><br><span class="line">c2:=make(chan int,1) 有缓冲</span><br><span class="line">c1&lt;- 1</span><br></pre></td></tr></table></figure><p><strong>无缓冲的通道保证进行发送和接收的 goroutine 会在同一时间进行数据交换；有缓冲的通道没有这种保证</strong></p><p>无缓冲的 不仅仅是向c1通道放 1 而是 一直要有别的协程 &lt;-c1 接手了 这个参数，那么c1&lt;-1才会继续下去，要不然就一直阻塞着<br>c2&lt;-1 则不会阻塞，因为缓冲大小是1 （其实是缓冲大小为0）只有当放第二个值的时候 第一个还没被人拿走，这时候才会阻塞</p><p><strong>通道关闭</strong>：关闭通道的代码非常重要。当通道关闭后，goroutine 依旧可以从通道接收数据，但是不能再向通道里发送数据。能够从已经关闭的通道接收数据这一点非常重要，因为这允许通道关闭后依旧能取出其中缓冲的全部值，而不会有数据丢失。从一个已经关闭且没有数据的通道里获取数据，总会立刻返回，并返回一个通道类型的零值。如果在获取通道时还加入了可选的标志，就能得到通道的状态信息。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins-2021春招准备</title>
    <link href="/2021/03/23/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Jenkins/"/>
    <url>/2021/03/23/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Jenkins/</url>
    
    <content type="html"><![CDATA[<h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><blockquote><p>Jenkins使用主从架构来管理分布式构建。在这种体系架构中，主机和从机通过TCP/IP协议进行通信。</p></blockquote><h5 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-jenkins/1.png" alt="title"></p><ul><li><p>Jenkins 主机</p><ul><li>调度构建工作，将构建分派给从服务器进行实际构建</li><li>监视从机</li><li>记录并显示构建结果</li><li>Jenkins的主机也可以直接执行构建</li></ul></li><li><p>Jenkins 从机</p><ul><li>配置不同的环境</li><li>侦听来自Jenkins 主机的请求</li><li>Jenkins 从机可以运行在各种操作系统上</li><li>Jenkins 从机的工作是执行命令，这包括执行由主机分派的构建任务</li><li>可以为项目配置执行构建的从机。</li></ul></li></ul><p><strong>主从连接</strong></p><ul><li><p><strong>使用SSH方法：</strong>使用ssh协议连接到从服务器。连接从Jenkins主站启动。这应该是主机和从机之间通过端口22的连接。</p></li><li><p><strong>使用JNLP方法：</strong>使用Java JNLP协议。在这种方法中，Java代理从带有Jenkins主详细信息的从属启动。为此，主节点防火墙应允许指定JNLP端口上的连接。通常，分配的端口为50000。此值是可配置的</p></li></ul><p><strong>Jenkins Slave有两种类型</strong></p><ul><li><strong>从节点：</strong>这些是将配置为静态<strong>从节点</strong>的服务器（Windows / Linux）。这些从站将一直处于运行状态，并保持与Jenkins服务器的连接</li><li><strong>从属云：</strong> Jenkins Cloud从属是具有动态Slave的概念。意味着，每当您触发作业时，从属将按需部署为VM /容器，并在作业完成后被删除。当您拥有庞大的Jenkins生态系统并持续构建时，此方法可节省基础设施成本。</li></ul><h5 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/groovy</span></span><br><span class="line">pipeline&#123;</span><br><span class="line">agent any</span><br><span class="line"></span><br><span class="line">environment &#123;</span><br><span class="line">REPOSITORY=<span class="string">&quot;https://gitee.com/MrZCoding/dop.git&quot;</span></span><br><span class="line">SERVICE_DIR=<span class="string">&quot;user-server&quot;</span></span><br><span class="line">DOCKER_REGISTRY_HOST=<span class="string">&quot;registry.dop.clsaa.com&quot;</span></span><br><span class="line">DOCKER_REGISTRY=<span class="string">&quot;registry.dop.clsaa.com/dop/user-server&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stages &#123;</span><br><span class="line">stage(<span class="string">&#x27;pull code&#x27;</span>) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">echo <span class="string">&quot;start fetch code from git:$&#123;REPOSITORY&#125;&quot;</span></span><br><span class="line">deleteDir()</span><br><span class="line">git <span class="string">&quot;$&#123;REPOSITORY&#125;&quot;</span></span><br><span class="line">                script &#123;</span><br><span class="line">                    time = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&#x27;date &quot;+%Y%m%d%H%M&quot;&#x27;</span>).trim()</span><br><span class="line">                    git_version = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&#x27;git log -1 --pretty=format:&quot;%h&quot;&#x27;</span>).trim()</span><br><span class="line">                    build_tag = time+git_version</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stage(<span class="string">&#x27;build maven&#x27;</span>) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">                echo <span class="string">&quot;star compile&quot;</span></span><br><span class="line">                dir(SERVICE_DIR)&#123;</span><br><span class="line">                    sh <span class="string">&quot;ls -l&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;mvn -U -am clean package&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stage(<span class="string">&#x27;build docker&#x27;</span>) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">                echo <span class="string">&quot;start build image&quot;</span></span><br><span class="line">                echo <span class="string">&quot;image tag : $&#123;build_tag&#125;&quot;</span></span><br><span class="line">                dir(SERVICE_DIR)&#123;</span><br><span class="line">                    sh <span class="string">&quot;ls -l&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;docker build -t $&#123;DOCKER_REGISTRY&#125;:$&#123;build_tag&#125; .&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       stage(<span class="string">&#x27;push docker&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;start push image&quot;</span></span><br><span class="line">                dir(SERVICE_DIR)&#123;</span><br><span class="line">                  sh <span class="string">&quot;ls -l&quot;</span></span><br><span class="line">                  withCredentials([usernamePassword(<span class="attr">credentialsId:</span> <span class="string">&#x27;docker_registry&#x27;</span>, <span class="attr">passwordVariable:</span> <span class="string">&#x27;docker_registryPassword&#x27;</span>, <span class="attr">usernameVariable:</span> <span class="string">&#x27;docker_registryUsername&#x27;</span>)]) &#123;</span><br><span class="line">                      sh <span class="string">&quot;docker login -u $&#123;docker_registryUsername&#125; -p $&#123;docker_registryPassword&#125; $&#123;DOCKER_REGISTRY_HOST&#125;&quot;</span></span><br><span class="line">                      sh <span class="string">&quot;docker push $&#123;DOCKER_REGISTRY&#125;:$&#123;build_tag&#125;&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;update yaml&#x27;</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                echo <span class="string">&quot;start change yaml image tag&quot;</span></span><br><span class="line">                dir(SERVICE_DIR)&#123;</span><br><span class="line">                    sh <span class="string">&quot;ls -l&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;sed -i &#x27;s/&lt;BUILD_TAG&gt;/$&#123;build_tag&#125;/&#x27; k8s.yaml&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;cat k8s.yaml&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">stage(<span class="string">&#x27;deploy&#x27;</span>) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">echo <span class="string">&quot;start deploy&quot;</span></span><br><span class="line">dir(SERVICE_DIR)&#123;</span><br><span class="line">    sh <span class="string">&quot;ls -l&quot;</span></span><br><span class="line">    sh <span class="string">&quot;kubectl apply -f k8s.yaml&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="需要深挖一下的"><a href="#需要深挖一下的" class="headerlink" title="需要深挖一下的"></a>需要深挖一下的</h5><p><a href="https://blog.windanchaos.tech/2020/03/09/jenkins%E6%9E%B6%E6%9E%84%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://blog.windanchaos.tech/2020/03/09/jenkins%E6%9E%B6%E6%9E%84%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端/数据库/Spring/Java-2021春招准备</title>
    <link href="/2021/03/01/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/"/>
    <url>/2021/03/01/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、前端"><a href="#1、前端" class="headerlink" title="1、前端"></a>1、前端</h4><h5 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h5><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF%E7%AF%87/1.png" alt="title"></p><h5 id="MVC-MVP-MVVM"><a href="#MVC-MVP-MVVM" class="headerlink" title="MVC/MVP/MVVM"></a>MVC/MVP/MVVM</h5><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF%E7%AF%87/5.png" alt="title"></p><ul><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ul><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF%E7%AF%87/6.png" alt="title"></p><ul><li>各部分之间的通信，都是双向的</li><li>View 与 Model 不发生联系，都通过 Presenter 传递。</li><li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li></ul><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF%E7%AF%87/7.png" alt="title"></p><p>基本上与 MVP 模式完全一致，区别是双向绑定（data-binding）：View的变动，自动反映在 ViewModel</p><h4 id="2、数据库"><a href="#2、数据库" class="headerlink" title="2、数据库"></a>2、数据库</h4><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><ul><li>原子性（ Atomicity ）: 事务是数据库的逻辑工作单位，不可分割，事务中包含的各操作要么都做，要么都不做</li><li>一致性（ Consistency ）: 事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态</li><li>隔离性（ Isolation ）: 一个事务的执行不能其它事务干扰</li><li>持续性（ Durability ）: 也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的，不能回滚</li></ul><h5 id="索引"><a href="#索引" class="headerlink" title="索引:"></a>索引:</h5><blockquote><p>索引可以加快数据库的检索速度，但是会降低新增、修改、删除操作的速度</p></blockquote><p><strong>类型</strong></p><ul><li><p>唯一索引：索引的每一个索引值只对应唯一的数据记录</p></li><li><p>主键索引：在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型</p></li><li><p>聚集索引：表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表只能包含一个聚集索引。 如果某索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。与非聚集索引相比，聚集索引通常提供更快的数据访问速度。</p></li></ul><p><strong>实现方式</strong></p><ul><li><p>B+树：</p><ul><li>为了尽量保持树的平衡，当然红黑树是二叉树，但B+树就不是二叉树了，B+树一般来说比较矮胖，而红黑树就比较瘦高了</li><li>如果经常需要同时对两个字段进行AND查询,那么使用两个单独索引不如建立一个复合索引，因为两个单独索引通常数据库只能使用其中一个，而使用复合索引因为索引本身就对应到两个字段上的，效率会有很大提高。</li></ul></li><li><p>散列(Hash)索引:</p><ul><li>通过散列函数来定位的一种索引，不过很少有单独使用散列索引的，反而是散列文件组织用的比较多</li><li>散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个桶中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。</li></ul></li><li><p>位图索引:</p><ul><li>位图索引是一种针对多个字段的简单查询设计一种特殊的索引，只适用于字段值固定并且值的种类很少的情况，比如性别，只能有男和女，或者级别，状态等等，并且只有在同时对多个这样的字段查询时才能体现出位图的优势</li><li>位图的基本思想就是对每一个条件都用0或者1来表示，如有5条记录，性别分别是男，女，男，男，女，那么如果使用位图索引就会建立两个位图，对应男的10110和对应女的01001,这样做有什么好处呢，就是如果同时对多个这种类型的字段进行and或or查询时，可以使用按位与和按位或来直接得到结果了</li></ul></li></ul><p><strong>查看是否命中索引</strong></p><p>用到explain这个命令来查看一个这些SQL语句的执行计划</p><h5 id="数据库隔离级别："><a href="#数据库隔离级别：" class="headerlink" title="数据库隔离级别："></a>数据库隔离级别：</h5><p><strong>事务并发可能出现的情况</strong></p><ul><li>脏读：一个事务读到了另一个未提交事务修改过的数据</li><li>不可重复读（Non-Repeatable Read）：一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。</li><li>幻读（Phantom）：一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来</li></ul><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF%E7%AF%87/2.png" alt="title"></p><p><strong>隔离级别</strong></p><blockquote><p>隔离级别比较：可串行化&gt;可重复读&gt;读已提交&gt;读未提交</p></blockquote><ul><li>读未提交: 事务A可以读取到事务B修改过但未提交的数据<ul><li>可能发生脏读、不可重复读和幻读问题</li></ul></li><li>读已提交: 事务B只能在事务A修改过并且已提交后才能读取到事务B修改的数据<ul><li>解决了脏读的问题，但可能发生不可重复读和幻读问题</li></ul></li><li>可重复读: 在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据<ul><li>解决了脏读和不可重复读的问题，但可能发生幻读问题</li></ul></li><li>可串行化: <ul><li>通过加锁实现（读锁和写锁）</li></ul></li></ul><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF%E7%AF%87/3.png" alt="title"></p><p><strong>乐观锁与悲观锁</strong></p><blockquote><p>乐观锁比较适用于读多写少的情况(多读场景)</p><p>悲观锁比较适用于写多读少的情况(多写场景)</p></blockquote><ul><li><p>悲观锁: 悲观锁中的<strong>共享资源每次只给一个线程使用，其它线程阻塞</strong>，用完后再把资源转让给其它线程</p></li><li><p>乐观锁: 很乐观，每次去拿数据的时候都<strong>认为别人不会修改</strong>。所以不会上锁，但是如果想要更新数据，则会在<strong>更新前检查在读取至更新这段时间别人有没有修改过这个数据</strong>。如果修改过，则重新读取，再次尝试更新，循环上述步骤直到更新成功（当然也允许更新失败的线程放弃操作）</p></li></ul><h5 id="数据库两种引擎"><a href="#数据库两种引擎" class="headerlink" title="数据库两种引擎"></a>数据库两种引擎</h5><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E5%89%8D%E7%AB%AF%E7%AF%87/4.png" alt="title"></p><ul><li><p>Innodb引擎</p><ul><li>Innodb引擎提供了对数据库ACID事务的支持，并且实现了SQL标准的四种隔离级别</li><li>该引擎提供了行级锁和外键约束，它的设计目标是处理大容量数据库系统，它本身其实就是基于MySQL后台的完整数据库系统，MySQL运行时Innodb会在内存中建立缓冲池，用于缓冲数据和索引。</li><li>该引擎不支持FULLTEXT类型的索引，而且它没有保存表的行数，当<code>SELECT COUNT(*) FROM TABLE</code>时需要扫描全表。</li><li>由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。</li></ul></li><li><p>MyISAM引擎</p><ul><li>MyISAM是MySQL默认的引擎，但是它没有提供对数据库事务的支持，</li><li>不支持行级锁和外键，因此当<code>INSERT(插入)</code>或<code>UPDATE(更新)</code>数据时即写操作需要锁定整个表，效率便会低一些。</li><li>MyISAM中存储了表的行数，<code>SELECT COUNT(*) FROM TABLE</code>时只需要直接读取已经保存好的值而不需要进行全表扫描</li><li>如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MyISAM也是很好的选择。</li></ul></li></ul><p><strong>主要区别</strong></p><ul><li><p>MyISAM是非事务安全的，而InnoDB是事务安全的</p></li><li><p>MyISAM锁的粒度是表级的，而InnoDB支持行级锁</p></li><li><p>MyISAM支持全文类型索引，而InnoDB不支持全文索引</p></li><li><p>MyISAM相对简单，效率上要优于InnoDB，小型应用可以考虑使用MyISAM</p></li><li><p>MyISAM表保存成文件形式，跨平台使用更加方便</p></li></ul><p><strong>选择</strong></p><ul><li><p>InnoDB</p><ul><li>支持事务处理，支持外键，支持崩溃修复能力和并发控制</li><li>需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势</li><li>需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。 </li></ul></li><li><p>MyISAM</p><ul><li>插入数据快，空间和内存使用比较低</li><li>主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。</li><li>应用的完整性、并发性要求比较低，也可以使用</li></ul></li></ul><h4 id="3、Spring"><a href="#3、Spring" class="headerlink" title="3、Spring"></a>3、Spring</h4><h5 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h5><ul><li>new了一个SpringApplication对象，使用SPI技术加载spring.factories文件中ApplicationContextInitializer、ApplicationListener 接口实例</li><li>调用SpringApplication.run() 方法</li><li>调用createApplicationContext()方法创建上下文对象，创建上下文对象同时会注册spring的核心组件类（ConfigurationClassPostProcessor 、AutowiredAnnotationBeanPostProcessor 等）</li><li>调用refreshContext() 方法启动Spring容器和内置的Servlet容器</li></ul><h5 id="Java程序启动过程"><a href="#Java程序启动过程" class="headerlink" title="Java程序启动过程"></a>Java程序启动过程</h5><ul><li>将java源码(.java文件)通过编译器(javac.exe)编译成JVM文件(.class文件)</li><li>将JVM文件通过java.exe执行，输出结果</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis/RocketMQ篇-2021春招准备</title>
    <link href="/2021/03/01/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Redis-Prometheus-RocketMQ%E7%AF%87/"/>
    <url>/2021/03/01/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Redis-Prometheus-RocketMQ%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、Redis"><a href="#1、Redis" class="headerlink" title="1、Redis"></a>1、Redis</h4><blockquote><p>一个高性能的key-value非关系型数据库</p></blockquote><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><ul><li>String</li><li>List</li><li>Set</li><li>Hash</li><li>ZSet: 有序集合</li></ul><h5 id="过期策略以及内存淘汰机制"><a href="#过期策略以及内存淘汰机制" class="headerlink" title="过期策略以及内存淘汰机制"></a>过期策略以及内存淘汰机制</h5><ul><li>定期删除: 定时删除,用一个定时器来负责监视key,过期则自动删除。虽然内存及时释放，但是<strong>十分消耗CPU资源</strong>。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</li><li>定期删除+惰性删除<ul><li>定期删除: redis默认每个100ms检查，随机抽取进行检查</li><li>惰性删除: 获取某个key的时候，redis会检查一下，这个key如果设置的过期时间(expire)，则删除</li><li>内存淘汰机制: 如果定期删除没删除key。然后你也没即时去请求key，也就是说惰性删除也没生效。这样，redis的内存会越来越高。<ul><li>allkeys-lru: 当内存不足时，在键空间中，移除最近最少使用的key</li><li>noeviction: 当内存不足时，新写入操作会报错</li><li>allkeys-random: 当内存不足时，在键空间中，随机移除某个key</li></ul></li></ul></li></ul><h5 id="redis和数据库双写一致性问题"><a href="#redis和数据库双写一致性问题" class="headerlink" title="redis和数据库双写一致性问题"></a>redis和数据库双写一致性问题</h5><p>一致性问题是分布式常见问题，还可以再分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。如果对数据有强一致性要求，不能放缓存。</p><p>采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列</p><h5 id="如何应对缓存穿透和缓存雪崩问题"><a href="#如何应对缓存穿透和缓存雪崩问题" class="headerlink" title="如何应对缓存穿透和缓存雪崩问题"></a>如何应对缓存穿透和缓存雪崩问题</h5><ul><li><p>缓存击穿: 存的数据过期</p></li><li><p>缓存穿透：即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。</p><ul><li>解决方案:<ul><li>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试</li><li>采用异步更新策略，无论key是否取到值，都直接返回。异步起一个线程去读数据库，更新缓存。</li><li>提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器(位图+多个hash)</li></ul></li></ul></li><li><p>缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p><ul><li>解决方案:<ul><li>给缓存的失效时间，加上一个随机值，避免集体失效。</li><li>使用互斥锁，但是该方案吞吐量明显下降了。</li><li>双缓存。缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作<ul><li>从缓存A读数据库，有则直接返回</li><li>A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程</li><li>更新线程同时更新缓存A和缓存B。</li></ul></li></ul></li></ul></li></ul><h5 id="如何解决redis的并发竞争key问题"><a href="#如何解决redis的并发竞争key问题" class="headerlink" title="如何解决redis的并发竞争key问题"></a>如何解决redis的并发竞争key问题</h5><blockquote><p>有多个子系统去set一个key。这个时候要注意什么呢？大家思考过么。</p><p>不推荐使用redis的事务机制。因为生产环境，基本都是redis集群环境，做了数据分片操作。你一个事务中有涉及到多个key操作的时候，这多个key不一定都存储在同一个redis-server上。</p></blockquote><ul><li><p>对这个key操作，不要求顺序</p><ul><li>准备一个分布式锁，大家去抢锁，抢到锁就做set操作(赋值)即可，比较简单</li></ul></li><li><p>如果对这个key操作，要求顺序</p><ul><li>假设有一个key1,A将key1设置为valueA,B将key1设置为valueB,C将key1设置为valueC.期望按照key1的value值按照 valueA–&gt;valueB–&gt;valueC的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。假设时间戳如下<ul><li>系统A key 1 {valueA  3:00}</li><li>系统B key 1 {valueB  3:05}</li><li>系统C key 1 {valueC  3:10}</li><li>假设这会系统B先抢到锁，将key1设置为{valueB 3:05}。接下来系统A抢到锁，发现自己的valueA的时间戳早于缓存中的时间戳，那就不做set操作了。以此类推。</li></ul></li></ul></li><li><p>利用队列，将set方法变成串行访问</p></li></ul><h5 id="redis分布式锁"><a href="#redis分布式锁" class="headerlink" title="redis分布式锁"></a>redis分布式锁</h5><blockquote><p>分布式系统中，两个不同的 JVM 里面，他们加的锁只对属于自己 JVM 里面的线程有效，Java 提供的原生锁机制在多机部署场景下失效</p></blockquote><ul><li><p>加锁: 实际上就是在redis中，给Key键设置一个值，为避免死锁，并给定一个过期时间</p><blockquote><p>SET lock_key random_value NX PX 5000</p></blockquote><ul><li>random_value 是客户端生成的唯一的字符串</li><li>NX 代表只在键不存在时，才对键进行设置操作</li><li>PX 5000 设置键的过期时间为5000毫秒</li></ul></li><li><p>解锁: 将Key键删除</p><ul><li>LUA脚本完成，判断当前锁的字符串是否与传入的值相等，是的话就删除Key，解锁成功</li></ul></li><li><p>三个要素: 加锁、解锁、锁超时</p></li><li><p>框架: Redisson</p></li></ul><h5 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h5><blockquote><p>Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上</p></blockquote><ul><li>RDB 持久化: 快照复制到其它服务器从而创建具有相同数据的服务器副本</li><li>AOF 持久化: 设置同步选项，从而确保写命令同步到磁盘文件上。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。</li></ul><h5 id="redis中支持事务吗？"><a href="#redis中支持事务吗？" class="headerlink" title="redis中支持事务吗？"></a>redis中支持事务吗？</h5><p>支持，使用<strong>multi开启事务</strong>，使用<strong>exec提交事务</strong>。</p><h5 id="redis发布订阅"><a href="#redis发布订阅" class="headerlink" title="redis发布订阅"></a>redis发布订阅</h5><ul><li>Redis 客户端可以订阅任意数量的频道</li><li>Client们订阅了Channel时，当Channel有数据则发布给Client</li></ul><h5 id="为什么redis使用跳表而不是用红黑树"><a href="#为什么redis使用跳表而不是用红黑树" class="headerlink" title="为什么redis使用跳表而不是用红黑树"></a>为什么redis使用跳表而不是用红黑树</h5><ul><li>跳表操作时间复杂度和红黑树相同</li><li>跳表代码实现更易读</li><li>跳表区间查找效率更高</li></ul><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>当有用户为一篇文章点赞时，除了要对该文章的 <strong>votes 字段进行加 1 操作</strong>，还必须<strong>记录该用户已经对该文章进行了点赞</strong>，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-redis-prometheus-rocketmq%E7%AF%87/1.png" alt="title"></p><h4 id="2、RocketMQ"><a href="#2、RocketMQ" class="headerlink" title="2、RocketMQ"></a>2、RocketMQ</h4><h5 id="MQ选型"><a href="#MQ选型" class="headerlink" title="MQ选型"></a>MQ选型</h5><ul><li>初步考虑<ul><li>业内常用的MQ有哪些？</li><li>每一种MQ各自的表现如何？</li><li>这些MQ在同等机器条件下，能抗多少QPS（每秒抗几千QPS还是几万QPS）？<br>性能有多高（发送一条消息给他要2ms还是20ms）？</li><li>可用性能不能得到保证（要是MQ部署的机器挂了怎么办）？</li></ul></li><li>业界MQ<ul><li>RabbitMQ: <ul><li>当大量消息积压的时候，会导致 RabbitMQ 的性能急剧下降</li><li>每秒钟可以处理几万到十几万条消息</li><li>中小公司对并发和吞吐量要求不高的场景</li><li>吞吐量低，集群扩展麻烦</li></ul></li><li>RocketMQ: <ul><li>java开发</li><li>吞吐量高，QPS十万级、性能毫秒级</li><li>支持集群部署</li><li>适当丢失数据没有关系、吞吐量要求高、不需要太多的高级功能的场景</li></ul></li><li>Kafka: <ul><li>每秒钟消息数量没有那么多的时候，Kafka 的时延反而会比较高。</li><li>日志消息队列</li><li>吞吐量所有MQ里最优秀，QPS十万级、性能毫秒级、支持集群部署</li><li>丢数据， 因为数据先写入磁盘缓冲区，未直接落盘。</li></ul></li></ul></li><li>调研组件技术性能，开源社区活跃程度等。大型的软件公司，OLTP场景下都会倾向于使用RocketMQ</li></ul><h5 id="MQ作用"><a href="#MQ作用" class="headerlink" title="MQ作用"></a>MQ作用</h5><ul><li>解耦：系统耦合度降低，没有强依赖关系</li><li>异步：不需要同步执行的远程调用可以有效提高响应时间</li><li>削峰：请求达到峰值后，后端service还可以保持固定消费速率消费，不会被压垮<ul><li><strong>同样的机器配置下，如果数据库可以抗每秒</strong> <strong>6000</strong> <strong>请求，</strong> <strong>MQ</strong> <strong>至少可以抗每秒几万请求</strong></li></ul></li></ul><h5 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-redis-prometheus-rocketmq%E7%AF%87/3.jpg" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-redis-prometheus-rocketmq%E7%AF%87/4.jpg" alt="title"></p><p>消息先发到Topic，然后消费者去Topic拿消息。只是Topic在这里只是个概念，实际上Message是在每个Broker上以Queue的形式记录。</p><ul><li>消费者发送的Message会在Broker中的Queue队列中记录</li><li>一个Topic的数据可能会存在多个Broker中</li><li> 一个Broker存在多个Queue</li><li>单个的Queue也可能存储多个Topic的消息</li><li>每个逻辑队列保存一部分消息数据，但是保存的消息数据实际上不是真正的消息数据，而是指向commit log的消息索引</li><li>Queue不是真正存储Message的地方，真正存储Message的地方是在CommitLog</li></ul><h5 id="部署模型"><a href="#部署模型" class="headerlink" title="部署模型"></a>部署模型</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-redis-prometheus-rocketmq%E7%AF%87/5.png" alt="title"></p><ul><li>NameServer: NameServer相当于集群管理服务，主要用于管理整个集群的元数据以及对集群进行管理的</li><li>Broker: 单个节点负责数据的读写的，Broker在部署的时候，一般是分为主备角色的</li><li>Producer</li><li>Consumer</li></ul><p><strong>工作流程</strong>:</p><ul><li>启动NameServer，接着启动Broker</li><li>Broker启动之后就会跟每一个NameServer建立长连接，每隔一段时间(30s)发送心跳包过去，心跳包里需要包含自己当前存储的数据信息，让NameServer感知到各个Broker的情况</li><li>创建 Topic，创建 Topic 的时候就会决定这个 Topic 的数据会放在哪些Broker上</li><li>Broker在进行心跳的时候，上报自己当前存储的Topic相关的数据信息给NameServer</li><li>NameServer就保存了整个集群的元数据</li><li>Producer在生产消息到Topic的时候，先得找NameServer问一下Topic存放在哪些Broker上，然后就可以跟那些Broker建立连接发送消息过去了</li><li>Consumer要从Topic消费消息，也会找NameServer问一下可以从哪些Broker上消费消息，接着同样会跟Broker建立连接并且开始消费，Consumer在多台机器上，默认也会把Topic下的多个队列的数据均匀的分配给各个Consumer实例来进行消费</li></ul><h5 id="RocketMQ-Broker中的消息被消费后会立即删除吗"><a href="#RocketMQ-Broker中的消息被消费后会立即删除吗" class="headerlink" title="RocketMQ Broker中的消息被消费后会立即删除吗"></a>RocketMQ Broker中的消息被消费后会立即删除吗</h5><ul><li><p>每条消息都会持久化到CommitLog中，每个Consumer连接到Broker后会维持消费进度信息，当有消息消费后只是<strong>当前Consumer的消费进度（CommitLog的offset）更新</strong>了</p></li><li><p>4.6版本默认48小时后会删除不再使用的CommitLog文件</p></li></ul><h5 id="RocketMQ消费模式有几种"><a href="#RocketMQ消费模式有几种" class="headerlink" title="RocketMQ消费模式有几种"></a>RocketMQ消费模式有几种</h5><ul><li>集群消费<ul><li>一条消息只会被同Group中的一个Consumer消费</li><li>多个Group同时消费一个Topic时，每个Group都会有一个Consumer消费到数据</li></ul></li><li>广播消费<ul><li>消息将对一个Consumer Group 下的各个 Consumer 实例都消费一遍</li></ul></li></ul><h5 id="消费消息是push还是pull"><a href="#消费消息是push还是pull" class="headerlink" title="消费消息是push还是pull"></a>消费消息是push还是pull</h5><p>pull，broker主动推送消息的话有可能push速度快，消费速度慢的情况，那么就会造成消息在consumer端堆积过多</p><h5 id="RocketMQ如何做负载均衡"><a href="#RocketMQ如何做负载均衡" class="headerlink" title="RocketMQ如何做负载均衡"></a>RocketMQ如何做负载均衡</h5><blockquote><p>通过Topic在多Broker中分布式存储实现</p></blockquote><ul><li>producer<ul><li>发送端指定message queue发送消息到相应的broker</li><li>默认策略<ul><li>producer维护一个index</li><li>每次取节点会自增</li><li>index向所有broker个数取余</li><li>自带容错策略</li></ul></li></ul></li><li>consumer<ul><li>采用的是平均分配算法来进行负载均衡</li><li>当消费负载均衡consumer和queue不对等的时候会发生什么？<ul><li>Consumer和queue会优先平均分配</li><li>如果Consumer少于queue的个数，则会存在部分Consumer消费多个queue的情况</li><li>如果Consumer等于queue的个数，那就是一个Consumer消费一个queue</li><li>如果Consumer个数大于queue的个数，那么会有部分Consumer空余出来</li></ul></li></ul></li></ul><h5 id="消息重复消费"><a href="#消息重复消费" class="headerlink" title="消息重复消费"></a>消息重复消费</h5><blockquote><p>影响消息正常发送和消费的<strong>重要原因是网络的不确定性</strong></p></blockquote><p><strong>引起重复消费的原因</strong></p><ul><li>ACK<ul><li>正常情况下在consumer真正消费完消息后应该发送ack，通知broker该消息已正常消费，从queue中剔除</li><li>当ack因为网络原因无法发送到broker，broker会认为词条消息没有被消费，此后会开启消息重投机制把消息再次投递到consumer</li></ul></li><li>消费模式<ul><li>在集群消费模式下，消息在broker中会保证相同group的consumer消费一次，但是针对不同group的consumer会推送多次</li></ul></li></ul><p><strong>解决方案</strong></p><ul><li><p>数据库表: 处理消息前，使用消息主键在表中带有约束的字段中insert</p></li><li><p>Redis: 分布式锁</p></li><li><p>Map: 单机时可以使用map做限制，消费时查询当前消息id是不是已经存在</p></li></ul><h5 id="如何让RocketMQ保证消息的顺序消费"><a href="#如何让RocketMQ保证消息的顺序消费" class="headerlink" title="如何让RocketMQ保证消息的顺序消费"></a>如何让RocketMQ保证消息的顺序消费</h5><ul><li><p>多个queue只能保证单个queue里的顺序，多个queue同时消费是无法绝对保证消息的有序性的</p></li><li><p>同一topic，同一个QUEUE，发消息的时候一个线程去发送消息，消费的时候一个线程去消费一个queue里的消息</p></li><li><p><strong>保证生产者 - MQServer - 消费者是一对一对一的关系</strong></p><ul><li>上一条发送完了，下一条发送</li><li>世界上解决一个计算机问题最简单的方法：“恰好”不需要解决它！</li></ul></li></ul><h5 id="RocketMQ如何保证消息不丢失"><a href="#RocketMQ如何保证消息不丢失" class="headerlink" title="RocketMQ如何保证消息不丢失"></a>RocketMQ如何保证消息不丢失</h5><ul><li>Producer: 采取send()同步发消息，<strong>发送结果是同步感知的</strong>，发送失败后可以重试，设置重试次数</li><li>Broker: 修改刷盘策略为同步刷盘,默认情况下是异步刷盘的;主从模式</li><li>Consumer: 完全消费正常后在进行手动ack确认</li></ul><h5 id="RocketMQ如何保证消息只被消费一次"><a href="#RocketMQ如何保证消息只被消费一次" class="headerlink" title="RocketMQ如何保证消息只被消费一次"></a>RocketMQ如何保证消息只被消费一次</h5><p>重复消费不可怕，可怕的是你没考虑到重复消费之后，怎么保证幂等性。</p><p>举个例子吧。假设你有个系统，<strong>消费一条消息就往数据库里插入一条数据</strong>，要是你一个消息重复两次，你不就插入了两条，这数据不就错了？但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，若是就直接扔了，这样不就保留了一条数据，从而保证了数据的正确性。</p><p><strong>一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性</strong></p><p>幂等性: 一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，不能出错</p><p><strong>解决</strong></p><p>比如拿个数据要写库</p><ul><li><p>先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。</p></li><li><p>写 Redis，那没问题了，反正每次都是 set，天然幂等性</p></li></ul><h5 id="rocketMQ的消息堆积如何处理"><a href="#rocketMQ的消息堆积如何处理" class="headerlink" title="rocketMQ的消息堆积如何处理"></a>rocketMQ的消息堆积如何处理</h5><ul><li>先定位问题：要找到是什么原因导致的消息堆积，是Producer太多了，Consumer太少了导致的还是说其他情况</li><li>看下消息消费速度是否正常，正常的话，可以通过上线更多consumer临时解决消息堆积问题</li><li>RocketMQ中的消息只会在commitLog被删除的时候才会消失，不会超时。也就是说未被消费的消息不会存在超时删除这情况</li><li>堆积的消息会不会进死信队列<ul><li>不会，消息在消费失败后会进入重试队列，重试N(16、18)次，才会进入死信队列</li></ul></li></ul><h5 id="如果让你来动手实现一个分布式消息中间件，整体架构你会如何设计实现"><a href="#如果让你来动手实现一个分布式消息中间件，整体架构你会如何设计实现" class="headerlink" title="如果让你来动手实现一个分布式消息中间件，整体架构你会如何设计实现"></a>如果让你来动手实现一个分布式消息中间件，整体架构你会如何设计实现</h5><ul><li>需要考虑能快速扩容、天然支持集群</li><li>持久化的姿势</li><li>高可用性</li><li>数据0丢失的考虑</li><li>服务端部署简单、client端使用简单</li></ul><h5 id="消息去重"><a href="#消息去重" class="headerlink" title="消息去重"></a>消息去重</h5><ul><li>消费端处理消息的业务逻辑保持幂等性</li><li>保证每条消息都有唯一编号且保证消息处理成功与去重表的日志同时出现</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>非技能篇-2021春招准备</title>
    <link href="/2021/02/27/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%9D%9E%E6%8A%80%E8%83%BD%E7%AF%87/"/>
    <url>/2021/02/27/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%9D%9E%E6%8A%80%E8%83%BD%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、通过什么渠道了解技术"><a href="#1、通过什么渠道了解技术" class="headerlink" title="1、通过什么渠道了解技术"></a>1、通过什么渠道了解技术</h4><ul><li><p>学术论文、白皮书、权威的调研报告</p></li><li><p>官方文档</p></li><li><p>参与开源项目</p></li><li><p>社交App（知乎、简书、公众号）</p></li></ul><h4 id="2、为什么想走运维，对这份工作的认识"><a href="#2、为什么想走运维，对这份工作的认识" class="headerlink" title="2、为什么想走运维，对这份工作的认识"></a>2、为什么想走运维，对这份工作的认识</h4><p>传统的运维方式在监控、问题发现、告警以及故障处理等各个环节均存在明显不足，需要大量<strong>依赖人的经验</strong>，并且在数据采集、异常诊断分析、故障处理的<strong>效率</strong>等方面有待提高</p><p>智能运维是将人工智能的能力与运维相结合，通过机器学习的方法来提升运维效率</p><p>总体来说AIOps比传统运维方式效率高，数据采集更准确，更智能</p><p>Gartner定义的AIOps平台拥有11项能力，这些能力算是对智能化运维的概念描述：</p><ul><li>历史数据管理(Historical data management)</li><li>流数据管理(Streaming data management)</li><li>日志数据提取(Log data ingestion)</li><li>网络数据提取(Wire data ingestion)</li><li>算法数据提取(Metric data ingestion)</li><li>文本和NLP文档提取(Document text ingestion)</li><li>自动化模型的发现和预测(Automated pattern discovery and prediction)</li><li>异常检测(Anomaly detection)</li><li>根因分析(Root cause determination)</li><li>按需交付(On-premises delivery)</li><li>软件服务交付(Software as a service)</li></ul><h4 id="3、觉得自己的优势？"><a href="#3、觉得自己的优势？" class="headerlink" title="3、觉得自己的优势？"></a>3、觉得自己的优势？</h4><ul><li>学习能力，软件学报论文</li></ul><h4 id="4、自己的不足？"><a href="#4、自己的不足？" class="headerlink" title="4、自己的不足？"></a>4、自己的不足？</h4><ul><li><p>人员管理能力</p></li><li><p>同时做多件事儿的时候</p></li><li><p>资历较浅，经验不足，在工作上会有所欠缺</p></li></ul><h4 id="5、你的工作技能？"><a href="#5、你的工作技能？" class="headerlink" title="5、你的工作技能？"></a>5、你的工作技能？</h4><h4 id="6、你希望通过这份工作获得什么"><a href="#6、你希望通过这份工作获得什么" class="headerlink" title="6、你希望通过这份工作获得什么?"></a>6、你希望通过这份工作获得什么?</h4><p>对我来说，最重要的是自己所做的工作是否适合我。我的意思是说，这份工作应该能让我发挥专长——这会给我带来一种满足感。我还希望所做的工作能够对我目前的技能水平形成挑战，从而能促使我提升自己</p><h4 id="7、有什么想问的？"><a href="#7、有什么想问的？" class="headerlink" title="7、有什么想问的？"></a>7、有什么想问的？</h4><ul><li>技术面:<ul><li>请问如果有幸被贵公司录取，在入职前有没有需要我提前学习和准备的</li><li>是什么让您对每天的工作都充满期待</li><li>您能谈谈公司文化吗？</li><li>我们团队面临的最大挑战是什么？</li><li>若面试不好:<ul><li>您对我有何担忧吗</li><li>您认为我目前缺少何种能力或是资质？</li></ul></li></ul></li><li>HR面:<ul><li>能否分享有关该岗位的日常职责和更多信息？或者简单描述该岗位的「典型一天」</li><li>绩效评估的机制是如何的？何时会进行首次正式评估？</li><li>公司的组织架构是什么样的？岗位属于哪个层级？岗位的发展路径如何？</li><li>团队员工离职率？平均年龄？团队绩效如何？</li><li>团队的工作风格和领导风格是什么样的？</li><li>公司对这个团队的发展定位是什么样的？</li></ul></li></ul><h4 id="8、阿里六脉神剑"><a href="#8、阿里六脉神剑" class="headerlink" title="8、阿里六脉神剑"></a>8、阿里六脉神剑</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%9D%9E%E6%8A%80%E8%83%BD%E7%AF%87/1.png" alt="title"></p><h4 id="9、你想把你的知识应用到生活的什么方面"><a href="#9、你想把你的知识应用到生活的什么方面" class="headerlink" title="9、你想把你的知识应用到生活的什么方面"></a>9、你想把你的知识应用到生活的什么方面</h4><ul><li>解数独</li><li>剪辑视频，UP主</li><li>自动打卡脚本</li></ul><h4 id="10、你对公司加班是怎么看的？"><a href="#10、你对公司加班是怎么看的？" class="headerlink" title="10、你对公司加班是怎么看的？"></a>10、你对公司加班是怎么看的？</h4><ul><li>如果是个人效率问题，我一定会努力提高效率，在合理的时间内完成工作安排，绝不用加班来弥补自己的工作效率问题</li><li>如果是工作需要我会义不容辞加班，投入工作。但同样，我也会提高工作效率，减少不必要的加班</li></ul><h4 id="11、3-5年内，你有什么职业规划嘛？"><a href="#11、3-5年内，你有什么职业规划嘛？" class="headerlink" title="11、3~5年内，你有什么职业规划嘛？"></a>11、3~5年内，你有什么职业规划嘛？</h4><ul><li><p>未来3~5年内的一个职业规划的话，它是处于中长期的一个职业规划</p></li><li><p>一般来说我会这样规划自己1到两年之内的话，让自己在职场当中有一定的成长，自己专业性上的进步和突破</p></li></ul><h4 id="12、举个你抗打击能力强的例子"><a href="#12、举个你抗打击能力强的例子" class="headerlink" title="12、举个你抗打击能力强的例子"></a>12、举个你抗打击能力强的例子</h4><ul><li>2020CCF中国软件大会</li></ul><p>云原生致力于打造世界上最先进、稳定的云原生基础设施，是阿里云最核心的部门之一。<br>我们的目标是让云成为成本最低，效率最高，稳定性最强的应用运行环境。在这里，我们设计超大规模容器与调度系统，发挥出云的极致弹性能力；我们构建高性能微服务架构，提供云端应用的无限拓展的能力；我们打造标准易用的 PaaS 平台，让云上研发变得简单、可控。<br>在这里，你会参与到linux容器(docker/pouch)、Kubernetes 等最前沿的技术研发与探索中来。<br>你也会与 CNCF TOC 和 SIG 联席主席， etcd 创始人、K8s Operator 创始人等组成的国内最顶尖的云原生技术人一同工作。<br>在这里，你会参与到全球最顶级的开源项目（如 Kubernetes、Containerd、OAM、Apache Dubbo、Nacos、Arthas）研发工作中，一同拓展云技术的边界，既赋能阿里巴巴全球经济体，更服务全世界的开发者用户。</p><p> 3 你觉得你加入我们部门的机遇是什么 </p><p> 6 你受到最大的打击是什么 </p><p> 10 你的人生规划是什么 </p><p>什么是线程安全、特性</p><p>CPU结构</p><p>Object的方法</p><p>Java 锁 多线程</p><p>线程池</p><p>段页式为了解决什么问题，非线性地址映射带来的好处</p><p>操作系统的知识平时有用到嘛</p><p>内存池技术</p><p>设计模式！设计模式说一下？熟悉的，现实生活中给你一个实际场景，让你用来整一个设计模式。</p><p>锁，jvm垃圾回收，hashmap，hashtable，rpc</p><p>体现出项目难点与思考，高并发、大数据量、稳定性、高可靠</p><p>限流、熔断</p><p>java-GC</p><p>内容涉及：GC Root，垃圾收集器等等，有点记不清</p><p>JUC：</p><p>线程安全类有了解吗，就答 HashTable，CHashMap 等等，然后问 AQS 了解吗，讲道理，还没有完整的了解过，我就扯了 CAS，锁啊什么的一堆</p><p><strong>操作系统：</strong></p><p>进程间通信，中断机制，扯了信号啥的，然后问中断的方式，我还没反应过来，后来面试完搜了一下，应该是让我举例说说强制性中断和自愿性中断吧</p><p>Kubernetes、注册中心等</p><p>k8s的负载均衡？主从节点的切换？主从节点数据库数据冲突会不会造成脏读？</p><p>介绍一下服务发现？服务发现？</p><p>如何限流</p><p>3、情景问题：资源分配中对资源碎片的处理；资源锁；</p><p>5、python多进程的实现，用的库，进程池怎么写</p><p>情景问题：异常检测的工程实现（有万台服务器，各自有系统日志），数据汇总的工程实现，进程通信</p><p>hr面  40min</p><p>为啥选这个研究方向<br>做这个方向的初衷</p><p>我是如何定义一个大项目的<br>我对RFID的看法？</p><p>1、微服务的好处<br>2、如何运维微服务<br>3、devops</p><p>1、如何运维服务器</p><p>Hashmap是线程安全的么？为什么不安全？那不安全了怎么办？该怎么解决呢?平时用的多么，多线程的情况使用hashmap会报错么？</p><p>设计模式说一下？熟悉的，现实生活中给你一个实际场景，让你用来整一个设计模式。<br>淘宝页面请求的过程说一下？Web服务器底层一般用到什么jdk的类库？<br>网络编程的地址解析过程详细说一下？</p><p>Java分布式技术都有哪些？你常用的都有哪些？详细说一下</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux篇-2021春招准备</title>
    <link href="/2021/02/27/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/"/>
    <url>/2021/02/27/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、理解linux下的load"><a href="#1、理解linux下的load" class="headerlink" title="1、理解linux下的load"></a>1、理解linux下的load</h4><p>有多少进程在等待被CPU调度</p><p>Linux下，系统平均负载指的是运行队列平均长度，也就是等待cpu的平均进程数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uptime</span><br><span class="line">load = process/total_cpu_cores </span><br><span class="line">load average: 0.09, 0.05, 0.01</span><br></pre></td></tr></table></figure><ul><li>当车不多的时候，load &lt;1；</li><li>当车占满整个马路的时候 load=1；</li><li>当马路都站满了，而且马路外还堆满了汽车的时候，load&gt;1</li><li>两个cpu，load_average最大能到2</li></ul><p><strong>负载的好和坏：</strong></p><p>需要根据机器当前的进程数与CPU总核数的比值（process_cores_values）和CPU总核数（total_cores）来比较</p><ul><li><p>当 process_cores_values &lt;= total_cores 时，机器负载在CPU合理承受范围内</p></li><li><p>当 process_cores_values &gt; total_cores 时，机器负载超过CPU承受范围，机器超负荷运行。</p></li></ul><p>在我们执行<strong>top</strong>或者<strong>uptime</strong>的时候会有3个load的值，那我们根据哪个值做为我们判断依据呢？</p><p>着眼5分钟和15分钟的load值比较合适，因为1分钟的值有可能是个瞬间值，而5分钟或者15分钟的值是平均值，长时间负载高，机器肯定是需要排查问题的。</p><h5 id="top-字段：按f-可以选择相关参数-按d标示是否显示-按q标示退出-t切换CPU"><a href="#top-字段：按f-可以选择相关参数-按d标示是否显示-按q标示退出-t切换CPU" class="headerlink" title="top 字段：按f, 可以选择相关参数; 按d标示是否显示; 按q标示退出; t切换CPU"></a>top 字段：按f, 可以选择相关参数; 按d标示是否显示; 按q标示退出; t切换CPU</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">top - 15:47:18 up 86 days,  1:07,  2 users,  load average: 0.43, 0.38, 0.39</span><br><span class="line"></span><br><span class="line">Tasks: 157 total,   1 running, 156 sleeping,   0 stopped,   0 zombie</span><br><span class="line">(进程数: 运行中、睡眠、停止、僵尸进程)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  4.5 us,  6.3 sy,  0.0 ni, 88.4 id,  0.6 wa,  0.0 hi,  0.2 si,  0.0 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">CPU：自从上一次更新时到现在任务所使用的CPU时间百分比。</span></span><br><span class="line"></span><br><span class="line">KiB Mem :  8009184 total,   439224 free,  2005724 used,  5564236 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  5448920 avail Mem</span><br><span class="line"><span class="meta">%</span><span class="bash">MEM：进程使用的可用物理内存百分比。</span></span><br></pre></td></tr></table></figure><ul><li>PID：Process ID    PPID(Parent Process ID)</li><li>USER</li><li>PR: 优先级</li><li>NI: Nice Value</li><li>S: Process Status<ul><li>D - 不可中断的睡眠态。</li><li>R – 运行态</li><li>S – 睡眠态</li><li>T – 被跟踪或已停止</li><li>Z – 僵尸态</li></ul></li></ul><h5 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h5><ul><li>线程: <code>top -p PID -H</code></li><li>监控Java线程数: <code>ps -eLf | grep java | wc -l</code></li><li>监控网络客户连接数: <code>netstat -n | grep tcp | grep 侦听端口 | wc -l</code></li></ul><h4 id="2、常见命令"><a href="#2、常见命令" class="headerlink" title="2、常见命令"></a>2、常见命令</h4><ul><li><p>创建多级目录:  <code>makedir -p</code></p></li><li><p>查看线程: <code>top -H</code></p></li><li><p>命令用于计算字数: <code>wc</code></p></li><li><p>查看文件夹大小: <code>ls -lh</code></p></li><li><p>查看堆栈: <code>pstack PID</code> + <code>gdb</code>调试死锁</p></li><li><p>查看端口: <code>netstat -anop</code></p></li><li><p>删除重复行: </p><ul><li><code>sort -u XXX.txt</code></li><li><code>sort -k2n file | uniq &gt; a.out</code></li></ul></li><li><p>文本流编辑: <code>sed</code></p></li><li><p><code>vim</code>: 命令模式、插入模式、尾行命令模式</p><ul><li>命令模式下:<ul><li>yy-复制</li><li>p-粘贴</li><li>0-行首</li><li>1G-文章首行 2G 3G</li><li>GG-文章末行</li><li>/查找的字符   n下一个;N上一个</li></ul></li><li>尾行命令模式<ul><li>:%s/str1/str2/g 替换全局所有str1为str2</li><li>:s/str1/str2 </li><li>:n,s/str1/str2某行的str1替换为str2</li><li>:wq</li></ul></li></ul></li><li><p>tcpdump: linux抓包工具</p><ul><li>```shell<br>tcpdump -i eth1 src host 192.168.1.1  # 源地址<br>tcpdump -i eth1 dst host 192.168.1.1  # 目标<br>tcpdump -i eth1 src/dst port 25  # 端口<br>tcpdump -i eth1 arp # 协议过滤<br>tcpdump -i eth1 net 192.168 # 网络过滤<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 3、服务器响应变慢排查</span><br><span class="line"></span><br><span class="line">- 第一步: 查看系统资源是否达到上限</span><br><span class="line">  - 查看一下CPU占比比较高的进程</span><br><span class="line">  - 使用jstack命令生成进程的堆栈信息</span><br><span class="line">  - 若频繁发生FULL GC，需要看一下内存快照，分析一下内存情况（可以使用java自带的或第三方工具）</span><br><span class="line">    - jmap -dump:live,format=b,file=m.hprof PID</span><br><span class="line">    - MAT分析工具</span><br><span class="line">  - 如果是磁盘空间满了，及时清理磁盘</span><br><span class="line">  - 如果是带宽满了，联系网络工程师解决</span><br><span class="line">- 第二步: </span><br><span class="line">  - 检查应用服务器（Jboss/Tomcat）的线程池配置是否合理</span><br><span class="line">  - 看一下请求的排队现象是否严重</span><br><span class="line">  - 如果严重则需要重新设置合理的线程池</span><br><span class="line">  - 检查一下数据库的连接池设置是否合理，增大连接池设置</span><br><span class="line">  - 检查一下是否有慢sql，如果有慢sql，则进行优化（优化方案是查看执行计划，设置合理的索引等）</span><br><span class="line"></span><br><span class="line">- 第三步：查看访问慢的服务的调用链</span><br><span class="line">  - 查看一下调用链中的每一步响应时间是否合理</span><br><span class="line">  - 如果不合理，则联系相关系统的负责人进行排查和解决</span><br><span class="line">- 第四步：检查web服务器的请求日志</span><br><span class="line">  - 看一下是否存在Doss攻击</span><br><span class="line">    - 分布式拒绝服务, 用肉鸡对目标网站在短时间内发送大量请求</span><br><span class="line">    - 如果有Doss攻击，则将攻击者的IP添加到防火墙的黑名单里。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 4、机器的磁盘满了，删日志没有反应，可能是什么问题？</span><br><span class="line"></span><br><span class="line">在Linux或者Unix系统中，通过rm或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink)</span><br><span class="line"></span><br><span class="line">然而如果文件是被打开的（有一个进程正在使用），那么进程将仍然可以读取该文件，磁盘空间也一直被占用。</span><br><span class="line"></span><br><span class="line">使用命令：**/usr/sbin/lsof|grep deleted** </span><br><span class="line"></span><br><span class="line">确认删除文件是否被占用</span><br><span class="line"></span><br><span class="line">kill -9 pid值 杀掉进程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 5、Linux文件系统</span><br><span class="line"></span><br><span class="line">![title](/images/2021年春招准备-Linux篇/1.png)</span><br><span class="line"></span><br><span class="line">- `bin/sbin`：`bin` 是 `Binary` 的缩写，存放着可执行文件或可执行文件的链接（类似快捷方式），命令的存放地址</span><br><span class="line"></span><br><span class="line">- `boot`: 这里是系统启动需要的文件，你可以看到 `grub` 文件夹，它是常见的开机引导程序。我们不应该乱动这里的文件</span><br><span class="line"></span><br><span class="line">- `/dev`：`dev` 是 `device` 的缩写，这里存放这所有的设备文件。在 Linux 中，所有东西都是以文件的形式存在的，包括硬件设备。鼠标、键盘等等设备也都可以在这里找到。</span><br><span class="line"></span><br><span class="line">- `/etc`: 存放很多程序的配置信息，比如包管理工具 apt</span><br><span class="line"></span><br><span class="line">- `lib`:`lib` 是 Library 的缩写，类似于 Windows 系统中存放 `dll` 文件的库，包含 bin 和 sbin 中可执行文件的依赖。也可能出现 `lib32` 或 `lib64` 这样的目录，和 `lib` 差不多，只是操作系统位数不同而已</span><br><span class="line"></span><br><span class="line">- `/media`: 这里会有一个以你用户名命名的文件夹，里面是自动挂载的设备，比如 U 盘，移动硬盘，网络设备等</span><br><span class="line"></span><br><span class="line">- `/mnt`: 这也是和设备挂载相关的一个文件夹，一般是空文件夹。`media` 文件夹是系统自动挂载设备的地方，这里是你手动挂载设备的地方</span><br><span class="line"></span><br><span class="line">- `/opt`: `opt` 是 Option 的缩写，这个文件夹的使用比较随意，一般来说我们自己在浏览器上下载的软件，安装在这里比较好</span><br><span class="line"></span><br><span class="line">- `proc` :`proc` 是 `process` 的缩写，这里存放的是全部正在运行程序的状态信息</span><br><span class="line"></span><br><span class="line">- `/root`: 这是 root 用户的家目录，普通用户需要授权才能访问</span><br><span class="line"></span><br><span class="line">- `/run 和 /sys`用来存储某些程序的运行时信息和系统需要的一些信息。比如说这个文件：里面存储着一个数字，是你的显卡亮度，你修改这个数字就可以修改屏幕亮度</span><br><span class="line"></span><br><span class="line">  - 这两个位置的数据都存储在内存中，所以一旦重启，`/run` 和 `/sys` 目录的信息就会丢失</span><br><span class="line"></span><br><span class="line">  ```shell</span><br><span class="line">  sudo vim /sys/devices/pci0000:00/0000:00:02.0/drm/card0/card0-eDP-1/intel_backlight/brightness</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>/srv</code>：srv 是 service 的缩写，主要用来存放服务数据</p></li><li><p><code>/tmp</code>: tmp 是 temporary 的缩写，存储一些程序的临时文件</p></li><li><p><code>/usr</code>： usr 是 Universal System Resource 的缩写，这里存放的是一些非系统必须的资源，比如用户安装的应用程序</p></li><li><p><code>/var</code>: var 是 variable 的缩写，这个名字是历史遗留的，现在该目录最主要的作用是存储日志（log）信息，比如说程序崩溃，防火墙检测到异常等等信息都会记录在这里</p></li><li><p><code>/home</code>: 这是普通用户的家目录</p></li></ul><h4 id="6、CGroups"><a href="#6、CGroups" class="headerlink" title="6、CGroups"></a>6、CGroups</h4><blockquote><p>CGroup 是 Control Groups 的缩写，将任意进程进行分组化管理的 Linux 内核功能</p></blockquote><h5 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h5><ul><li><p>任务（task）。在 cgroups 中，任务就是系统的一个进程；</p></li><li><p>控制族群（control group）。控制族群就是一组按照某种标准划分的进程</p><ul><li>Cgroups 中的资源控制都是以控制族群为单位实现</li><li>一个进程可以加入到某个控制族群，也从一个进程组迁移到另一个控制族群</li><li>一个进程组的进程可以使用 cgroups 以控制族群为单位分配的资源，同时受到 cgroups 以控制族群为单位设定的限制；</li></ul></li><li><p>层级（hierarchy）。控制族群可以组织成 hierarchical 的形式，既一颗控制族群树。控制族群树上的子节点控制族群是父节点控制族群的孩子，继承父控制族群的特定的属性；</p></li><li><p>子系统（subsystem）。<strong>一个子系统就是一个资源控制器</strong>，比如 cpu 子系统就是控制 cpu 时间分配的一个控制器。子系统必须附加（attach）到一个层级上才能起作用，一个子系统附加到某个层级以后，这个层级上的所有控制族群都受到这个子系统的控制。</p></li></ul><h5 id="Cgroups提供了以下功能："><a href="#Cgroups提供了以下功能：" class="headerlink" title="Cgroups提供了以下功能："></a>Cgroups提供了以下功能：</h5><ul><li>限制进程组可以使用的资源数量（Resource limiting ）。比如：memory子系统可以为进程组设定一个memory使用上限，一旦进程组使用的内存达到限额再申请内存，就会出发OOM（out of memory）</li><li>进程组的优先级控制（Prioritization ）。比如：可以使用cpu子系统为某个进程组分配特定cpu share。</li><li>记录进程组使用的资源数量（Accounting ）。比如：可以使用cpuacct子系统记录某个进程组使用的cpu时间</li><li>进程组隔离（Isolation）。比如：使用namespace子系统可以使不同的进程组使用不同的namespace，以达到隔离的目的，不同的进程组有各自的进程、网络、文件系统挂载空间。</li><li>进程组控制（Control）。比如：使用freezer子系统可以将进程组挂起和恢复。</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/2.png" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/3.png" alt="title"></p><p>CGroup 层级关系显示，CPU 和 Memory 两个子系统有自己独立的层级系统。CGroup 技术可以被用来在操作系统底层限制物理资源，起到 Container 的作用</p><h4 id="7、进程、线程、文件描述符"><a href="#7、进程、线程、文件描述符" class="headerlink" title="7、进程、线程、文件描述符"></a>7、进程、线程、文件描述符</h4><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/4.jpeg" alt="title"></p><p>对于系统而言，进程就是一个数据结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span></span><br><span class="line">    <span class="comment">// 进程状态</span></span><br><span class="line">    <span class="keyword">long</span>              state;</span><br><span class="line">    <span class="comment">// 虚拟内存结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span>  *<span class="title">mm</span>;</span></span><br><span class="line">    <span class="comment">// 进程号</span></span><br><span class="line">    <span class="keyword">pid_t</span>              pid;</span><br><span class="line">    <span class="comment">// 指向父进程的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> __<span class="title">rcu</span>  *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="comment">// 子进程列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">children</span>;</span></span><br><span class="line">    <span class="comment">// 存放文件系统信息的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span>        *<span class="title">fs</span>;</span></span><br><span class="line">    <span class="comment">// 一个数组，包含该进程打开的文件指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span>        *<span class="title">files</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/5.jpeg" alt="title"></p><p><code>files</code>，它是一个文件指针数组。一般来说，一个进程会从<code>files[0]</code>读取输入，将输出写入<code>files[1]</code>，将错误信息写入<code>files[2]</code></p><p><strong>每个进程被创建时，<code>files</code>的前三位被填入默认值，分别指向标准输入流、标准输出流、标准错误流。我们常说的「文件描述符」就是指这个文件指针数组的索引</strong>，所以程序的文件描述符默认情况下 0 是输入，1 是输出，2 是错误</p><p>Linux 中一切都被抽象成文件，设备也是文件，可以进行读和写。如果我们写的程序需要其他资源，比如打开一个文件进行读写，这也很简单，进行系统调用，让内核把文件打开，这个文件就会被放到<code>files</code>的第 4 个位置</p><p><strong>应用</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/6.png" alt="title"></p><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/7.png" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Linux%E7%AF%87/8.png" alt="title"></p><h4 id="8、Linux增加开机启动项"><a href="#8、Linux增加开机启动项" class="headerlink" title="8、Linux增加开机启动项"></a>8、Linux增加开机启动项</h4><ul><li><p>编辑文件 <code>/etc/rc.local</code>，在文件末尾（exit 0之前）加上你开机需要启动的程序或执行的命令即可（执行的程序需要写绝对路径，添加到系统环境变量的除外）</p></li><li><p>自己写shell脚本，将写好的脚本（.sh文件）放到目录 <code>/etc/profile.d/</code>下，系统启动后就会自动执行该目录下的所有shell脚本</p></li><li><p>通过chkconfig命令设置</p><ul><li>将启动文件cp到 /etc/init.d/或者/etc/rc.d/init.d/（前者是后者的软连接）下</li><li>vim 启动文件，文件前面务必添加如下三行代码，否侧会提示chkconfig不支持</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh 告诉系统使用的shell,所以的shell脚本都是这样</span></span><br><span class="line"><span class="meta">#</span><span class="bash">chkconfig: 35 20 80 分别代表运行级别，启动优先权，关闭优先权，此行代码必须</span></span><br><span class="line"><span class="meta">#</span><span class="bash">description: http server（自己随便发挥）//两行都注释掉！！！，此行代码必须</span></span><br></pre></td></tr></table></figure><ul><li>chkconfig –add 脚本文件名 操作后就已经添加了</li><li><code>systemctl enable</code></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python篇-2021春招准备</title>
    <link href="/2021/02/27/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Python%E7%AF%87/"/>
    <url>/2021/02/27/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Python%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、迭代器与生成器"><a href="#1、迭代器与生成器" class="headerlink" title="1、迭代器与生成器"></a>1、迭代器与生成器</h4><p><strong>迭代器</strong></p><p>python中，任意对象，只要定义了**__next__**方法，它就是一个迭代器。因此，python中的容器如列表、元组、字典、集合、字符串都可以用于创建迭代器。</p><p><em>for</em>循环从列表[1,2,3]中取元素，这种遍历过程就被称作<strong>迭代</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表是迭代器</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br><span class="line"><span class="comment"># 元组是迭代器</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br><span class="line"><span class="comment"># 字典是迭代器</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> &#123;<span class="string">&#x27;one&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>:<span class="number">2</span>&#125;:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment"># 字符串是迭代器</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&quot;123&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br><span class="line"><span class="comment"># 打开的text同样是迭代器</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;myfile.txt&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(line, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果你不想用for循环迭代呢？这时你可以：</p><ul><li>先调用容器（以字符串为例）的iter()函数</li><li>再使用 next() 内置函数来调用 <strong>next</strong>() 方法</li><li>当元素用尽时，<strong>next</strong>() 将引发 StopIteration 异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;abc&#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it</span><br><span class="line">&lt;iterator <span class="built_in">object</span> at <span class="number">0x00A1DB50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">next</span>(it)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p><strong>生成器</strong></p><blockquote><p>通过列表生成式，我们可以直接创建一个列表。<br>但是，受到内存限制，列表容量肯定是有限的。<br>而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。<br>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？<br>这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器（Generator）。</p></blockquote><p><strong>生成器也是一种迭代器</strong>，但是你只能对其迭代一次。这是因为它们并没有把所有的值存在内存中，而是<strong>在运行时生成值</strong>。</p><p>使用了 <strong>yield</strong> 的函数被称为生成器（generator）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">yield</span> data[index]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> reverse(<span class="string">&#x27;golf&#x27;</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(char)</span><br><span class="line">...</span><br><span class="line">f</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line">g</span><br></pre></td></tr></table></figure><p><strong>Send</strong></p><ul><li>如果使用send函数唤醒生成器,第一次调用send的时候，传入的值为None</li><li>一般情况下会使用next()唤醒第一次</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyGenerator</span>():</span></span><br><span class="line">        value=<span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> value</span><br><span class="line">        <span class="keyword">return</span> done</span><br><span class="line"></span><br><span class="line">gen=MyGenerator()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="built_in">print</span>(gen.send(<span class="string">&quot;I am Value&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line">I am Value</span><br><span class="line"></span><br><span class="line">send方法发送信号终止生成器</span><br></pre></td></tr></table></figure><h4 id="2、is与-的区别"><a href="#2、is与-的区别" class="headerlink" title="2、is与==的区别"></a>2、is与==的区别</h4><p>Python中对象包含的三个基本要素    </p><ul><li>id(身份标识)      is判断</li><li>type(数据类型)</li><li>value(值)  ==判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = y = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == y</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == z</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> y</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> z</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">id</span>(x)</span><br><span class="line"><span class="number">3075326572</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">id</span>(y)</span><br><span class="line"><span class="number">3075326572</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">id</span>(z)</span><br><span class="line"><span class="number">3075328140</span></span><br></pre></td></tr></table></figure><h4 id="3、-init-与-new-的区别"><a href="#3、-init-与-new-的区别" class="headerlink" title="3、__init__与__new__的区别"></a>3、__init__与__new__的区别</h4><ul><li>__new__用于初始化一个实例</li><li>__init__用于实例化后调用的第一个方法</li><li>__str__重载print方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># def __new__(cls, name, age):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__new__called.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(Person, cls).__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__init__called.&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Person: %s(%s)&gt;&#x27;</span> % (self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    zfl = Person(<span class="string">&#x27;zfl&#x27;</span>, <span class="number">25</span>)</span><br><span class="line">    <span class="built_in">print</span>(zfl)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实现自定义metaclass</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositiveInteger</span>(<span class="params"><span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(PositiveInteger, cls).__new__(cls, <span class="built_in">abs</span>(value))</span><br><span class="line"></span><br><span class="line">i = PositiveInteger(-<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><strong>单例模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;instance&#x27;</span>):</span><br><span class="line">            cls.instance = <span class="built_in">super</span>(Singleton, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Singleton()</span><br><span class="line">obj2 = Singleton()</span><br><span class="line"></span><br><span class="line">obj1.attr1 = <span class="string">&#x27;value1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(obj1.attr1, obj2.attr1)</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、垃圾回收机制-GC"><a href="#4、垃圾回收机制-GC" class="headerlink" title="4、垃圾回收机制(GC)"></a>4、垃圾回收机制(GC)</h4><blockquote><p>引用计数为主，分代回收为辅</p></blockquote><p><strong>(a) 引用计数</strong>: 每个对象维护一个<em>ob_ref</em>，用来记录当前对象被引用的次数</p><p>如下情况引用计数器+1:</p><ul><li>对象被创建: <em>a=14</em></li><li>对象被引用: <em>b=a</em></li><li>对象被作为参数传递到函数中: <em>func(a)</em></li><li>对象作为一个元素存储在容器中， <em>list = {a, ‘a’, ‘b’, 2}</em></li></ul><p>如下情况引用计数器-1:</p><ul><li>对象的别名被显式销毁: <em>del a</em></li><li>该对象的引用别名被赋予新的对象: <em>a=26</em></li><li>一个对象离开作用阈，局部变量引用计数器-1</li><li>元素从容器中删除或容器被销毁</li></ul><p>当计数器为0时被销毁</p><p><strong>优点:</strong></p><ul><li>高效</li><li>无停顿、实时性</li><li>对象有确定生命周期</li><li>易于实现</li></ul><p><strong>缺点:</strong></p><ul><li>维护引用计数消耗资源</li><li>无法解决循环引用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line">list1.append(list2)</span><br><span class="line">list2.append(list1)</span><br></pre></td></tr></table></figure><p><strong>(b) 标记-清除</strong>: 基于追踪回收(tracing GC)</p><p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象</p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Python%E7%AF%87/1.png" alt="title"></p><p>在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p><p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。</p><p><strong>缺点：</strong>清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象</p><p><strong>(c)分代回收:</strong></p><p>分代回收是一种以<strong>空间换时间</strong>的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为<strong>年轻代（第0代）</strong>、<strong>中年代（第1代）</strong>、<strong>老年代（第2代）</strong>，他们对应的是3个<strong>链表</strong>，它们的垃圾收集频率与对象的存活时间的增大而减小。</p><p>新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时或者超过一定的阈值，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。</p><p>分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</p><p><strong>(d)过程:</strong></p><ul><li>分配内存</li><li>发现超过阈值了</li><li>触发垃圾回收</li><li>将所有可收集对象链表放到一起</li><li>遍历, 计算有效引用计数</li><li>分成 有效引用计数=0 和 有效引用计数 &gt; 0 两个集合</li><li>大于0的, 放入到更老一代</li><li>=0的, 执行回收</li><li>回收遍历容器内的各个元素, 减掉对应元素引用计数(破掉循环引用)</li><li>执行-1的逻辑, 若发现对象引用计数=0, 触发内存回收</li><li>python底层内存管理机制回收内存</li></ul><h4 id="5、多线程"><a href="#5、多线程" class="headerlink" title="5、多线程"></a>5、多线程</h4><blockquote><p>python3是假的多线程，它不是真真正正的并行，其实就是串行，只不过利用了cpu上下文的切换而已</p><p>只有获得GIL锁的线程才能真正在cpu上运行。所以，多线程在python中只能交替执行，即使100个线程跑在100核cpu上，也只能用到1核。</p></blockquote><ul><li>线程: 线程被称为轻量级进程，是最小执行单元，系统调度的单位。线程切换需要的资源一般，效率一般。 </li><li>多线程: 在单个程序中同时运行多个线程完成不同的工作，称为多线程</li><li>并发：操作系统同时执行几个程序，这几个程序都由一个cpu处理，但在一个时刻点上只有一个程序在cpu上处理</li><li>并行：操作系统同时执行2个程序，但是有两个cpu，每个cpu处理一个程序，叫并行</li><li>串行： 是指的我们从事某项工作是一个步骤一个步骤去实施 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="keyword">global</span> g_num  <span class="comment"># global声明全局变量</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader</span>():</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="built_in">print</span>(g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=update)</span><br><span class="line">t2 = threading.Thread(target=reader)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><p><strong>Global Interpreter Lock(全局解释器锁GIL)</strong></p><p>某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。适合<strong>IO密集型</strong></p><p>用multiprocessing替代Thread，多核下，想做并行提升效率，比较通用的方法是使用多进程，能够有效提高执行效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">global_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">lock = threading.Lock()           <span class="comment">#互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> global_num</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        global_num += <span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1&quot;</span>, global_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="keyword">global</span> global_num</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        global_num += <span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2&quot;</span>, global_num)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=test1)</span><br><span class="line">t2 = threading.Thread(target=test2)</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"><span class="built_in">print</span>(global_num)</span><br></pre></td></tr></table></figure><h4 id="6、函数式编程"><a href="#6、函数式编程" class="headerlink" title="6、函数式编程"></a>6、函数式编程</h4><blockquote><p>允许把函数本身作为参数传入另一个函数，还允许返回一个函数</p></blockquote><ul><li>变量可以指向函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func_abs = <span class="built_in">abs</span></span><br><span class="line"><span class="built_in">print</span>(func_abs(-<span class="number">10</span>))</span><br></pre></td></tr></table></figure><ul><li>函数可以作为函数的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"><span class="built_in">print</span>(add(-<span class="number">5</span>, -<span class="number">6</span>, <span class="built_in">abs</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># map(一个函数，一个序列)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">r = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># reduce -&gt;  reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * x + y</span><br><span class="line"><span class="built_in">print</span>(reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># filter filter()也接收一个函数和一个序列. filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>])))</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序</span></span><br><span class="line"><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>], key=<span class="built_in">abs</span>)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, -<span class="number">12</span>, -<span class="number">21</span>, <span class="number">36</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>返回值为函数</p></li><li><p>闭包: 闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例，名称相同的变量在不同环境中代表的意义不同</p></li><li><p>匿名函数 <code>lambda</code>:  </p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 冒号前面是参数，后面是返回值</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br></pre></td></tr></table></figure><ul><li>装饰器: decorator就是一个返回函数的高阶函数<ul><li>接收被装饰的函数作为参数</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器无参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 装饰器有参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;exec&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br><span class="line">now()</span><br></pre></td></tr></table></figure><h4 id="7、常见的库"><a href="#7、常见的库" class="headerlink" title="7、常见的库"></a>7、常见的库</h4><ul><li>datetime</li><li>os</li><li>random</li><li>math</li><li>sys</li><li>pandas</li><li>numpy</li><li>matplotlib</li></ul><h4 id="Python动态创建类"><a href="#Python动态创建类" class="headerlink" title="Python动态创建类"></a>Python动态创建类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> com.twowater.hello <span class="keyword">import</span> Hello</span><br><span class="line"></span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Hello))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))</span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printHello</span>(<span class="params">self, name=<span class="string">&#x27;Py&#x27;</span></span>):</span></span><br><span class="line">    <span class="comment"># 定义一个打印 Hello 的函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello,&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Hello 类</span></span><br><span class="line">Hello = <span class="built_in">type</span>(<span class="string">&#x27;Hello&#x27;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(hello=printHello))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化 Hello 类</span></span><br><span class="line">h = Hello()</span><br><span class="line"><span class="comment"># 调用 Hello 类的方法</span></span><br><span class="line">h.hello()</span><br><span class="line"><span class="comment"># 查看 Hello class 的类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Hello))</span><br><span class="line"><span class="comment"># 查看实例 h 的类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))</span><br></pre></td></tr></table></figure><p>在这里，需先了解下通过 <code>type()</code> 函数创建 class 对象的参数说明：</p><p>1、class 的名称，比如例子中的起名为 <code>Hello</code></p><p>2、继承的父类集合，注意 Python 支持多重继承，如果只有一个父类，tuple 要使用单元素写法；例子中继承 object 类，因为是单元素的 tuple ，所以写成 <code>(object,)</code></p><p>3、class 的方法名称与函数绑定；例子中将函数 <code>printHello</code> 绑定在方法名 <code>hello</code> 中</p><p>具体的模式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式篇-2021春招准备</title>
    <link href="/2021/02/26/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AF%87/"/>
    <url>/2021/02/26/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、秒杀场景"><a href="#1、秒杀场景" class="headerlink" title="1、秒杀场景"></a>1、秒杀场景</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7%E7%AF%87/1.png" alt="title"></p><p><strong>隔离</strong>:</p><ul><li><p><strong>系统隔离。</strong>系统隔离更多是运行时的隔离，可以通过分组部署的方式和另外99%分开。秒杀还申请了单独的域名，目的也是让请求落到不同的集群中。</p></li><li><p><strong>数据隔离。</strong>秒杀所调用的数据大部分都是热数据，比如会启用单独cache集群或MySQL数据库来放热点数据，目前也是不想0.01%的数据影响另外99.99%</p></li></ul><p><strong>动静分离:</strong></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7%E7%AF%87/2.png" alt="title"></p><ul><li>把整个页面Cache在用户浏览器</li><li>如果强制刷新整个页面，也会请求到CDN</li><li>实际有效请求只是“刷新抢宝”按钮</li></ul><p>秒杀的动态数据和普通的详情页面的动态数据相比更少，性能也比普通的详情提升3倍以上。所以“刷新抢宝”这种设计思路很好地解决了不刷新页面就能请求到服务端最新的动态数据。</p><p><strong>基于时间分片削峰：</strong>不让流量同时涌入，把峰值的下单请求给拉长了</p><ul><li>前端答题、验证码</li><li>服务端通过锁或者队列来控制瞬间请求</li></ul><p><strong>限流</strong>:</p><ul><li><p>Nginx限流</p><p>Nginx官方版本限制IP的连接和并发分别有两个模块：</p><ul><li>limit_req_zone： 用来限制单位时间内的请求数，即速率限制,采用的漏桶算法。</li><li>limit_req_conn： 用来限制同一时间连接数，即并发限制。</li></ul></li></ul><ul><li>站点层限流<ul><li>单个部署实例的每秒最大请求数，每个用户每秒的最大请求或者通过Redis记录和限制单个用户只能请求一次。</li></ul></li><li>拒绝：当连接数过大，cpu负载达到90%，就拒绝请求</li></ul><p><strong>不要超卖</strong></p><ul><li><p>下单减库存：一定不会出现超卖情况，但是有些人下单完不付款会影响其他人。</p></li><li><p>付款减库款：付款减库存，可能会因为并发高导致付款时已经卖光，付不了款。</p></li><li><p>预扣库存：最常用，如下单后扣库存，保留十分钟，在十分钟内未付款就不保留。如果付款时发现库存不足则不允许付款。</p></li></ul><h5 id="高并发系统"><a href="#高并发系统" class="headerlink" title="高并发系统"></a>高并发系统</h5><p>可以分为以下 6 点：</p><ul><li>系统拆分</li><li>缓存: redis</li><li>MQ：Redis 来承载写那肯定不行，人家是缓存，数据随时就被 LRU 了，数据格式还无比简单，没有事务支持</li><li>分库分表：将一个数据库拆分为多个库，多个库来扛更高的并发；然后将一个表拆分为多个表，每个表的数据量保持少一点，提高 sql 跑的性能</li><li>读写分离：大部分时候数据库可能也是读多写少，没必要所有请求都集中在一个库上吧，可以搞个主从架构，主库写入，从库读取，搞一个读写分离。读流量太多的时候，还可以加更多的从库。</li><li>ElasticSearch：es 是分布式的，可以随便扩容，分布式天然就可以支撑高并发，因为动不动就可以扩容加机器来扛更高的并发。那么一些比较简单的查询、统计类的操作，可以考虑用 es 来承载，还有一些全文搜索类的操作，也可以考虑用 es 来承载</li></ul><h4 id="2、前后端分离，解决登陆问题"><a href="#2、前后端分离，解决登陆问题" class="headerlink" title="2、前后端分离，解决登陆问题"></a>2、前后端分离，解决登陆问题</h4><ul><li>前端把account和password，提交到服务端的登录api</li><li>服务端验证正确后，生成一个token，并把token和userId，存在缓存里（推荐redis数据库），然后把token返回给前端</li><li>前端每次的请求头中带token，这样就能够轻松的实现</li></ul><h4 id="3、面向对象编程6大原则"><a href="#3、面向对象编程6大原则" class="headerlink" title="3、面向对象编程6大原则"></a>3、面向对象编程6大原则</h4><ul><li>单一职责: 一个类只负责一项职责</li><li>开闭原则: 对程序的<strong>扩展</strong>是开放的; 对程序的<strong>更改</strong>是封闭的</li><li>里氏替换: <strong>子类型必须能够替换掉它们的父类型</strong>，<strong>子类必须能够替换其基类</strong>。</li><li>依赖倒置: 针对接口编程，依赖于抽象而不依赖于具体</li><li>接口隔离: 使用多个隔离的接口，比使用单个接口要好，<strong>使用多个小的专门的接口，而不要使用一个大的总接口</strong></li><li>迪米特法则: 最少知道原则，一个实体应当尽量少地与其他实体之间发生相互作用</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx篇-2021春招准备</title>
    <link href="/2021/02/26/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Nginx%E7%AF%87/"/>
    <url>/2021/02/26/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Nginx%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、Nginx"><a href="#1、Nginx" class="headerlink" title="1、Nginx"></a>1、Nginx</h4><h5 id="1、Nginx模块化设计"><a href="#1、Nginx模块化设计" class="headerlink" title="1、Nginx模块化设计"></a>1、Nginx模块化设计</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Nginx%E7%AF%87/1.png" alt="title"></p><ul><li><strong>核心模块</strong></li></ul><p>提供错误日志记录、配置文件解析、事件驱动机制、进程管理等核心功能。</p><ul><li><strong>标准 HTTP 模块</strong></li></ul><p> HTTP 协议解析相关的功能，如：端口配置、网页编码设置、HTTP 响应头设置等。</p><ul><li><strong>可选 HTTP 模块</strong></li></ul><p>主要用于扩展标准的 HTTP 功能，让 Nginx 能处理一些特殊的服务，如：Flash 多媒体传输、解析 GeoIP 请求、SSL 支持等。</p><ul><li><strong>邮件服务模块</strong></li></ul><p>用于支持 Nginx 的邮件服务，包括对 POP3 协议、IMAP 协议和 SMTP 协议的支持。</p><ul><li><strong>第三方模块</strong></li></ul><p>扩展 Nginx 服务器应用，完成开发者自定义功能，如：Json 支持、Lua 支持等。</p><h5 id="2、Nginx架构"><a href="#2、Nginx架构" class="headerlink" title="2、Nginx架构"></a>2、Nginx架构</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Nginx%E7%AF%87/2.png" alt="title"></p><ul><li>Nginx默认采用多进程工作方式，Nginx启动后，会运行一个master进程和多个worker进程</li><li>一般来说，当一个连接进来后，所有worker都会收到通知，但是只有一个进程可以接受这个连接请求，其它的都失败，这是所谓的惊群现象。</li><li>nginx提供了一个accept_mutex（互斥锁），有了这把锁之后，同一时刻，就只会有一个进程在accpet连接，这样就不会有惊群问题了。</li><li>每个worker进程都有一个独立的连接池</li></ul><h5 id="3、Listen"><a href="#3、Listen" class="headerlink" title="3、Listen"></a>3、Listen</h5><ul><li><p>当nginx接到请求后，会匹配其配置中的service模块，</p></li><li><p>匹配方法就是靠请求携带的host和port正好对应其配置中的server_name 和listen。</p></li><li><p>如果做过ip和域名绑定，ip和域名二者是对等的</p></li><li><p>fastcgi介绍：CGI全称是“公共网关接口”(Common Gateway Interface)，HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序一般运行在网络服务器上。 CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php,perl,tcl等。</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span> www.abc.com;</span><br><span class="line">        <span class="attribute">access_log</span>  /opt/htdocs/logs/abc.log combined;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">        <span class="attribute">root</span> /opt/htdocs/abc;</span><br><span class="line">        <span class="attribute">if</span> ( $query_string <span class="regexp">~* &quot;.*[\;&#x27;\&lt;\&gt;].*&quot;</span> )&#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> $uri $uri/ /index.php;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(php|php5)?$</span>  &#123;</span><br><span class="line">                <span class="comment">#fastcgi_pass unix:/dev/shm/php-cgi.sock;</span></span><br><span class="line">                <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;     <span class="comment"># 网管代理</span></span><br><span class="line">                <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">                <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$</span> &#123;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(js|css)?$</span> &#123;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4、反向代理"><a href="#4、反向代理" class="headerlink" title="4、反向代理"></a>4、反向代理</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> cluster &#123;</span><br><span class="line">        <span class="attribute">server</span> srv1;</span><br><span class="line">        <span class="attribute">server</span> srv2;</span><br><span class="line">        <span class="attribute">server</span> srv3;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"> <span class="attribute">server_name</span> localhost www.xxx.com; <span class="comment">#域名</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;    <span class="comment"># 匹配 / 转发到反向代理</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://cluster;  <span class="comment"># 反向代理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的HTTP负载均衡算法 - 加权轮询</p><h5 id="5、Nginx调度算法"><a href="#5、Nginx调度算法" class="headerlink" title="5、Nginx调度算法"></a>5、Nginx调度算法</h5><ul><li><strong>轮询:</strong> 按时间顺序逐一分配到不同的后端服务器</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lb_demo &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.194:9001</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.195:9001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>加权轮询:</strong> 可在配置的server后面加个weight=number，number值越高，分配的概率越大</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lb_demo &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.194:9001</span> weight=<span class="number">10</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.195:9001</span> weight=<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>ip_hash:</strong> 每个请求按访问IP的hash分配，这样来自同一IP固定访问一个后台服务器，实现会话粘滞，避免处理session共享问题</p><ul><li><p>如果没有<code>ip_hash</code>策略，那么如何实现回话沾滞？<br><code>答：</code>可以维护一张映射表，存储客户端IP或者sessionid与具体目标服务器的映射关系，但是存在缺点</p></li><li><p><strong>缺点：</strong></p><ul><li>在客户端很多的情况下，映射表非常大，浪费内存空间</li><li>客户端上下线，目标服务器上下线，都会导致重新维护映射表，映射表维护成本很大</li></ul></li><li><p><strong>解决方案：</strong> 如果使用哈希算法，事情就简单很多，我们可以对ip地址或者sessionId进行计算哈希值，哈希值与服务器数量进行取模运算，</p></li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lb_demo &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.194:9001</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.195:9001</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>least_hash:</strong> 最少链接数，哪个机器连接数少就发分发给哪个机器</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lb_demo &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.194:9001</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.195:9001</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>url_hash</strong>: 按访问的url的hash结果分配请求，是每个url定向到同一后端服务器上</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lb_demo &#123;</span><br><span class="line">        url_hash;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.194:9001</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.255.195:9001</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="6、nginx配置证书"><a href="#6、nginx配置证书" class="headerlink" title="6、nginx配置证书"></a>6、nginx配置证书</h5><blockquote><p>使用openssl生成证书</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">server_name</span> www.yourdomain.com;</span><br><span class="line"><span class="attribute">ssl_certificate</span> /usr/local/ssl/nginx.crt;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /usr/local/ssl/nginx.key;</span><br><span class="line"><span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"><span class="comment">#禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击</span></span><br><span class="line"><span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line"><span class="comment">#如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问</span></span><br><span class="line"><span class="attribute">fastcgi_param</span>   HTTPS               <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>   HTTP_SCHEME         https;</span><br><span class="line"><span class="attribute">access_log</span> /usr/local/nginx/logs/httpsaccess.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、nginx到upstream这个网络出现问题出现502-Bad-Gateway-比较多，如何解决？"><a href="#7、nginx到upstream这个网络出现问题出现502-Bad-Gateway-比较多，如何解决？" class="headerlink" title="7、nginx到upstream这个网络出现问题出现502(Bad Gateway)比较多，如何解决？"></a>7、nginx到upstream这个网络出现问题出现502(Bad Gateway)比较多，如何解决？</h5><ul><li><p>php-fpm的进程是否启动 ,没启动肯定报这个错误</p></li><li><p> tcp连接数超过了fpm的进程数<code>netstat -altupn|grep EST|grep php|wc -l</code></p></li><li><p>FastCGI执行时间过长,根据实际情况调高以下参数值</p><ul><li>fastcgi_connect_timeout 300;</li><li>fastcgi_send_timeout 300;</li><li>fastcgi_read_timeout 300;</li></ul></li><li><p>FastCGI Buffer不够，nginx和apache一样，有前端缓冲限制，可以调整缓冲参数</p><ul><li>fastcgi_buffer_size 32k;</li><li>fastcgi_buffers 8 32k;</li></ul></li><li><p>Proxy Buffer不够，如果你用了Proxying，调整</p><ul><li><p>proxy_buffer_size 16k;</p></li><li><p>proxy_buffers 4 16k;</p></li></ul></li></ul><h5 id="8、nginx-504错误排查"><a href="#8、nginx-504错误排查" class="headerlink" title="8、nginx 504错误排查"></a>8、nginx 504错误排查</h5><p>504 Gateway Time-out的含义是所请求的网关没有请求到，简单来说就是没有请求到可以执行的PHP-CGI。</p><p>一般来说Nginx 502 Bad Gateway和php-fpm.conf的设置有关，而Nginx 504 Gateway Time-out则是与nginx.conf的设置有关</p><h5 id="9、nginx-400-错误排查"><a href="#9、nginx-400-错误排查" class="headerlink" title="9、nginx 400 错误排查"></a>9、nginx 400 错误排查</h5><blockquote><p>由于request header过大</p></blockquote><ul><li>不要在cookie里记录过多数据</li><li>调整在nginx.conf中的client_header_buffer_size(默认1k)</li><li>若cookie太大，可能还需要调整large_client_header_buffers(默认4k)，该参数说明如下：<ul><li>请求行如果超过buffer，就会报HTTP 414错误(URI Too Long)</li><li>nginx接受最长的HTTP头部大小必须比其中一个buffer大，否则就会报400的HTTP错误(Bad Request)</li></ul></li></ul><h5 id="10、事件驱动模型"><a href="#10、事件驱动模型" class="headerlink" title="10、事件驱动模型"></a>10、<strong>事件驱动模型</strong></h5><ul><li>select模型</li><li>poll模型</li><li>epoll模型。</li></ul><h5 id="11、nginx与apache的区别"><a href="#11、nginx与apache的区别" class="headerlink" title="11、nginx与apache的区别"></a>11、nginx与apache的区别</h5><ul><li>nginx<ul><li>轻量级，采用C进行编写，同样的web服务，会占用更少的内存及资源</li><li>抗并发</li><li>设计高度模块化，编写模块相对简单</li><li>配置简洁</li><li>一般用于处理静态文件，静态处理性能比apache高三倍以上</li><li>作为负载均衡服务器，支持7层负载均衡</li><li>反向代理服务器，而且可以作为非常优秀的邮件代理服务器</li><li>nginx启动特别容易, 并且几乎可以做到 7*24 不间断运行</li></ul></li><li>apache<ul><li>apache更为成熟，少bug ，nginx的bug相对较多</li><li>模块超多，基本想到的都可以找到</li><li>超稳定，一个进程死掉时，会影响到多个用户的使用，稳定性差</li><li>在处理动态请求有优势，nginx在这方面是鸡肋，一般动态请求要apache去做，nginx适合静态和反向</li></ul></li></ul><h5 id="12、nginx惊群问题"><a href="#12、nginx惊群问题" class="headerlink" title="12、nginx惊群问题"></a>12、nginx惊群问题</h5><p><strong>问题描述：</strong>在建立连接的时候，Nginx处于充分发挥多核CPU架构性能的考虑，使用了多个worker子进程监听相同端口的设计，这样多个子进程在accept建立新连接时会有争抢，这会带来著名的“惊群”问题，子进程数量越多越明显，这会造成系统性能的下降</p><p>一般情况下，有多少CPU核心就有配置多少个worker子进程。假设现在没有用户连入服务器，某一时刻恰好所有的子进程都休眠且等待新连接的系统调用（如epoll_wait），这时有一个用户向服务器发起了连接，内核在收到TCP的SYN包时，会激活所有的休眠worker子进程。最终只有最先开始执行accept的子进程可以成功建立新连接，而其他worker子进程都将accept失败。这些accept失败的子进程被内核唤醒是不必要的，他们被唤醒会的执行很可能是多余的，那么这一时刻他们占用了本不需要占用的资源，引发了不必要的进程切换，增加了系统开销。</p><p><strong>解决：</strong>Nginx规定了同一时刻只有唯一一个worker子进程监听web端口，这一就不会发生惊群了，此时新连接事件只能唤醒唯一的正在监听端口的worker子进程。基于这个原理，nginx就使用了一个<strong>共享锁</strong>来控制当前进程是否有权限将需要监听的端口添加到当前进程的epoll句柄中，也就是说，只有获取锁的进程才会监听目标端口。通过这种方式，就保证了每次事件发生时，只有一个worker进程会被触发</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Nginx%E7%AF%87/5.png" alt="title"></p><h5 id="13、nginx增加最大链接数量"><a href="#13、nginx增加最大链接数量" class="headerlink" title="13、nginx增加最大链接数量"></a>13、nginx增加最大链接数量</h5><p>一般来说nginx 配置文件中对优化比较有作用的为以下几项：</p><ul><li>worker_processes 8: nginx 进程数，建议按照cpu 数目来指定，一般为它的倍数 (如,2个四核的cpu计为8)</li><li>use epoll：使用epoll 的I/O 模型</li><li>worker_connections 65535：每个进程允许的最多连接数， 理论上每台nginx 服务器的最大连接数为worker_processes*worker_connections</li></ul><h5 id="14、nginx热更新"><a href="#14、nginx热更新" class="headerlink" title="14、nginx热更新"></a>14、nginx热更新</h5><blockquote><p>nginx -s reload</p></blockquote><p>-s 代表的是向主进程发送信号。其中信号有 4 个，stop, quit, reopen, reload</p><h4 id="2、服务注册与服务发现机制"><a href="#2、服务注册与服务发现机制" class="headerlink" title="2、服务注册与服务发现机制"></a>2、服务注册与服务发现机制</h4><h5 id="为什么需要服务注册与发现机制"><a href="#为什么需要服务注册与发现机制" class="headerlink" title="为什么需要服务注册与发现机制"></a>为什么需要服务注册与发现机制</h5><p>将一个大的单应用拆解成多个独立自治的小服务，如果在没有服务发现的机制下</p><h5 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h5><p>服务的消费者就需要有一个强大的服务发现机制，服务消费者使用这个机制获取服务提供者的网络信息。即使服务提供者的信息发生变化，服务消费者也无须修改配置文件。</p><p>在各个服务在启动时，<strong>将自己的网络地址等信息注册到服务发现组件</strong>中，服务发现组件会存储这些信息。<br>服务消费者可从服务发现组件中查询提供者到网络地址，并使用该地址调用服务提供者的接口。</p><p>各个服务与服务发现组件使用一定机制（例如<strong>心跳机制</strong>）通信。服务发现组件如果长时间无法与某微服务实例通信，就会注销该实例。<br>微服务网络地址发生变更时，会重新注册到微服务发现组件。</p><h4 id="3、Eureka"><a href="#3、Eureka" class="headerlink" title="3、Eureka"></a>3、Eureka</h4><blockquote><p>保证AP，Zookeeper是CP</p></blockquote><p><strong>组成</strong></p><ul><li><p>Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样EurekaServer中的服务<strong>注册表</strong>中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p></li><li><p>Eureka Client是一个java客户端，用于简化与Eureka Server的交互，客户端同时也就是一个内置的、使用轮询(round-robin)负载算法的负载均衡器。</p></li></ul><p><strong>原理</strong></p><ul><li>Eureka Server 提供服务发现的能力，各个微服务启动时，会向 Eureka Server 注册自己的信息，Eureka Server 会存储这些信息</li><li>Eureka Client 是一个 Java 客户端，用于简化与 Eureka Server 的交互</li><li>微服务启动后会周期性（默认30秒）的向 Eureka Server 发送心跳以续约自己的“租期“</li><li>如果 Eureka Server 在一定时间内没有接收到某个服务实例到心跳，那么会注销该实例</li><li>默认情况下，Eureka Server 同时也是 Eureka Client，多个 Eureka Server 实例之间是通过复制的方式来实现服务注册表中数据的同步</li><li>Eureka Client 会缓存注册表中的信息。无须微服务每次请求都查询 Eureka Server</li></ul><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7%E7%AF%87/3.png" alt="title"></p><h4 id="4、ServiceMesh"><a href="#4、ServiceMesh" class="headerlink" title="4、ServiceMesh"></a>4、ServiceMesh</h4><ul><li>Connect</li><li>secure</li><li>control</li><li>observe services</li></ul><blockquote><p>微服务化、多语言和容器化发展的趋势，企业迫切需要一种轻量级的服务发现机制</p><p>Nginx(重)、Eureka(只适合单语言)</p></blockquote><ul><li>业务代码进程(相当于主驾驶)共享一个代理(相当于边车, configMap挂载)</li><li>代理负责服务发现和负载均衡，还负责动态路由、容错限流、监控度量和安全日志等功能，这些功能是具体业务无关的，属于跨横切面关注点(Cross-Cutting Concerns)范畴</li><li>ServiceMesh比较正式的术语也叫数据面板(DataPlane)，</li><li>数据面板对应的还有一个独立部署的控制面板(ControlPlane)，用来集中配置和管理数据面板，也可以对接各种服务发现机制(如K8S服务发现)</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Nginx%E7%AF%87/3.png" alt="title"></p><p><strong>Istio</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Nginx%E7%AF%87/4.png" alt="title"></p><ul><li><p>Istio-Manager：负责服务发现，路由分流，熔断限流等配置数据的管理和下发</p></li><li><p>Mixer：负责收集代理上采集的度量数据，进行集中监控</p></li><li><p>Istio-Auth：负责安全控制数据的管理和下发</p></li><li><p>Envoy是目前Istio主力支持的数据面板代理，其它主流代理如nginx/kong等也正在陆续加入这个阵营</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构篇-2021春招准备</title>
    <link href="/2021/02/18/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/"/>
    <url>/2021/02/18/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、Hash原理"><a href="#1、Hash原理" class="headerlink" title="1、Hash原理"></a>1、Hash原理</h4><blockquote><p>Hash算法<code>较多的应用在数据存储和查找领域</code>，最经典的就是<code>Hash表</code>，它的查询效率非常高，如果哈希算法设计的好，那么Hash表的数据查询时间复杂度可以接近于O(1)</p></blockquote><p><strong>Hash算法使用示例</strong></p><blockquote><p>提供一组数据1，5，7，6，3，4，8，对这组数据进行存储，然后随便给定一个数n，请你判断n是否存在于刚才的数据集中？</p></blockquote><ul><li><code>顺序查找法</code>：这种方式就是通过循环来完成，比较原始，效率也不高</li><li><code>二分查找法</code>：排序之后折半查找，相对于顺序查找法会提高一些效率，但是效率也并不是特别好</li><li><code>直接寻址法</code>：直接把数据和数组的下标绑定到一起，查找的时候，直接array[n]就取出了数据<ul><li><strong>优点：</strong> 速度快，一次查找得到结果</li><li><strong>缺点：</strong> <ul><li><code>浪费空间</code>（数据：1，3，7，12306）</li><li><code>单个索引上存储内容有限</code>（数据：1，1，2，12，12，1，1）</li></ul></li></ul></li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/1.png" alt="title"></p><ul><li><code>除留取余法</code>: 根据求模余数确定存储位置的下标</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/2.png" alt="title"></p><ul><li><code>开放寻址法</code>: 如果数据是 1，6，7，8 采用<code>除留取余法</code>则会造成hash冲突，此时可以采用<code>开放寻址法</code>，比如：1放进去了，6再来的时候，向前或者向后找空闲位置存放<ul><li><strong>缺点：</strong> 如果数组长度定义好了，比如10，由于数组长度不能扩展，来了11个数据，不管Hash冲突不冲突，肯定存不下这么多数据</li></ul></li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/3.png" alt="title"></p><ul><li><code>拉链法</code>: 数据长度定义好了，怎么存储更多内容呢，算好Hash值，在数组元素存储位置放了一个链表</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/4.png" alt="title"></p><p><strong>Hash算法应用</strong></p><ul><li>分布式集群架构Redis<ul><li>以分布式内存数据库Redis为例，集群中有redis1，redis2，redis3三台Redis服务器，那么，在进行数据存储时，&lt;key1,value1&gt; 数据存储，针对key进行hash处理 hash(key)%3=index，使用余数index锁定存储的具体服务器节点</li></ul></li><li>Hadoop</li><li>ElasticSearch</li><li>Mysql分库分表</li><li>Nginx负载均衡</li></ul><h4 id="2、一致性Hash"><a href="#2、一致性Hash" class="headerlink" title="2、一致性Hash"></a>2、一致性Hash</h4><p><strong>原因</strong>: hash一般是将一个大数字分散到不同的桶里面，如果两个桶则%2。若扩容新桶所有的数字都需要%3，所有的数字分布都变了，即hash表每次扩容或收缩都会导致所有条目重新计算。</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/10.jpg" alt="title"></p><p><strong>方案:</strong> 一致性hash中假想有很多桶，比如 7 个，但一开始真实还是只有两个桶，编号是 3 和 6。哈希算法还是同样的取模，只不过现在分桶分到的很可能是不存在的桶，那么就往下找找到第一个真实存在的桶放进去。这样 2 和 3 都被分到了编号为 3 的桶， 4 和 5 被分到了编号为 6 的桶。</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/11.jpg" alt="title"></p><p>这时候再添加一个新的桶，编号是 4，取模方法不变还是模 7。因为 3 号桶里都是取模小于等于 3 的，4 号桶只需要从 6 号桶里拿走属于它的数字就可以了，这种情况下只需要调整一个桶的数字就可分成了重新分布。</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/12.jpg" alt="title"></p><p><strong>升级:</strong> 这里还有个小问题要是编号为 6 的机桶下线了，它没有后一个桶了，数据该咋办？为了解决这个问题，实现上通常把哈希空间做成环状，</p><p>**时间复杂度: **</p><ul><li>普通的哈希查询一次哈希计算就可以找到对应的桶了，算法时间复杂度是 O(1)，</li><li>一致性哈希需要将排好序的桶组成一个链表，然后一路找下去，k 个桶查询时间复杂度是 O(k)。可以用跳转表进行一个快速的跳转实现 O(logk) 的时间复杂度。</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/13.jpg" alt="title"></p><p>在这个跳转表中，每个桶记录距离自己 1，2，4 距离的数字所存的桶，这样不管查询落在哪个节点上，对整个哈希环上任意的查询一次都可以至少跳过一半的查询空间，这样递归下去很快就可以定位到数据是存在哪个桶上。</p><h4 id="3、bit单位换算"><a href="#3、bit单位换算" class="headerlink" title="3、bit单位换算"></a>3、bit单位换算</h4><ul><li>1B=1字节=8bit（比特）。</li><li>1KB=1024B（KB：千节字，也写作“K”，可读作“K”）。</li><li>1MB（1M）=1024KB（MB：兆字节，也可写作“M”，读作“兆”）。</li><li>1GB（1G）=1024MB=1024兆(GB：吉字节，也可写作“G”，读作“G”或“吉”)。</li><li>1TB=1024GB（TB：万亿字节，读作“TB”或“千吉”）。</li></ul><h4 id="4、常见排序算法的空间时间复杂度"><a href="#4、常见排序算法的空间时间复杂度" class="headerlink" title="4、常见排序算法的空间时间复杂度"></a>4、常见排序算法的空间时间复杂度</h4><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/5.png" alt="title"></p><ul><li>希尔排序又叫“缩小增量排序”，先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为d1的倍数的记录放在同一个组中。先在各组内进行直接插入排序，然后取第二个增量d2。其是插入排序改良的算法，希尔排序步长从大到小调整，第一次循环后面元素逐个和前面元素按间隔步长进行比较并交换，直至步长为1，步长选择是关键。</li></ul><h4 id="5、哈夫曼编码"><a href="#5、哈夫曼编码" class="headerlink" title="5、哈夫曼编码"></a>5、哈夫曼编码</h4><blockquote><p>数据压缩技术，编码思想：根据字符出现的概率大小进行编码，出现概率高的字符使用较短的编码，出现概率低的字符使用较长的编码。</p></blockquote><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/6.jpg" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/7.jpg" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/8.jpg" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/9.jpg" alt="title"></p><h4 id="6、树"><a href="#6、树" class="headerlink" title="6、树"></a>6、树</h4><h5 id="平衡二叉树-AVL"><a href="#平衡二叉树-AVL" class="headerlink" title="平衡二叉树(AVL):"></a><strong>平衡二叉树</strong>(AVL):</h5><blockquote><p>任何一个节点的左右子树的高度相差不超过1，又被称为AVL树</p><p>查找效率/高度为O（logn）。插入和删除节点可能需要做一次旋转动作</p></blockquote><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/14.jpg" alt="title"></p><p><strong>旋转</strong>: 增加、删除破坏其平衡性要进行旋转</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/15.jpg" alt="title"></p><p><strong>左旋</strong>:节点 66 的左子树高度为 1，右子树高度为 3，此时平衡因子为 -2。为保证树的平衡，此时需要对节点 66 做出旋转，因为<strong>右子树高度高于左子树</strong>，对节点进行<strong>左旋</strong>操作，流程如下：</p><ul><li>节点的右孩子替代此节点位置 </li><li>右孩子的左子树变为该节点的右子树</li><li>节点本身变为右孩子的左子树</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/16.gif" alt="title"></p><p><strong>右旋</strong>: </p><ul><li>节点的左孩子代表此节点</li><li>节点的左孩子的右子树变为节点的左子树</li><li>将此节点作为左孩子节点的右子树</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/17.gif" alt="title"></p><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树:"></a>红黑树:</h5><blockquote><p>它的最坏情况运行时间也是非常良好的，并且在实践中是高效的： 它可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目</p><p>查找的时间复杂度为2log(n+1)</p><p>插入和删除的时间为O(logn)</p></blockquote><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/18.jpg" alt="title"></p><ul><li>每个节点或者是黑色，或者是红色。</li><li>根节点是黑色。</li><li>每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</li><li>如果一个节点是红色的，则它的子节点必须是黑色的。</li><li>从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。<ul><li>确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树</li></ul></li></ul><p><strong>定理:</strong></p><ul><li>一棵含有n个节点的红黑树的高度至多为2log(n+1).</li></ul><p><strong>左旋:</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/19.png" alt="title"></p><p><strong>右旋:</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/20.png" alt="title"></p><p><strong>应用</strong></p><ul><li>set/map：红黑树</li><li>linux调度: 红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况在数据较小，可以完全放到内存中时，红黑树的时间复杂度比B树低</li><li><strong>Trie树(字典树):</strong> 用在统计和排序大量字符串，如自动机。</li></ul><p><strong>AVL树和RB树之间的区别:</strong></p><ul><li>AVL树的结构相较于RB树来说更加平衡，所以在<strong>插入或者删除</strong>一个node的时候更容易引起树的不平衡，导致更高频率的rebalance操作,RB树只需做有限的旋转操作和变色操作即可，所以在插入和删除节点的时候使用RB树效率更高</li><li><strong>查找效率</strong>方面，RB树是黑色节点平衡的，所以平衡度没有AVL高，查找的次数上可能会比AVL更多一些</li><li>红黑树的查询性能略逊色于平衡二叉树，但是在相同的条件下也最多多一次比较，但是红黑树在插入和删除上是完胜平衡二叉树的，平衡二叉树每加入或删除一个节点都需要耗费大量的平衡计算开销；而红黑树在节点旋转和颜色变换上付出的开销是要远小于AVL的。</li></ul><p><strong>为什么说红黑树是“近似平衡”的</strong></p><ul><li>对于AVL树，任何一个节点的两个子树高度差不会超过1；</li><li>对于红黑树，则是不会相差两倍以上，从而在这样的树中进行搜索的话即便在最坏情况下也会很高效，这就足够了。</li></ul><h5 id="B树："><a href="#B树：" class="headerlink" title="B树："></a><strong>B树：</strong></h5><ul><li>B树是所有节点的平衡因子均等于0的多路查找树</li><li>AVL树是平衡因子不大于 1 的二路查找树</li><li>从磁盘查找的效率来讲，查找、插入和删除操作的时间复杂度都要小于二叉树</li><li>B+树是B树的变种树，有n棵子树的节点中含有n个关键字，每个关键字不保存数据，只用来索引，数据都保存在叶子节点。是为文件系统而生的。且叶子结点用链表串连</li><li>B树应用文件系统中，B+树用于索引</li></ul><p><strong>B+树</strong></p><ul><li>节点存的不一样； b+tree 只有叶子节点存数据，中间节点存key值</li><li>叶子节点顺序查询</li></ul><p><strong>B+树的插入过程</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/23.png" alt="title"></p><p><strong>二叉堆</strong></p><ul><li><p>二叉堆本质上是一种完全二叉树</p></li><li><p>最大堆：任何一个父节点的值，都<strong>大于等于</strong>它左右孩子节点的值</p></li><li><p>最小堆：任何一个父节点的值，都<strong>小于等于</strong>它左右孩子节点的值</p></li><li><p>堆（heap），堆通常可以看作为一棵树，但这棵树得满足以下条件：</p><ul><li>堆中任意节点的值总是不大于（不小于）其子节点的值；</li><li>堆总是一颗完全树</li><li>更简便的存储方式（数组）：<ul><li>索引为 i 的左孩子的索引为（2<em>i + 1）</em></li><li><em>索引为 i 的右孩子的索引为 （2</em>i + 2）</li><li>索引为 i 的父节点的索引为 （i - 1）/ 2（计算机里取整）</li></ul></li></ul></li></ul><h4 id="7、KMP算法"><a href="#7、KMP算法" class="headerlink" title="7、KMP算法"></a>7、KMP算法</h4><p>KMP算法是用来进行字符串匹配查找的，比如在字符串1中查找是否包含字符串2。核心是先求出Next数组。什么是next数组？我的理解是：</p><blockquote><p>next数组表示的是待查找的字符串的<strong>最大公共前后缀</strong>中的公共前缀的最后一个字符的下标，知道这个下标，就可以知道当匹配目标字符串出错时，目标字符串的指针怎么回退，而查找段落的指针不用回退，这样遍历一遍查找段落，就可以知道是否存在目标字符串，时间复杂度为O（n）</p></blockquote><p>例如，求目标字符串ababc的next数组，下标从0开始。</p><ul><li><p>比如next[2]，2位置为a，则next[2]表示0位置的a（因为aba的最长公共前缀为a），next[2] =0。</p></li><li><p>比如next[3]，3位置为b，则next[3]表示1位置的b（因为abab的最长公共前缀为ab), next[3] = 1。</p></li><li><p>比如next[4]，由于4位置为c，而ababc没有公共前后缀，则next[4]=-1。</p></li></ul><h4 id="8、进制转换"><a href="#8、进制转换" class="headerlink" title="8、进制转换"></a>8、进制转换</h4><p><strong>除留余数法</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%AF%87/21.png" alt="title"></p><h4 id="9、char、int、long、float、double所占字节数"><a href="#9、char、int、long、float、double所占字节数" class="headerlink" title="9、char、int、long、float、double所占字节数"></a>9、char、int、long、float、double所占字节数</h4><table><thead><tr><th align="center"></th><th align="center">32位</th><th align="center">64位</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">int</td><td align="center">4</td><td align="center">大多数为4、少数为8</td></tr><tr><td align="center">long</td><td align="center">4</td><td align="center">8</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">Double</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">指针</td><td align="center">4</td><td align="center">8</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>项目篇-2021春招准备</title>
    <link href="/2021/02/16/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/"/>
    <url>/2021/02/16/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="通信软件系统的微服务架构提升"><a href="#通信软件系统的微服务架构提升" class="headerlink" title="通信软件系统的微服务架构提升"></a>通信软件系统的微服务架构提升</h3><h4 id="1、可维护性"><a href="#1、可维护性" class="headerlink" title="1、可维护性"></a>1、可维护性</h4><p><strong>原因:</strong> 据调查显示，超过 50%的软件成本用于软件的维护，因此提高可维护性可以在很大程度上降低软件成本并提高软件的可用性。对可维护性 进行有效评估有助于开发人员估算软件开发及维护的成本，以便于决定对软件组件的重用，修改或重新开发。</p><p><strong>示例指标：</strong></p><ul><li>大小：<ul><li>微服务接口数量</li><li>代码行数</li><li>微服务组成元素数量</li></ul></li><li>内聚：<ul><li>微服务接口数据内聚性: 通过度量其微服务公开的接口中所传入的参数的相似度来量化给定微服务的内聚性</li></ul></li><li>耦合：<ul><li>微服务内部元素耦合：计算的是微服务内部各个模块之间的依赖关系的总和，依赖关系包括传入和传出</li></ul></li><li>复杂度：<ul><li>微服务元素相互连通数量: 对于每个微服务我们可以将其组成的模块及依赖关系构建成一个有向无环图，𝐌𝐒𝐄𝐂𝐏𝐂计算的是这个图中所有点通过直接或间接依赖所能连通到其他点的总数，总数越多代表可能出现的数据流向越多， 修改时所影响的模块越多，微服务就越复杂</li><li>微服务数据结构数量: 数据结构和微服务所实现的功能直接相关。</li></ul></li></ul><p><strong>焦点小组选择标准：</strong></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/2.png" alt="title"></p><h4 id="2、架构恢复"><a href="#2、架构恢复" class="headerlink" title="2、架构恢复"></a>2、架构恢复</h4><h4 id="3、架构异味"><a href="#3、架构异味" class="headerlink" title="3、架构异味"></a>3、架构异味</h4><p><strong>原因：</strong>Software House的调研指出全世界的软件开发人员似乎对构建微服务感到满意。另一方面，对于许多微服务开发人员来说，维护和调试似乎有点问题。在过去的2或3年中，越来越多的开发团队对基于微服务的项目失去了控制。开发过程中引入了越来越多的架构异味。</p><p><strong>微服务架构抽象概览：</strong></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/1.png" alt="title"></p><p><strong>示例指标：</strong></p><ul><li>环依赖</li><li>枢纽型依赖</li><li>模块冲突</li><li>未使用接口</li><li>模糊接口</li></ul><p><strong>焦点小组选择标准：</strong></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/3.png" alt="title"></p><h3 id="基于软件过程的代码评审质量评估"><a href="#基于软件过程的代码评审质量评估" class="headerlink" title="基于软件过程的代码评审质量评估"></a>基于软件过程的代码评审质量评估</h3><h4 id="1、调研"><a href="#1、调研" class="headerlink" title="1、调研"></a>1、调研</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/7.png" alt="title"></p><h4 id="2、评审质量"><a href="#2、评审质量" class="headerlink" title="2、评审质量"></a>2、评审质量</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/4.png" alt="title"></p><h4 id="3、意见质量"><a href="#3、意见质量" class="headerlink" title="3、意见质量"></a>3、意见质量</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/5.png" alt="title"></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/6.png" alt="title"></p><p>本项目建立的评审意见质量评估体系考虑维度分别是：</p><ul><li>情感倾向；</li><li>指出问题；</li><li>传授知识。</li></ul><p>具体地，每个质量维度的评估标准和典型案例如下：</p><ul><li><p><strong>优秀：</strong>有效指出问题AND非消极情感AND传播背景/经验/知识 </p></li><li><p><strong>良好：</strong>有效指出问题AND非消极情感AND未传播背景/经验/知识 </p></li><li><p><strong>一般：</strong>(有效指出问题AND消极情感) OR (仅提出质疑 AND 非消极情感)</p></li><li><p><strong>较差：</strong>(仅提出质疑AND消极情感) OR未有效指出问题</p></li></ul><h4 id="4、最佳实践"><a href="#4、最佳实践" class="headerlink" title="4、最佳实践"></a>4、最佳实践</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E9%A1%B9%E7%9B%AE%E7%AF%87/8.png" alt="title"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络篇-2021春招准备</title>
    <link href="/2021/02/09/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/"/>
    <url>/2021/02/09/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、OSI七层与TCP-IP五层网络架构"><a href="#1、OSI七层与TCP-IP五层网络架构" class="headerlink" title="1、OSI七层与TCP/IP五层网络架构"></a>1、OSI七层与TCP/IP五层网络架构</h4><ul><li>应用层: 文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</li><li>表示层:数据格式化，代码转换，数据加密 没有协议</li><li>会话层: 解除或建立与别的接点的联系 没有协议</li><li>传输层: 提供端对端的接口 TCP，UDP</li><li>网络层: 传输数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP，ARP(IP-&gt;MAC)，RAPR</li><li>ICMP协议主要用来检测网络通信故障和实现链路追踪，最典型的应用就是PING和tracerooute</li><li>数据链路层: 传输数据帧 SLIP，CSLIP，PPP，ARP，RARP，MTU</li><li>物理层: 二进制比特位的传输    ISO2110，IEEE802，IEEE802.2</li></ul><h4 id="2、IPv4与IPv6的区别"><a href="#2、IPv4与IPv6的区别" class="headerlink" title="2、IPv4与IPv6的区别"></a>2、IPv4与IPv6的区别</h4><ul><li>IPv4协议具有32位（4字节）地址长度；点分十进制<ul><li>内网地址分为A，B和C类<ul><li>A类地址范围：10.0.0.0 - 10.255.255.255</li><li>B类地址范围：172.16.0.0 - 172.31.255.255</li><li>C类地址范围：192.168.0.0 - 192.168.255.255</li></ul></li></ul></li><li>IPv6协议具有128位（16字节）地址长度；冒分十六进制</li></ul><h4 id="3、TCP三次握手四次挥手"><a href="#3、TCP三次握手四次挥手" class="headerlink" title="3、TCP三次握手四次挥手"></a>3、TCP三次握手四次挥手</h4><p><strong>数据格式:</strong></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/1.jpg" alt="title"></p><ul><li>seq：序列号，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号</li><li>ack：确认号，待收到对方下一个报文段的第一个数据字节的序号</li><li>确认ACK标志位：ACK=1时，确认号字段才有效</li><li>同步SYN标志位：连接建立时用于同步序号。当SYN=1，ACK=0时表示连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。</li><li>终止FIN标志位：用来释放一个连接。FIN=1表示此报文段的发送方的数据已经发送完毕，并释放连接。</li></ul><p><strong>三次握手过程:</strong></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/2.png" alt="title"></p><ul><li><p>发送方: 打开SYN=1，自带序列号seq-x希望建立链接</p></li><li><p>接收方：打开SYN=1，自带序列号seq-y。并且确认接收到了seq-x，并希望收到ack=seq-(x+1)，ACK=1时，ack才有效</p></li><li><p>发送方：自带序列号seq-(x+1)。确认接收到了seq-y，并希望收到ack=seq-(y+1)，ACK=1时，ack才有效</p></li></ul><p><strong>四次挥手过程</strong></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/3.png" alt="title"></p><ul><li><p>发送方：FIN=1，自带序列号seq-u。进入FIN-WAIT-1（终止等待1）状态。FIN报文段即使不携带数据，也要消耗一个序号。</p></li><li><p>接收方：自带序列号seq-v，确认接收到了seq-u, 并希望收到ack=seq-(u+1)，ACK=1时，ack才有效。服务端就入了CLOSE-WAIT（关闭等待）状态。发送方收到变为FIN-WAIT-2</p></li><li><p><em>接收方将数据发送完成</em></p></li><li><p>接收方：FIN=1，自带序列号seq-w，确认接收到了seq-u, 并希望收到ack=seq-(u+1)，ACK=1时，ack才有效。变为LAST-ACK（最后确认）状态</p></li><li><p>发送方：自带序列号seq-(u+1)，确认接收到了seq-w, 并希望收到ack=seq-(w+1)，ACK=1时，ack才有效。发送方变为TIME_WAIT状态</p></li></ul><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/5.png" alt="title"></p><p><strong>问题1:</strong> 为什么连接的时候是三次握手，关闭的时候却是四次握手？</p><blockquote><p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。<strong>我收到了，你发数据吧</strong></p><p>关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文+ACK。故需要四步握手。<strong>我收到了，等我发完数据，我关闭了</strong></p></blockquote><p><strong>问题2:</strong> 为什么不能用两次握手进行连接？</p><blockquote><p>3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。</p><p>两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，<strong>C甚至怀疑S是否收到自己的连接请求分组</strong>。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</p></blockquote><p><strong>问题3:</strong> 为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE？</p><blockquote><p>为了保证A发送的最后一个ACK报文段能够到达B </p><p>防止已经断开的连接1中在链路中残留的FIN包终止掉新的连接2 </p><p>防止链路上已经关闭的连接的残余数据包干扰正常的数据包，造成数据流不正常</p><p>可以看出：接收方结束TCP连接的时间比发送方早一点，因为接收方收到确认就断开连接了，而A还得等待2MSL。</p></blockquote><p><strong>问题4:</strong> TIME_WAIT会带来哪些问题？</p><blockquote><p>(1) 作为服务器，短时间内关闭了大量的Client连接，就会造成服务器上出现大量的TIME_WAIT连接，占据大量的tuple，严重消耗着服务器的资源；<br>(2) 作为客户端，短时间内大量的短连接，会大量消耗Client机器的端口，毕竟端口只有65535个，端口被耗尽了，后续就无法再发起新的连接了</p></blockquote><p>**问题5: **服务端time_wait过多的处理办法</p><blockquote><p>net.ipv4.tcp_tw_reuse=1  （/etc/sysctl.conf）<br>表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；该文件表示是否允许重新应用处于TIME-WAIT状态的socket用于新的TCP连接(这个对快速重启动某些服务,而启动后提示端口已经被使用的情形非常有帮助)</p><p>net.ipv4.tcp_tw_recycle=1<br>表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭</p><p>net.ipv4.tcp_timestamps=1  表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭</p></blockquote><h5 id="问题6-ACK攻击"><a href="#问题6-ACK攻击" class="headerlink" title="问题6: ACK攻击"></a>问题6: ACK攻击</h5><blockquote><p>ACK Flooding攻击是在TCP连接建立之后，所有的数据传输TCP报文都是带有ACK标志位的，主机在接收到一个带有ACK标志位的数据包的时候，需要检查该数据包所表示的连接四元组是否存在，如果存在则检查该数据包所表示的状态是否合法，然后再向应用层传递该数据包。</p><p>如果在检查中发现该数据包不合法，例如该数据包所指向的目的端口在本机并未开放，则主机操作系统协议栈会回应RST包告诉对方此端口不存在。</p><p>当发包速率很大的时候，主机操作系统将耗费大量的精力接收报文、判断状态，同时要主动回应RST报文，正常的数据包就可能无法得到及时的处理。</p></blockquote><h5 id="问题6-time-wait为什么要2倍MSL"><a href="#问题6-time-wait为什么要2倍MSL" class="headerlink" title="问题6: time_wait为什么要2倍MSL"></a>问题6: time_wait为什么要2倍MSL</h5><blockquote><p>报文一来一回的时间</p></blockquote><h4 id="4、HTTP"><a href="#4、HTTP" class="headerlink" title="4、HTTP"></a>4、HTTP</h4><blockquote><p>HTTP协议是超文本传输协议（默认端口80）</p></blockquote><h5 id="HTTP特点"><a href="#HTTP特点" class="headerlink" title="HTTP特点:"></a><strong>HTTP特点:</strong></h5><ul><li>无状态(无连接)：HTTP 是一个无状态协议，这意味着每个请求都是独立的。<ul><li>请求时建连接、请求完释放连接，以尽快将资源释放出来服务其他客户端。但每次都要建立TCP请求，效率低</li><li>Keep-Alive 被提出用来解决这效率低的问题。就是长连接。</li></ul></li></ul><h5 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程:"></a><strong>请求过程:</strong></h5><ul><li>浏览器发送url-http请求，根据域名解析出IP（浏览器缓冲-&gt;本机-&gt;DNS服务器）</li><li>浏览器与WEB服务器建立TCP请求，发起http请求，解析那个路径下那个资源</li><li>WEB服务器响应HTTP请求，80端口，返回html代码</li><li>浏览器解析html代码，关闭TCP连接</li></ul><h5 id="响应码"><a href="#响应码" class="headerlink" title="响应码:"></a><strong>响应码:</strong></h5><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/4.png" alt="title"></p><p><a href="http://www.cyc2018.xyz/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/HTTP/HTTP.html#%E4%B8%80-%E3%80%81%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5"> HTTP</a></p><h5 id="URI与URL"><a href="#URI与URL" class="headerlink" title="URI与URL"></a>URI与URL</h5><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p><ul><li>URI：Uniform Resource Identifier 统一资源<strong>标识</strong>符</li><li>URL：Uniform Resource Location 统一资源<strong>定位</strong>符</li></ul><p>URI 是用来标示 一个具体的资源的，我们可以通过 URI 知道一个资源是什么</p><p>URL 则是用来定位具体的资源的，标示了一个具体的资源位置。互联网上的每个文件都有一个唯一的URL</p><h5 id="HTTP报文组成"><a href="#HTTP报文组成" class="headerlink" title="HTTP报文组成:"></a>HTTP报文组成:</h5><ul><li>请求头<ul><li>请求行：包括请求方法、URL、协议/版本</li><li>请求头(Request Header)<ul><li>Connection</li><li>Origin</li><li>User-Agent</li><li>cookie</li><li>content-type</li><li>Range: bytes=5000-10000 指定资源的Byte范围，范围请求</li></ul></li></ul></li><li>请求正文</li><li>响应报文<ul><li>状态行</li><li>响应头<ul><li>Date</li><li>Connect-Type</li><li>Connection</li><li>content-length：获取文件的总大小，然后读Stream，每读一段，就计算出当前读的总大小，除以content-length，用来显示进度条</li></ul></li><li>响应正文</li></ul></li></ul><h5 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h5><ul><li>get</li><li>post</li><li>put</li><li>delete</li></ul><p><strong>get post区别</strong></p><ul><li>都包含请求头请求行，post多了请求body。</li><li>get多用来查询，请求参数放在url中，不会对服务器上的内容产生作用。post用来提交，如把账号密码放入body中。</li><li>GET是直接添加到URL后面的，直接就可以在URL中看到内容，而POST是放在报文内部的，用户无法直接看到。</li><li>GET提交的数据长度是有限制的，因为URL长度有限制，具体的长度限制视浏览器而定。而POST没有。</li></ul><h5 id="http-1-0-1-1-2-0-3-0的区别"><a href="#http-1-0-1-1-2-0-3-0的区别" class="headerlink" title="http 1.0/1.1/2.0/3.0的区别"></a>http 1.0/1.1/2.0/3.0的区别</h5><ul><li><p>http 1.0</p><ul><li>短连接：每次发送请求都要重新建立tcp请求，即三次握手，非常浪费性能</li><li>无host头域，也就是http请求头里的host，</li><li>不允许断点续传，而且不能只传输对象的一部分，要求传输整个对象</li></ul></li><li><p>http 1.1</p><ul><li>长连接，流水线，使用connection:keep-alive使用长连接，与http 2.0不同的是，</li><li>host头域</li><li>由于长连接会给服务器造成压力</li></ul></li><li><p>HTTP 2.0</p><ul><li><p>头部压缩，双方各自维护一个header的索引表，使得不需要直接发送值，通过发送key缩减头部大小</p><ul><li>在HTTP1.1中，HTTP请求和响应都是由状态行、请求/响应头部、消息主体三部分组成。一般而言，消息主体都会经过gzip压缩，或者本身传输的就是压缩过后的二进制文件，但状态行和头部却没有经过任何压缩，直接以纯文本传输。随着Web功能越来越复杂，每个页面产生的请求数也越来越多，导致消耗在头部的流量越来越多，尤其是每次都要传输UserAgent、Cookie这类不会频繁变动的内容，完全是一种浪费。</li><li>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</li></ul></li><li><p>多路复用，使用多个stream，每个stream又分帧传输，使得一个tcp连接能够处理多个http请求</p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/11.png" alt="title"></p></li><li><p>可以使用服务端推送 </p><ul><li>在HTTP1.1中这些资源每一个都必须明确地请求。这是一个很慢的过程。浏览器从获取HTML开始，然后在它解析和评估页面的时候，增量地获取更多的资源。因为服务器必须等待浏览器做每一个请求，网络经常是空闲的和未充分使用的。</li><li>为了改善延迟，HTTP2.0引入了server push，它允许服务端推送资源给浏览器，在浏览器明确地请求之前，免得客户端再次创建连接发送请求到服务器端获取。这样客户端可以直接从本地加载这些资源，不用再通过网络</li></ul><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/12.png" alt="title"></p></li></ul></li><li><p>HTTP 3.0</p><ul><li>基于google的QUIC协议，而quic协议是使用udp实现的</li><li>减少了tcp三次握手时间，以及tls握手时间</li><li>解决了http 2.0中前一个stream丢包导致后一个stream被阻塞的问题</li><li>优化了重传策略，重传包和原包的编号不同，降低后续重传计算的消耗</li><li>连接迁移，不再用tcp四元组确定一个连接，而是用一个64位随机数来确定这个连接</li><li>更合适的流量控制</li></ul></li></ul><h4 id="5、Https"><a href="#5、Https" class="headerlink" title="5、Https"></a>5、Https</h4><h5 id="1、加密通信："><a href="#1、加密通信：" class="headerlink" title="1、加密通信："></a>1、加密通信：</h5><p>为了安全性，双方可以使用对称加密的方式key进行信息交流，但是这种方式对称加密秘钥也会被拦截，也不够安全，进而还是存在被中间人攻击风险；<br>于是人们又想出来另外一种方式，使用非对称加密的方式；使用公钥/私钥加解密；通信方A发起通信并携带自己的公钥，接收方B通过公钥来加密对称秘钥；然后发送给发起方A；A通过私钥解密；双发接下来通过对称秘钥来进行加密通信；但是这种方式还是会存在一种安全性；中间人虽然不知道发起方A的私钥，但是可以做到偷天换日，将拦截发起方的公钥key;并将自己生成的一对公/私钥的公钥发送给B；接收方B并不知道公钥已经被偷偷换过；按照之前的流程，B通过公钥加密自己生成的对称加密秘钥key2;发送给A；<br>这次通信再次被中间人拦截，尽管后面的通信，两者还是用key2通信，但是中间人已经掌握了Key2;可以进行轻松的加解密；还是存在被中间人攻击风险；</p><h5 id="2、解决困境：权威的证书颁发机构CA来解决；"><a href="#2、解决困境：权威的证书颁发机构CA来解决；" class="headerlink" title="2、解决困境：权威的证书颁发机构CA来解决；"></a>2、解决困境：权威的证书颁发机构CA来解决；</h5><ul><li>制作证书：作为服务端的A，首先把自己的公钥key1发给证书颁发机构，向证书颁发机构进行申请证书；证书颁发机构有一套自己的公私钥，CA通过自己的私钥来加密key1,并且通过服务端网址等信息生成一个证书签名，证书签名同样使用机构的私钥进行加密；制作完成后，机构将证书发给A；</li><li>校验证书真伪：当B向服务端A发起请求通信的时候，A不再直接返回自己的公钥，而是返回一个证书；<br>说明：各大浏览器和操作系统已经维护了所有的权威证书机构的名称和公钥。B只需要知道是哪个权威机构发的证书，使用对应的机构公钥，就可以解密出证书签名；接下来，B使用同样的规则，生成自己的证书签名，如果两个签名是一致的，说明证书是有效的；<br>签名验证成功后，B就可以再次利用机构的公钥，解密出A的公钥key1;接下来的操作，就是和之前一样的流程了；</li><li>中间人是否会拦截发送假证书到B呢？<br>因为证书的签名是由服务器端网址等信息生成的，并且通过第三方机构的私钥加密中间人无法篡改； 所以最关键的问题是证书签名的真伪；</li><li>HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。</li></ul><h5 id="3、SSL加密的过程"><a href="#3、SSL加密的过程" class="headerlink" title="3、SSL加密的过程"></a>3、SSL加密的过程</h5><ul><li>对称加密: 使用相同的密钥进行加密解密，效率高</li><li>非对称加密: 客户端(公钥)加密，服务器(私钥)解密，安全</li><li>非对称加密+对称加密: 非对称加密过程保护对称密钥的交换，然后采用对称密钥进行加密通信</li><li>CA认证: 在SSL加密过程，客户端必须能够验证自己收到的公钥的正确性(防止被第三方进行通信劫持)，而这个验证通过CA认证，数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场上</li></ul><h5 id="4、加密算法"><a href="#4、加密算法" class="headerlink" title="4、加密算法"></a>4、加密算法</h5><ul><li><p>对称加密算法</p><ul><li>DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合。</li><li>3DES（Triple DES）：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高。</li><li>AES（Advanced Encryption Standard）：高级加密标准，是下一代的加密算法标准，速度快，安全级别高；</li></ul></li><li><p>非对称算法</p><ul><li>RSA：由 RSA 公司发明，是一个支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的；</li><li>DSA（Digital Signature Algorithm）：数字签名算法，是一种标准的 DSS（数字签名标准）；</li><li>ECC（Elliptic Curves Cryptography）：椭圆曲线密码编码学。</li></ul></li></ul><h5 id="5、Https握手过程"><a href="#5、Https握手过程" class="headerlink" title="5、Https握手过程"></a>5、Https握手过程</h5><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/10.png" alt="title"></p><ul><li><p>1、客户端发起HTTPS请求</p></li><li><p>2、服务端的配置</p><ul><li>采用HTTPS协议的服务器必须要有一套数字证书，可以是自己制作或者CA证书。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用CA证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥。公钥给别人加密使用，私钥给自己解密使用。</li></ul></li><li><p>3、传送证书</p><ul><li>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等。</li></ul></li><li><p>4、客户端解析证书</p><ul><li>这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值，然后用证书对该随机值进行加密。</li></ul></li><li><p>5、传送加密信息</p><ul><li>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了</li></ul></li><li><p>6、服务段解密信息</p><ul><li>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</li></ul></li><li><p>7、传输加密后的信息</p><ul><li>这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。</li></ul></li><li><p>8、客户端解密信息</p><ul><li>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。</li></ul></li></ul><p><strong>为什么HTTPS是安全的？</strong></p><p>在HTTPS握手的第四步中，如果站点的证书是不受信任的，会显示出现下面确认界面，确认了网站的真实性。另外第六和八步，使用客户端私钥加密解密，保证了数据传输的安全。</p><h4 id="6、常见端口"><a href="#6、常见端口" class="headerlink" title="6、常见端口"></a>6、常见端口</h4><ul><li>21端口：FTP 文件传输服务</li><li>22端口：SSH 端口</li><li>23端口：TELNET 终端仿真服务</li><li>25端口：SMTP 简单邮件传输服务</li><li>53端口：DNS 域名解析服务</li><li>80端口：HTTP 超文本传输服务</li><li>110端口：POP3 “邮局协议版本3”使用的端口</li><li>443端口：HTTPS 加密的超文本传输服务</li><li>3306端口：MYSQL 默认端口号</li></ul><h4 id="7、IP字段"><a href="#7、IP字段" class="headerlink" title="7、IP字段"></a>7、IP字段</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/6.jpg" alt="title"></p><ul><li><p>版本：L3协议版本号，IPv4或IPv6</p></li><li><p>首部长度：单位为4字节</p></li><li><p>标识：每一个IP封包都有一个16位的唯一识别码｡当程序产生的数据要通过网络传送时都会被拆散成封包形式发送,当封包要进行重组的时候这个ID就是依据了｡占16位｡</p></li><li><p>协议：L4协议类型</p></li><li><p>TTL生存时间字段设置了数据报可以经过的最多路由器数。一旦经过一个处理它的路由器，它的值就减1。当该字段值为0时，数据报就被丢弃，并发送ICMP报文通知源主机。</p></li><li><p>首部校验和(Header checksum): 这个数值用来检错用的,用以确保封包被正确无误的接收到｡当封包开始进行传送后,接收端主机会利用这个检验值会来检验余下的封包,如果一切无误就会发出确认信息表示接收正常｡与UDP和TCP协议包头中的校验和作用是一样的｡占16位｡</p><p>首部检验和字段是根据IP首部计算的检验和码,不对首部后面的数据进行计算</p></li></ul><h4 id="8、TCP字段"><a href="#8、TCP字段" class="headerlink" title="8、TCP字段"></a>8、TCP字段</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/7.jpg" alt="title"></p><ul><li><p>滑动窗口协议（Sliding Window Protocol）</p><ul><li>属于TCP协议的一种应用，用于网络数据传输时的流量控制，以避免拥塞的发生。该协议允许发送方在停止并等待确认前发送多个数据分组。由于发送方不必每发一个分组就停下来等待确认，因此该协议可以加速数据的传输，提高网络吞吐量。</li><li>滑动窗口，可以理解成接收端所能提供的缓冲区大小。TCP利用一个滑动的窗口来告诉发送端对它所发送的数据能提供多大的缓 冲区。由于窗口由16位bit所定义，所以接收端TCP 能最大提供65535个字节的缓冲。由此，可以利用窗口大小和第一个数据的序列号计算出最大可接收的数据序列号。</li><li>滑动窗口本质上是描述接受方的TCP数据报缓冲区大小的数据，发送方根据这个数据来计算自己最多能发送多长的数据。如果发送方收到接受方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接受方发送窗口大小不为0的数据报的到来。 </li></ul></li><li><p>字段flag</p><ul><li>URG：紧急指针有效</li><li>ACK：确认号有效</li><li>PSH：接收方应该尽快将这个报文段交给应用层</li><li>RST：重建连接</li><li>SYN：同步序号用来发起一个连接</li></ul></li><li><p>校验和字段 16bit：</p><ul><li>这个校验和是针对首部和数据两部分的。</li></ul></li></ul><h4 id="9、UDP字段"><a href="#9、UDP字段" class="headerlink" title="9、UDP字段"></a>9、UDP字段</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/8.jpg" alt="title"></p><ul><li><strong>校验和字段</strong><ul><li>是指整个UDP报文头和UDP所带的数据的校验和（也包括伪报文头）。伪报文头不包括在真正的UDP报文头中，但是它可以保证UDP数据被正确的主机收到了。因在校验和中加入了伪头标，故ICMP除能防止单纯数据差错之外，对IP分组也具有保护作用。</li></ul></li></ul><h4 id="10、TCP拥塞控制如何实现"><a href="#10、TCP拥塞控制如何实现" class="headerlink" title="10、TCP拥塞控制如何实现"></a>10、TCP拥塞控制如何实现</h4><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/9.png" alt="title"></p><p><strong>名词：</strong></p><ul><li>cwnd: 拥塞窗口</li><li>ssthresh: 门限</li></ul><p><strong>过程:</strong></p><ul><li>慢开始: 初始化拥塞窗口为1，发送 1 2 4 8个报文段</li><li>拥塞控制：当拥塞窗口增长到慢开始的门限制时改为拥塞避免，加法增大</li><li>快重传:<ul><li>使发送方尽快进行重传，而不是等待重传计时器超时再重传</li><li>发送方一段收到三个重复确认就立刻重传</li></ul></li><li>快恢复：门限制为当前窗口的一半，cwnd为奇数一般向下取整</li></ul><h4 id="11、TCP流量控制如何实现"><a href="#11、TCP流量控制如何实现" class="headerlink" title="11、TCP流量控制如何实现"></a>11、TCP流量控制如何实现</h4><p><strong>区别</strong></p><ul><li><p>流量控制：是端到端的控制，例如A通过网络给B发数据，A发送的太快导致B没法接收(B缓冲窗口过小或者处理过慢)，这时候的控制就是流量控制，原理是通过滑动窗口的大小改变来实现。 </p></li><li><p>拥塞控制：是A与B之间的网络发生堵塞导致传输过慢或者丢包，来不及传输。防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不至于过载。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络性能有关的所有因素</p></li></ul><p><strong>流量控制</strong></p><p>TCP是一个全双工的，TCP滑动窗口分为接受窗口，发送窗口。滑动窗口协议是传输层进行流控的一种措施，接收方通过通告发送方自己的窗口大小，从而控制发送方的发送速度，从而达到防止发送方发送速度过快而导致自己被淹没的目的</p><p>ACK包含的两个重要的信息:</p><ul><li>期望接收到的下一字节的序号n，该n代表接收方已经接收到了前n-1字节数据，此时如果接收方收到第n+1字节数据而不是第n字节数据，接收方是不会发送序号为n+2的ACK的。举个例子，假如接收端收到1-1024字节，它会发送一个确认号为1025的ACK,但是接下来收到的是2049-3072，它是不会发送确认号为3072的ACK,而依旧发送1025的ACK</li><li>当前的窗口大小m，如此发送方在接收到ACK包含的这两个数据后就可以计算出还可以发送多少字节的数据给对方，假定当前发送方已发送到第x字节，则可以发送的字节数就是y=m-(x-n).这就是滑动窗口控制流量的基本原理</li></ul><p><strong>发送方根据收到ACK当中的期望收到的下一个字节的序号n以及窗口m，还有当前已经发送的字节序号x，算出还可以发送的字节数</strong></p><p><strong>接受端窗口的第一个字节序之前一定是已经完全接收的，后面窗口里面的数据都是希望接受的，窗口后面的数据都是不希望接受的。</strong></p><p><img src="/images/2021%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-%E7%BD%91%E7%BB%9C%E7%AF%87/13.png" alt="title"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes篇</title>
    <link href="/2021/02/09/Kubernetes%E7%AF%87/"/>
    <url>/2021/02/09/Kubernetes%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1、Kubernetes架构"><a href="#1、Kubernetes架构" class="headerlink" title="1、Kubernetes架构"></a>1、Kubernetes架构</h4><p>Kubernetes是一个轻便的和可扩展的开源平台，用于管理容器化应用和服务。通过Kubernetes能够进行应用的自动化部署和扩缩容</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/1.png" alt="title"></p><ul><li><p>Master Node：作为控制节点，对集群进行调度管理</p><ul><li><p>API Server主要用来处理REST的操作，并执行相关业务逻辑，以及更新etcd中的相关对象。相关结果状态将被保存在etcd中。</p><ul><li>REST语义，监控，持久化和一致性保证，API 版本控制，放弃和生效</li><li>内置准入控制语义，同步准入控制钩子，以及异步资源初始化</li><li>API注册和发现</li></ul></li><li><p>Cluster state store:  Kubernetes默认使用etcd作为集群整体存储，etcd是一个简单的、分布式的、一致的key-value存储，主要被用来共享配置和服务发现。</p></li><li><p>Controller-Manager Server：执行大部分的集群层次的功能，如命名空间创建和生命周期</p><ul><li><p>Replication Controller</p></li><li><p>Node Controller</p></li><li><p>Namespace Controller</p></li><li><p>Service Controller</p></li><li><p>Endpoints Controller: Endpoints Controller监听Service的Pod对应的副本变化add,update,delete变化，并处理</p></li><li><p>Persistent Controller</p></li><li><p>DaemonSet Controller</p></li></ul></li><li><p>Scheduler:  负责根据调度策略自动将Pod部署到合适Node中</p><ul><li>预选Node：遍历集群中所有的Node，按照具体的预选策略筛选出符合要求的Node列表。如没有Node符合预选策略规则，该Pod就会被挂起。</li><li>优选Node：预选Node列表的基础上，按照优选策略为待选的Node进行打分和排序，从中获取最优Node。</li></ul></li></ul></li><li><p>Worker Node：作为真正的工作节点，运行业务应用的容器；Worker Node包含kubelet、kube proxy和Container Runtime；</p><ul><li>Kubelet：使用cAdvisor进行资源监控，Kubelet才是Pod是否能够运行在特定Node上的最终裁决者，而不是scheduler或者DaemonSet<ul><li>负责node节点上pod的创建、修改、监控、删除等生命周期的管理</li><li>定时上报本node的状态信息给kube-apiserver</li><li>接收kube-apiserver下发的指令</li><li>通过kube-apiserver简介与etcd集群交互，读取配置信息</li><li><strong>CRI</strong>–一个能让kubelet无需编译就可以支持多种容器运行时的插件接口</li></ul></li><li> Container Runtime：每一个Node都会运行一个Container Runtime，其负责下载镜像和运行容器。</li><li>kube proxy：<ul><li>负责为Pod创建代理服务；引到访问至服务；并实现服务到Pod的路由和转发，以及通过应用的负载均衡</li><li><code>kube-proxy</code>负责为<code>Services</code>以外的类型实现一种虚拟IP形式<a href="https://kubernetes.io/docs/concepts/services-networking/service/#externalname"><code>ExternalName</code></a></li></ul></li></ul></li><li><p>Add-on：是对Kubernetes核心功能的扩展，例如增加网络和网络策略等能力</p><ul><li>kube-dns负责为整个集群提供DNS服务</li><li>Ingress Controller为服务提供外网入口</li><li>Heapster提供资源监控</li><li>Dashboard提供GUI</li><li>Federation提供跨可用区的集群</li><li>Fluentd-elasticsearch提供集群日志采集、存储与查询</li></ul></li></ul><h4 id="2、Kubernetes核心资源"><a href="#2、Kubernetes核心资源" class="headerlink" title="2、Kubernetes核心资源"></a>2、Kubernetes核心资源</h4><ul><li><p>Pod: 所有业务类型的基础，它是一个或多个容器的组合。</p></li><li><p>Replication Controller(副本控制器，RC): kubernetes集群中最早的保证Pod高可用的API对象，通过监控运行中的Pod来保证集群中运行指定数目的Pod副本。</p></li><li><p>ReplicaSets: 下一代Replication Controller（selector）</p></li><li><p>Deployment(无状态应用)：Pod和ReplicaSet提供了一个声明式(declarative)方法</p></li><li><p>StatefulSet(有状态应用)：对于RC和RS中的Pod，一般不挂载存储或者挂载共享存储。对于StatefulSet中的Pod，每个Pod挂载自己独立的存储，如果一个Pod出现故障，从其他节点启动一个同样名字的Pod，要挂载上原来Pod的存储继续以它的状态提供服务。适合于StatefulSet的业务包括数据库服务MySQL和PostgreSQL</p></li><li><p>Service: 定义了一组Pod的策略抽象，这些被标记的Pod都是通过label Selector决定的。Service提供了外部服务访问Pod的入口</p><ul><li><strong>Endpoint</strong>是可被访问的服务端点，即一个状态为running的pod，它是service访问的落点，只有service关联的pod才可能成为endpoint</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/9.png" alt="title"></p><ul><li><strong>Endpoints</strong>表示一个Service对应的所有Pod副本的访问地址。Node上的Kube-proxy进程获取每个Service的Endpoints，实现Service的负载均衡功能</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/10.png" alt="title"></p></li><li><p>namespace</p></li><li><p>node</p></li></ul><h4 id="3、访问Pod的方式"><a href="#3、访问Pod的方式" class="headerlink" title="3、访问Pod的方式"></a>3、访问Pod的方式</h4><ul><li><p><code>hostNetwork: true</code>: Pod的字段</p></li><li><p><code>hostPort</code>是直接将容器的端口与所调度的节点上的端口路由，这样用户就可以通过宿主机的IP加上来访问Pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8086</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">8086</span></span><br></pre></td></tr></table></figure></li><li><p>Service NodePort：接口转发映射范围30000-32767，在node节点上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure></li><li><p><code>LoadBalancer</code>: Service上定义 公有云上</p></li><li><p><code>Ingress</code>:  Ingress 简单的理解就是你原来需要改 Nginx 配置，然后配置各种域名对应哪个 Service，现在把这个动作抽象出来，变成一个 Ingress 对象，你可以用 yaml 创建，每次不要去改 Nginx 了，直接改 yaml 然后创建/更新就行了</p><ul><li>①下载Ingress-controller相关的YAML文件，并给Ingress-controller创建独立的名称空间；</li></ul></li><li><p>②部署后端的服务，如myapp，并通过service进行暴露；</p><ul><li>③部署Ingress-controller的service，以实现接入集群外部流量；</li></ul></li><li><p>④部署Ingress，进行定义规则，使Ingress-controller和后端服务的Pod组进行关联。</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/2.png" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/3.png" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/4.png" alt="title"></p></li></ul><h4 id="4、Pod与Docker的区别"><a href="#4、Pod与Docker的区别" class="headerlink" title="4、Pod与Docker的区别"></a>4、Pod与Docker的区别</h4><h5 id="为什么要设计Pod"><a href="#为什么要设计Pod" class="headerlink" title="为什么要设计Pod"></a><strong>为什么要设计Pod</strong></h5><p>在操作系统中，进程是以进程组的方式，”有原则的”组织到一起运行。 k8s 需要做的工作就是将 “进程组” 的概念映射到容器技术中。</p><p>以 rsyslogd 为例子。已知 rsyslogd 有三个进程组成，一个 imklog 模块，一个 imuxsock 模块， 一个 rsyslogd 自己的 main 函数主进程。这三个进程一定要运行在同一台机器上，否则，他们之间基于 Socket 的通信和文件交换，都会出现问题。</p><p>如果要将 rsyslogd 服务容器化，受限于容器的”单进程模式”，那么就需要制作三个不同的容器，最明显的问题，在调度的时候，这三个容器可能被调度到不同的 node 上。</p><blockquote><p>容器单进程模式：并不是指容器里只能运行”一个”进程而是指容器没有管理多进程的能力。这是因为容器里 PID=1 的进程就是应用本身，其他的进程都是 PID=1 进程的子进程。</p></blockquote><p>如果存在 Pod，想 imklog、imudock 和 main 函数主进程这样的三个容器，这是一个典型的由三个容器组成的 Pod。像这样容器间的紧密协作，我们可以称为 “超亲密关系”。 这些具有 “超亲密关系” 容器的典型特征包括但不限于：</p><ul><li>互相之间发生直接的文件交换</li><li>使用 localhost 或者 Socket 文件进行本地通信</li><li>会发生非常频繁的远程调用</li><li>需要共性某些 Linux Namespace</li></ul><p>关于一个 Pod 最重要的事实是： <strong>它只是一个逻辑概念</strong>。</p><p>也就是说，k8s 真正处理，还是宿主机操作系统上 Linux<br> 容器的 Namespace 和 Cgroups，而并不存在一个所谓的 Pod 的边界或者隔离环境。</p><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul><li>Kubernetes并不是只支持Docker这一个容器运行时，Kubernetes通过CRI这个抽象层，支持除Docker之外的其他容器运行</li><li>假设Kubernetes没有pod的概念，而是直接管理容器，那么一组容器作为一个单元，假设其中一个容器死亡了，此时这个单元的状态应该如何定义呢？应该理解成整体死亡，还是个别死亡。pod里都有一个Kubernetes系统自带的Infra容器(pause镜像)，代表pod的存亡；同时解除同一Pod内容器A与容器B的拓扑关系。</li><li>每个pod都有唯一的IP地址，pod里所有的业务容器共享pause容器的IP地址，以及pause容器mount的Volume，通过这种设计，业务容器之间可以直接通信，文件也能够直接彼此共享</li></ul><h4 id="5、Kubernetes常见的开源项目"><a href="#5、Kubernetes常见的开源项目" class="headerlink" title="5、Kubernetes常见的开源项目"></a>5、Kubernetes常见的开源项目</h4><ul><li>Helm：Helm是Kubernetes的包管理器</li><li>Istio: Istio是现在最热门的Kubernetes容器网络工具。它基于“服务网格”模型。</li><li>Prometheus</li><li>OpenTracing</li></ul><h4 id="6、Kubernete容器网络模型和典型实现"><a href="#6、Kubernete容器网络模型和典型实现" class="headerlink" title="6、Kubernete容器网络模型和典型实现"></a>6、Kubernete容器网络模型和典型实现</h4><h5 id="Pod之间Container-to-Container-networking"><a href="#Pod之间Container-to-Container-networking" class="headerlink" title="Pod之间Container-to-Container networking"></a>Pod之间Container-to-Container networking</h5><p>Linux networking namespace为进城通讯提供了逻辑网络栈，包括network devices、routes、firewall rules。Network namespace(NS) 管理实际上是为其中的所有进程提供了一个独立的逻辑网络</p><p>Pod中所有的容器通过Infra Container共享一个NS，这些容器都有相同的IP和Port空间，通过localhost访问也是互通的。Shared storage也是可以访问的，通过ShareVolume挂在到容器中。</p><h5 id="同Node中的Pod-to-Pod-networking"><a href="#同Node中的Pod-to-Pod-networking" class="headerlink" title="同Node中的Pod-to-Pod networking"></a>同Node中的Pod-to-Pod networking</h5><p>Node下Pod之间的networking通过Virtual Ethernet Device(veth)的两个块Virtual interfaces实现的，每块veth挂载在一个NS上，来实现跨NS链接。比如，一块挂在root ns(host)上，另一块挂在pod ns上，好比一根网线把不同的网络空间链接起来，有了veth pair，就可以将pod网络连通到root ns</p><p>root ns上通过Linux Ethernet Bridge，一个虚拟的Layer2网络设备来实现不同network segments之间的Ethernet packet switching。通过ARP协议，实现MAC地址到IP地址的发现协议。Bridge广播eth frame到所有连接的设备，收到ARP回复后将packagent forward到对应的veth设备上</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/net1.png" alt="title"></p><h5 id="跨Node之间Pod-to-Pod-networking"><a href="#跨Node之间Pod-to-Pod-networking" class="headerlink" title="跨Node之间Pod-to-Pod networking"></a>跨Node之间Pod-to-Pod networking</h5><p>k8s在pod networking设计上有3个fundamental requirements，任何networking部分必须遵循：</p><ul><li>在不使用NAT下，所有Pods都能和其他任何Pods通讯</li><li>在不使用NAT下，所有的Nodes都能和所有Pods通讯</li><li>Pods所看到自己的IP和其他Pods看到它的IP一定是相同的</li></ul><blockquote><p>NAT（Network Address Translator，网络地址转换）是用于在本地网络中使用私有地址，在连接互联网时转而使用全局 IP 地址的技术。NAT实际上是为解决<a href="https://link.zhihu.com/?target=https://bk.tw.lvfukeji.com/baike-IPv4%E4%BD%8D%E5%9D%80%E6%9E%AF%E7%AB%AD">IPv4地址短缺</a>而开发的技术</p></blockquote><p>k8s 网络模型要求Pod IP在整个网络中都能通达。具体实现方案有三方面：</p><ul><li>Layer2（switching） Solution</li><li>Layer3（Routing）Solution，如：Calico，Terway</li><li>Overlay Solution 如：Flannel</li></ul><p>在Pod获得IP之前，kubelet为每个Node分配一个CIDR地址段(Classless iner-domain routing)，每个Pod在其中获取唯一IP，CIDR地址段的大小对应每个Node最大的Pod数量。在Pod IP和跨Node网络层部署成果后，从源Pod1到目标Pod4的通讯如图</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/net2.png" alt="title"></p><h5 id="Pod-to-Serivce-networking"><a href="#Pod-to-Serivce-networking" class="headerlink" title="Pod-to-Serivce networking"></a>Pod-to-Serivce networking</h5><p>Service管理Pods状态，在Pods有变化下管理对应Pod IP的变化，并管理对外提供服务的Virtual IP(Cluster IP)到Pods IP的路由访问，以屏蔽外部对服务后端的实现形态。任何对该Virtual IP的访问都将打散路由到所属Pods上</p><p>如何实现Virtual IP的负载均衡？通过netfilter和iptables。kube-proxy通过watch apiserver来获取服务配置的变化，比如virtual IP、Pod IP变化。iptables规则随之变化并将请求路由到服务对应的Pod上，Pod IP的选取是随机的，这样看iptables起到了负载均衡的作用。k8s 1.11中引入了ipvs，成为第二种集群内负载均衡的方式</p><h5 id="使用DNS"><a href="#使用DNS" class="headerlink" title="使用DNS"></a>使用DNS</h5><p>k8s为每个容器配置<code>--cluster-dns=&lt;dns-service-ip&gt;</code>, 用以解析服务所对应DNS域名到Cluster IP或Pod IP。CoreDNS成为缺省DNS方式。服务支持3中类型DNS records(A record、CNAME、SRV records)。最常见的是A Record，如: 在<code>cluster.local</code>的DNS name下，A record格式如<code>pod-ip-address.my-namespace.pod.cluster.local</code></p><h5 id="CNI"><a href="#CNI" class="headerlink" title="CNI"></a>CNI</h5><p>CNI(Container Networking Interface)充当胶水：各种容器网络实现能在一直的操作接口下由kubelet统一管理调度</p><h5 id="Flannel与Calico的区别"><a href="#Flannel与Calico的区别" class="headerlink" title="Flannel与Calico的区别"></a>Flannel与Calico的区别</h5><ul><li><p>Flannel之所以可以搭建Kubernetes依赖的底层网络，是因为它能实现以下两点。</p><p>Flannel首先创建了一个名为flannel0的网桥，而且这个网桥的一端连接docker0网桥，另一端连接一个叫作flanneld的服务进程。flanneld进程上连etcd，利用etcd来管理可分配的IP地址段资源，同时监控etcd中每个Pod的实际地址，并在内存中建立了一个Pod节点路由表；flanneld进程下连docker0和物理网络，使用内存中的Pod节点路由表，将docker0发给它的数据包包装起来，利用物理网络的连接将数据包投递到目标flanneld上，从而完成Pod到Pod之间的直接地址通信。</p><ul><li><p>它能协助Kubernetes，给每一个Node上的Docker容器都分配互相不冲突的IP地址。</p></li><li><p>它能在这些IP地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内</p></li><li><p>flannel在进行路由转发的基础上进行了封包解包的操作</p></li></ul></li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/5.png" alt="title"></p><ul><li>Calico是一个基于BGP的纯三层的网络方案，根据iptables规则进行路由转发。源容器-宿主机-目标容器</li></ul><h4 id="7、Swarm与Kubernetes的区别"><a href="#7、Swarm与Kubernetes的区别" class="headerlink" title="7、Swarm与Kubernetes的区别"></a>7、Swarm与Kubernetes的区别</h4><ul><li>Docker Swarm 是一款用来管理多主机上的Docker容器的工具，可以负责帮你启动容器，监控容器状态，如果容器的状态不正常它会帮你重新帮你启动一个新的容器，来提供服务，同时也提供服务之间的负载均衡</li><li>Kubernetes它本身的角色定位是和Docker Swarm 是一样的，也就是说他们负责的工作在容器领域来说是相同的部分，都是一个跨主机的容器管理平台，当然也有自己一些不一样的特点，k8s是谷歌公司根据自身的多年的运维经验研发的一款容器管理平台。Docker Swarm则是由Docker 公司研发的</li></ul><h4 id="8、挖矿"><a href="#8、挖矿" class="headerlink" title="8、挖矿"></a>8、挖矿</h4><p>kubelet 10250溢出漏洞导致任意代码远程执行</p><h4 id="9、Kubenetes弃用Docker"><a href="#9、Kubenetes弃用Docker" class="headerlink" title="9、Kubenetes弃用Docker"></a>9、Kubenetes弃用Docker</h4><p><strong>docker不支持CRI（docker公司不用google的标准）</strong></p><p>Kubelet 之前使用的是一个名为 docker-shim 的模块，用以实现对 Docker 的 CRI 支持。但 Kubernetes 社区发现了与之相关的维护问题</p><p>选择什么？选择社区推荐的containerd、CRI-O </p><blockquote><p>Docker 并不支持 CRI（容器运行时接口）这一 Kubernetes 运行时 API，而 Kubernetes 用户一直以来所使用的其实是名为“dockershim”的桥接服务。</p><p>Dockershim 能够转换 Docker API 与 CRI，但在后续版本当中，Kubernetes 将不再提供这项桥接服务。</p></blockquote><p>Kubernetes 实际上需要保持在红框之内。Docker 网络与存储卷都被排除在外。而这些用不到的功能本身就可能带来安全隐患</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/6.jpg" alt="title"></p><p>原先的运行方式</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/7.png" alt="title"></p><h4 id="10、容器探针"><a href="#10、容器探针" class="headerlink" title="10、容器探针"></a>10、容器探针</h4><blockquote><p>探针是由 kubelet对容器执行的定期诊断</p></blockquote><h5 id="Pod生命周期"><a href="#Pod生命周期" class="headerlink" title="Pod生命周期"></a>Pod生命周期</h5><ul><li>Pending：表示集群系统正在创建Pod，但是Pod中的container还没有全部被创建，这其中也包含集群为container创建网络，或者下载镜像的时间；</li><li>Running：表示pod已经运行在一个节点商量，并且所有的container都已经被创建。但是并不代表所有的container都运行，它仅仅代表至少有一个container是处于运行的状态或者进程出于启动中或者重启中；</li><li>Succeeded：所有Pod中的container都已经终止成功，并且没有处于重启的container；</li><li>Failed：所有的Pod中的container都已经终止了，但是至少还有一个container没有被正常的终止(其终止时的退出码不为0)</li></ul><h5 id="容器探针"><a href="#容器探针" class="headerlink" title="容器探针"></a>容器探针</h5><ul><li>livenessProbe ：指示<strong>容器是否正在运行</strong>。如果存活探测失败，则 kubelet 会杀死容器，并且容器将受到其重启策略 的影响。如果容器不提供存活探针，则默认状态为 Success。<ul><li>ExecAction: 在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功</li><li>TCPSocketAction: 对指定端口上的容器的 IP 地址进行 TCP 检查。如果端口打开，则诊断被认为是成功的</li><li>HTTPGetAction: 对指定的端口和路径上的容器的 IP 地址执行 HTTP Get 请求。如果响应的状态码大于等于 200 且小于 400 ，则诊断被认为是成功的</li></ul></li><li>readinessProbe ：指示<strong>容器是否准备好服务请求</strong>。表示container是否以及处于可接受service请求的状态了。如果就绪探测失败，Endpoints controller将从与 Pod 匹配的所有 Service 的端点中删除该 Pod 的 IP 地址。默认Readiness的初始值是Failure，如果一个container没有提供 Readiness则被认为是Success。</li></ul><p><strong>liveness探针影响的是单个容器，但readiness探针影响的是整个pod，即如果pod中有多个容器，只要有一个容器的readiness探针诊断失败，那么整个pod都会处于unready状态。</strong></p><p><strong>容器探针参数</strong></p><blockquote><p>对于Liveness Probe和Readiness Probe用法都一样，拥有相同的参数和相同的监测方式。</p></blockquote><ul><li>initialDelaySeconds：用来表示初始化延迟的时间，也就是告诉监测从多久之后开始运行，单位是秒</li><li>timeoutSeconds: 用来表示监测的超时时间，如果超过这个时长后，则认为监测失败<br>当前对每一个Container都可以设置不同的restartpolicy，有三种值可以设置：<ul><li>Always: 只要container退出就重新启动</li><li>OnFailure: 当container非正常退出后重新启动</li><li>Never: 从不进行重新启动</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">goproxy</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">goproxy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">goproxy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/goproxy:0.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="11、失效-Pod-的垃圾收集"><a href="#11、失效-Pod-的垃圾收集" class="headerlink" title="11、失效 Pod 的垃圾收集"></a>11、失效 Pod 的垃圾收集</h4><p>对于已失败的 Pod 而言，对应的 API 对象仍然会保留在集群的 API 服务器上，直到用户或者控制器进程显式地将其删除。</p><p>控制面组件会在 Pod 个数超出所配置的阈值 （根据 kube-controller-manager 的 terminated-pod-gc-threshold 设置）时删除已终止的 Pod（阶段值为 Succeeded 或 Failed）。 这一行为会避免随着时间演进不断创建和终止 Pod 而引起的资源泄露问题</p><h4 id="12、三种IP"><a href="#12、三种IP" class="headerlink" title="12、三种IP"></a>12、三种IP</h4><ul><li>Node IP：Node节点的IP地址，即物理网卡的IP地址</li><li>Pod IP：Pod的IP地址，即docker容器的IP地址，Docker Engine根据docker网桥的IP地址段进行分配的，此为虚拟IP地址，虚拟的二层网络<ul><li>同Service下的pod可以直接根据PodIP相互通信</li><li>不同Service下的pod在集群间pod通信要借助于 cluster ip</li><li>pod和集群外通信，要借助于node ip</li></ul></li><li>Cluster IP：Service的IP地址，此为虚拟IP地址<ul><li>Cluster IP仅仅作用于Kubernetes Service这个对象，并由Kubernetes管理和分配IP地址</li><li>Cluster IP无法被ping，没有一个“实体网络对象”来响应</li><li>Cluster IP只能结合Service Port组成一个具体的通信端口，单独的Cluster IP不具备通信的基础，并且他们属于Kubernetes集群这样一个封闭的空间。</li><li>在不同Service下的pod节点在集群间相互访问可以通过Cluster IP</li></ul></li></ul><h4 id="13、Kube-Proxy代理模式"><a href="#13、Kube-Proxy代理模式" class="headerlink" title="13、Kube-Proxy代理模式"></a>13、Kube-Proxy代理模式</h4><h5 id="用户空间代理模式-User-space-proxy-mode"><a href="#用户空间代理模式-User-space-proxy-mode" class="headerlink" title="用户空间代理模式(User space proxy mode):"></a>用户空间代理模式(User space proxy mode):</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/11.png" alt="title"></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/12.png" alt="title"></p><ul><li>为每个service在node上打开一个随机端口（代理端口）</li><li>建立iptables规则，将clusterip的请求重定向到代理端口</li><li>到达代理端口（用户空间）的请求再由kubeproxy转发到后端pod</li><li>若与第一个Pod连接失败，Kube-Proxy将检测到与第一个Pod的连接已失败，并会自动尝试使用其他Pod进行重试</li></ul><blockquote><p>这里为什么需要建iptables规则，因为kube-proxy 监听的端口在用户空间，所以需要一层 iptables 把访问服务的连接重定向给 kube-proxy 服务，这里就存在内核态到用户态的切换，代价很大，因此就有了iptables</p><p>iptables处理流量具有较低的系统开销，因为流量由<strong>Linux netfilter</strong>处理，而无需在用户空间和内核空间之间切换。这种方法也可能更可靠</p></blockquote><h5 id="iptables-代理模式"><a href="#iptables-代理模式" class="headerlink" title="iptables 代理模式"></a><code>iptables</code> 代理模式</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/13.png" alt="title"></p><ul><li><p>每个Service，都安装iptables规则，该规则捕获到服务<code>clusterIP</code>和的<code>port</code>流量，并将该流量重定向到Service</p></li><li><p>每个Endpoint对象，它将安装iptables规则，该规则选择一个Pod</p></li><li><p>若所选的第一个Pod没有响应，则连接失败，使用Pod探针来验证后端Pod正常运行</p></li><li><p><strong>讨论:</strong> kube-proxy不再负责转发，数据包的走向完全由iptables规则决定，效率明显会高很多。但是随着service的增加，iptables规则会不断增加，导致内核十分繁忙（等于在读一张很大的没建索引的表）</p></li></ul><h5 id="IPVS代理模式"><a href="#IPVS代理模式" class="headerlink" title="IPVS代理模式"></a><code>IPVS</code>代理模式</h5><blockquote><p> Kubernetes v1.11 [stable]</p></blockquote><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/14.png" alt="title"></p><ul><li><p>kube-proxy监视Kubernetes的Service和Endpoint，调用<code>netlink</code>接口以相应地创建IPVS规则，</p></li><li><p>定期将IPVS规则与Kubernetes服务和端点同步，该控制循环可确保IPVS状态与所需状态匹配。访问服务时，IPVS将流量定向到Pod之一。</p></li><li><p>IPVS代理模式基于类似于iptables模式的netfilter挂钩函数，但是使用<strong>哈希表</strong>作为基础数据结构，并且在内核空间中工作。与iptables模式下的kube-proxy相比，IPVS模式下的kube-proxy可以<strong>以更低的延迟来重定向流量</strong>，从而在同步代理规则时具有更好的性能。与其他代理模式相比，IPVS模式还<strong>支持更高的网络流量吞吐量</strong></p></li><li><p>IPVS提供了更多选项来平衡后端Pod的流量</p><ul><li><code>rr</code>：轮循</li><li><code>lc</code>：连接最少（打开的连接最少）</li><li><code>dh</code>：目标哈希</li><li><code>sh</code>：源哈希</li><li><code>sed</code>：最短的预期延迟</li><li><code>nq</code>：永不排队</li></ul></li></ul><h4 id="14、Kubernetes调度机制"><a href="#14、Kubernetes调度机制" class="headerlink" title="14、Kubernetes调度机制"></a>14、Kubernetes调度机制</h4><p>亲和性和反亲和性是运行时调度策略，主要包括<code>nodeAffinity（主机亲和性）</code>、<code>podAffinity（pod亲和性）</code>、<code>podAntiAffinity（pod反亲和性）</code>三类。</p><ul><li>nodeAffinity：用于规定pod可以部署在哪个node或者不能部署在哪个节点上。解决pod和主机的问题。</li><li>podAffinity：用于规定pod可以和哪些pod部署在同一拓扑结构下。</li><li>podAntiAffinity：<ul><li>用于规定pod不可以和哪些pod部署在同一拓扑结构下，与podAffinity一起解决pod和pod之间的关系。</li><li>当应用的采用多副本部署时，有必要采用反亲和性让各个应用实例打散分布在各个node上，以提高HA(高可用)</li></ul></li></ul><p>三种Affinity使用时都有三种规则可以设定：</p><ul><li><p><code>requiredDuringSchedulingIgnoredDuringExecution</code>:</p><ul><li><p>hard，严格执行，满足规则调度，否则不调度，在预选阶段执行，所以违反hard约定一定不会调度到</p></li><li><p>在首次调度时一定要满足相应的Affinity规则，如果没有满足条件的node将不会进行调度。在pod运行过程中如果不再满足相应的Affinity规则，会进行重新调度。</p></li></ul></li><li><p><code>preferredDuringSchedulingIgnoredDuringExecution</code>: </p><ul><li>soft，尽力执行，优先满足规则调度，在优选阶段执行，</li><li>在首次调度时需要满足相应的Affinity规则，如果没有满足条件的node将不会进行调度。在后续pod的运行过程中不在检查这些规则是否满足。</li></ul></li><li><p><code>requiredDuringSchedulingRequiredDuringExecution</code>: </p><ul><li>未实现，与之前类似，只是后缀不同，代表如果labels发生改变，kubelet将驱逐不满足规则的pod</li><li>在首次调度时尽量满足相应的Affinity规则，如果没有满足要求的node也会进行调度。后续pod的运行过程中不再检查是否满足</li></ul></li></ul><p><strong>对称性</strong></p><blockquote><p>对称性，pod1设定了的同时pod2也设定</p></blockquote><p>考虑一个场景，两个应用S1和S2。现在<strong>严格</strong>要求S1 pod不能与S2 pod运行在一个node，如果仅设置S1的hard反亲和性是不够的，必须同时给S2设置对应的hard反亲和性。即调度S1 pod时，考虑node没有S2 pod，同时需要在调度S2 pod时，考虑node上没有S1 pod。</p><p>考虑下面两种情况：</p><ol><li>先调度S2，后调度S1，可以满足反亲和性，</li><li>先调度S1，后调度S2，违反S1的反亲和性规则，因为S2没有反亲和性规则，所以在<strong>schedule-time</strong>可以与S1调度在一个拓扑下。</li></ol><p>这就是对称性，即S1设置了与S2相关的hard反亲和性规则，就必须<strong>对称地</strong>给S2设置与S1相关的hard反亲和性规则，以达到调度预期。</p><p><strong>Note：</strong></p><ul><li>反亲和性（soft/hard）具备对称性，上面已经举过例子了</li><li>hard亲和性不具备对称性，例如期望S1、S2亲和，那么调度S2的时候没有必要node上一定要有S1，但是有一个隐含规则，node上有S1更好</li><li>soft亲和性具备对称性，不是很理解，遗留</li></ul><h4 id="15、Kubernetes-主节点高可用"><a href="#15、Kubernetes-主节点高可用" class="headerlink" title="15、Kubernetes 主节点高可用"></a>15、Kubernetes 主节点高可用</h4><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/8.png" alt="title"></p><ul><li><p>所有管理节点都部署kube-apiserver，kube-controller-manager，kube-scheduler，以及etcd等组件</p></li><li><p>kube-apiserver均与本地的etcd进行通信，etcd在三个节点间同步数据；</p></li><li><p>kube-controller-manager和kube-scheduler也只与本地的kube-apiserver进行通信(或者通过LB访问)，基于<a href="https://github.com/kubernetes/client-go/tree/master/examples/leader-election">Leader Election Mechanism</a>实现了高可用</p></li><li><p>kube-apiserver前面顶一个LoadBalancer(LB)；work节点kubelet以及kube-proxy组件对接LB访问apiserver</p></li><li><p>work node工作节点上部署应用，应用按照**<a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#more-practical-use-cases">反亲和</a>**部署多个副本，使副本调度在不同的work node上，这样如果其中一个副本所在的母机宕机了，理论上通过Kubernetes service可以把请求切换到另外副本上，使服务依旧可用</p></li></ul><p><strong>节点宕机对网络层面的影响</strong></p><blockquote><p>集群中还部署了依赖nginx服务的应用A，如果某个时刻work node1宕机了，此时应用A访问nginx service会有问题吗？</p></blockquote><p>有问题</p><p>因为service不会马上剔除掉宕机上对应的nginx pod，同时由于service常用的<a href="https://kubernetes.io/docs/concepts/services-networking/service/#proxy-mode-iptables">iptables代理模式</a>没有实现<a href="https://kubernetes.io/docs/concepts/services-networking/service/#proxy-mode-iptables">retry with another backend</a>特性，所以在一段时间内访问会出现间歇性问题(如果请求轮询到挂掉的nginx pod上)，也就是说会<strong>存在一个访问失败间隔期</strong></p><p>这个间隔期取决于service对应的endpoint什么时候踢掉宕机的pod。之后，kube-proxy会watch到endpoint变化，然后更新对应的iptables规则，使service访问后端列表恢复正常(也就是踢掉该pod)</p><p>每个node在kube-node-lease namespace下会对应一个Lease object，kubelet每隔node-status-update-frequency时间(默认10s)会更新对应node的Lease object</p><p>node-controller会每隔node-monitor-period时间(默认5s)检查Lease object是否更新，如果超过node-monitor-grace-period时间(默认40s)没有发生过更新，则认为这个node不健康，会更新NodeStatus(ConditionUnknown)。如果这样的状态在这之后持续了一段时间(默认5mins)，则会驱逐(evict)该node上的pod</p><p>对于母机宕机的场景，node controller在node-monitor-grace-period时间段没有观察到心跳的情况下，会更新NodeStatus(ConditionUnknown)，之后endpoint controller会从endpoint backend中踢掉该母机上的所有pod，最终服务访问正常，请求不会落在挂掉的pod上</p><p>也就是说在母机宕机后，在node-monitor-grace-period间隔内访问service会有间歇性问题，我们可以通过调整相关参数来缩小这个窗口期</p><h4 id="16、Pod创建过程"><a href="#16、Pod创建过程" class="headerlink" title="16、Pod创建过程"></a>16、Pod创建过程</h4><h5 id="静态Pod"><a href="#静态Pod" class="headerlink" title="静态Pod"></a>静态Pod</h5><ul><li><p>静态pod 是<strong>由 kubelet 管理的只在特定node上存在的pod</strong></p></li><li><p>静态pod 不能通过 api-server来管理，无法和 RC，RS，Deployment或者 DaemonSet进行关联</p></li><li><p> kubelet无法对静态pod 进行健康检查。</p></li></ul><p><strong>静态创建过程</strong><br>静态pod是在特定文件目录定义好yaml，通过kubelet在启动进程时候增加启动参数，之后kubelet会隔一段时间去扫描特定目录下时候有pod配置文件生成，其中–config自定特定目录 ，–file-check-frequency指定扫描间隔，默认为20S</p><h5 id="动态pod创建过程"><a href="#动态pod创建过程" class="headerlink" title="动态pod创建过程"></a>动态pod创建过程</h5><p>kubelet通过apiserver，利用etcd的watch加list机制，通过消息订阅的方式，etcd提供的接口可以参考专栏etcd的描述，etcd有pod的操作，将会被监听到，之后完成pod的创建</p><p><strong>pod的调度过程</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/15.png" alt="title"></p><ul><li><p>执行kubectl命令创建pod，根据kubeconfig的配置向kube-apiserver发送创建请求</p></li><li><p>kube-apiserver存储pod数据到etcd</p><ul><li>API Server 在接收到创建pod的请求之后，会根据用户提交的参数值来创建一个运行时的pod对象</li><li>根据 API Server 请求的上下文的元数据来验证两者的 namespace 是否匹配，如果不匹配则创建失败</li><li>Namespace 匹配成功之后，会向 pod 对象注入一些系统数据，如果 pod 未提供 pod 的名字，则 API Server 会将 pod 的 uid 作为 pod 的名字</li><li>API Server 接下来会<strong>检查 pod 对象的必需字段是否为空，如果为空，创建失败</strong></li><li><strong>在 etcd 中持久化这个对象</strong>，将异步调用返回结果封装成 restful.response</li><li>pod 处于 pending 状态</li></ul></li><li><p>kube-scheduler通过kube-apiserver查看未绑定的pod，尝试为pod分配主机。<strong>API Server 完成任务之后，将信息写入到 etcd 中，此时 scheduler 通过 watch 机制监听到写入到 etcd 的信息然后再进行工作</strong>，kube-scheduler的调度分为两步</p><ul><li><strong>节点预选</strong>：基于一系列预选规则（如 PodFitsResource 和 MatchNode-Selector 等）对每个节点进行检查，将不符合的节点过滤掉从而完成节点预选</li><li><strong>节点优选</strong>：为符合要求的主机计算权重。权重的计算设计到一些整体优化策略，比如replicas分配到不同主机，使用负载较低的主机等。对预选出的节点进行优先级排序，以便选出最适合运行 pod 对象的节点</li><li>从优先级结果中挑选出优先级最高的节点来运行 pod 对象，当此类节点多个时则随机选择一个。</li><li>进行binding操作，结果存储到etcd中。kube-scheduler会调用kube-apiserver在etcd创建boundpod对象，描述在一个工作节点上绑定运行的所有pod信息</li><li>pod的调度过程除了自身的调度算法外，还支持其他的调度策略，包括<strong>node seletctor，nodeaffnity(亲和)，podaffnity，pod驱逐</strong></li></ul></li><li><p>Kubelet组件启动pod，<strong>Kubelet 通过 watch 机制监听到写入到 etcd 的信息然后再进行工作</strong></p><ul><li><p>kubelet监听etcd，kubelet服务定时和etcd同步boundpod信息，获取到pod被分配到哪个特定的node</p></li><li><p>为该 pod 创建一个数据目录，从 API Server 读取该 pod 清单，为该 pod 挂载外部卷，下载 pod 所需的 Secret</p></li><li><p>检查已经运行在节点中 pod，如果该 pod 没有容器或者 Pause 容器没有启动，则先停止pod里所有的容器进程</p></li><li><p>使用 pause 镜像为每个pod创建一个容器，该容器用于接管 Pod 中所有其他容器的网络</p></li></ul></li></ul><h5 id="详述pod声明周期中的重要行为"><a href="#详述pod声明周期中的重要行为" class="headerlink" title="详述pod声明周期中的重要行为"></a><strong>详述pod声明周期中的重要行为</strong></h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/17.png" alt="title"></p><ul><li><p><strong>初始化容器</strong>：即 pod 内主容器启动之前要运行的容器，主要是做一些前置工作，初始化容器具有以下特征：</p><ul><li>初始化容器必须首先执行，若初始化容器运行失败，集群会一直重启初始化容器直至完成，注意，如果 pod 的重启策略为 Never，那初始化容器启动失败后就不会重启</li><li>初始化容器必须按照定义的顺序执行，初始化容器可以通过 pod 的 spec.initContainers 进行定义</li></ul></li><li><p><strong>声明周期钩子函数</strong>，Kubernetes 为容器提供了两种生命周期钩子：</p><ul><li><p>Poststart:容器创建完成之后立即运行的钩子程序。</p></li><li><p>preStop:容器终止之前立即运行的程序，是以同步方式的进行，因此其完成之前会阻塞 删除容器的调用</p></li><li><p>备注：钩子程序的执行方式有“Exec”和“HTTP”两种。</p></li></ul></li><li><p><strong>容器探测</strong>，容器探测分为存活性探测和就绪性探测容器探测是kubelet对容器健康状态进行诊断，容器探测的方式主要以下三种：</p><ul><li>ExecAction：在容器中执行命令，根据返回的状态码判断容器健康状态，返回0即表示成功，否则为失败</li><li>TCPSocketAction: 通过与容器的某TCP端口尝试建立连接进行诊断，端口能打开即为表示成功，否则失败</li><li>HTTPGetAction：向容器指定 URL 发起 HTTP GET 请求，响应码为2xx或者是3xx为成功，否则失败</li></ul></li></ul><h5 id="Pod终止过程"><a href="#Pod终止过程" class="headerlink" title="Pod终止过程"></a><strong>Pod终止过程</strong></h5><ul><li>用户发出删除 pod 命令</li><li>Pod 对象随着时间的推移更新，在宽限期（默认情况下30秒），pod 被视为“dead”状态</li><li>将 pod 标记为“Terminating”状态</li><li>第三步同时运行，监控到 pod 对象为“Terminating”状态的同时启动 pod 关闭过程</li><li>第三步同时进行，endpoints 控制器监控到 pod 对象关闭，将pod与service匹配的 endpoints 列表中删除</li><li>如果 pod 中定义了 preStop 钩子处理程序，则 pod 被标记为“Terminating”状态时以同步的方式启动执行；若宽限期结束后，preStop 仍未执行结束，第二步会重新执行并额外获得一个2秒的小宽限期</li><li>Pod 内对象的容器收到 TERM 信号</li><li>宽限期结束之后，若存在任何一个运行的进程，pod 会收到 SIGKILL 信号</li><li>Kubelet 请求 API Server 将此 Pod 资源宽限期设置为0从而完成删除操作</li></ul><h5 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h5><ul><li>通过Kubectl提交一个新的映射到该Pod的Service的创建请求</li><li>ControllerManager会通过Label标签查询到相关联的Pod实例，然后生成Service的Endpoints信息，并通过APIServer写入到etcd中</li><li>所有Node上运行的Proxy进程通过APIServer查询并监听Service对象与其对应的Endpoints信息，建立一个软件方式的负载均衡器来实现Service访问到后端Pod的流量转发功能</li></ul><h4 id="17、Pod状态"><a href="#17、Pod状态" class="headerlink" title="17、Pod状态"></a>17、Pod状态</h4><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/16.png" alt="title"></p><h4 id="18、声明式API"><a href="#18、声明式API" class="headerlink" title="18、声明式API"></a>18、声明式API</h4><h5 id="k8s-API"><a href="#k8s-API" class="headerlink" title="k8s API"></a>k8s API</h5><p>Kubernetes 项目中，一个 API 对象在 Etcd 里的完整资源路径，是由：Group（API 组）、Version（API 版本）和 Resource（API 资源类型）三个部分组成的。</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/18.png" alt="title"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">如果现在要声明一个CronJob对象，那么YAML的开始部分会这么写</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v2alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">CronJob就是这个API对象的资源类型，Batch就是它们的组，v2alpha1就是它的版本</span></span><br></pre></td></tr></table></figure><h5 id="命令式"><a href="#命令式" class="headerlink" title="命令式"></a>命令式</h5><p><strong>命令行式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker service create --name nginx --replicas 2  nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker service update --image nginx:1.7.9 nginx</span></span><br></pre></td></tr></table></figure><h5 id="命令式配置文件"><a href="#命令式配置文件" class="headerlink" title="命令式配置文件"></a>命令式配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f nginx.yaml</span></span><br></pre></td></tr></table></figure><p>创建出来一个Pod之后，更新容器镜像版本：修改yaml文件的Pod template部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl replace -f nginx.yaml</span></span><br></pre></td></tr></table></figure><h5 id="声明式API"><a href="#声明式API" class="headerlink" title="声明式API"></a>声明式API</h5><p>对于上述yaml文件，进行kubectl apply操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f nginx.yaml</span></span><br></pre></td></tr></table></figure><p>同样的，修改过镜像版本后，执行kubectl apply，更新pod，触发滚动更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f nginx.yaml</span></span><br></pre></td></tr></table></figure><blockquote><p>kubelet apply和kubelet replace区别</p><ul><li>replace 是使用新的yaml文件中的API对象，替换原有API对象</li><li>apply 是对原有API对象PATCH操作<br> 此外，kubetcl set image, kubectl edit也是对原有API对象的修改<br> 这就意味着，kube-apiserver在响应式命令请求的时候，一次只能处理一个，否则多个替换操作的结果就可能导致冲突，而<strong>对于对于声明式请求来说，一次可以进行多个写操作，具备前面提到过的Merge能力</strong></li></ul></blockquote><blockquote><p>所以什么是“声明式API”？<br> 其实就是，通过给一个配置文件（期望的最终状态），然后<strong>通过使用支持patch的命令模式，去叠加的演进对象的最终状态的这样一种做事情的方式</strong></p></blockquote><ul><li><p>声明式API，就是说我们来提供一个好的API对象进行声明，我们期望的状态是啥样子的</p></li><li><p>声明式API允许多个API对象写端，并在Kubernetes中支持以Patch的方式，对API对象进行修改以达到最终期望的实际状态，而无需关心最初的YAML文件的内容</p></li><li><p>基于以上两个能力特性（提供API明确的API对象来声明最终的期望状态+支持多个API对象声明并以PATCH的能力使控制器模型拿到的是最终的期望状态），Kubernetes能在无需外部干预的情况下，只要你给我明确的若干个API对象，我就能够给你无感调谐到你最终期望的状态</p></li></ul><h5 id="应用：Istio"><a href="#应用：Istio" class="headerlink" title="应用：Istio"></a>应用：Istio</h5><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Kubernetes%E7%AF%87/19.png" alt="title"></p><p>Istio项目的最根本组件，是运行在每个应用Pod中的<strong>Envoy容器</strong>。它以sidecar容器的方式，运行在每一个治理的应用Pod中。他的作用是通过配置Pod中的iptables规则，把整个Pod的进出流量接管下来。这样，Istio控制层的Pilot组件，就能够通过调用每个Envoy容器的API，对这个Envoy进行配置，实现微服务治理</p><p><strong>在整个微服务治理的过程中，无论是对Envoy的部署，还是对Envoy代理的配置，这些对于用户和应用都是完全“无感”的。</strong></p><p> 实现这种Envoy容器无感修改的技术，是Kubernetes中一个叫做Dynamic Admission Control的功能，这个功能也叫做Initializer。</p><blockquote><p>后面就可以看到，Dynamic Admission Control，也就是Initilizer，其实也是一个容器起来的Pod。他的功能就是<strong>将存在Etcd中的ConfigMap类型的关于Envoy容器的配置，和用户的Pod API对象通过Kubernetes的PATCH API做merge</strong></p></blockquote><blockquote><p>实际上，在Kubernetes项目中，每当一个Pod或者任何一个API对象通过命令等方式提交给APIServer之后，总要有一些“初始化”性质的工作需要他们被Kubernetes项目正式处理之前进行。这个操作，是一个叫做Admission的功能。这是Kubernetes中一段Admission Controller的代码，可以被选择性地变异进入API Server，在API对象创建后会被立刻调用。但是，如果Envoy的配置修改想用这个功能的话，那么每次都要动态的修改代码重新build并重启APIServer，显然这是不可接受的。所以就有了“热更新”方式的Admission机制，就是上面提到的动态Admission Control技术</p></blockquote><p>具体到例子来分析，看看Istio的效果<br> 受限，用户有一个应用Pod的配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo Hello Kubernetes! &amp;&amp; sleep 3600&#x27;</span>]</span><br></pre></td></tr></table></figure><p>Istio要做的事情，就是上面这个Pod被提交给Kubernetes之后，在对应的API对象中加上Envoy容器的配置（<strong>这里就是无感了</strong>），使API对象对应的yaml文件如下变成下面这样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo Hello Kubernetes! &amp;&amp; sleep 3600&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envoy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lyft/envoy:845747b88f102c0fd262ab234308e9e22f693a1</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/usr/local/bin/envoy&quot;</span>]</span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p><strong>那么，对这个API对象无感的修改，是怎么通过Initializer来实现的呢？</strong></p><ul><li>Istio将这个Envoy容器本身的定义，以ConfigMap的方式，存在Etcd当中，这个ConfigMap（叫做envoy-initializer）的定义举例如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">envoy-initializer</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    containers:</span></span><br><span class="line"><span class="string">      - name: envoy</span></span><br><span class="line"><span class="string">        image: lyft/envoy:845747db88f102c0fd262ab234308e9e22f693a1</span></span><br><span class="line"><span class="string">        command: [&quot;/usr/local/bin/envoy&quot;]</span></span><br><span class="line"><span class="string">        args:</span></span><br><span class="line"><span class="string">          - &quot;--concurrency 4&quot;</span></span><br><span class="line"><span class="string">          - &quot;--config-path /etc/envoy/envoy.json&quot;</span></span><br><span class="line"><span class="string">          - &quot;--mode serve&quot;</span></span><br><span class="line"><span class="string">        ports:</span></span><br><span class="line"><span class="string">          - containerPort: 80</span></span><br><span class="line"><span class="string">            protocol: TCP</span></span><br><span class="line"><span class="string">        resources:</span></span><br><span class="line"><span class="string">          limits:</span></span><br><span class="line"><span class="string">            cpu: &quot;1000m&quot;</span></span><br><span class="line"><span class="string">            memory: &quot;512Mi&quot;</span></span><br><span class="line"><span class="string">          requests:</span></span><br><span class="line"><span class="string">            cpu: &quot;100m&quot;</span></span><br><span class="line"><span class="string">            memory: &quot;64Mi&quot;</span></span><br><span class="line"><span class="string">        volumeMounts:</span></span><br><span class="line"><span class="string">          - name: envoy-conf</span></span><br><span class="line"><span class="string">            mountPath: /etc/envoy</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - name: envoy-conf</span></span><br><span class="line"><span class="string">        configMap:</span></span><br><span class="line"><span class="string">          name: envoy</span></span><br></pre></td></tr></table></figure><p>data的部分就是envoy容器的对应配置字段和volumes的配置。而Initializer的工作，就是把这个部分配置，<strong>自动添加到用户的POD API对象中</strong>。这就用到了Kubernetes的PATCH API，而这种patch操作，正是<strong>声明式API</strong>的主要能力。</p><ul><li>Istio把一个编写好的Initializer作为一个Pod部署在Kubernetes集群中。如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">envoy-initializer</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">envoy-initializer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envoy-initializer</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">envoy-initializer:0.0.1</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>这里envoy-initializer的使用的镜像envoy-initializer:0.0.1就是一个自定义控制器（Custom Controller），是可以自己事先编写好的。<br> 而这个控制器同样也是遵循控制器模型的，他的实际状态是获取到的用户新建的Pod的配置情况，期望状态就是这个Pod里被加入了Envoy容器的定义。伪代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="comment">// 获取新创建的 Pod</span></span><br><span class="line">  pod := client.GetLatestPod()</span><br><span class="line">  <span class="comment">// Diff 一下，检查是否已经初始化过</span></span><br><span class="line">  <span class="keyword">if</span> !isInitialized(pod) &#123;</span><br><span class="line">    <span class="comment">// 没有？那就来初始化一下</span></span><br><span class="line">    doSomething(pod)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果获取到的Pod的API对象中，没有Envoy的容器的定义，那么就开始进行doSomething的初始化，具体做的事情就是前面提到过的，把Etcd中存储的那个关于Envoy容器配置的ConfigMap对象加到一个空的Pod里面去，然后调用Kubernetes的API库中TwoWayMerge<br> Patch方法，把用户Pod对象和新Pod对象 merge。</p><ul><li>至此，Istio对通过声明式API的Patch特性实现Dynamic Adminssion Control功能，进而支持Envoy容器在用户和应用侧无感的能力就实现了。</li></ul><p><strong>Dynamic Admission Control的配置</strong></p><p>Dynamic Admission Control，即Initializer的相关配置（注意，这里不是指的Initializer本身，而是Initializer的配置文件）。<br> 我们可以通过配置这个配置对象，来指明对什么类型的资源进行Initialize的操作。比如下面这段代码，就是对全部的pods都做初始化操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitializerConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">envoy-config</span></span><br><span class="line"><span class="attr">initializers:</span></span><br><span class="line">  <span class="string">//</span> <span class="string">这个名字必须至少包括两个</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envoy.initializer.kubernetes.io</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;&quot;</span> <span class="string">//</span> <span class="string">前面说过，</span> <span class="string">&quot;&quot;</span> <span class="string">就是</span> <span class="string">core</span> <span class="string">API</span> <span class="string">Group</span> <span class="string">的意思</span></span><br><span class="line">        <span class="attr">apiVersions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pods</span></span><br></pre></td></tr></table></figure><p>同时，只要这个对象一杯kubectl apply/create出来之后，Kubernetes就会把这个Initializer的名字（envoy.initializer）打在所有新创建Pod的metada上，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">initializers:</span></span><br><span class="line">    <span class="attr">pending:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envoy.initializer.kubernetes.io</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p><strong>这个字段，就是在Initializer的控制器模型中，根据什么区判断有没有被初始化过的依据，换言之，每当我们自定义的Initialzer在做完Initialize的操作之后，要把metadata.initializers.pending标识删除掉！！！</strong></p><p>除了Kubernetes在我们创建出来kind是InitializerConfiguration的对象后，会自动给所有新建的Pod都打这个标签之外，如果我们没有新建这个InitializerConfiguration对象，但是又想让我的某个Pod去使用某个Initializer的话，这么干：<strong>给对应Pod打metadata.annotations字段</strong>实例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="string">metadata</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">&quot;initializer.kubernetes.io/envoy&quot;:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>而Istio项目的核心，就是用无数个运行在应用Pod中的Envoy容器组成的服务代理网格。这也是Service Mesh的含义。</p><blockquote><p>总地来说，从上到下，灰度升级的切流场景-&gt;(Service Mesh)-&gt;Envoy们组成的服务代理网格-&gt;Envoy的实现-&gt;Kubernetes通过声明式API支持的Patch修改Pod的能力-&gt;声明式API</p></blockquote><h4 id="19、CRD"><a href="#19、CRD" class="headerlink" title="19、CRD"></a>19、CRD</h4><blockquote><p>CRD允许用户在Kubernetes中添加一个跟Pod、Node类似的、新的API资源类型，即：自定义API资源</p></blockquote><p>在 Kubernetes 中一切都可视为资源，Kubernetes 1.7 之后增加了对 CRD 自定义资源二次开发能力来扩展 Kubernetes API，通过 CRD 我们可以向 Kubernetes API 中增加新资源类型，而不需要修改 Kubernetes 源码来创建自定义的 API server，该功能大大提高了 Kubernetes 的扩展能力。</p><p>当你创建一个新的CustomResourceDefinition (CRD)时，Kubernetes API服务器将为你指定的每个版本创建一个新的RESTful资源路径，我们可以根据该api路径来创建一些我们自己定义的类型资源。CRD可以是命名空间的，也可以是集群范围的，由CRD的作用域(scpoe)字段中所指定的，与现有的内置对象一样，删除名称空间将删除该名称空间中的所有自定义对象。customresourcedefinition本身没有名称空间，所有名称空间都可以使用</p><p>在 Kubernetes 中我们使用的 Deployment， DamenSet，StatefulSet, Service，Ingress, ConfigMap, Secret 这些都是资源，而对这些资源的创建、更新、删除的动作都会被称为为事件(Event)，Kubernetes 的 Controller Manager 负责事件监听，并触发相应的动作来满足期望（Spec），这种方式也就是声明式，即用户只需要关心应用程序的最终状态。当我们在使用中发现现有的这些资源不能满足我们的需求的时候，Kubernetes 提供了自定义资源（Custom Resource）和 opertor 为应用程序提供基于 kuberntes 扩展。</p><p><strong>operator</strong> 是一种 kubernetes 的扩展形式，利用自定义资源对象（Custom Resource）来管理应用和组件，允许用户以 Kubernetes 的声明式 API 风格来管理应用及服务。operator 定义了一组在 Kubernetes 集群中打包和部署复杂业务应用的方法，operator主要是为解决特定应用或服务关于如何运行、部署及出现问题时如何处理提供的一种特定的自定义方式</p><p><strong>operator-CRD</strong></p><h4 id="20、ConfigMap"><a href="#20、ConfigMap" class="headerlink" title="20、ConfigMap"></a>20、ConfigMap</h4><p>在生产环境中经常会遇到需要修改配置文件的情况，传统的修改方式不仅会影响到服务的正常运行，而且操作步骤也很繁琐。为了解决这个问题，kubernetes项目从1.2版本引入了ConfigMap功能，<strong>用于将应用的配置信息与程序的分离</strong>。这种方式不仅可以实现应用程序被的复用，而且还可以通过不同的配置实现更灵活的功能。在创建容器时，<strong>用户可以将应用程序打包为容器镜像后，通过环境变量或者外接挂载文件的方式进行配置注入</strong>。<br>ConfigMap是以<code>key:value</code>的形式保存配置项，既可以用于表示一个变量的值（例如config=info），也可以用于表示一个完整配置文件的内容（例如server.xml=&lt;?xml…&gt;…）</p><h5 id="configMap配置Deployment自动更新"><a href="#configMap配置Deployment自动更新" class="headerlink" title="configMap配置Deployment自动更新"></a>configMap配置Deployment自动更新</h5><ul><li><p><strong>ENV 是在容器启动的时候注入的，启动之后 kubernetes 就不会再改变环境变量的值</strong>，且同一个 namespace 中的 pod 的环境变量是不断累加的。</p></li><li><p>Volume不同，<strong>kubelet的源码里KubeletManager中是有Volume Manager</strong>的，这就说明Kubelet会监控管理每个Pod中的Volume资源，当发现配置的Volume更新后，就会重建Pod，以更新所用的Volume，但是会有一定延迟，大概10秒以内。</p></li><li><p>Config Map一定触发Deployment滚动更新呢？可以通过修改 pod annotations 的方式强制触发滚动更新。这样一定会触发更新，亲测有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl patch deployment test-deploy --patch <span class="string">&#x27;&#123;&quot;spec&quot;: &#123;&quot;template&quot;: &#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;: &#123;&quot;update&quot;: &quot;2&quot; &#125;&#125;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://link.segmentfault.com/?url=https://github.com/iyacontrol/configmap-reload">configmap-reload</a> 采用rust语言实现，作为主业务容器的sidercar，主要用于k8s当中监听configmap的变化，待变化后通过http接口的方式通知主业务。在资源消耗上，更小</p></li></ul><h4 id="21、部署Kubernetes-k8s-时，为什么要关闭swap、selinux、防火墙"><a href="#21、部署Kubernetes-k8s-时，为什么要关闭swap、selinux、防火墙" class="headerlink" title="21、部署Kubernetes(k8s)时，为什么要关闭swap、selinux、防火墙"></a>21、部署Kubernetes(k8s)时，为什么要关闭swap、selinux、防火墙</h4><p>关于防火墙的原因（nftables后端兼容性问题，产生重复的防火墙规则）</p><blockquote><p>The<code>iptables</code>tooling can act as a compatibility layer, behaving like iptables but actually configuring nftables. This nftables backend is not compatible with the current kubeadm packages: it causes duplicated firewall rules and breaks<code>kube-proxy</code>.</p></blockquote><p>关于selinux的原因（关闭selinux以允许容器访问宿主机的文件系统）</p><blockquote><p>Setting SELinux in permissive mode by running<code>setenforce 0</code>and<code>sed ...</code>effectively disables it. This is required to allow containers to access the host filesystem, which is needed by pod networks for example. You have to do this until SELinux support is improved in the kubelet.</p></blockquote><p>关闭swap(一个node性能不足时应该立即迁移到性能足够的node上，不能让swap拖慢进度)</p><p>所以关闭swap主要是为了性能考虑。</p><p>当然为了一些节省资源的场景，比如运行容器数量较多，可添加kubelet参数 <code>--fail-swap-on=false</code>来解决。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft原理-2021年春招准备</title>
    <link href="/2021/02/03/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Raft%E5%8E%9F%E7%90%86/"/>
    <url>/2021/02/03/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Raft%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ul><li>分布式一致性算法: zookeeper</li><li><a href="http://thesecretlivesofdata.com/raft/#replication">动画演示</a></li></ul><h4 id="1、复制状态机"><a href="#1、复制状态机" class="headerlink" title="1、复制状态机"></a>1、复制状态机</h4><p>一个分布式的复制状态机系统由多个复制单元组成，每个复制单元均是一个状态机，它的状态保存在一组状态变量中，状态机的变量只能通过外部命令来改变。</p><p>简单理解的话，可以想象成是一组服务器，每个服务器是一个状态机，服务器的运行状态只能通过一行行的命令来改变。每一个状态机存储一个包含一系列指令的日志，严格按照顺序逐条执行日志中的指令，如果所有的状态机都能按照相同的日志执行指令，那么它们最终将达到相同的状态。</p><p>在复制状态机模型下，只要保证了操作日志的一致性，我们就能保证该分布式系统状态的一致性</p><h4 id="2、选举过程"><a href="#2、选举过程" class="headerlink" title="2、选举过程"></a>2、选举过程</h4><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p>在Raft协议中，将时间分成了一些任意长度的时间片，称为term，term使用连续递增的编号的进行识别，每一个term都从新的选举开始，candidate们会努力争取称为leader。如下图所示：</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Raft%E7%AE%97%E6%B3%95/2.jpg" alt="title"></p><h5 id="节点状态"><a href="#节点状态" class="headerlink" title="节点状态"></a>节点状态</h5><ul><li>follower：所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态</li><li>candidate：会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)</li><li>leader：所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：<ul><li>复制日志到所有follower结点(replicate entry)</li><li>大部分结点响应时才提交日志</li><li>通知所有follower结点日志已提交</li><li>所有follower也提交日志</li><li>现在整个系统处于一致的状态</li></ul></li></ul><h5 id="选举"><a href="#选举" class="headerlink" title="选举"></a>选举</h5><ul><li><p>当follower在选举超时时间(election timeout)内未收到leader的心跳消息(append entries)，则变成candidate状态。为了避免选举冲突，这个超时时间是一个150~300ms之间的随机数。</p></li><li><p>成为candidate的结点发起新的选举期(election term)去“拉选票”</p></li><li><p>重置自己的计时器，投自己一票，发送 Request Vote消息</p></li><li><p>如果接收结点在新term内没有投过票那它就会投给此candidate，并重置它自己的选举超时时间。</p></li><li><p>candidate拉到大部分选票就会成为leader，并定时发送心跳——Append Entries消息，去重置各个follower的计时器。当前Term会继续直到某个follower接收不到心跳并成为candidate。</p></li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Raft%E7%AE%97%E6%B3%95/1.png" alt="title"></p><h4 id="3、Log-Replication-日志复制"><a href="#3、Log-Replication-日志复制" class="headerlink" title="3、Log Replication(日志复制)"></a>3、Log Replication(日志复制)</h4><blockquote><p>这是通过使用用于心跳的相同的附加条目消息来实现的。</p></blockquote><ul><li>客户端发送一条change到leader</li><li>change记录到leader的日志中</li><li>leader在下一个心跳中将change发给follwer(AppendEntries RPC用以复制命令)</li><li>一旦大多数follower承认一个条目，leader提交命令并将执行结果返回客户端</li><li>leader将给client发送一条response</li></ul><p><strong>当存在多leader冲突时，所有的提交都会以最新的term的leader为主</strong></p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Raft%E7%AE%97%E6%B3%95/3.png" alt="title"></p><h4 id="4、日志压缩"><a href="#4、日志压缩" class="headerlink" title="4、日志压缩"></a>4、日志压缩</h4><p>随着日志大小的增长，会占用更多的内存空间，处理起来也会耗费更多的时间，对系统的可用性造成影响。</p><p>Snapshotting是最简单的压缩方法，系统的全部状态会写入一个snapshot保存起来，然后丢弃截止到snapshot时间点之前的所有日志。</p><p>每一个server都有自己的snapshot，它只保存当前状态，如上图中的当前状态为x=0,y=9，而last included index和last included term代表snapshot之前最新的命令，用于AppendEntries的状态检查。</p><p>虽然每一个server都保存有自己的snapshot，但是当follower严重落后于leader时，leader需要把自己的snapshot发送给follower加快同步，此时用到了一个新的RPC：InstallSnapshot RPC</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大数据基础</title>
    <link href="/2021/02/03/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/02/03/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="温故知新"><a href="#温故知新" class="headerlink" title="温故知新"></a>温故知新</h3><p>1、大数据的基本特征？</p><blockquote><p>大数据技术：Hadoop和类Hadoop的分布式技术体系</p></blockquote><ul><li>数据规模巨大</li><li>数据类型多样</li><li>生成和处理速度极快</li><li>价值巨大但密度较低</li></ul><p>2、Hadoop经历了几个发展阶段，各有什么特点？</p><ul><li>前Hadoop时代<ul><li>Google发表了《Google File System》论文</li><li>Google发表了《MapReduce》论文</li><li>Apache Hadoop项目启动，并支持MapReduce与HDF独立发展</li><li>Google发表《BigTable》论文</li></ul></li><li>Hadoop时代<ul><li>Hadoop成为Apache顶级项目</li><li>Hadoop顶级项目Cloudera成立</li><li>Cloudera发布Hadoop发行版CDH，并开源</li><li>HDFS NameNode HA加入Hadoop主版本</li></ul></li></ul><p>3、大数据技术体系大致分为几层？每层包括哪些技术？</p><p><img src="https://user-images.githubusercontent.com/17808702/66922275-52000780-f059-11e9-82bd-d71fb2140413.png" alt="image"></p><p>4、Apache Hadoop 项目包含哪些子项目？讲述一下他们的功能</p><ul><li>分布式文件系统-HDFS<ul><li>一次写入，多次读取</li></ul></li><li>批处理计算框架-MapReduce<ul><li>面向批处理的分布式计算框架</li></ul></li><li>高性能计算框架-Spark</li><li>分布式资源管理系统-YARN<ul><li>解决MapReduce1.X中的缺陷</li></ul></li><li>容器技术-Docker<ul><li>开源容器应用引擎</li></ul></li><li>容器化集群操作系统-Kubernetes<ul><li>开源容器化集群管理引擎</li></ul></li><li>Hadoop数据仓库&amp;SQL引擎Hive</li><li>分布式NoSQL数据库-HBase</li><li>分布式搜索引擎-ElastisSearch</li></ul><p>5、Spark包含哪些组件？简述一下他们的功能</p><ul><li>Spark Core：基础计算卡框架（批处理、交互式分析）</li><li>Spark SQL：SQL引擎（海量结构化数据的高性能查询）</li><li>Spark Streaming：实时流处理（微批）</li><li>Spark Mlib：机器学习</li><li>Spark GraphX：图计算</li></ul><p>6、HDFS架构中包含哪些角色？各自承担什么功能？</p><p><img src="https://user-images.githubusercontent.com/17808702/66923741-f7b47600-f05b-11e9-9179-fc17b6402b95.png" alt="image"></p><ul><li>Active NameNode<ul><li>活动Master管理节点</li><li>管理命名空间</li><li>管理元数据：文件位置、所有者、权限、数据块</li><li>管理Block副本（默认三个副本）</li></ul></li><li>Standby NameNode<ul><li>热备份Master节点</li><li>Active宕机后成为新的Active</li><li>同步元数据，周期性的下载edits日志，生成fsimage镜像检查点</li></ul></li><li>NameNode元数据文件<ul><li>编辑edit日志文件：保存了最新的检查点</li><li>fsimage：元数据检查点镜像文件</li></ul></li><li>DataNode<ul><li>Slave工作节点</li><li>存储Block和数据校验和</li><li>执行客户端发送</li></ul></li><li>Block数据块<ul><li>HDFS最小存储单元</li><li>文件写入HDFS会被切分成多个Block</li><li>Block大小固定，默认为128M</li><li>默认情况下，每个Block有3个副本</li></ul></li><li>Client<ul><li>将文件切分成Block</li><li>与NameNode交互，获取文件访问计划和相关元数据</li><li>与DataNode交互，读取或写入数据</li><li>管理HDFS</li></ul></li></ul><p>7、为什么HDFS不适合存储大量的小文件？</p><ul><li>HDFS不适合大量小文件的存储，因namenode将文件系统的元数据存放在内存中，因此存储的文件数目受限于 namenode的内存大小。HDFS中每个文件、目录、数据块占用150Bytes。如果存放的文件数目过多的话会占用很大的内存</li><li>放小文件与大文件占据的内存是相同的</li><li>HDFS适用于高吞吐量，而不适合低时间延迟的访问。如果同时存入大量的小文件会花费很长的时间</li></ul><p>8、Block副本放置的策略是什么？如何理解？</p><ul><li>副本1:放在Client所在节点 -对于远程Client，系统会随机选择节点</li><li>副本2:放在不同的机架节点上</li><li>副本3:放在与第二个副本同一机架的不同节点上</li><li>副本N:随机选择</li><li>节点选择:同等条件下优先选择空闲节点</li></ul><img src="https://user-images.githubusercontent.com/17808702/67069834-f8aaec00-f1b0-11e9-96ed-9bd5ffdbf205.png" alt="image" style="zoom: 33%;" /><p>9、HDFS离开安全模式的条件是什么？</p><blockquote><p>安全模式下HDFS只读</p></blockquote><ul><li>Block上报率:DataNode上报的可用Block个数 / NameNode元数据记录的Block个数</li><li>当Block上报率 &gt;= 阈值时，HDFS才能离开安全模式，默认阈值为0.999 </li><li>不建议手动强制退出安全模式</li></ul><p>10、HDFS是如何实现高可用的？</p><ul><li>Active NN与Standby NN的主备切换</li><li>利用QJM实现元数据高可用<ul><li>只要保证Quorum(法定人数)数量的操作成功，就认为这是一次最终成功的操作</li><li>QJM共享存储系统<ul><li>部署奇数(2N+1)个JournalNode</li><li>JournalNode负责存储edits编辑日志</li><li>写edits的时候，只要超过半数(N+1)的 JournalNode返回成功，就代表本次写入成功</li><li>最多可容忍N个JournalNode宕机 </li><li>基于Paxos算法实现</li></ul></li></ul></li><li>利用ZooKeeper实现Active节点选举</li></ul><img src="https://user-images.githubusercontent.com/17808702/67073283-580cfa00-f1b9-11e9-8265-24f486624ef1.png" alt="image" style="zoom: 67%;" /><p><img src="https://user-images.githubusercontent.com/17808702/67073342-77a42280-f1b9-11e9-87e0-132c6c914c73.png" alt="image"></p><hr><h3 id="分布式资源管理系统YARN"><a href="#分布式资源管理系统YARN" class="headerlink" title="分布式资源管理系统YARN"></a>分布式资源管理系统YARN</h3><h4 id="1、YARN简介"><a href="#1、YARN简介" class="headerlink" title="1、YARN简介"></a>1、YARN简介</h4><blockquote><p>1、作业(job)分解后是task，运行task需要资源</p><p>2、任务的调度，分析哪些任务是并行的串行的</p></blockquote><h5 id="1-1-MapReduce的缺陷（Hadoop-1-X）"><a href="#1-1-MapReduce的缺陷（Hadoop-1-X）" class="headerlink" title="1.1 MapReduce的缺陷（Hadoop 1.X）"></a>1.1 MapReduce的缺陷（Hadoop 1.X）</h5><ul><li>身兼两个职能：计算架构+资源管理系统<ul><li>Job Tracker<ul><li>既做<strong>资源管理</strong>，又做<strong>任务调度</strong> </li><li>任务太重，开销过大</li><li>存在单点故障</li></ul></li><li>Task Tracker</li></ul></li></ul><img src="https://user-images.githubusercontent.com/17808702/66628792-7790a980-ec32-11e9-891b-2413534c07cd.png" alt="image" style="zoom:33%;" /><h4 id="2、YARN原理"><a href="#2、YARN原理" class="headerlink" title="2、YARN原理"></a>2、YARN原理</h4><h5 id="2-1-系统架构"><a href="#2-1-系统架构" class="headerlink" title="2.1 系统架构"></a>2.1 系统架构</h5><blockquote><p><strong>计算跟着数据走</strong>，用于计算的程序分配到YARN节点上，YARN找到DataNode的数据</p></blockquote><ul><li>ResourceManager<ul><li>知道哪儿有DataNode</li><li>集群资源的统一管理和分配</li><li><strong>资源管理</strong>，账本，目录</li><li>将资源分配给应用（ApplicationMaster）</li></ul></li><li>NodeManager<ul><li>管理本机的资源即管理container（最小资源单位）</li><li>container资源的生命周期</li></ul></li><li>ApplicationMaster<ul><li>管理作业，将作业分解为task，返回给RM</li><li><strong>任务管理</strong></li><li>特殊的管理进程，YARN提供MapReduce的ApplicationMaster实现</li><li>支持MapReduce</li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/17808702/66629236-ba06b600-ec33-11e9-8a90-1014b2a5ec18.png" alt="image"></p><p>工作机制：</p><img src="https://user-images.githubusercontent.com/17808702/66629801-6a28ee80-ec35-11e9-80e0-bed84a9e4c49.png" alt="image" style="zoom: 33%;" /><h5 id="2-2-高可用"><a href="#2-2-高可用" class="headerlink" title="2.2 高可用"></a>2.2 高可用</h5><ul><li>ResourceManager</li></ul><img src="https://user-images.githubusercontent.com/17808702/66630296-85e0c480-ec36-11e9-8303-7bd02a7be71e.png" alt="image" style="zoom:33%;" /><h4 id="YARN调度策略"><a href="#YARN调度策略" class="headerlink" title="YARN调度策略"></a>YARN调度策略</h4><blockquote><p>分配container</p></blockquote><ul><li>FIFO调度器（先进先出）</li><li>容器调度器<ul><li>核心思想：提前做预算，在预算指导下分享集群资源</li></ul></li><li>公平调度器：见面分一半</li></ul><h4 id="YARN运维与监控"><a href="#YARN运维与监控" class="headerlink" title="YARN运维与监控"></a>YARN运维与监控</h4><ul><li><strong>CTRL^C不能终止任务，只是停止其在控制台的信息输出，任务仍在集群中运行</strong></li></ul><hr><h3 id="分布式计算框架"><a href="#分布式计算框架" class="headerlink" title="分布式计算框架"></a>分布式计算框架</h3><h4 id="MapReduce-简介"><a href="#MapReduce-简介" class="headerlink" title="MapReduce 简介"></a>MapReduce 简介</h4><h5 id="1-1-MR简介"><a href="#1-1-MR简介" class="headerlink" title="1.1 MR简介"></a>1.1 MR简介</h5><ul><li>2004年10月 Google发表了MR论文</li><li>MapReduce被分为Map（映射）阶段和Reduce（化简）阶段</li><li>分而治之，并行计算</li><li>移动计算，并非移动移动</li><li>MapReduce是图纸，YARN是建造者</li><li>场景：<ul><li>网站的PV、UV统计</li><li>搜索引擎构建索引，不需要时间，对时间要求低，不容易出错</li><li>海量数据查询</li></ul></li><li>不适用场景：<ul><li>OLAP</li><li>毫秒级、秒级查询</li></ul></li></ul><h5 id="1-2-MR原理"><a href="#1-2-MR原理" class="headerlink" title="1.2 MR原理"></a>1.2 MR原理</h5><blockquote><p>Mapping 输出3份，Reducing输入4份，不对等，所以shuffling（洗牌），shuffling并不存在是虚拟的</p><p>实践中，Map多，reduce少</p></blockquote><p><img src="https://user-images.githubusercontent.com/17808702/66633466-787b0880-ec3d-11e9-968c-60cc64576b66.png" alt="image"></p><ul><li>Job&amp;Task</li><li>Split<ul><li>逻辑概念，包含元数据信息，如数据的起始位置、长度、所在的节点等</li><li>Split决定Map数量</li><li>Split大小默认等于Block的大小</li></ul></li><li>Map（映射）<ul><li>key-value的形式&lt;a, 1&gt;</li></ul></li><li>Reduce（化简）<ul><li>先写Buffer，落盘（内存，硬盘）</li></ul></li><li>Shuffle（混洗）优化的关键<ul><li>Hash 取模–将一个数据集均匀随机打散<ul><li>Key做Hash%reduce的数量</li></ul></li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/17808702/66638258-2c34c600-ec47-11e9-949f-fd5b888da2f2.jpeg" alt="IMG_0A65EA191D8C-1"><br><img src="https://user-images.githubusercontent.com/17808702/66638278-3656c480-ec47-11e9-9d9a-db39f6692c2e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/17808702/66638296-3d7dd280-ec47-11e9-8126-5b17e4ee87f5.png" alt="image" style="zoom: 50%;" /></p><h4 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h4><h5 id="1-1-Spark简介"><a href="#1-1-Spark简介" class="headerlink" title="1.1 Spark简介"></a>1.1 Spark简介</h5><ul><li>MapReduce存在缺陷</li><li>计算框架种类多，选型难，学习成本高</li><li>统一计算框架，简化技术选型<ul><li>统一的框架下，实现批处理、流处理、交互式计算、机器学习</li></ul></li><li>实时，对准确率要求相对较低，<strong>主要在内存中，实在躲不过去才落盘（放到磁盘）</strong></li><li>大规模分布式通用计算引擎<ul><li>Spark Core</li><li>Spark SQL</li><li>Spark Streaming</li><li>Spark Mlib</li><li>Spar图计算</li></ul></li></ul><h5 id="1-2-Spark原理：编程模型"><a href="#1-2-Spark原理：编程模型" class="headerlink" title="1.2 Spark原理：编程模型"></a>1.2 Spark原理：编程模型</h5><ul><li><strong>RDD</strong>(弹性分布式数据集，大的表，分布式)<ul><li>分布式</li><li><strong>只读</strong></li><li>弹性，不怕坏，转换操作（将坏的Partition重算）</li></ul></li></ul><img src="https://user-images.githubusercontent.com/17808702/66638360-5c7c6480-ec47-11e9-87f7-eb6c292167e4.png" alt="image" style="zoom:33%;" /><ul><li>RDD操作：<ul><li>Transformation（转换）<ul><li>从无到有生成RDD</li><li>从已有的RDD生成新的RDD</li><li>惰性计算，只记录关系，最后落盘的时候计算</li></ul></li><li>Action（动作）<ul><li>算完了，落盘了</li></ul></li></ul></li><li>RDD依赖：<ul><li>窄依赖（推荐）<ul><li>父RDD的分区，最多被子RDD的和一个分区使用</li><li>父分区与子分区个数对等</li></ul></li><li>宽依赖（尽可能少用）<ul><li>子RDD严重依赖父RDD的所有分区<ul><li>分区就要排序，排序就要落盘，落盘就要shuffing，速度就慢了</li></ul></li><li>父分区与子分区个数对等</li></ul></li></ul></li></ul><img src="https://user-images.githubusercontent.com/17808702/66637998-bfb9c700-ec46-11e9-82cd-26c072e9a878.png" alt="image" style="zoom: 50%;" />![image](https://user-images.githubusercontent.com/17808702/66638044-d6601e00-ec46-11e9-8baa-4dcc45ca255f.png)<h5 id="1-3-Spark原理：运行模式"><a href="#1-3-Spark原理：运行模式" class="headerlink" title="1.3 Spark原理：运行模式"></a>1.3 Spark原理：运行模式</h5><ul><li>抽象模式<ul><li>Driver<ul><li>一个Spark程序有一个Driver，一个Driver创建一个SparkContext，程序的main函数运行在Driver中</li><li>负责解析Spark程序、划分Stage、调度任务到Executor上执行</li></ul></li><li>SparkContext<ul><li>负责加载配置信息，初始化运行环境，创建DAGScheduler和TaskScheduler</li></ul></li><li>Executor<ul><li>负责执行Driver分发的任务，一个节点可以启动多个Executor，每个Executor通过多线程运行多个任务 </li><li>Task -Spark运行的基本单位，一个Task负责处理若干RDD分区的计算逻辑</li></ul></li></ul></li></ul><img src="https://user-images.githubusercontent.com/17808702/67075670-35311480-f1be-11e9-9d5f-d83f13f2ae11.png" alt="image" style="zoom:40%;" /><ul><li>Local模式</li><li>Standalone模式</li><li>YARN模式</li></ul><h5 id="1-4-Spark原理：运行过程"><a href="#1-4-Spark原理：运行过程" class="headerlink" title="1.4 Spark原理：运行过程"></a>1.4 Spark原理：运行过程</h5><blockquote><p>DAG：生成有向无环图</p></blockquote><img src="https://user-images.githubusercontent.com/17808702/67075975-da4bed00-f1be-11e9-8959-cc924a4d0ac7.png" alt="image" style="zoom:40%;" /><ul><li>生成逻辑计划</li></ul><img src="https://user-images.githubusercontent.com/17808702/67076281-6bbb5f00-f1bf-11e9-8216-4be83b263469.png" alt="image" style="zoom: 33%;" /><ul><li>生成物理计划</li></ul><img src="https://user-images.githubusercontent.com/17808702/67076291-74139a00-f1bf-11e9-9639-888bf11bea3e.png" alt="image" style="zoom:33%;" /><ul><li>任务调度与执行</li></ul><img src="https://user-images.githubusercontent.com/17808702/67076313-7f66c580-f1bf-11e9-98b2-b481fb23b344.png" alt="image" style="zoom:33%;" /><hr><h3 id="分布式ETL工具Sqoop"><a href="#分布式ETL工具Sqoop" class="headerlink" title="分布式ETL工具Sqoop"></a>分布式ETL工具Sqoop</h3><blockquote><p>将关系数据库里面的内容进行迁移</p></blockquote><h4 id="1-Sqoop简介"><a href="#1-Sqoop简介" class="headerlink" title="1. Sqoop简介"></a>1. Sqoop简介</h4><h5 id="1-1-Sqoop是什么"><a href="#1-1-Sqoop是什么" class="headerlink" title="1.1 Sqoop是什么"></a>1.1 Sqoop是什么</h5><ul><li>Hadoop与关系数据库的主要的迁移工具</li></ul><h5 id="1-2-Sqoop版本"><a href="#1-2-Sqoop版本" class="headerlink" title="1.2 Sqoop版本"></a>1.2 Sqoop版本</h5><p><img src="https://user-images.githubusercontent.com/17808702/67071207-85a37480-f1b4-11e9-9f9c-63655d75adad.png" alt="image"></p><h4 id="2-Sqoop原理"><a href="#2-Sqoop原理" class="headerlink" title="2.Sqoop原理"></a>2.Sqoop原理</h4><h5 id="2-1数据导入"><a href="#2-1数据导入" class="headerlink" title="2.1数据导入"></a>2.1数据导入</h5><img src="https://user-images.githubusercontent.com/17808702/67071301-c0a5a800-f1b4-11e9-83db-14191e925f4c.png" alt="image" style="zoom:33%;" /><h5 id="2-2数据导出"><a href="#2-2数据导出" class="headerlink" title="2.2数据导出"></a>2.2数据导出</h5><img src="https://user-images.githubusercontent.com/17808702/67071336-d3b87800-f1b4-11e9-90aa-dd97dd057d6c.png" alt="image" style="zoom:33%;" /><h4 id="3-Sqoop使用"><a href="#3-Sqoop使用" class="headerlink" title="3.Sqoop使用"></a>3.Sqoop使用</h4><hr><h3 id="分布式数据采集工具Flume"><a href="#分布式数据采集工具Flume" class="headerlink" title="分布式数据采集工具Flume"></a>分布式数据采集工具Flume</h3><h4 id="1、Flume简介"><a href="#1、Flume简介" class="headerlink" title="1、Flume简介"></a>1、Flume简介</h4><h5 id="1-1-什么是Flume"><a href="#1-1-什么是Flume" class="headerlink" title="1.1 什么是Flume"></a>1.1 什么是Flume</h5><ul><li>Flume是一个分布式海量数据采集、聚合和传输系统</li><li>基于事件的海量数据采集 </li><li>数据流模型:Source–&gt;Channel–&gt;Sink </li><li>事务机制:支持重读重写，保证消息传递的可靠性</li></ul><h4 id="2、Flume原理"><a href="#2、Flume原理" class="headerlink" title="2、Flume原理"></a>2、Flume原理</h4><h5 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h5><ul><li>Event:事件，最小数据传输单元，由Header和Body组成</li><li>Agent:代理，JVM进程，最小运行单元，由Source、Channel、Sink三个基本组件构成，负责将外部数据源产生的数据以Event的形式传输到目的地</li><li>Source:负责对接各种外部数据源，将采集到的数据封装成Event，然后写入Channel</li><li>Channel:Event暂存容器，负责保存Source发送的Event，直至被Sink成功读取</li><li>Sink:负责从Channel读取Event，然后将其写入外部存储，或传输给下一阶段的Agent</li><li>映射关系:1个Source 多个Channel，1个Channel 多个Sink，1个Sink 1个Channel</li></ul><img src="https://user-images.githubusercontent.com/17808702/67073827-78898400-f1ba-11e9-9015-d542fc637db0.png" alt="image" style="zoom: 67%;" /><h5 id="2-2-Flume组件"><a href="#2-2-Flume组件" class="headerlink" title="2.2 Flume组件"></a>2.2 Flume组件</h5><ul><li>Source组件</li><li>Channel组件</li><li>Sink组件</li></ul><img src="https://user-images.githubusercontent.com/17808702/67074011-dae28480-f1ba-11e9-9a50-234995f56c70.png" alt="image" style="zoom: 50%;" /><img src="https://user-images.githubusercontent.com/17808702/67074046-ed5cbe00-f1ba-11e9-86e9-ae12f6c5df22.png" alt="image" style="zoom:50%;" /><img src="https://user-images.githubusercontent.com/17808702/67074069-f77ebc80-f1ba-11e9-9603-a1c406dd0e76.png" alt="image" style="zoom:50%;" /><img src="https://user-images.githubusercontent.com/17808702/67074089-fe0d3400-f1ba-11e9-839f-a80435d65a9b.png" alt="image" style="zoom:50%;" /><h5 id="2-3-Flume数据流"><a href="#2-3-Flume数据流" class="headerlink" title="2.3 Flume数据流"></a>2.3 Flume数据流</h5><h5 id="2-4Flume架构"><a href="#2-4Flume架构" class="headerlink" title="2.4Flume架构"></a>2.4Flume架构</h5><ul><li>单层架构</li></ul><img src="https://user-images.githubusercontent.com/17808702/67074196-2e54d280-f1bb-11e9-8557-024bc4523500.png" alt="image" style="zoom: 50%;" /><ul><li>多层架构</li></ul><img src="https://user-images.githubusercontent.com/17808702/67074219-3c0a5800-f1bb-11e9-8285-b8928b96a3a5.png" alt="image" style="zoom:50%;" /><h4 id="3、Flume使用"><a href="#3、Flume使用" class="headerlink" title="3、Flume使用"></a>3、Flume使用</h4><hr><h3 id="分布式消息队列KaFka"><a href="#分布式消息队列KaFka" class="headerlink" title="分布式消息队列KaFka"></a>分布式消息队列KaFka</h3><h4 id="1、Kafka简介"><a href="#1、Kafka简介" class="headerlink" title="1、Kafka简介"></a>1、Kafka简介</h4><h5 id="1-1-什么是Kafka"><a href="#1-1-什么是Kafka" class="headerlink" title="1.1 什么是Kafka"></a>1.1 什么是Kafka</h5><ul><li>基于发布/订阅的分布式消息系统</li><li>消息持久化:采用时间复杂度 的磁盘存储结构，即使级以上数据也能保证常数时间的访问速度</li><li>高吞吐: 即使在廉价的商用机器上，也能达到单机每秒10万条消息的传输</li><li>高容错:多分区多副本 • 易扩展:新增机器，集群无需停机，自动感知</li><li>同时支持离线、实时数据处理</li></ul><h5 id="1-2-应用场景"><a href="#1-2-应用场景" class="headerlink" title="1.2 应用场景"></a>1.2 应用场景</h5><ul><li>异步通信</li><li>应用解耦</li><li>峰值处理</li></ul><h4 id="2、Kafka原理"><a href="#2、Kafka原理" class="headerlink" title="2、Kafka原理"></a>2、Kafka原理</h4><h5 id="2-1-基本概念-1"><a href="#2-1-基本概念-1" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h5><ul><li>Broker(代理)<ul><li>Kafka的一个实例或节点，一个或多个Broker组成一个Kafka集群</li></ul></li><li>Topic(主题)<ul><li>Topic是Kafka中同一类数据的集合，相当于数据库中的表</li><li>Producer将同一类数据写入同一个Topic，Consumer从同一个Topic中读取同类数据 </li><li>Topic是逻辑概念，用户只需指定Topic就可以生产或消费数据，不必关心数据存于何处 </li></ul></li><li>Partition(分区)<ul><li>分区是一个有序的、不可修改的消息队列，分区内消息有序存储</li><li>一个Topic可分为多个分区，相当于把一个数据集分成多份，分别存储不同的分区中</li><li>Parition是物理概念，每个分区对应一个文件夹，其中存储分区的数据和索引文件</li></ul></li><li>Replication(副本) <ul><li>一个分区可以设置多个副本，副本存储在不同的Broker中</li></ul></li><li>Producer</li><li>Consumer</li><li>Consumer Group(CG 消费组)<ul><li>一条消息可以发送给多个不同的CG，一个CG中只能有一个Consumer读取该消息</li></ul></li><li>Zookeeper</li></ul><h5 id="2-2-工作机制"><a href="#2-2-工作机制" class="headerlink" title="2.2 工作机制"></a>2.2 工作机制</h5><ul><li>消息在Broker中按Topic(主题)进行分类，相当于为每个消息打个标签</li><li>一个Topic可划分为多个Partition(分区)</li><li>每个Partition可以有多个Replication(副本)</li><li>消息存储在Broker的某一Topic的某一Partition中，同时存在多个副本</li></ul><p><img src="https://user-images.githubusercontent.com/17808702/67077808-978c1400-f1c2-11e9-8907-a72a61c8368a.png" alt="image"></p><h3 id="分区分桶要考"><a href="#分区分桶要考" class="headerlink" title="分区分桶要考"></a>分区分桶要考</h3><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><h4 id="2、Search原理"><a href="#2、Search原理" class="headerlink" title="2、Search原理"></a>2、Search原理</h4><h5 id="2-1-数学模型"><a href="#2-1-数学模型" class="headerlink" title="2.1 数学模型"></a>2.1 数学模型</h5><ul><li><p>index</p></li><li><p>type（分类）</p></li><li><p>文档</p></li><li><p>字段</p></li><li><p>映射(Mapping)</p><ul><li>json的格式</li></ul></li></ul><h5 id="2-2-分词与索引"><a href="#2-2-分词与索引" class="headerlink" title="2.2 分词与索引"></a>2.2 分词与索引</h5><ul><li>分词</li><li>倒排索引</li></ul><h5 id="2-3-系统架构"><a href="#2-3-系统架构" class="headerlink" title="2.3 系统架构"></a>2.3 系统架构</h5><ul><li>节点和集群<ul><li>节点：一个ElasticSearch实例</li><li>集群由一个或多个拥有相同claster.name配置的节点组成</li></ul></li><li>主节点<ul><li>负责管理集群内的所有变更</li><li>整个集群所有的节点，都有可能被选为主节点</li><li>配置一般</li></ul></li><li>数据节点<ul><li>开销很大</li><li>负责存储数据</li><li>硬件配置比较高</li></ul></li><li>客户端节点<ul><li>放了一张路由表</li><li>负责路由转发请求</li></ul></li><li>分片<ul><li>Search的数据存储单元，数据的容器，Document（文档）存储在分片里面</li></ul></li></ul><h2 id="HyperBase"><a href="#HyperBase" class="headerlink" title="HyperBase"></a>HyperBase</h2><h4 id="1、HyperBase-简介"><a href="#1、HyperBase-简介" class="headerlink" title="1、HyperBase 简介"></a>1、HyperBase 简介</h4><h5 id="1-1-什么是HyperBase"><a href="#1-1-什么是HyperBase" class="headerlink" title="1.1 什么是HyperBase"></a>1.1 什么是HyperBase</h5><ul><li>概念<ul><li>高可靠、高性能、高并发、可伸缩、实时读写、面向列的分布式NewSql数据库</li><li>基于HBase实现<ul><li>四维表</li></ul></li><li>NewSql数据库</li><li>列式存储<ul><li>适合放半结构化数据（xml，稀疏性）</li></ul></li><li>Key-Value数据库</li><li>HDFS为文件存储系统</li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/17808702/68924282-63087980-07bb-11ea-959c-c7b04e806220.png" alt="image"></p><ul><li>特点：<ul><li>海量数据存储<ul><li>高并发的简单查询</li></ul></li><li>线性扩展</li><li>高并发、高可用</li><li>实时随机读写</li><li>数据的<strong>强一致性</strong></li></ul></li></ul><h4 id="2、HyperBase原理"><a href="#2、HyperBase原理" class="headerlink" title="2、HyperBase原理"></a>2、HyperBase原理</h4><h5 id="2-1-数据模型"><a href="#2-1-数据模型" class="headerlink" title="2.1 数据模型"></a>2.1 数据模型</h5><p><img src="https://user-images.githubusercontent.com/17808702/68924599-28531100-07bc-11ea-87fb-4e474f9e5442.png" alt="image"></p><ul><li><p>rowkey：</p><ul><li>根据字典排序</li></ul></li><li><p>列族：BasicInfo、CourseInfo</p><ul><li>有限</li><li>下面的列无限（name、age、telephone）（course、score）</li></ul></li><li><p>name：列限定符</p><ul><li>列族：列限定符—&gt;列</li></ul></li><li><p>单元格</p><ul><li>由rowkey+列族+列限定符</li></ul></li><li><p>timestamp：时间戳、数据的版本号；如：电话号码可以有多个，时间戳不同</p></li><li><p>key-value</p><ul><li>SF|</li></ul><p>aS re</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Paxos算法</title>
    <link href="/2021/02/03/Paxos%E7%AE%97%E6%B3%95/"/>
    <url>/2021/02/03/Paxos%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="1、CAP理论"><a href="#1、CAP理论" class="headerlink" title="1、CAP理论"></a>1、CAP理论</h4><p>分布式架构中有一个基础的CAP理论，也就是我们的系统最多只能满足数据一致性(Consistency)、可用性(Availability)和网络分区容忍(Partition Tolerance)三个特性中的两个</p><ul><li><p>一致性: 所有节点在同一时间的数据完全一致</p><ul><li>一致性是在并发读写时才会出现的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。</li></ul></li><li><p>可用性: 用户访问数据时，系统是否能在正常响应时间返回结果</p></li><li><p>分区容错性：分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，即一份数据要放到网络中的所有节点中去，<strong>一个数据项复制到多个节点上</strong>，P一定满足</p></li></ul><p><img src="/images/Paxos%E7%AE%97%E6%B3%95/2.png" alt="img"></p><ul><li><p>如果保证 G2 的一致性，那么 G1 必须在写操作时，<strong>锁定 G2 的读操作和写操作</strong>。只有数据同步后，才能重新开放读写。<strong>锁定期间，G2 不能读写，没有可用性不</strong>。</p></li><li><p>如果保证 G2 的可用性，那么势必不能锁定 G2，所以一致性不成立。</p></li></ul><p>综上所述，G2 无法同时做到一致性和可用性。系统设计时只能选择一个目标。如果追求一致性，那么无法保证所有节点的可用性；如果追求所有节点的可用性，那就没法做到一致性。</p><p><strong>常见分布式算法</strong></p><ul><li>Zookeeper： CP</li><li>Raft: 满足CP的情况下，尽可能提高A</li></ul><h4 id="2、BASE理论"><a href="#2、BASE理论" class="headerlink" title="2、BASE理论"></a>2、BASE理论</h4><blockquote><p>BASE理论是对CAP中的<strong>一致性</strong>及<strong>可用性</strong>进行一个权衡的结果，其核心思想是：我们无法做到强一致性，那么我们可以通过牺牲强一致性获得可用性， 一般应用于服务化系统的应用层或者大数据处理系统中，采用适当的方式达到最终一致性</p></blockquote><ul><li><p>BA: Basically Available（基本可用）<br>基本可用：是对A（可用性）的一个妥协，比如秒杀场景下，或者雪崩的业务场景下，可以降级处理，使核心功能可用，而不是所有的功能可用。或者延迟完成，比如通过削峰限流，来延迟响应</p></li><li><p>S: Soft state(软状态)</p><ul><li><p>指允许部分节点数据存在一定的延时，这个延时不影响可用性</p></li><li><p>例如一次写操作只更新了一个结点就返回成功。那么其他节点和这个节点的数据时不一致的。此时的数据状态就是软状态。该状态不能一直存在，必须要有个期限，系统保证在没有后续更新的前提下,在这个期限后,系统最终返回上一次更新操作的值,从而达到数据的最终一致性,这个容忍期限（不一致窗口的时间）取决于通信延迟，系统负载，数据复制方案设计，复制副本个数等，DNS是一个典型的最终一致性系统</p></li></ul></li><li><p>E: Eventually consistent（最终一致性）<br>指最终数据要实现一致性，例如：软状态的数据最终我们要通过一些手段将数据同步到其他数据节点上。例如使用mq。</p></li></ul><h4 id="3、Paxos不考虑拜占庭将军问题（Leslie-Lamport）"><a href="#3、Paxos不考虑拜占庭将军问题（Leslie-Lamport）" class="headerlink" title="3、Paxos不考虑拜占庭将军问题（Leslie Lamport）"></a>3、Paxos不考虑拜占庭将军问题（Leslie Lamport）</h4><blockquote><p>一组<a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B8%9D%E5%9C%8B">拜占庭</a>将军分别各率领一支军队共同围困一座城市。为了简化问题，将各支军队的行动策略限定为进攻或撤离两种。因为部分军队进攻部分军队撤离可能会造成灾难性后果，因此各位将军必须通过投票来达成一致策略，即所有军队一起进攻或所有军队一起撤离。因为各位将军分处城市不同方向，他们只能通过信使互相联系。在投票过程中每位将军都将自己投票给进攻还是撤退的信息通过信使分别通知其他所有将军，这样一来每位将军根据自己的投票和其他所有将军送来的信息就可以知道共同的投票结果而决定行动策略。</p></blockquote><p>系统的问题在于，可能将军中出现<a href="https://zh.wikipedia.org/wiki/%E5%8F%9B%E5%BE%92">叛徒</a>，他们不仅可能向较为糟糕的策略投票，还可能选择性地发送投票信息。假设有9位将军投票，其中1名叛徒。8名忠诚的将军中出现了4人投进攻，4人投撤离的情况。这时候叛徒可能故意给4名投进攻的将领送信表示投票进攻，而给4名投撤离的将领送信表示投撤离。这样一来在4名投进攻的将领看来，投票结果是5人投进攻，从而发起进攻；而在4名投撤离的将军看来则是5人投撤离。这样各支军队的一致协同就遭到了破坏。</p><p><strong>一个将军怎么根据自己所知的信息进行进攻或者撤退</strong></p><h4 id="4、Paxos角色："><a href="#4、Paxos角色：" class="headerlink" title="4、Paxos角色："></a>4、Paxos角色：</h4><ul><li>Proposer：提案者</li><li>Acceptor: 表决者</li><li>Learner: 同步者</li></ul><h4 id="5、Paxos数据一致性体现在以下几点："><a href="#5、Paxos数据一致性体现在以下几点：" class="headerlink" title="5、Paxos数据一致性体现在以下几点："></a>5、Paxos数据一致性体现在以下几点：</h4><ul><li>每个提案者在提出提案时都会首先获取到一个具有<strong>全局唯一</strong>性的、递增的提案编号 N， 即在整个集群中是唯一的编号 N，然后将该编号赋予其要提出的提案。</li><li>每个表决者在 accept 某提案后，会将该提案的编号 N 记录在本地，这样每个表决者中保存的已经被 accept 的提案中会存在一个编号最大的提案，其编号假设为 maxN。每个表决者仅会 accept 编号大于自己本地 maxN 的提案。</li><li>在众多提案中最终只能有一个提案被选定。</li><li>一旦一个提案被选定，则其它服务器会主动同步(Learn)该提案到本地。</li><li>没有提案被提出则不会有提案被选定</li></ul><h4 id="6、过程："><a href="#6、过程：" class="headerlink" title="6、过程："></a>6、过程：</h4><ul><li><p>第一阶段（预提案）：</p><ul><li><p>提案者先选择一个提案编号N，并且将该编号的预提交请求Prepare(N)发送给表决者。</p></li><li><p>表决者收到预提案请求Prepare(N)，比较存储的最大提案编号PN与N的关系：</p><ul><li><p>如果PN &lt; N，则先令PN = N，并且同意提议者请求，发送表决者的最大提案编号PN(等于N)和最后一个批准的数据Value(可能为空)。 </p></li><li><p>否则，拒绝请求，同样发送发送当前长老们的最大提案编号PN(等于N)和最后一个批准的数据Value(可能为空)。这个部分的意思就好比是逐个表决，及时更新赞同最多的方案。</p></li></ul></li></ul></li><li><p> 第二阶段（提案）：</p></li><li><p>当预提案Prepare(N)被大多数表决者同意时（PN=N），则做出以下提案：</p><ul><li><p>如果所有接收到的PrepareResponse(PN, Value)中Value全部为空（表决者还未批准任何提案），则自己制定一个该值的取值Vn，并向表决者集合发送提案：Proposal(N, Vn) </p></li><li><p>如果接收到的PrepareResponse(PN, Value)集合中存在不为空的Value，则选取Value不为空的PrepareResponse(PN, ValueNotNull)集合中PN最大的值(PNmax, ValueNotNull)，并将其作为提案发送给表决者：Proposal(PNmax, ValueNotNull)  </p></li></ul></li><li><p>如果一个表决者接收到一个提案编号为N的提案Proposal(N, Vn)则：</p><ul><li>如果PN为空或者PN &lt; N，则先令PN = N，Value = Vn，并且通过该条提案，返回:ProposalResponse(PN, Value) </li><li>如果PN == N并且Value为空（尚未批准提案号为PN的任何提案），则先令Value = Vn，并且通过该条提案，返回:ProposalResponse(PN, Value) </li><li>如果PN &gt; N则拒绝该提案，回:ProposalResponse(PN, Value)        </li></ul></li></ul><p><img src="/images/Paxos%E7%AE%97%E6%B3%95/1.png" alt="img"></p><h4 id="7、活锁和选主"><a href="#7、活锁和选主" class="headerlink" title="7、活锁和选主"></a>7、活锁和选主</h4><p>当某一提案者提交的提案被拒绝时，可能是因为表决者 承诺返回了更大编号的proposal，因此proposer提高编号继续提交。 如果2个提案者都发现自己的编号过低转而提出更高编号的提案者，会导致死循环，这种情况也称为活锁</p><p>为了保证流程的执行，我们必须选出一个主提案者，作为提案的唯一人选。如果主提案者能和大数派的集合进行通信，并且使用了一个比所有已经批准的提案号都大的编号，那么它就能成功产生被接受的提案</p>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker篇-2021年春招准备</title>
    <link href="/2021/02/03/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Docker%E7%AF%87/"/>
    <url>/2021/02/03/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Docker%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1-什么是Docker？"><a href="#1-什么是Docker？" class="headerlink" title="1. 什么是Docker？"></a>1. 什么是Docker？</h4><p>虚拟化的工具，Docker、虚拟机</p><h4 id="2-Docker与虚拟机的区别"><a href="#2-Docker与虚拟机的区别" class="headerlink" title="2. Docker与虚拟机的区别:"></a>2. Docker与虚拟机的区别:</h4><ul><li>虚拟机是在硬件的基础上虚拟出多个操作系统。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统</li><li>Docker容器没有自己的内核，在操作系统之上虚拟了一份文件系统，更加轻便。</li></ul><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Docker%E7%AF%87/2.png" alt="title"></p><h4 id="3-Docker容器有几种状态"><a href="#3-Docker容器有几种状态" class="headerlink" title="3. Docker容器有几种状态"></a>3. Docker容器有几种状态</h4><p>运行、已暂停、重新启动、已退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Docker%E7%AF%87/3.png" alt="title"></p><h4 id="4．Dockerfile中最常见的指令是什么"><a href="#4．Dockerfile中最常见的指令是什么" class="headerlink" title="4．Dockerfile中最常见的指令是什么"></a>4．Dockerfile中最常见的指令是什么</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">8</span>-slim  <span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y nginx <span class="comment"># 运行指定的命令</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /var/www/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./build/ ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ls</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span>] <span class="comment"># 容器启动时要运行的命令</span></span></span><br></pre></td></tr></table></figure><h4 id="5-docker常用命令："><a href="#5-docker常用命令：" class="headerlink" title="5. docker常用命令："></a>5. docker常用命令：</h4><ul><li><p>docker pull 拉取或者更新指定镜像</p></li><li><p>docker push 将镜像推送至远程仓库</p></li><li><p>docker rm 删除容器</p></li><li><p>docker rmi 删除镜像</p></li><li><p>docker images 列出所有镜像</p></li><li><p>docker ps 列出所有容器</p></li><li><p>docker logs</p></li><li><p>容器与主机之间的数据拷贝命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp /www 96f7f14e99ab:/www/ #主机到容器</span><br><span class="line">docker cp 96f7f14e99ab:/www /tmp/ #容器到主机</span><br></pre></td></tr></table></figure><ul><li>启动nginx容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run </span><br><span class="line">-d # 后台运行返回容器ID</span><br><span class="line">-P # 随机端口</span><br><span class="line">-p # 宿主机:容器</span><br><span class="line">--name nginx2 </span><br><span class="line">-v /home/nginx:/usr/share/nginx/html #宿主机:容器   -v后边加“：ro” 限制容器的写入权限；</span><br><span class="line">--rm # 退出时自动清理</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>docker commit</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker commit </span><br><span class="line">--author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; # --author 是指定修改的作者</span><br><span class="line">--message &quot;修改了默认网页&quot; # --message 则是记录本次修改的内容</span><br><span class="line">webserver # &lt;容器ID或容器名&gt;</span><br><span class="line">nginx:v2  # [&lt;仓库名&gt;[:&lt;标签&gt;]</span><br></pre></td></tr></table></figure><ul><li>docker history 71fa7369f437   / dockviz 看树形结构</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT</span><br><span class="line">71fa7369f437   6 years ago   /bin/sh -c #(nop) CMD [/bin/sh]                 0B        </span><br><span class="line">&lt;missing&gt;      6 years ago   /bin/sh -c #(nop) ENV ENV=/root/.bashrc         0B        </span><br><span class="line">&lt;missing&gt;      6 years ago   /bin/sh -c #(nop) ENV HOME=/root                0B        </span><br><span class="line">&lt;missing&gt;      6 years ago   /bin/sh -c #(nop) ADD file:9775c32290ddfc3ef…   679B      </span><br><span class="line">&lt;missing&gt;      6 years ago   /bin/sh -c #(nop) ADD file:8af1e65661badcfdf…   4.23MB    </span><br><span class="line">&lt;missing&gt;      6 years ago   /bin/sh -c #(nop) MAINTAINER Brian Clements …   0B        </span><br><span class="line">&lt;missing&gt;      7 years ago                                                   0B        Imported from -</span><br></pre></td></tr></table></figure><h4 id="6-解释一下Dockerfile的ONBUILD指令"><a href="#6-解释一下Dockerfile的ONBUILD指令" class="headerlink" title="6. 解释一下Dockerfile的ONBUILD指令"></a>6. 解释一下Dockerfile的ONBUILD指令</h4><p>以当前镜像为parent 镜像时触发</p><h4 id="7、ADD-COPY区别："><a href="#7、ADD-COPY区别：" class="headerlink" title="7、ADD/COPY区别："></a>7、<strong>ADD/COPY区别</strong>：</h4><blockquote><p>相同将本机文件拷贝到容器</p></blockquote><ul><li><p>COPY: 仅仅是把本地的文件拷贝到容器镜像中，COPY 命令是最合适不过; 使用 COPY 命令把前一阶段构建的产物拷贝到另一个镜像中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:1.7.3</span><br><span class="line">WORKDIR /go/src/github.com/sparkdevo/href-counter/</span><br><span class="line">RUN go get -d -v golang.org/x/net/html</span><br><span class="line">COPY app.go    .</span><br><span class="line">RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line">RUN apk --no-cache add ca-certificates</span><br><span class="line">WORKDIR /root/</span><br><span class="line">COPY --from=0 /go/src/github.com/sparkdevo/href-counter/app .</span><br><span class="line">CMD [&quot;./app&quot;]</span><br></pre></td></tr></table></figure></li><li><p>ADD: </p><ul><li>解压压缩文件并把它们添加到镜像中</li><li>从 url 拷贝文件到镜像中</li></ul></li></ul><h4 id="8、Docker镜像大小分析"><a href="#8、Docker镜像大小分析" class="headerlink" title="8、Docker镜像大小分析"></a>8、Docker镜像大小分析</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> compressed.tar /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm /compressed.tar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> compressed.tar /</span></span><br></pre></td></tr></table></figure><ol><li>**<code>FROM ubuntu:14.04</code>**：镜像 <code>ubuntu:14.04</code> 的大小为 200 MB；</li><li>**<code>ADD compressed.tar /</code>**： <code>compressed.tar</code> 文件为 100 MB，因此当前镜像层的大小为 100 MB，镜像总大小为 300 MB；</li><li><strong><code>RUN rm /compressed.tar</code><strong>：删除文件 <code>compressed.tar</code>，此时的删除并不会删除下一层的 <code>compressed.tar</code> 文件，只会在当前层产生一个 <code>compressed.tar</code> 的删除标记，确保通过该层将看不到 <code>compressed.tar</code>，因此当前镜像层的大小也为 0，</strong>镜像总大小为 300 MB</strong>；但是加了一层镜像会变大？</li><li>**<code>ADD compressed.tar /</code>**：<code>compressed.tar</code> 文件为 100 MB，因此当前镜像层的大小为 300 MB + 100 MB，镜像总大小为 400 MB；</li></ol><p>我们发现<strong>镜像的总大小为 400 MB</strong>，但是如果运行该镜像的话，我们很快可以发现在<strong>容器</strong>根目录下执行 <code>du -sh</code> 之后，显示的数值并非 400 MB，而<strong>是 300 MB 左右</strong>。主要的原因还是，<strong>联合文件系统的性质保证了两个拥有 <code>compressed.tar</code> 文件的镜像层，容器仅能看到一个</strong></p><p>假设本地镜像存储中只有一个 <code>ubuntu:14.04</code> 的镜像，我们以两个 Dockerfile 来说明镜像复用：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> compressed.tar /</span></span><br></pre></td></tr></table></figure><p>假设最终 <code>docker build</code> 构建出来的镜像名分别为 <code>image 1</code> 和 <code>image 2</code>，由于两个 <code>Dockerfile</code> 均基于 <code>ubuntu:14.04</code>，因此，<code>image 1</code> 和 <code>image 2</code> 这两个镜像均复用了镜像 <code>ubuntu:14.04</code>。 假设 <code>RUN apt-get update</code> 修改的文件系统内容为 20 MB，最终本地三个镜像的大小关系应该如下：</p><p>**<code>ubuntu:14.04</code>**： 200 MB</p><p>**<code>image 1</code>**：200 MB（<code>ubuntu:14.04</code> 的大小）+ 20 MB = 220 MB</p><p>**<code>image 2</code>**：200 MB（<code>ubuntu:14.04</code> 的大小）+ 100 MB = 300 MB</p><p>如果仅仅是单纯的累加三个镜像的大小，那结果应该是：200 + 220 + 300 = 720 MB，但是由于镜像复用的存在，实际占用的磁盘空间大小是：<strong>200 + 20 + 100 = 320 MB</strong>，足足节省了 400 MB 的磁盘空间。在此，足以证明<strong>镜像复用</strong>的巨大好处。</p><h4 id="9-Docker-Swarm"><a href="#9-Docker-Swarm" class="headerlink" title="9. Docker Swarm"></a>9. Docker Swarm</h4><p>将一群Docker宿主机变成一个单一的虚拟主机，通过raft协议选举manager。</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Docker%E7%AF%87/9.png" alt="img"></p><h4 id="10-监控Docker"><a href="#10-监控Docker" class="headerlink" title="10. 监控Docker"></a>10. 监控Docker</h4><ul><li>Docker统计数据：当我们使用容器ID调用docker stats时，我们获得容器的CPU，内存使用情况等。它类似于Linux中的top命令</li><li>Docker events：Docker events是一个命令，用于查看Docker守护程序中正在进行的任务。</li></ul><h4 id="11-Docker镜像和层有什么区别"><a href="#11-Docker镜像和层有什么区别" class="headerlink" title="11. Docker镜像和层有什么区别"></a>11. Docker镜像和层有什么区别</h4><ul><li><p>镜像：Docker镜像是由一些列只读层构建的；</p></li><li><p>层：每个层代表镜像Dockerfile中的一条指令；</p></li></ul><p>Docker的镜像由一层一层的文件系统组成，这种层级的文件系统就是UnionFS(OverlayFS)统一文件系统（union file system，升级版为AUFS). UnionFS是一种分层、轻量级并且高性能的文件系统。能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，</p><p>联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>docker info</p></blockquote><p><strong>运行态容器</strong>为由一个可读写的文件系统「静态容器」+ 隔离的进程空间和其中的进程构成。</p><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Docker%E7%AF%87/11.jpg" alt="img"></p><h4 id="12-Docker默认的网络类型"><a href="#12-Docker默认的网络类型" class="headerlink" title="12. Docker默认的网络类型"></a>12. Docker默认的网络类型</h4><ul><li><p><strong>host模式：</strong>直接使用docker宿主机的网络。如IP地址、网卡类型等；</p></li><li><p><strong>none模式：</strong>不会给容器进行任何网络配置。也就是说，使用这种模式的容器没有IP地址（只有一个回环地址）；</p></li><li><p><strong>bridge模式：</strong>docker默认的网络配置，此模式会为每一个容器分配名称空间，可以设置IP，但是要与docker host主机的虚拟网络在同一网段；通过虚拟网卡与外界通信；</p></li><li><p><strong>container模式：</strong>这种模式与已经存在的容器共有同一个IP地址；</p></li><li><p><strong>Network：</strong>自定义网络。可以自行创建并且可以注定多种网络驱动，如bridge、overlay等；</p></li></ul><h4 id="13-如何控制容器占用系统资源（CPU，内存）的份额？"><a href="#13-如何控制容器占用系统资源（CPU，内存）的份额？" class="headerlink" title="13. 如何控制容器占用系统资源（CPU，内存）的份额？"></a>13. 如何控制容器占用系统资源（CPU，内存）的份额？</h4><p>在使用docker create命令创建容器或使用docker run 创建并运行容器的时候，可以使用-c|–cpu-shares[=0]参数来调整同期使用CPU的权重，使用-m|–memory参数来调整容器使用内存的大小。</p><h4 id="14-仓库（Repository）、注册服务器（Registry）、注册索引（Index）有何关系？"><a href="#14-仓库（Repository）、注册服务器（Registry）、注册索引（Index）有何关系？" class="headerlink" title="14. 仓库（Repository）、注册服务器（Registry）、注册索引（Index）有何关系？"></a>14. 仓库（Repository）、注册服务器（Registry）、注册索引（Index）有何关系？</h4><p>首先，仓库是存放一组关联镜像的集合，比如同一个应用的不同版本的镜像，注册服务器是存放实际的镜像的地方，注册索引则负责维护用户的账号，权限，搜索，标签等管理。注册服务器利用注册索引来实现认证等管理。</p><h4 id="15-Docker如何做资源隔离"><a href="#15-Docker如何做资源隔离" class="headerlink" title="15. Docker如何做资源隔离"></a>15. Docker如何做资源隔离</h4><ul><li>Namespace 技术，Linux中的PID是唯一且独立的，在正常情况下，用户不会看见重复的PID。然而在Docker采用了Namespace，从而令相同的PID可于不同的Namespace中独立存在<ul><li>缺点：隔离不彻底</li></ul></li><li>Cgroups可以限制、记录任务组所使用的物理资源（包括CPU，Memory，IO等）</li><li>Rootfs做文件系统</li></ul><h4 id="16-Docker、Runc、Shim、Containerd、Daemon之间的关系"><a href="#16-Docker、Runc、Shim、Containerd、Daemon之间的关系" class="headerlink" title="16. Docker、Runc、Shim、Containerd、Daemon之间的关系"></a>16. Docker、Runc、Shim、Containerd、Daemon之间的关系</h4><p><img src="/images/2021%E5%B9%B4%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87-Docker%E7%AF%87/12.gif" alt="img"></p><ul><li>runc ：生来只有一个作用——创建容器，这一点它非常拿手，速度很快！runc 是 开放容器计划（OCI）容器运行时标准的参考实现</li><li>shim：允许runC在启动容器之后退出</li><li>containerd：所有的容器执行逻辑，它的主要任务是容器的生命周期管理——start | stop | pause | rm</li><li>daemon 的主要功能包括镜像管理、镜像构建、REST API、身份验证、安全、核心网络以及编排</li></ul><h4 id="17-Dockerfile减少构建镜像大小的方法"><a href="#17-Dockerfile减少构建镜像大小的方法" class="headerlink" title="17. Dockerfile减少构建镜像大小的方法"></a>17. Dockerfile减少构建镜像大小的方法</h4><blockquote><p>通过Dockerfile构建镜像时，很容易把镜像构建得很大。从通俗得原来上来说，一次RUN形成新的一层，如果没有在同一层删除，无论文件是否最后删除，都会带到下一层。</p></blockquote><ul><li>尽量在同一层运行更多的命令，比如:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN cp /usr/local/aa.tar.gz /opt</span><br><span class="line">RUN tar xvf /opt/aa.tar.gz</span><br><span class="line">RUN rm -rf /opt/aa.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN cp /usr/local/aa.tar.gz /opt &amp;&amp; \</span><br><span class="line">       tar xvf /opt/aa.tar.gz &amp;&amp; \</span><br><span class="line">       rm -rf /opt/aa.tar.gz</span><br></pre></td></tr></table></figure><ul><li><p>如果在镜像中通过yum安装软件包，尽量在一行装完，不要多行，同样安装完后运行, yum clean all</p></li><li><p>不下载非必要依赖</p></li><li><p>将非运行环境删除，删除非运行环境时，需要与构建该环境在同一个RUN中，否则非运行环境仍然会被带入镜像中（以其中某一层的方式存在）</p></li><li><p>在 Docker 17.05 以上版本中，你可以使用 多阶段构建来减少所构建镜像的大小</p></li></ul><h4 id="18-docker-save和docker-export区别"><a href="#18-docker-save和docker-export区别" class="headerlink" title="18. docker save和docker export区别"></a>18. docker save和docker export区别</h4><ul><li>docker save保存的是镜像（image，如果指定container背后的还是image），docker export保存的是容器（container）</li><li>docker load用来载入镜像包，docker import用来载入容器包，但两者都会恢复为镜像</li><li>docker load不能对载入的镜像重命名，而docker import可以为镜像指定新名称</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>南大自动打卡</title>
    <link href="/2021/02/02/%E5%8D%97%E5%A4%A7%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/"/>
    <url>/2021/02/02/%E5%8D%97%E5%A4%A7%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="南大自动打卡脚本"><a href="#南大自动打卡脚本" class="headerlink" title="南大自动打卡脚本"></a>南大自动打卡脚本</h3><blockquote><p>脚本基于chrome和selenium，模拟浏览器点击</p></blockquote><p>项目用于学习交流，仅用于各项无异常时打卡，建议如实打卡。</p><p>与北航自动打卡脚本不同，本脚本需三步：</p><ul><li><p>第一步，selenium登陆获取某个权限信息（时间关系，不深究是那个cookie了，准备春招了）</p><blockquote><p>通过抓包获取到app里面的请求可知，打卡相关为两个请求 getAppInfo/postAppInfo</p></blockquote></li><li><p>第二步，由于自动打卡内部每天会自动写一份数据自带一个WID作为post的输入，所以访问getAppInfo拿到WID</p></li><li><p>第三步，直接调用post将信息传入即可</p></li></ul><h4 id="功能列表："><a href="#功能列表：" class="headerlink" title="功能列表："></a>功能列表：</h4><ul><li>自定义定位</li><li>检测登录是否成功和网页能否打开</li><li>定时自动打卡*</li><li>微信推送打卡结果**</li><li>日志记录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 导入webdriver</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 你的统一认证账号</span></span><br><span class="line">passwd = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 你的统一认证密码json</span></span><br><span class="line">current_url = <span class="string">&#x27;https://authserver.nju.edu.cn/authserver/index.do&#x27;</span>  <span class="comment"># 登陆成功跳转链接</span></span><br><span class="line">get_app_info_url = <span class="string">&#x27;http://ehallapp.nju.edu.cn/xgfw/sys/yqfxmrjkdkappnju/apply/getApplyInfoList.do&#x27;</span></span><br><span class="line">post_app_info_url = <span class="string">&#x27;http://ehallapp.nju.edu.cn/xgfw/sys/yqfxmrjkdkappnju/apply/saveApplyInfos.do&#x27;</span></span><br><span class="line">SCKEY = <span class="string">&quot;&quot;</span>  <span class="comment"># 微信推送api，到http://sc.ftqq.com/ 免费申请，不需要请留空</span></span><br><span class="line">set_time = [(<span class="number">8</span>, <span class="number">35</span>)]  <span class="comment"># (小时，分钟)， 如果多个时间可以写成[(h, m),(h, m)]的形式</span></span><br><span class="line">max_attempt = <span class="number">5</span>  <span class="comment"># 失败重复五次</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;WID&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CURR_LOCATION&quot;</span>: <span class="string">&quot;江苏省南京市鼓楼区小粉桥&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IS_TWZC&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;IS_HAS_JKQK&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;JRSKMYS&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;JZRJRSKMYS&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daka</span>():</span></span><br><span class="line">    login_flag, browser = login()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> login_flag:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    browser.get(get_app_info_url)</span><br><span class="line">    get_info_str = browser.find_element_by_tag_name(<span class="string">&#x27;pre&#x27;</span>)</span><br><span class="line">    get_info_json = json.loads(get_info_str.text)</span><br><span class="line">    data[<span class="string">&#x27;WID&#x27;</span>] = get_info_json[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;WID&#x27;</span>]</span><br><span class="line">    logger.info(<span class="string">&quot;成功获取WID&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    post_url = post_app_info_url + <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        post_url += <span class="built_in">str</span>(i) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">str</span>(data[i]) + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line"> </span><br><span class="line">    browser.get(post_url)</span><br><span class="line">    post_info_str = browser.find_element_by_tag_name(<span class="string">&#x27;pre&#x27;</span>)</span><br><span class="line">    post_info_json = json.loads(post_info_str.text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> post_info_json[<span class="string">&#x27;code&#x27;</span>] == <span class="built_in">str</span>(<span class="number">0</span>):</span><br><span class="line">        logger.info(<span class="string">&quot;成功打卡&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">40</span>)</span><br><span class="line">    browser.quit()</span><br><span class="line">    datee = datetime.date.today()</span><br><span class="line">    send_message(<span class="string">&quot;小主打卡成功&quot;</span>)</span><br><span class="line">    logger.info(<span class="built_in">str</span>(datee) + <span class="string">&quot; 流程结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">    browser = webdriver.Chrome(options=chrome_options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;https://authserver.nju.edu.cn/authserver/login&quot;</span></span><br><span class="line">        browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        browser.get(url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # 账号密码</span></span><br><span class="line">        user_name_input = browser.find_element_by_id(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        user_name_input.send_keys(user)</span><br><span class="line">        user_pwd_input = browser.find_element_by_id(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        user_pwd_input.send_keys(passwd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        logger.info(<span class="string">&quot;打开打卡网页失败，请确认网络&quot;</span>)</span><br><span class="line">        send_message(<span class="string">&quot;打开打卡网页失败，请确认网络&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;成功打开打卡网页&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击登录按钮</span></span><br><span class="line">    login_button = browser.find_element_by_css_selector(<span class="string">&#x27;.auth_login_btn.primary.full_width&#x27;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(login_button).click(login_button).perform()</span><br><span class="line">    browser.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 跳转并点击获取位置按钮</span></span><br><span class="line">    <span class="comment"># 这样写是为了等待跳转页面加载出来</span></span><br><span class="line">    fail_cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># browser.current</span></span><br><span class="line">        <span class="comment"># location_button = browser.find_element_by_id(&#x27;saveall&#x27;)</span></span><br><span class="line">        <span class="keyword">if</span> browser.current_url == current_url:</span><br><span class="line">            logger.info(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>, browser</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 出现密码错误提示框</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(browser.find_element_by_id(<span class="string">&#x27;msg&#x27;</span>)) &gt; <span class="number">0</span>:</span><br><span class="line">                send_message(<span class="string">&quot;打卡失败，用户名密码错误，程序已退出，请检查&quot;</span>)</span><br><span class="line">                logger.info(<span class="string">&quot;打卡失败，用户名密码错误，请检查&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 若只是反应慢，重试</span></span><br><span class="line">            <span class="keyword">if</span> fail_cnt &gt;= max_attempt:</span><br><span class="line">                send_message(<span class="string">&quot;登录超时超过最大尝试次数，请检查网络或打卡系统已崩溃&quot;</span>)</span><br><span class="line">                logger.info(<span class="string">&quot;登录超时超过最大尝试次数&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            browser.get(<span class="string">&quot;https://authserver.nju.edu.cn/authserver/login&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;登录超时，正在重试&quot;</span>)</span><br><span class="line">            fail_cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span>  </span><br><span class="line">    logger.info(<span class="string">&quot;正在进行验证...&quot;</span>)</span><br><span class="line">    flag, browser = login()  <span class="comment"># 测试能否进入网页以及用户名密码是否正确</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    browser.quit()</span><br><span class="line">    logger.info(<span class="string">&quot;时间未到，等待打卡&quot;</span>)</span><br><span class="line"><span class="comment">#    daka()</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># time_up = True  # debug</span></span><br><span class="line">            time_up = <span class="literal">False</span></span><br><span class="line">            now = datetime.datetime.now()</span><br><span class="line">            <span class="keyword">for</span> hour, minute <span class="keyword">in</span> set_time:</span><br><span class="line">                <span class="keyword">if</span> now.hour == hour <span class="keyword">and</span> now.minute == minute:</span><br><span class="line">                    time_up = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> time_up:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            logger.debug(<span class="string">f&quot;时间未到，当前时间 <span class="subst">&#123;now&#125;</span>&quot;</span>)</span><br><span class="line">            sleep(<span class="number">20</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;时间已到，正在打卡&quot;</span>)</span><br><span class="line">        daka()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> SCKEY == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    payload = &#123;<span class="string">&#x27;text&#x27;</span>: msg&#125;</span><br><span class="line">    requests.get(<span class="string">f&quot;https://sc.ftqq.com/<span class="subst">&#123;SCKEY&#125;</span>.send&quot;</span>, params=payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    log_file = <span class="string">&quot;log.log&quot;</span></span><br><span class="line">    formatter = logging.Formatter(<span class="string">&quot;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&quot;</span>)</span><br><span class="line">    logger = logging.getLogger(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">    fh = logging.FileHandler(log_file, mode=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    fh.setFormatter(formatter)</span><br><span class="line">    ch = logging.StreamHandler()</span><br><span class="line">    ch.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(fh)</span><br><span class="line">    logger.addHandler(ch)</span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>北航自动打卡</title>
    <link href="/2021/01/10/%E5%8C%97%E8%88%AA%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/"/>
    <url>/2021/01/10/%E5%8C%97%E8%88%AA%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="北航自动打卡脚本"><a href="#北航自动打卡脚本" class="headerlink" title="北航自动打卡脚本"></a>北航自动打卡脚本</h3><blockquote><p>脚本基于chrome和selenium，模拟浏览器点击</p></blockquote><p>进行了简单模拟适配，<a href="https://github.com/mottled233/buaa_daily_report">原文出处</a>. 项目用于学习交流，仅用于各项无异常时打卡，建议如实打卡。</p><h4 id="功能列表："><a href="#功能列表：" class="headerlink" title="功能列表："></a>功能列表：</h4><ul><li>在校打卡、不在校打卡</li><li>自定义定位</li><li>检测登录是否成功和网页能否打开</li><li>定时自动打卡*</li><li>微信推送打卡结果**</li><li>日志记录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">user = <span class="string">&quot;******&quot;</span>  <span class="comment"># 你的统一认证账号</span></span><br><span class="line">passwd = <span class="string">&quot;******&quot;</span>  <span class="comment"># 你的统一认证密码json</span></span><br><span class="line">position = (<span class="string">&quot;******&quot;</span>, <span class="string">&quot;******&quot;</span>)  <span class="comment"># 定位，(纬度， 经度)</span></span><br><span class="line">SCKEY = <span class="string">&quot;********&quot;</span>  <span class="comment"># 微信推送api，到http://sc.ftqq.com/ 免费申请，不需要请留空</span></span><br><span class="line"></span><br><span class="line">set_time = [(<span class="number">18</span>, <span class="number">5</span>)]  <span class="comment"># (小时，分钟)， 如果多个时间可以写成[(h, m),(h, m)]的形式</span></span><br><span class="line">max_attempt = <span class="number">5</span>  <span class="comment"># 失败重复五次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daka</span>():</span></span><br><span class="line">    login_flag, browser = login()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> login_flag:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    browser.execute_script(<span class="string">&quot;window.navigator.geolocation.getCurrentPosition=function(success)&#123;&quot;</span> +</span><br><span class="line">                           <span class="string">&quot;var position = &#123;\&quot;coords\&quot; : &#123;\&quot;latitude\&quot;: \&quot;&quot;</span> + position[<span class="number">0</span>] + <span class="string">&quot;\&quot;,\&quot;longitude\&quot;: \&quot;&quot;</span></span><br><span class="line">                           + position[<span class="number">1</span>] + <span class="string">&quot;\&quot;&#125;&#125;;&quot;</span> +</span><br><span class="line">                           <span class="string">&quot;success(position);&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    location_button = browser.find_element_by_css_selector(<span class="string">&#x27;div[name=area]&gt;input&#x27;</span>)</span><br><span class="line">    location_button.click()</span><br><span class="line">    logger.info(<span class="string">&quot;成功输入经纬度&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># zgfxdq = browser.find_element_by_xpath(&quot;//div[@name=&#x27;zgfxdq&#x27;]/div/div[2]/span[1]&quot;)</span></span><br><span class="line">    <span class="comment"># ActionChains(browser).move_to_element(zgfxdq).click(zgfxdq).perform()</span></span><br><span class="line">    <span class="comment"># logger.info(&quot;成功输入未在低风险地区&quot;)</span></span><br><span class="line"></span><br><span class="line">    tiwen = browser.find_element_by_xpath(<span class="string">&quot;//div[@name=&#x27;tw&#x27;]/div/div[2]/span[1]&quot;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(tiwen).click(tiwen).perform()</span><br><span class="line">    logger.info(<span class="string">&quot;成功输入体温&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sfzx = browser.find_element_by_xpath(<span class="string">&quot;//div[@name=&#x27;sfzx&#x27;]/div/div[2]/span[1]&quot;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(sfzx).click(sfzx).perform()</span><br><span class="line">    logger.info(<span class="string">&quot;成功确定在校&quot;</span>)</span><br><span class="line"></span><br><span class="line">    askforleave = browser.find_element_by_xpath(<span class="string">&quot;//div[@name=&#x27;askforleave&#x27;]/div/div[2]/span[1]&quot;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(askforleave).click(askforleave).perform()</span><br><span class="line">    logger.info(<span class="string">&quot;是否请加外出&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sffxzs = browser.find_element_by_xpath(<span class="string">&quot;//div[@name=&#x27;sffxzs&#x27;]/div/div[2]/span[1]&quot;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(sffxzs).click(sffxzs).perform()</span><br><span class="line">    logger.info(<span class="string">&quot;是否返校住宿&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># jcjgqr = browser.find_element_by_xpath(&quot;//div[@name=&#x27;jcjgqr&#x27;]/div/div[1]/span[1]&quot;)</span></span><br><span class="line">    <span class="comment"># ActionChains(browser).move_to_element(jcjgqr).click(jcjgqr).perform()</span></span><br><span class="line">    <span class="comment"># logger.info(&quot;属于哪种情况&quot;)</span></span><br><span class="line">    sfcyglq = browser.find_element_by_xpath(<span class="string">&quot;//div[@name=&#x27;sfcyglq&#x27;]/div/div[2]/span[1]&quot;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(sfcyglq).click(sfcyglq).perform()</span><br><span class="line">    logger.info(<span class="string">&quot;是否处于观察期&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sfyzz = browser.find_element_by_xpath(<span class="string">&quot;//div[@name=&#x27;sfyzz&#x27;]/div/div[2]/span[1]&quot;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(sfyzz).click(sfyzz).perform()</span><br><span class="line">    logger.info(<span class="string">&quot;是否发热乏力&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sfjcbh = browser.find_element_by_xpath(&quot;//div[@name=&#x27;sfjcbh&#x27;]/div/div[2]/span[1]&quot;)</span></span><br><span class="line">    <span class="comment"># ActionChains(browser).move_to_element(sfjcbh).click(sfjcbh).perform()</span></span><br><span class="line">    <span class="comment"># logger.info(&quot;是否接触无症状感染&quot;)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># mjry = browser.find_element_by_xpath(&quot;//div[@name=&#x27;mjry&#x27;]/div/div[2]/span[1]&quot;)</span></span><br><span class="line">    <span class="comment"># ActionChains(browser).move_to_element(mjry).click(mjry).perform()</span></span><br><span class="line">    <span class="comment"># logger.info(&quot;是否接触密切接触人员&quot;)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># csmjry = browser.find_element_by_xpath(&quot;//div[@name=&#x27;csmjry&#x27;]/div/div[2]/span[1]&quot;)</span></span><br><span class="line">    <span class="comment"># ActionChains(browser).move_to_element(csmjry).click(csmjry).perform()</span></span><br><span class="line">    <span class="comment"># logger.info(&quot;近14日内本人/共同居住者&quot;)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># szsqsfybl = browser.find_element_by_xpath(&quot;//div[@name=&#x27;szsqsfybl&#x27;]/div/div[2]/span[1]&quot;)</span></span><br><span class="line">    <span class="comment"># ActionChains(browser).move_to_element(szsqsfybl).click(szsqsfybl).perform()</span></span><br><span class="line">    <span class="comment"># logger.info(&quot;所在社区是否有确诊病例&quot;)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># sfcxzysx = browser.find_element_by_xpath(&quot;//div[@name=&#x27;sfcxzysx&#x27;]/div/div[2]/span[1]&quot;)</span></span><br><span class="line">    <span class="comment"># ActionChains(browser).move_to_element(sfcxzysx).click(sfcxzysx).perform()</span></span><br><span class="line">    <span class="comment"># logger.info(&quot;是否有任何与疫情相关的， 值得注意的情况&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击提交</span></span><br><span class="line">    submit_button = browser.find_element_by_css_selector(</span><br><span class="line">        <span class="string">&#x27;body &gt; div.item-buydate.form-detail2 &gt; div &gt; div &gt; section &gt; div.list-box &gt; div &gt; a&#x27;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(submit_button).click(submit_button).perform()</span><br><span class="line"></span><br><span class="line">    browser.implicitly_wait(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            confirm_button = browser.find_element_by_css_selector(</span><br><span class="line">                <span class="string">&#x27;#wapcf &gt; div &gt; div.wapcf-btn-box &gt; div.wapcf-btn.wapcf-btn-ok&#x27;</span>)</span><br><span class="line">            result = <span class="string">&#x27;提交成功&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                confirm_button = browser.find_element_by_css_selector(<span class="string">&#x27;#wapat &gt; div &gt; div.wapat-btn-box &gt; div&#x27;</span>)</span><br><span class="line">                reason = browser.find_element_by_css_selector(<span class="string">&#x27;#wapat &gt; div &gt; div.wapat-title&#x27;</span>).text</span><br><span class="line">                result = <span class="string">f&#x27;打卡失败，原因：<span class="subst">&#123;reason&#125;</span>&#x27;</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    ActionChains(browser).move_to_element(confirm_button).click(confirm_button).perform()</span><br><span class="line"></span><br><span class="line">    logger.info(result)</span><br><span class="line"></span><br><span class="line">    datee = datetime.date.today()</span><br><span class="line"></span><br><span class="line">    send_message(<span class="string">f&quot;<span class="subst">&#123;datee&#125;</span> <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">50</span>)</span><br><span class="line">    browser.quit()</span><br><span class="line">    logger.info(<span class="string">&quot;流程结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">    browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;https://app.buaa.edu.cn/uc/wap/login&quot;</span></span><br><span class="line">        browser.get(url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 账号密码</span></span><br><span class="line">        user_name_input = browser.find_element_by_css_selector(</span><br><span class="line">            <span class="string">&#x27;#app &gt; div.content &gt; div:nth-child(1) &gt; input[type=text]&#x27;</span>)</span><br><span class="line">        user_name_input.send_keys(user)</span><br><span class="line">        user_pwd_input = browser.find_element_by_css_selector(</span><br><span class="line">            <span class="string">&#x27;#app &gt; div.content &gt; div:nth-child(2) &gt; input[type=password]&#x27;</span>)</span><br><span class="line">        user_pwd_input.send_keys(passwd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        logger.info(<span class="string">&quot;打开打卡网页失败，请确认网络&quot;</span>)</span><br><span class="line">        send_message(<span class="string">&quot;打开打卡网页失败，请确认网络&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;成功打开打卡网页&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击登录按钮</span></span><br><span class="line">    login_button = browser.find_element_by_css_selector(<span class="string">&#x27;#app &gt; div.btn&#x27;</span>)</span><br><span class="line">    ActionChains(browser).move_to_element(login_button).click(login_button).perform()</span><br><span class="line">    browser.implicitly_wait(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 跳转并点击获取位置按钮</span></span><br><span class="line">    <span class="comment"># 这样写是为了等待跳转页面加载出来</span></span><br><span class="line">    fail_cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        location_button = browser.find_elements_by_css_selector(<span class="string">&#x27;div[name=area]&gt;input&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(location_button) &gt; <span class="number">0</span>:</span><br><span class="line">            logger.info(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>, browser</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 出现密码错误提示框</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(browser.find_elements_by_css_selector(<span class="string">&#x27;div.wapat-btn-box&#x27;</span>)) &gt; <span class="number">0</span>:</span><br><span class="line">                send_message(<span class="string">&quot;打卡失败，用户名密码错误，程序已退出，请检查&quot;</span>)</span><br><span class="line">                logger.info(<span class="string">&quot;打卡失败，用户名密码错误，请检查&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 若只是反应慢，重试</span></span><br><span class="line">            <span class="keyword">if</span> fail_cnt &gt;= max_attempt:</span><br><span class="line">                send_message(<span class="string">&quot;登录超时超过最大尝试次数，请检查网络或打卡系统已崩溃&quot;</span>)</span><br><span class="line">                logger.info(<span class="string">&quot;登录超时超过最大尝试次数&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            browser.get(<span class="string">&quot;https://app.buaa.edu.cn/site/ncov/xisudailyup&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;登录超时，正在重试&quot;</span>)</span><br><span class="line">            fail_cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span>  <span class="comment"># 0:05进行打卡</span></span><br><span class="line">    logger.info(<span class="string">&quot;正在进行验证...&quot;</span>)</span><br><span class="line">    flag, browser = login()  <span class="comment"># 测试能否进入网页以及用户名密码是否正确</span></span><br><span class="line">    browser.quit()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># time_up = True  # debug</span></span><br><span class="line">            time_up = <span class="literal">False</span></span><br><span class="line">            now = datetime.datetime.now()</span><br><span class="line">            <span class="keyword">for</span> hour, minute <span class="keyword">in</span> set_time:</span><br><span class="line">                <span class="keyword">if</span> now.hour == hour <span class="keyword">and</span> now.minute == minute:</span><br><span class="line">                    time_up = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> time_up:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            logger.debug(<span class="string">f&quot;时间未到，当前时间 <span class="subst">&#123;now&#125;</span>&quot;</span>)</span><br><span class="line">            sleep(<span class="number">20</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;时间已到，正在打卡&quot;</span>)</span><br><span class="line">        daka()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> SCKEY == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    payload = &#123;<span class="string">&#x27;text&#x27;</span>: msg&#125;</span><br><span class="line">    requests.get(<span class="string">f&quot;https://sc.ftqq.com/<span class="subst">&#123;SCKEY&#125;</span>.send&quot;</span>, params=payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    log_file = <span class="string">&quot;log.log&quot;</span></span><br><span class="line">    formatter = logging.Formatter(<span class="string">&quot;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&quot;</span>)</span><br><span class="line">    logger = logging.getLogger(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">    fh = logging.FileHandler(log_file, mode=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    fh.setFormatter(formatter)</span><br><span class="line">    ch = logging.StreamHandler()</span><br><span class="line">    ch.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(fh)</span><br><span class="line">    logger.addHandler(ch)</span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作-1</title>
    <link href="/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-1/"/>
    <url>/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-1/</url>
    
    <content type="html"><![CDATA[<p>1、SQL模式的定义与删除:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA Teaching_DB;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> SCHEMA Teaching_DB;</span><br></pre></td></tr></table></figure><p>2、表的建立</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">sno <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">sname <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">sex <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">dept <span class="type">char</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student_2(</span><br><span class="line">sno <span class="type">char</span>(<span class="number">5</span>),</span><br><span class="line">sname <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">sex <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">age <span class="type">SMALLINT</span>,</span><br><span class="line">dept <span class="type">char</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(sno),</span><br><span class="line"><span class="keyword">CHECK</span> (sex <span class="keyword">IN</span> (<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student_3(</span><br><span class="line">sno <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">sname <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">sex <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">CHECK</span>(sex <span class="keyword">in</span> (<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)),</span><br><span class="line">age <span class="type">SMALLINT</span>,</span><br><span class="line">dept <span class="type">char</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course(</span><br><span class="line">cno <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">cname <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">pcno <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line">credit <span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(pcno) <span class="keyword">REFERENCES</span> Course(cno)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">sno <span class="type">char</span>(<span class="number">5</span>), </span><br><span class="line">cno <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line">  grade <span class="type">int</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(sno, cno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(sno) <span class="keyword">REFERENCES</span> Student(sno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(cno) <span class="keyword">REFERENCES</span> Course(cno),</span><br><span class="line"><span class="keyword">CHECK</span> ((grade <span class="keyword">is</span> <span class="keyword">null</span>) <span class="keyword">or</span> (grade <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>3、表的删除、修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表的某列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">DROP</span> age</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改某列的类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">MODIFY sname <span class="type">char</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PREPARE</span> KEY</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PREPARE</span> KEY (sno)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student RENAME <span class="keyword">TO</span> stu;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu</span><br><span class="line">CHANGE <span class="keyword">COLUMN</span> sex ssex <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不管用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu</span><br><span class="line">RENAME <span class="keyword">COLUMN</span> ssex <span class="keyword">to</span> ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- alter table stu drop constraint pk_student;</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> <span class="keyword">constraint</span> pk_student <span class="keyword">primary</span> key(sno);</span><br></pre></td></tr></table></figure><p>4、插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student_3(sno,sname)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作-2(生成随机数据)</title>
    <link href="/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-2/"/>
    <url>/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-2/</url>
    
    <content type="html"><![CDATA[<p>1、SQL索引的建立:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX age_index</span><br><span class="line"><span class="keyword">ON</span> Student_2(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> INDEX age_index <span class="keyword">on</span> Student_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sname </span><br><span class="line"><span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure><p>2、随机生成学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> Student;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student( </span><br><span class="line">  sno <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  sname <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">  sex <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">CHECK</span>(sex <span class="keyword">in</span> (<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;F&#x27;</span>)), </span><br><span class="line">  age <span class="type">SMALLINT</span>, dept <span class="type">char</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> rand_sex;</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_sex()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">RETURN</span> ELT(<span class="built_in">CEILING</span>(RAND()<span class="operator">*</span><span class="number">2</span>), &quot;M&quot;,&quot;F&quot;);</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> rand_age;</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_age()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(<span class="number">18</span><span class="operator">+</span>rand()<span class="operator">*</span><span class="number">4</span>);</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> rand_dept;</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_dept()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">RETURN</span> ELT(<span class="built_in">CEILING</span>(RAND()<span class="operator">*</span><span class="number">4</span>), &quot;CS&quot;,&quot;SE&quot;, &quot;IoT&quot;, &quot;AI&quot;);</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> initStu;</span><br><span class="line">DELIMITER $$  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> initStu()  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> <span class="number">20</span> DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(sno, sname,sex, age, dept) </span><br><span class="line"><span class="keyword">VALUES</span>(i,<span class="string">&#x27;stu_name&#x27;</span>, rand_sex(), rand_age(), rand_dept());</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>$$ </span><br><span class="line"><span class="keyword">CALL</span> initStu(); </span><br></pre></td></tr></table></figure><p>3、随机生成课程表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> Course;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course(</span><br><span class="line">cno <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">cname <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">pcno <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line">credit <span class="type">SMALLINT</span></span><br><span class="line"><span class="comment">-- FOREIGN KEY(pcno) REFERENCES Course(cno)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> rand_pcno;</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_pcno()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>rand()<span class="operator">*</span><span class="number">3</span>);</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> rand_credit;</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_credit()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>rand()<span class="operator">*</span><span class="number">4</span>);</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> initCourse;</span><br><span class="line">DELIMITER $$  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> initCourse()  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">5</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> <span class="number">20</span> DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(cno, cname, pcno, credit) </span><br><span class="line"><span class="keyword">VALUES</span>(i,<span class="string">&#x27;c_name&#x27;</span>, rand_pcno() ,rand_credit());</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>$$ </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(cno, cname, pcno, credit) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;math&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(cno, cname, pcno, credit) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(cno, cname, pcno, credit) <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;Cpp&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(cno, cname, pcno, credit) <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> initCourse(); </span><br></pre></td></tr></table></figure><p>4、随机生成SC(不加主码、外码)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> SC2;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC2(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">sno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">cno <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">grade <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> rand_sno;</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_sno()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">RETURN</span> ELT(<span class="built_in">CEILING</span>(RAND()<span class="operator">*</span><span class="number">6</span>), &quot;001&quot;,&quot;002&quot;, &quot;003&quot;, &quot;004&quot;, &quot;005&quot;, &quot;006&quot;);</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> rand_cno;</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_cno()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">RETURN</span> ELT(<span class="built_in">CEILING</span>(RAND()<span class="operator">*</span><span class="number">3</span>), &quot;001&quot;,&quot;002&quot;, &quot;003&quot;);</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> rand_grade;</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_grade()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(<span class="number">50</span><span class="operator">+</span>rand()<span class="operator">*</span><span class="number">40</span>);</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> initSC;</span><br><span class="line">DELIMITER $$  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> initSC()  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> <span class="number">20</span> DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC2(id, sno, cno, grade)</span><br><span class="line"><span class="keyword">VALUES</span>(i , rand_sno(),  rand_cno() ,rand_grade());</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>$$ </span><br><span class="line"><span class="keyword">CALL</span> initSC(); </span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作-3(单表查询)</title>
    <link href="/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-3/"/>
    <url>/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-3/</url>
    
    <content type="html"><![CDATA[<p>1、检索:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;F&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>2、去掉重复项:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> age <span class="keyword">FROM</span> Student_2;</span><br></pre></td></tr></table></figure><p>3、确定范围:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">18</span> <span class="keyword">AND</span> <span class="number">19</span>;</span><br></pre></td></tr></table></figure><p>4、模糊查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="keyword">LIKE</span> <span class="string">&#x27;C%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="keyword">LIKE</span> <span class="string">&#x27;C%&#x27;</span> <span class="keyword">or</span> dept <span class="keyword">LIKE</span> <span class="string">&#x27;I%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="keyword">LIKE</span> <span class="string">&#x27;I_T&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="keyword">LIKE</span> <span class="string">&#x27;I%T&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="keyword">LIKE</span> <span class="string">&#x27;%o_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- aabbccddefg</span></span><br></pre></td></tr></table></figure><p>5、组合查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="keyword">in</span> (<span class="string">&#x27;CS&#x27;</span>, <span class="string">&#x27;IoT&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;CS&#x27;</span>, <span class="string">&#x27;IoT&#x27;</span>);</span><br></pre></td></tr></table></figure><p>6、对结果排序:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, sex, age, dept <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>7、函数:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> <span class="string">&#x27;student_count&#x27;</span> <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(age) <span class="keyword">AS</span> <span class="string">&#x27;avg_age&#x27;</span> <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">&#x27;count&#x27;</span>, <span class="built_in">AVG</span>(age) <span class="keyword">as</span> <span class="string">&#x27;avg&#x27;</span> <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> age) <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(age) <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(age) <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(age) <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SC表,查询最高成绩、最低成绩、平均成绩</span></span><br></pre></td></tr></table></figure><p>8、分组查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  sno, <span class="built_in">AVG</span>(grade) <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  sno, <span class="built_in">AVG</span>(grade) <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno;</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">avg</span>(grade) <span class="operator">&gt;</span> <span class="number">70</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 至少选修2门成绩的学生的学号</span></span><br><span class="line"><span class="keyword">SELECT</span>  sno <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cno, <span class="built_in">AVG</span>(grade) <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cno, <span class="built_in">AVG</span>(grade), <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> age, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> number <span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> age</span><br><span class="line"><span class="keyword">HAVING</span> number<span class="operator">&gt;</span><span class="number">5</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照平均成绩降序且所有课程都及格的学号，及其平均成绩（不包含3号课）</span></span><br><span class="line"><span class="keyword">SELECT</span> sno, <span class="built_in">AVG</span>(grade) <span class="keyword">as</span> avg_g <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="operator">&lt;&gt;</span> <span class="string">&#x27;003&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(grade)<span class="operator">&gt;=</span><span class="number">60</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_g <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作-4(多表查询)</title>
    <link href="/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-4/"/>
    <url>/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-4/</url>
    
    <content type="html"><![CDATA[<p>1、docker启动mysql:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --privileged=<span class="literal">true</span> --name mysql -p 3306:3306 -v /Users/zhangfuli/Desktop/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:latest</span></span><br></pre></td></tr></table></figure><p>2、查询学生的学号与平均成绩, 并按照成绩降序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, <span class="built_in">AVG</span>(grade) <span class="keyword">FROM</span> SC2 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(grade) <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>3、查询至少选修4门课程的学生学号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>4、查询选修了数学课程的学号与成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, grade <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> cname <span class="operator">=</span> &quot;math&quot;</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 查询CS专业学生的选课信息(学号，课程号，成绩)</span></span><br></pre></td></tr></table></figure><p>5、找出年龄超过平均年龄的学生所有信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(age) <span class="keyword">FROM</span> Student</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>6、查询其他系比CS专业最小年龄还大的学生的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(age) <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br><span class="line">) <span class="keyword">and</span> dept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span></span><br></pre></td></tr></table></figure><p>7、查询平均成绩最高的学生的学号(平均成绩大于所有人)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(grade) <span class="operator">&gt;=</span> <span class="keyword">ALL</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(grade) <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>8、查询CS专业中年龄大约IoT专业任意一个的同学</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;</span> <span class="keyword">any</span>(</span><br><span class="line"><span class="keyword">SELECT</span> age <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="operator">=</span> <span class="string">&#x27;IoT&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;</span> <span class="keyword">some</span>(</span><br><span class="line"><span class="keyword">SELECT</span> age <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="operator">=</span> <span class="string">&#x27;IoT&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>9、找出有一门选课成绩在80分以上的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="keyword">any</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sno <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">WHERE</span> grade <span class="operator">&gt;=</span> <span class="number">80</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>10、找出专业为’CS’或’AI’且选课成绩为80分以上的学生的学号、姓名、年龄、课程号、成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student, SC2</span><br><span class="line"><span class="keyword">WHERE</span> Student.sno <span class="operator">=</span> SC2.sno </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Student.sno, sname, age, cno, grade <span class="keyword">FROM</span> Student, SC2</span><br><span class="line"><span class="keyword">WHERE</span> Student.sno <span class="operator">=</span> SC2.sno </span><br><span class="line"><span class="keyword">and</span> dept <span class="keyword">in</span> (<span class="string">&#x27;CS&#x27;</span>, <span class="string">&#x27;AI&#x27;</span>)</span><br><span class="line"><span class="keyword">and</span> grade <span class="operator">&gt;=</span> <span class="number">70</span></span><br></pre></td></tr></table></figure><p>11、查询选修了数据库的学生号、成绩、学分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, grade, credit <span class="keyword">FROM</span> SC2, Course</span><br><span class="line"><span class="keyword">WHERE</span> SC2.sno <span class="operator">=</span> Course.cno <span class="keyword">and</span> cname <span class="operator">=</span> <span class="string">&#x27;math&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作-5(多表查询)</title>
    <link href="/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-5/"/>
    <url>/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-5/</url>
    
    <content type="html"><![CDATA[<p>1、查询每门课的间接选修课:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d1.cno, d2.pcno <span class="keyword">FROM</span> Course <span class="keyword">AS</span> d1, Course <span class="keyword">AS</span> d2 </span><br><span class="line"><span class="keyword">WHERE</span> d1.pcno <span class="operator">=</span> d2.cno</span><br></pre></td></tr></table></figure><p>2、查询选课成绩在80分以上的男生姓名、课程名、成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname, cname, grade</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> sname, cname, grade</span><br><span class="line"><span class="keyword">FROM</span> Student, SC2, Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.sno <span class="operator">=</span> SC2.sno </span><br><span class="line"><span class="keyword">and</span> SC2.cno <span class="operator">=</span> Course.cno</span><br><span class="line"><span class="keyword">and</span> sex <span class="operator">=</span> <span class="string">&#x27;M&#x27;</span>) </span><br><span class="line"><span class="keyword">AS</span> temp(sname, cname, grade)</span><br><span class="line"><span class="keyword">WHERE</span> grade <span class="operator">&gt;=</span><span class="number">60</span></span><br></pre></td></tr></table></figure><p>3、查询没有选修1号课程的学生学号、姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,sname <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">not</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="operator">=</span> Student.sno <span class="keyword">and</span> cno <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>4、查询选修了全部课程的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询这样一个学生没有一门课程不选修</span></span><br><span class="line"><span class="keyword">select</span> sno,sname <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">not</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Course    <span class="comment">--每门课都没选</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">not</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC2     <span class="comment">--某学生选某课</span></span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span>Student.sno <span class="keyword">and</span> cno<span class="operator">=</span>Course.cno</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>5、 查询至少选修了学号为1的同学选修的全部课程的学生的学号*</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno <span class="keyword">FROM</span> Student X </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">not</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC2 Y</span><br><span class="line"><span class="keyword">WHERE</span> Y.sno <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">not</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC2 Z</span><br><span class="line"><span class="keyword">WHERE</span> X.sno <span class="operator">=</span> Z.sno <span class="keyword">and</span> Y.cno<span class="operator">=</span>Z.cno</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>6、选修了1或2号课的学生学号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- union 并</span></span><br><span class="line"><span class="comment">-- intersect 交</span></span><br><span class="line"><span class="comment">-- except 差</span></span><br><span class="line">(<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> SC2 <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>7、连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> SC2 <span class="comment">--自然连接 在目标列中去除相同的字段名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">left</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC2 <span class="comment">--左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">right</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC2 </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">full</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC2 <span class="comment">--全连接</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">left</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC2</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">right</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC2</span><br></pre></td></tr></table></figure><p>8、插入多条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> st1_grade(</span><br><span class="line">gno <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">name <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">avg <span class="type">FLOAT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> st1_grade(gno, name, avg)</span><br><span class="line"><span class="keyword">SELECT</span> Student.sno, sname, <span class="built_in">avg</span>(grade) <span class="keyword">as</span> avg_good </span><br><span class="line"><span class="keyword">FROM</span> Student, SC2</span><br><span class="line"><span class="keyword">WHERE</span> Student.sno <span class="operator">=</span> SC2.sno </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno </span><br><span class="line"><span class="keyword">HAVING</span> avg_good <span class="operator">&gt;=</span><span class="number">70</span></span><br></pre></td></tr></table></figure><p>9、1号同学在数学课上考试作弊成绩置为0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE SC2 <span class="keyword">SET</span> grade <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> cno <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> cname<span class="operator">=</span><span class="string">&#x27;math&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>10、删除选课不足10人的课程记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> cno <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">SELECT</span> cno <span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&lt;</span> <span class="number">10</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作-6(其他)</title>
    <link href="/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-6/"/>
    <url>/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-6/</url>
    
    <content type="html"><![CDATA[<p>1、SQL索引的建立:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX age_index</span><br><span class="line"><span class="keyword">ON</span> Student_2(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> INDEX age_index <span class="keyword">on</span> Student_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sname </span><br><span class="line"><span class="keyword">FROM</span> Student_2</span><br><span class="line"><span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure><p>2、创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> D_student </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> sno, sname, age <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> dept <span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br></pre></td></tr></table></figure><p>3、删除视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> D_student </span><br></pre></td></tr></table></figure><p>4、SQL编程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- case</span></span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">as</span> <span class="string">&#x27;学号&#x27;</span>, cno <span class="keyword">as</span> <span class="string">&#x27;课程号&#x27;</span>,</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> grade<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> grade<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> grade<span class="operator">&gt;=</span><span class="number">70</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> grade<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">THEN</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> grade<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">THEN</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;成绩&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> SC2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sno</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中诚合作-跨境三文鱼区块链平台</title>
    <link href="/2020/10/21/%E4%B8%AD%E8%AF%9A%E5%90%88%E4%BD%9C-%E8%B7%A8%E5%A2%83%E4%B8%89%E6%96%87%E9%B1%BC%E5%8C%BA%E5%9D%97%E9%93%BE%E5%B9%B3%E5%8F%B0/"/>
    <url>/2020/10/21/%E4%B8%AD%E8%AF%9A%E5%90%88%E4%BD%9C-%E8%B7%A8%E5%A2%83%E4%B8%89%E6%96%87%E9%B1%BC%E5%8C%BA%E5%9D%97%E9%93%BE%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<p>1、海关：</p><ul><li><p>清关手续，是否快速通关，</p></li><li><p>关税；定哪个出口商的调研</p></li></ul><p>2、调研对象、问题、时间计划<br>3、原型界面设计：数据以及其呈现形式</p><ul><li><p>物联网设备采集、与原有系统的侵入性</p></li><li><p>基于能够提供的数据<br>4、关键参与方：</p></li><li><p>海关</p></li><li><p>检疫部门</p></li><li><p>仓储</p></li><li><p>物流</p></li><li><p>集散地</p></li><li><p>贸易公司</p></li><li><p>超市、农贸市场</p></li><li><p>消费者</p></li></ul><p>4、电商的消费模式：固定电商卖家与平台，缩小规模，选1家电商平台然后选择卖家<br>5、抓重点进出商<br>6、平台合作：</p><ul><li>金融监管区块链</li><li>跨境区块链</li><li>数字乡村</li><li>平台、（高层次)人才双向互动、联合研发、人才培养</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图像识别实战常用模块解读</title>
    <link href="/2020/09/03/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E8%A7%A3%E8%AF%BB/"/>
    <url>/2020/09/03/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="基于经典网络架构训练图像分类模型"><a href="#基于经典网络架构训练图像分类模型" class="headerlink" title="基于经典网络架构训练图像分类模型"></a>基于经典网络架构训练图像分类模型</h1><h3 id="数据预处理部分："><a href="#数据预处理部分：" class="headerlink" title="数据预处理部分："></a>数据预处理部分：</h3><ul><li>数据增强：torchvision中transforms模块自带功能，比较实用</li><li>数据预处理：torchvision中transforms也帮我们实现好了，直接调用即可</li><li>DataLoader模块直接读取batch数据</li></ul><h3 id="网络模块设置："><a href="#网络模块设置：" class="headerlink" title="网络模块设置："></a>网络模块设置：</h3><ul><li>加载预训练模型，torchvision中有很多经典网络架构，调用起来十分方便，并且可以用人家训练好的权重参数来继续训练，也就是所谓的迁移学习</li><li>需要注意的是别人训练好的任务跟咱们的可不是完全一样，需要把最后的head层改一改，一般也就是最后的全连接层，改成咱们自己的任务</li><li>训练时可以全部重头训练，也可以只训练最后咱们任务的层，因为前几层都是做特征提取的，本质任务目标是一致的</li></ul><h3 id="网络模型保存与测试"><a href="#网络模型保存与测试" class="headerlink" title="网络模型保存与测试"></a>网络模型保存与测试</h3><ul><li>模型保存的时候可以带有选择性，例如在验证集中如果当前效果好则保存</li><li>读取模型进行实际测试</li></ul><p><img src="/images/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E8%A7%A3%E8%AF%BB/1.png" alt="title"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="comment">#pip install torchvision</span></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, models, datasets</span><br><span class="line"><span class="comment">#https://pytorch.org/docs/stable/torchvision/index.html</span></span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure><h3 id="数据读取与预处理操作"><a href="#数据读取与预处理操作" class="headerlink" title="数据读取与预处理操作"></a>数据读取与预处理操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data_dir = <span class="string">&#x27;./flower_data/&#x27;</span></span><br><span class="line">train_dir = data_dir + <span class="string">&#x27;/train&#x27;</span></span><br><span class="line">valid_dir = data_dir + <span class="string">&#x27;/valid&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="制作好数据源："><a href="#制作好数据源：" class="headerlink" title="制作好数据源："></a>制作好数据源：</h3><ul><li>data_transforms中指定了所有图像预处理操作</li><li>ImageFolder假设所有的文件按文件夹保存好，每个文件夹下面存贮同一类别的图片，文件夹的名字为分类的名字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data_transforms = &#123;</span><br><span class="line">    <span class="string">&#x27;train&#x27;</span>: transforms.Compose([transforms.RandomRotation(<span class="number">45</span>),<span class="comment">#随机旋转，-45到45度之间随机选</span></span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),<span class="comment">#从中心开始裁剪</span></span><br><span class="line">        transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>),<span class="comment">#随机水平翻转 选择一个概率概率</span></span><br><span class="line">        transforms.RandomVerticalFlip(p=<span class="number">0.5</span>),<span class="comment">#随机垂直翻转</span></span><br><span class="line">        transforms.ColorJitter(brightness=<span class="number">0.2</span>, contrast=<span class="number">0.1</span>, saturation=<span class="number">0.1</span>, hue=<span class="number">0.1</span>),<span class="comment">#参数1为亮度，参数2为对比度，参数3为饱和度，参数4为色相</span></span><br><span class="line">        transforms.RandomGrayscale(p=<span class="number">0.025</span>),<span class="comment">#概率转换成灰度率，3通道就是R=G=B</span></span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])<span class="comment">#均值，标准差</span></span><br><span class="line">    ]),</span><br><span class="line">    <span class="string">&#x27;valid&#x27;</span>: transforms.Compose([transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    ]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">image_datasets = &#123;x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line">dataloaders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batch_size, shuffle=<span class="literal">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line">dataset_sizes = &#123;x: <span class="built_in">len</span>(image_datasets[x]) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]&#125;</span><br><span class="line">class_names = image_datasets[<span class="string">&#x27;train&#x27;</span>].classes</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image_datasets</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;train&#39;: Dataset ImageFolder     Number of datapoints: 6552     Root location: ./flower_data/train     StandardTransform Transform: Compose(                RandomRotation(degrees=(-45, 45), resample=False, expand=False)                CenterCrop(size=(224, 224))                RandomHorizontalFlip(p=0.5)                RandomVerticalFlip(p=0.5)                ColorJitter(brightness=[0.8, 1.2], contrast=[0.9, 1.1], saturation=[0.9, 1.1], hue=[-0.1, 0.1])                RandomGrayscale(p=0.025)                ToTensor()                Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])            ), &#39;valid&#39;: Dataset ImageFolder     Number of datapoints: 818     Root location: ./flower_data/valid     StandardTransform Transform: Compose(                Resize(size=256, interpolation=PIL.Image.BILINEAR)                CenterCrop(size=(224, 224))                ToTensor()                Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])            )&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataloaders</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;train&#39;: &lt;torch.utils.data.dataloader.DataLoader at 0x21c5388b2b0&gt;, &#39;valid&#39;: &lt;torch.utils.data.dataloader.DataLoader at 0x21c539a80b8&gt;&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset_sizes</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;train&#39;: 6552, &#39;valid&#39;: 818&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读取标签对应的实际名字"><a href="#读取标签对应的实际名字" class="headerlink" title="读取标签对应的实际名字"></a>读取标签对应的实际名字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cat_to_name.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cat_to_name = json.load(f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat_to_name</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;1&#39;: &#39;pink primrose&#39;, &#39;10&#39;: &#39;globe thistle&#39;, &#39;100&#39;: &#39;blanket flower&#39;, &#39;101&#39;: &#39;trumpet creeper&#39;, &#39;102&#39;: &#39;blackberry lily&#39;, &#39;11&#39;: &#39;snapdragon&#39;, &#39;12&#39;: &quot;colt&#39;s foot&quot;, &#39;13&#39;: &#39;king protea&#39;, &#39;14&#39;: &#39;spear thistle&#39;, &#39;15&#39;: &#39;yellow iris&#39;, &#39;16&#39;: &#39;globe-flower&#39;, &#39;17&#39;: &#39;purple coneflower&#39;, &#39;18&#39;: &#39;peruvian lily&#39;, &#39;19&#39;: &#39;balloon flower&#39;, &#39;2&#39;: &#39;hard-leaved pocket orchid&#39;, &#39;20&#39;: &#39;giant white arum lily&#39;, &#39;21&#39;: &#39;fire lily&#39;, &#39;22&#39;: &#39;pincushion flower&#39;, &#39;23&#39;: &#39;fritillary&#39;, &#39;24&#39;: &#39;red ginger&#39;, &#39;25&#39;: &#39;grape hyacinth&#39;, &#39;26&#39;: &#39;corn poppy&#39;, &#39;27&#39;: &#39;prince of wales feathers&#39;, &#39;28&#39;: &#39;stemless gentian&#39;, &#39;29&#39;: &#39;artichoke&#39;, &#39;3&#39;: &#39;canterbury bells&#39;, &#39;30&#39;: &#39;sweet william&#39;, &#39;31&#39;: &#39;carnation&#39;, &#39;32&#39;: &#39;garden phlox&#39;, &#39;33&#39;: &#39;love in the mist&#39;, &#39;34&#39;: &#39;mexican aster&#39;, &#39;35&#39;: &#39;alpine sea holly&#39;, &#39;36&#39;: &#39;ruby-lipped cattleya&#39;, &#39;37&#39;: &#39;cape flower&#39;, &#39;38&#39;: &#39;great masterwort&#39;, &#39;39&#39;: &#39;siam tulip&#39;, &#39;4&#39;: &#39;sweet pea&#39;, &#39;40&#39;: &#39;lenten rose&#39;, &#39;41&#39;: &#39;barbeton daisy&#39;, &#39;42&#39;: &#39;daffodil&#39;, &#39;43&#39;: &#39;sword lily&#39;, &#39;44&#39;: &#39;poinsettia&#39;, &#39;45&#39;: &#39;bolero deep blue&#39;, &#39;46&#39;: &#39;wallflower&#39;, &#39;47&#39;: &#39;marigold&#39;, &#39;48&#39;: &#39;buttercup&#39;, &#39;49&#39;: &#39;oxeye daisy&#39;, &#39;5&#39;: &#39;english marigold&#39;, &#39;50&#39;: &#39;common dandelion&#39;, &#39;51&#39;: &#39;petunia&#39;, &#39;52&#39;: &#39;wild pansy&#39;, &#39;53&#39;: &#39;primula&#39;, &#39;54&#39;: &#39;sunflower&#39;, &#39;55&#39;: &#39;pelargonium&#39;, &#39;56&#39;: &#39;bishop of llandaff&#39;, &#39;57&#39;: &#39;gaura&#39;, &#39;58&#39;: &#39;geranium&#39;, &#39;59&#39;: &#39;orange dahlia&#39;, &#39;6&#39;: &#39;tiger lily&#39;, &#39;60&#39;: &#39;pink-yellow dahlia&#39;, &#39;61&#39;: &#39;cautleya spicata&#39;, &#39;62&#39;: &#39;japanese anemone&#39;, &#39;63&#39;: &#39;black-eyed susan&#39;, &#39;64&#39;: &#39;silverbush&#39;, &#39;65&#39;: &#39;californian poppy&#39;, &#39;66&#39;: &#39;osteospermum&#39;, &#39;67&#39;: &#39;spring crocus&#39;, &#39;68&#39;: &#39;bearded iris&#39;, &#39;69&#39;: &#39;windflower&#39;, &#39;7&#39;: &#39;moon orchid&#39;, &#39;70&#39;: &#39;tree poppy&#39;, &#39;71&#39;: &#39;gazania&#39;, &#39;72&#39;: &#39;azalea&#39;, &#39;73&#39;: &#39;water lily&#39;, &#39;74&#39;: &#39;rose&#39;, &#39;75&#39;: &#39;thorn apple&#39;, &#39;76&#39;: &#39;morning glory&#39;, &#39;77&#39;: &#39;passion flower&#39;, &#39;78&#39;: &#39;lotus lotus&#39;, &#39;79&#39;: &#39;toad lily&#39;, &#39;8&#39;: &#39;bird of paradise&#39;, &#39;80&#39;: &#39;anthurium&#39;, &#39;81&#39;: &#39;frangipani&#39;, &#39;82&#39;: &#39;clematis&#39;, &#39;83&#39;: &#39;hibiscus&#39;, &#39;84&#39;: &#39;columbine&#39;, &#39;85&#39;: &#39;desert-rose&#39;, &#39;86&#39;: &#39;tree mallow&#39;, &#39;87&#39;: &#39;magnolia&#39;, &#39;88&#39;: &#39;cyclamen&#39;, &#39;89&#39;: &#39;watercress&#39;, &#39;9&#39;: &#39;monkshood&#39;, &#39;90&#39;: &#39;canna lily&#39;, &#39;91&#39;: &#39;hippeastrum&#39;, &#39;92&#39;: &#39;bee balm&#39;, &#39;93&#39;: &#39;ball moss&#39;, &#39;94&#39;: &#39;foxglove&#39;, &#39;95&#39;: &#39;bougainvillea&#39;, &#39;96&#39;: &#39;camellia&#39;, &#39;97&#39;: &#39;mallow&#39;, &#39;98&#39;: &#39;mexican petunia&#39;, &#39;99&#39;: &#39;bromelia&#39;&#125;</code></pre><h3 id="展示下数据"><a href="#展示下数据" class="headerlink" title="展示下数据"></a>展示下数据</h3><ul><li>注意tensor的数据需要转换成numpy的格式，而且还需要还原回标准化的结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">im_convert</span>(<span class="params">tensor</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 展示数据&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    image = tensor.to(<span class="string">&quot;cpu&quot;</span>).clone().detach()</span><br><span class="line">    image = image.numpy().squeeze()</span><br><span class="line">    image = image.transpose(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">    image = image * np.array((<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>)) + np.array((<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>))</span><br><span class="line">    image = image.clip(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fig=plt.figure(figsize=(<span class="number">20</span>, <span class="number">12</span>))</span><br><span class="line">columns = <span class="number">4</span></span><br><span class="line">rows = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">dataiter = <span class="built_in">iter</span>(dataloaders[<span class="string">&#x27;valid&#x27;</span>])</span><br><span class="line">inputs, classes = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span> (columns*rows):</span><br><span class="line">    ax = fig.add_subplot(rows, columns, idx+<span class="number">1</span>, xticks=[], yticks=[])</span><br><span class="line">    ax.set_title(cat_to_name[<span class="built_in">str</span>(<span class="built_in">int</span>(class_names[classes[idx]]))])</span><br><span class="line">    plt.imshow(im_convert(inputs[idx]))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E8%A7%A3%E8%AF%BB/output_17_0.png" alt="png"></p><h3 id="加载models中提供的模型，并且直接用训练的好权重当做初始化参数"><a href="#加载models中提供的模型，并且直接用训练的好权重当做初始化参数" class="headerlink" title="加载models中提供的模型，并且直接用训练的好权重当做初始化参数"></a>加载models中提供的模型，并且直接用训练的好权重当做初始化参数</h3><ul><li>第一次执行需要下载，可能会比较慢，我会提供给大家一份下载好的，可以直接放到相应路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model_name = <span class="string">&#x27;resnet&#x27;</span>  <span class="comment">#可选的比较多 [&#x27;resnet&#x27;, &#x27;alexnet&#x27;, &#x27;vgg&#x27;, &#x27;squeezenet&#x27;, &#x27;densenet&#x27;, &#x27;inception&#x27;]</span></span><br><span class="line"><span class="comment">#是否用人家训练好的特征来做</span></span><br><span class="line">feature_extract = <span class="literal">True</span> </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否用GPU训练</span></span><br><span class="line">train_on_gpu = torch.cuda.is_available()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> train_on_gpu:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;CUDA is not available.  Training on CPU ...&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;CUDA is available!  Training on GPU ...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>CUDA is available!  Training on GPU ...</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_parameter_requires_grad</span>(<span class="params">model, feature_extracting</span>):</span></span><br><span class="line">    <span class="keyword">if</span> feature_extracting:</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">            param.requires_grad = <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model_ft = models.resnet152()</span><br><span class="line">model_ft</span><br></pre></td></tr></table></figure><pre><code>ResNet(  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (relu): ReLU(inplace=True)  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)  (layer1): Sequential(    (0): Bottleneck(      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)      (downsample): Sequential(        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (1): Bottleneck(      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (2): Bottleneck(      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )  )  (layer2): Sequential(    (0): Bottleneck(      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)      (downsample): Sequential(        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (1): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (2): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (3): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (4): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (5): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (6): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (7): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )  )  (layer3): Sequential(    (0): Bottleneck(      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)      (downsample): Sequential(        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (1): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (2): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (3): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (4): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (5): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (6): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (7): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (8): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (9): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (10): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (11): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (12): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (13): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (14): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (15): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (16): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (17): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (18): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (19): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (20): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (21): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (22): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (23): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (24): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (25): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (26): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (27): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (28): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (29): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (30): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (31): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (32): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (33): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (34): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (35): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )  )  (layer4): Sequential(    (0): Bottleneck(      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)      (downsample): Sequential(        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (1): Bottleneck(      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (2): Bottleneck(      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )  )  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))  (fc): Linear(in_features=2048, out_features=1000, bias=True))</code></pre><h3 id="参考pytorch官网例子"><a href="#参考pytorch官网例子" class="headerlink" title="参考pytorch官网例子"></a>参考pytorch官网例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_model</span>(<span class="params">model_name, num_classes, feature_extract, use_pretrained=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="comment"># 选择合适的模型，不同模型的初始化方法稍微有点区别</span></span><br><span class="line">    model_ft = <span class="literal">None</span></span><br><span class="line">    input_size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> model_name == <span class="string">&quot;resnet&quot;</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Resnet152</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        model_ft = models.resnet152(pretrained=use_pretrained)</span><br><span class="line">        set_parameter_requires_grad(model_ft, feature_extract)</span><br><span class="line">        num_ftrs = model_ft.fc.in_features</span><br><span class="line">        model_ft.fc = nn.Sequential(nn.Linear(num_ftrs, <span class="number">102</span>),</span><br><span class="line">                                   nn.LogSoftmax(dim=<span class="number">1</span>))</span><br><span class="line">        input_size = <span class="number">224</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> model_name == <span class="string">&quot;alexnet&quot;</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Alexnet</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        model_ft = models.alexnet(pretrained=use_pretrained)</span><br><span class="line">        set_parameter_requires_grad(model_ft, feature_extract)</span><br><span class="line">        num_ftrs = model_ft.classifier[<span class="number">6</span>].in_features</span><br><span class="line">        model_ft.classifier[<span class="number">6</span>] = nn.Linear(num_ftrs,num_classes)</span><br><span class="line">        input_size = <span class="number">224</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> model_name == <span class="string">&quot;vgg&quot;</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot; VGG11_bn</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        model_ft = models.vgg16(pretrained=use_pretrained)</span><br><span class="line">        set_parameter_requires_grad(model_ft, feature_extract)</span><br><span class="line">        num_ftrs = model_ft.classifier[<span class="number">6</span>].in_features</span><br><span class="line">        model_ft.classifier[<span class="number">6</span>] = nn.Linear(num_ftrs,num_classes)</span><br><span class="line">        input_size = <span class="number">224</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> model_name == <span class="string">&quot;squeezenet&quot;</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Squeezenet</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        model_ft = models.squeezenet1_0(pretrained=use_pretrained)</span><br><span class="line">        set_parameter_requires_grad(model_ft, feature_extract)</span><br><span class="line">        model_ft.classifier[<span class="number">1</span>] = nn.Conv2d(<span class="number">512</span>, num_classes, kernel_size=(<span class="number">1</span>,<span class="number">1</span>), stride=(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        model_ft.num_classes = num_classes</span><br><span class="line">        input_size = <span class="number">224</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> model_name == <span class="string">&quot;densenet&quot;</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Densenet</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        model_ft = models.densenet121(pretrained=use_pretrained)</span><br><span class="line">        set_parameter_requires_grad(model_ft, feature_extract)</span><br><span class="line">        num_ftrs = model_ft.classifier.in_features</span><br><span class="line">        model_ft.classifier = nn.Linear(num_ftrs, num_classes)</span><br><span class="line">        input_size = <span class="number">224</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> model_name == <span class="string">&quot;inception&quot;</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Inception v3</span></span><br><span class="line"><span class="string">        Be careful, expects (299,299) sized images and has auxiliary output</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        model_ft = models.inception_v3(pretrained=use_pretrained)</span><br><span class="line">        set_parameter_requires_grad(model_ft, feature_extract)</span><br><span class="line">        <span class="comment"># Handle the auxilary net</span></span><br><span class="line">        num_ftrs = model_ft.AuxLogits.fc.in_features</span><br><span class="line">        model_ft.AuxLogits.fc = nn.Linear(num_ftrs, num_classes)</span><br><span class="line">        <span class="comment"># Handle the primary net</span></span><br><span class="line">        num_ftrs = model_ft.fc.in_features</span><br><span class="line">        model_ft.fc = nn.Linear(num_ftrs,num_classes)</span><br><span class="line">        input_size = <span class="number">299</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid model name, exiting...&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model_ft, input_size</span><br></pre></td></tr></table></figure><h3 id="设置哪些层需要训练"><a href="#设置哪些层需要训练" class="headerlink" title="设置哪些层需要训练"></a>设置哪些层需要训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">model_ft, input_size = initialize_model(model_name, <span class="number">102</span>, feature_extract, use_pretrained=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#GPU计算</span></span><br><span class="line">model_ft = model_ft.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型保存</span></span><br><span class="line">filename=<span class="string">&#x27;checkpoint.pth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否训练所有层</span></span><br><span class="line">params_to_update = model_ft.parameters()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Params to learn:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> feature_extract:</span><br><span class="line">    params_to_update = []</span><br><span class="line">    <span class="keyword">for</span> name,param <span class="keyword">in</span> model_ft.named_parameters():</span><br><span class="line">        <span class="keyword">if</span> param.requires_grad == <span class="literal">True</span>:</span><br><span class="line">            params_to_update.append(param)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>,name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> name,param <span class="keyword">in</span> model_ft.named_parameters():</span><br><span class="line">        <span class="keyword">if</span> param.requires_grad == <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>,name)</span><br></pre></td></tr></table></figure><pre><code>Params to learn:     fc.0.weight     fc.0.bias</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_ft</span><br></pre></td></tr></table></figure><pre><code>ResNet(  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (relu): ReLU(inplace=True)  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)  (layer1): Sequential(    (0): Bottleneck(      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)      (downsample): Sequential(        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (1): Bottleneck(      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (2): Bottleneck(      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )  )  (layer2): Sequential(    (0): Bottleneck(      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)      (downsample): Sequential(        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (1): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (2): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (3): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (4): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (5): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (6): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (7): Bottleneck(      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )  )  (layer3): Sequential(    (0): Bottleneck(      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)      (downsample): Sequential(        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (1): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (2): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (3): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (4): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (5): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (6): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (7): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (8): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (9): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (10): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (11): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (12): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (13): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (14): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (15): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (16): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (17): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (18): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (19): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (20): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (21): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (22): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (23): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (24): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (25): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (26): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (27): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (28): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (29): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (30): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (31): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (32): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (33): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (34): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (35): Bottleneck(      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )  )  (layer4): Sequential(    (0): Bottleneck(      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)      (downsample): Sequential(        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (1): Bottleneck(      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )    (2): Bottleneck(      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (relu): ReLU(inplace=True)    )  )  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))  (fc): Sequential(    (0): Linear(in_features=2048, out_features=102, bias=True)    (1): LogSoftmax()  ))</code></pre><h3 id="优化器设置"><a href="#优化器设置" class="headerlink" title="优化器设置"></a>优化器设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优化器设置</span></span><br><span class="line">optimizer_ft = optim.Adam(params_to_update, lr=<span class="number">1e-2</span>)</span><br><span class="line">scheduler = optim.lr_scheduler.StepLR(optimizer_ft, step_size=<span class="number">7</span>, gamma=<span class="number">0.1</span>)<span class="comment">#学习率每7个epoch衰减成原来的1/10</span></span><br><span class="line"><span class="comment">#最后一层已经LogSoftmax()了，所以不能nn.CrossEntropyLoss()来计算了，nn.CrossEntropyLoss()相当于logSoftmax()和nn.NLLLoss()整合</span></span><br><span class="line">criterion = nn.NLLLoss()</span><br></pre></td></tr></table></figure><h3 id="训练模块"><a href="#训练模块" class="headerlink" title="训练模块"></a>训练模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">model, dataloaders, criterion, optimizer, num_epochs=<span class="number">25</span>, is_inception=<span class="literal">False</span>,filename=filename</span>):</span></span><br><span class="line">    since = time.time()</span><br><span class="line">    best_acc = <span class="number">0</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    checkpoint = torch.load(filename)</span></span><br><span class="line"><span class="string">    best_acc = checkpoint[&#x27;best_acc&#x27;]</span></span><br><span class="line"><span class="string">    model.load_state_dict(checkpoint[&#x27;state_dict&#x27;])</span></span><br><span class="line"><span class="string">    optimizer.load_state_dict(checkpoint[&#x27;optimizer&#x27;])</span></span><br><span class="line"><span class="string">    model.class_to_idx = checkpoint[&#x27;mapping&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    val_acc_history = []</span><br><span class="line">    train_acc_history = []</span><br><span class="line">    train_losses = []</span><br><span class="line">    valid_losses = []</span><br><span class="line">    LRs = [optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">    best_model_wts = copy.deepcopy(model.state_dict())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch, num_epochs - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练和验证</span></span><br><span class="line">        <span class="keyword">for</span> phase <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                model.train()  <span class="comment"># 训练</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                model.<span class="built_in">eval</span>()   <span class="comment"># 验证</span></span><br><span class="line"></span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line">            running_corrects = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 把数据都取个遍</span></span><br><span class="line">            <span class="keyword">for</span> inputs, labels <span class="keyword">in</span> dataloaders[phase]:</span><br><span class="line">                inputs = inputs.to(device)</span><br><span class="line">                labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 清零</span></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line">                <span class="comment"># 只有训练的时候计算和更新梯度</span></span><br><span class="line">                <span class="keyword">with</span> torch.set_grad_enabled(phase == <span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">                    <span class="keyword">if</span> is_inception <span class="keyword">and</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                        outputs, aux_outputs = model(inputs)</span><br><span class="line">                        loss1 = criterion(outputs, labels)</span><br><span class="line">                        loss2 = criterion(aux_outputs, labels)</span><br><span class="line">                        loss = loss1 + <span class="number">0.4</span>*loss2</span><br><span class="line">                    <span class="keyword">else</span>:<span class="comment">#resnet执行的是这里</span></span><br><span class="line">                        outputs = model(inputs)</span><br><span class="line">                        loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">                    _, preds = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 训练阶段更新权重</span></span><br><span class="line">                    <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                        loss.backward()</span><br><span class="line">                        optimizer.step()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 计算损失</span></span><br><span class="line">                running_loss += loss.item() * inputs.size(<span class="number">0</span>)</span><br><span class="line">                running_corrects += torch.<span class="built_in">sum</span>(preds == labels.data)</span><br><span class="line"></span><br><span class="line">            epoch_loss = running_loss / <span class="built_in">len</span>(dataloaders[phase].dataset)</span><br><span class="line">            epoch_acc = running_corrects.double() / <span class="built_in">len</span>(dataloaders[phase].dataset)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            time_elapsed = time.time() - since</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Time elapsed &#123;:.0f&#125;m &#123;:.0f&#125;s&#x27;</span>.<span class="built_in">format</span>(time_elapsed // <span class="number">60</span>, time_elapsed % <span class="number">60</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; Loss: &#123;:.4f&#125; Acc: &#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(phase, epoch_loss, epoch_acc))</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="comment"># 得到最好那次的模型</span></span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;valid&#x27;</span> <span class="keyword">and</span> epoch_acc &gt; best_acc:</span><br><span class="line">                best_acc = epoch_acc</span><br><span class="line">                best_model_wts = copy.deepcopy(model.state_dict())</span><br><span class="line">                state = &#123;</span><br><span class="line">                  <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class="line">                  <span class="string">&#x27;best_acc&#x27;</span>: best_acc,</span><br><span class="line">                  <span class="string">&#x27;optimizer&#x27;</span> : optimizer.state_dict(),</span><br><span class="line">                &#125;</span><br><span class="line">                torch.save(state, filename)</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;valid&#x27;</span>:</span><br><span class="line">                val_acc_history.append(epoch_acc)</span><br><span class="line">                valid_losses.append(epoch_loss)</span><br><span class="line">                scheduler.step(epoch_loss)</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">                train_acc_history.append(epoch_acc)</span><br><span class="line">                train_losses.append(epoch_loss)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Optimizer learning rate : &#123;:.7f&#125;&#x27;</span>.<span class="built_in">format</span>(optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>]))</span><br><span class="line">        LRs.append(optimizer.param_groups[<span class="number">0</span>][<span class="string">&#x27;lr&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    time_elapsed = time.time() - since</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Training complete in &#123;:.0f&#125;m &#123;:.0f&#125;s&#x27;</span>.<span class="built_in">format</span>(time_elapsed // <span class="number">60</span>, time_elapsed % <span class="number">60</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Best val Acc: &#123;:4f&#125;&#x27;</span>.<span class="built_in">format</span>(best_acc))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练完后用最好的一次当做模型最终的结果</span></span><br><span class="line">    model.load_state_dict(best_model_wts)</span><br><span class="line">    <span class="keyword">return</span> model, val_acc_history, train_acc_history, valid_losses, train_losses, LRs </span><br></pre></td></tr></table></figure><h3 id="开始训练！"><a href="#开始训练！" class="headerlink" title="开始训练！"></a>开始训练！</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs  = train_model(model_ft, dataloaders, criterion, optimizer_ft, num_epochs=<span class="number">20</span>, is_inception=(model_name==<span class="string">&quot;inception&quot;</span>))</span><br></pre></td></tr></table></figure><pre><code>Epoch 0/19----------Time elapsed 1m 32strain Loss: 5.5265 Acc: 0.4208Time elapsed 1m 40svalid Loss: 5.2129 Acc: 0.3704Optimizer learning rate : 0.0100000Epoch 1/19----------Time elapsed 3m 10strain Loss: 2.9181 Acc: 0.6081Time elapsed 3m 18svalid Loss: 3.7638 Acc: 0.5636Optimizer learning rate : 0.0100000Epoch 2/19----------Time elapsed 4m 48strain Loss: 2.4450 Acc: 0.6743Time elapsed 4m 56svalid Loss: 4.5817 Acc: 0.5697Optimizer learning rate : 0.0100000Epoch 3/19----------Time elapsed 6m 27strain Loss: 2.5903 Acc: 0.7009Time elapsed 6m 36svalid Loss: 4.9644 Acc: 0.5892Optimizer learning rate : 0.0100000Epoch 4/19----------Time elapsed 8m 6strain Loss: 2.6967 Acc: 0.7115Time elapsed 8m 14svalid Loss: 4.5062 Acc: 0.6100Optimizer learning rate : 0.0100000Epoch 5/19----------Time elapsed 9m 44strain Loss: 2.3118 Acc: 0.7396Time elapsed 9m 53svalid Loss: 6.4257 Acc: 0.5477Optimizer learning rate : 0.0100000Epoch 6/19----------Time elapsed 11m 24strain Loss: 2.3989 Acc: 0.7526Time elapsed 11m 32svalid Loss: 4.9951 Acc: 0.6308Optimizer learning rate : 0.0100000Epoch 7/19----------Time elapsed 13m 4strain Loss: 2.3993 Acc: 0.7585Time elapsed 13m 12svalid Loss: 5.8224 Acc: 0.6259Optimizer learning rate : 0.0100000Epoch 8/19----------Time elapsed 14m 43strain Loss: 2.3057 Acc: 0.7753Time elapsed 14m 51svalid Loss: 4.2491 Acc: 0.6736Optimizer learning rate : 0.0100000Epoch 9/19----------Time elapsed 16m 23strain Loss: 2.1906 Acc: 0.7784Time elapsed 16m 31svalid Loss: 6.6806 Acc: 0.5844Optimizer learning rate : 0.0100000Epoch 10/19----------Time elapsed 18m 1strain Loss: 2.3796 Acc: 0.7701Time elapsed 18m 9svalid Loss: 5.8650 Acc: 0.6161Optimizer learning rate : 0.0100000Epoch 11/19----------Time elapsed 19m 39strain Loss: 2.1209 Acc: 0.7991Time elapsed 19m 47svalid Loss: 5.8362 Acc: 0.6320Optimizer learning rate : 0.0100000Epoch 12/19----------Time elapsed 21m 18strain Loss: 2.1813 Acc: 0.8033Time elapsed 21m 26svalid Loss: 6.4145 Acc: 0.6125Optimizer learning rate : 0.0100000Epoch 13/19----------Time elapsed 22m 56strain Loss: 2.1946 Acc: 0.8037Time elapsed 23m 5svalid Loss: 4.8139 Acc: 0.6907Optimizer learning rate : 0.0100000Epoch 14/19----------Time elapsed 24m 35strain Loss: 2.2012 Acc: 0.8089Time elapsed 24m 43svalid Loss: 9.2210 Acc: 0.5587Optimizer learning rate : 0.0010000Epoch 15/19----------Time elapsed 26m 14strain Loss: 1.0781 Acc: 0.8839Time elapsed 26m 22svalid Loss: 3.5629 Acc: 0.7604Optimizer learning rate : 0.0100000Epoch 16/19----------Time elapsed 27m 54strain Loss: 2.5545 Acc: 0.7984Time elapsed 28m 2svalid Loss: 8.1441 Acc: 0.5733Optimizer learning rate : 0.0010000Epoch 17/19----------Time elapsed 29m 32strain Loss: 0.9914 Acc: 0.8922Time elapsed 29m 40svalid Loss: 3.6607 Acc: 0.7421Optimizer learning rate : 0.0100000Epoch 18/19----------Time elapsed 31m 11strain Loss: 2.2526 Acc: 0.8109Time elapsed 31m 19svalid Loss: 6.3857 Acc: 0.6540Optimizer learning rate : 0.0100000Epoch 19/19----------Time elapsed 32m 50strain Loss: 2.4501 Acc: 0.8074Time elapsed 32m 58svalid Loss: 6.8593 Acc: 0.6663Optimizer learning rate : 0.0100000Training complete in 32m 58sBest val Acc: 0.760391</code></pre><h3 id="再继续训练所有层"><a href="#再继续训练所有层" class="headerlink" title="再继续训练所有层"></a>再继续训练所有层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model_ft.parameters():</span><br><span class="line">    param.requires_grad = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再继续训练所有的参数，学习率调小一点</span></span><br><span class="line">optimizer = optim.Adam(params_to_update, lr=<span class="number">1e-4</span>)</span><br><span class="line">scheduler = optim.lr_scheduler.StepLR(optimizer_ft, step_size=<span class="number">7</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">criterion = nn.NLLLoss()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load the checkpoint</span></span><br><span class="line"></span><br><span class="line">checkpoint = torch.load(filename)</span><br><span class="line">best_acc = checkpoint[<span class="string">&#x27;best_acc&#x27;</span>]</span><br><span class="line">model_ft.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line"><span class="comment">#model_ft.class_to_idx = checkpoint[&#x27;mapping&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs  = train_model(model_ft, dataloaders, criterion, optimizer, num_epochs=<span class="number">10</span>, is_inception=(model_name==<span class="string">&quot;inception&quot;</span>))</span><br></pre></td></tr></table></figure><pre><code>Epoch 0/9----------Time elapsed 3m 8strain Loss: 1.8128 Acc: 0.8065Time elapsed 3m 17svalid Loss: 4.6786 Acc: 0.6993e:\ProgramData\Anaconda3\lib\site-packages\torch\optim\lr_scheduler.py:100: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule.See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate  &quot;https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate&quot;, UserWarning)Optimizer learning rate : 0.0010000Epoch 1/9----------Time elapsed 6m 26strain Loss: 1.5370 Acc: 0.8268Time elapsed 6m 34svalid Loss: 4.3483 Acc: 0.7017Optimizer learning rate : 0.0010000Epoch 2/9----------Time elapsed 9m 44strain Loss: 1.3812 Acc: 0.8367Time elapsed 9m 52svalid Loss: 4.0840 Acc: 0.7127Optimizer learning rate : 0.0010000Epoch 3/9----------Time elapsed 13m 2strain Loss: 1.4777 Acc: 0.8312Time elapsed 13m 10svalid Loss: 4.2493 Acc: 0.7078Optimizer learning rate : 0.0010000Epoch 4/9----------Time elapsed 16m 22strain Loss: 1.3351 Acc: 0.8434Time elapsed 16m 31svalid Loss: 3.6103 Acc: 0.7396Optimizer learning rate : 0.0010000Epoch 5/9----------Time elapsed 19m 42strain Loss: 1.2934 Acc: 0.8466Time elapsed 19m 51svalid Loss: 3.3350 Acc: 0.7494Optimizer learning rate : 0.0010000Epoch 6/9----------Time elapsed 23m 2strain Loss: 1.3289 Acc: 0.8379Time elapsed 23m 11svalid Loss: 3.9728 Acc: 0.7164Optimizer learning rate : 0.0010000Epoch 7/9----------Time elapsed 26m 22strain Loss: 1.3739 Acc: 0.8321Time elapsed 26m 31svalid Loss: 3.7483 Acc: 0.7237Optimizer learning rate : 0.0010000Epoch 8/9----------Time elapsed 29m 43strain Loss: 1.2110 Acc: 0.8495Time elapsed 29m 52svalid Loss: 3.7712 Acc: 0.7164Optimizer learning rate : 0.0010000Epoch 9/9----------Time elapsed 33m 2strain Loss: 1.2643 Acc: 0.8452Time elapsed 33m 11svalid Loss: 3.7012 Acc: 0.7311Optimizer learning rate : 0.0010000Training complete in 33m 11sBest val Acc: 0.749389</code></pre><h3 id="测试网络效果"><a href="#测试网络效果" class="headerlink" title="测试网络效果"></a>测试网络效果</h3><p>输入一张测试图像，看看网络的返回结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">probs, classes = predict(image_path, model)</span><br><span class="line"><span class="built_in">print</span>(probs)</span><br><span class="line"><span class="built_in">print</span>(classes)</span><br><span class="line">&gt; [ <span class="number">0.01558163</span>  <span class="number">0.01541934</span>  <span class="number">0.01452626</span>  <span class="number">0.01443549</span>  <span class="number">0.01407339</span>]</span><br><span class="line">&gt; [<span class="string">&#x27;70&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;45&#x27;</span>, <span class="string">&#x27;62&#x27;</span>, <span class="string">&#x27;55&#x27;</span>]</span><br></pre></td></tr></table></figure><p>注意预处理方法需相同</p><h3 id="加载训练好的模型"><a href="#加载训练好的模型" class="headerlink" title="加载训练好的模型"></a>加载训练好的模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">model_ft, input_size = initialize_model(model_name, <span class="number">102</span>, feature_extract, use_pretrained=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># GPU模式</span></span><br><span class="line">model_ft = model_ft.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存文件的名字</span></span><br><span class="line">filename=<span class="string">&#x27;seriouscheckpoint.pth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">checkpoint = torch.load(filename)</span><br><span class="line">best_acc = checkpoint[<span class="string">&#x27;best_acc&#x27;</span>]</span><br><span class="line">model_ft.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>&lt;All keys matched successfully&gt;</code></pre><h3 id="测试数据预处理"><a href="#测试数据预处理" class="headerlink" title="测试数据预处理"></a>测试数据预处理</h3><ul><li>测试数据处理方法需要跟训练时一直才可以 </li><li>crop操作的目的是保证输入的大小是一致的</li><li>标准化操作也是必须的，用跟训练数据相同的mean和std,但是需要注意一点训练数据是在0-1上进行标准化，所以测试数据也需要先归一化</li><li>最后一点，PyTorch中颜色通道是第一个维度，跟很多工具包都不一样，需要转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_image</span>(<span class="params">image_path</span>):</span></span><br><span class="line">    <span class="comment"># 读取测试数据</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    <span class="comment"># Resize,thumbnail方法只能进行缩小，所以进行了判断</span></span><br><span class="line">    <span class="keyword">if</span> img.size[<span class="number">0</span>] &gt; img.size[<span class="number">1</span>]:</span><br><span class="line">        img.thumbnail((<span class="number">10000</span>, <span class="number">256</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        img.thumbnail((<span class="number">256</span>, <span class="number">10000</span>))</span><br><span class="line">    <span class="comment"># Crop操作</span></span><br><span class="line">    left_margin = (img.width-<span class="number">224</span>)/<span class="number">2</span></span><br><span class="line">    bottom_margin = (img.height-<span class="number">224</span>)/<span class="number">2</span></span><br><span class="line">    right_margin = left_margin + <span class="number">224</span></span><br><span class="line">    top_margin = bottom_margin + <span class="number">224</span></span><br><span class="line">    img = img.crop((left_margin, bottom_margin, right_margin,   </span><br><span class="line">                      top_margin))</span><br><span class="line">    <span class="comment"># 相同的预处理方法</span></span><br><span class="line">    img = np.array(img)/<span class="number">255</span></span><br><span class="line">    mean = np.array([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>]) <span class="comment">#provided mean</span></span><br><span class="line">    std = np.array([<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]) <span class="comment">#provided std</span></span><br><span class="line">    img = (img - mean)/std</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 注意颜色通道应该放在第一个位置</span></span><br><span class="line">    img = img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imshow</span>(<span class="params">image, ax=<span class="literal">None</span>, title=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;展示数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> ax <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 颜色通道还原</span></span><br><span class="line">    image = np.array(image).transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预处理还原</span></span><br><span class="line">    mean = np.array([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>])</span><br><span class="line">    std = np.array([<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    image = std * image + mean</span><br><span class="line">    image = np.clip(image, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    ax.imshow(image)</span><br><span class="line">    ax.set_title(title)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">image_path = <span class="string">&#x27;image_06621.jpg&#x27;</span></span><br><span class="line">img = process_image(image_path)</span><br><span class="line">imshow(img)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x21c7c39f080&gt;</code></pre><p><img src="/images/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E8%A7%A3%E8%AF%BB/output_44_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.shape</span><br></pre></td></tr></table></figure><pre><code>(3, 224, 224)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到一个batch的测试数据</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(dataloaders[<span class="string">&#x27;valid&#x27;</span>])</span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">model_ft.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> train_on_gpu:</span><br><span class="line">    output = model_ft(images.cuda())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    output = model_ft(images)</span><br></pre></td></tr></table></figure><p>output表示对一个batch中每一个数据得到其属于各个类别的可能性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output.shape</span><br></pre></td></tr></table></figure><pre><code>torch.Size([8, 102])</code></pre><h3 id="得到概率最大的那个"><a href="#得到概率最大的那个" class="headerlink" title="得到概率最大的那个"></a>得到概率最大的那个</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_, preds_tensor = torch.<span class="built_in">max</span>(output, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">preds = np.squeeze(preds_tensor.numpy()) <span class="keyword">if</span> <span class="keyword">not</span> train_on_gpu <span class="keyword">else</span> np.squeeze(preds_tensor.cpu().numpy())</span><br><span class="line">preds</span><br></pre></td></tr></table></figure><pre><code>array([77, 22, 46, 46, 64, 93, 28, 48], dtype=int64)</code></pre><h3 id="展示预测结果"><a href="#展示预测结果" class="headerlink" title="展示预测结果"></a>展示预测结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig=plt.figure(figsize=(<span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">columns =<span class="number">4</span></span><br><span class="line">rows = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span> (columns*rows):</span><br><span class="line">    ax = fig.add_subplot(rows, columns, idx+<span class="number">1</span>, xticks=[], yticks=[])</span><br><span class="line">    plt.imshow(im_convert(images[idx]))</span><br><span class="line">    ax.set_title(<span class="string">&quot;&#123;&#125; (&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(cat_to_name[<span class="built_in">str</span>(preds[idx])], cat_to_name[<span class="built_in">str</span>(labels[idx].item())]),</span><br><span class="line">                 color=(<span class="string">&quot;green&quot;</span> <span class="keyword">if</span> cat_to_name[<span class="built_in">str</span>(preds[idx])]==cat_to_name[<span class="built_in">str</span>(labels[idx].item())] <span class="keyword">else</span> <span class="string">&quot;red&quot;</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E8%A7%A3%E8%AF%BB/output_52_0.png" alt="png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络效果</title>
    <link href="/2020/09/03/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%95%88%E6%9E%9C/"/>
    <url>/2020/09/03/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="构建卷积神经网络"><a href="#构建卷积神经网络" class="headerlink" title="构建卷积神经网络"></a>构建卷积神经网络</h3><ul><li>卷积网络中的输入和层与传统神经网络有些区别，需重新设计，训练模块基本一致</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets,transforms </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h3 id="首先读取数据"><a href="#首先读取数据" class="headerlink" title="首先读取数据"></a>首先读取数据</h3><ul><li>分别构建训练集和测试集（验证集）</li><li>DataLoader来迭代取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义超参数 </span></span><br><span class="line">input_size = <span class="number">28</span>  <span class="comment">#图像的总尺寸28*28</span></span><br><span class="line">num_classes = <span class="number">10</span>  <span class="comment">#标签的种类数</span></span><br><span class="line">num_epochs = <span class="number">3</span>  <span class="comment">#训练的总循环周期</span></span><br><span class="line">batch_size = <span class="number">64</span>  <span class="comment">#一个撮（批次）的大小，64张图片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集</span></span><br><span class="line">train_dataset = datasets.MNIST(root=<span class="string">&#x27;./data&#x27;</span>,  </span><br><span class="line">                            train=<span class="literal">True</span>,   </span><br><span class="line">                            transform=transforms.ToTensor(),  </span><br><span class="line">                            download=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">test_dataset = datasets.MNIST(root=<span class="string">&#x27;./data&#x27;</span>, </span><br><span class="line">                           train=<span class="literal">False</span>, </span><br><span class="line">                           transform=transforms.ToTensor())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建batch数据</span></span><br><span class="line">train_loader = torch.utils.data.DataLoader(dataset=train_dataset, </span><br><span class="line">                                           batch_size=batch_size, </span><br><span class="line">                                           shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = torch.utils.data.DataLoader(dataset=test_dataset, </span><br><span class="line">                                           batch_size=batch_size, </span><br><span class="line">                                           shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="卷积网络模块构建"><a href="#卷积网络模块构建" class="headerlink" title="卷积网络模块构建"></a>卷积网络模块构建</h3><ul><li>一般卷积层，relu层，池化层可以写成一个套餐</li><li>注意卷积最后结果还是一个特征图，需要把图转换成向量才能做分类或者回归任务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(CNN, self).__init__()</span><br><span class="line">        self.conv1 = nn.Sequential(         <span class="comment"># 输入大小 (1, 28, 28)</span></span><br><span class="line">            nn.Conv2d(</span><br><span class="line">                in_channels=<span class="number">1</span>,              <span class="comment"># 灰度图</span></span><br><span class="line">                out_channels=<span class="number">16</span>,            <span class="comment"># 要得到几多少个特征图</span></span><br><span class="line">                kernel_size=<span class="number">5</span>,              <span class="comment"># 卷积核大小</span></span><br><span class="line">                stride=<span class="number">1</span>,                   <span class="comment"># 步长</span></span><br><span class="line">                padding=<span class="number">2</span>,                  <span class="comment"># 如果希望卷积后大小跟原来一样，需要设置padding=(kernel_size-1)/2 if stride=1</span></span><br><span class="line">            ),                              <span class="comment"># 输出的特征图为 (16, 28, 28)</span></span><br><span class="line">            nn.ReLU(),                      <span class="comment"># relu层</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),    <span class="comment"># 进行池化操作（2x2 区域）, 输出结果为： (16, 14, 14)</span></span><br><span class="line">        )</span><br><span class="line">        self.conv2 = nn.Sequential(         <span class="comment"># 下一个套餐的输入 (16, 14, 14)</span></span><br><span class="line">            nn.Conv2d(<span class="number">16</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),     <span class="comment"># 输出 (32, 14, 14)</span></span><br><span class="line">            nn.ReLU(),                      <span class="comment"># relu层</span></span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),                <span class="comment"># 输出 (32, 7, 7)</span></span><br><span class="line">        )</span><br><span class="line">        self.out = nn.Linear(<span class="number">32</span> * <span class="number">7</span> * <span class="number">7</span>, <span class="number">10</span>)   <span class="comment"># 全连接层得到的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)           <span class="comment"># flatten操作，结果为：(batch_size, 32 * 7 * 7)</span></span><br><span class="line">        output = self.out(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h3 id="准确率作为评估标准"><a href="#准确率作为评估标准" class="headerlink" title="准确率作为评估标准"></a>准确率作为评估标准</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span>(<span class="params">predictions, labels</span>):</span></span><br><span class="line">    pred = torch.<span class="built_in">max</span>(predictions.data, <span class="number">1</span>)[<span class="number">1</span>] </span><br><span class="line">    rights = pred.eq(labels.data.view_as(pred)).<span class="built_in">sum</span>() </span><br><span class="line">    <span class="keyword">return</span> rights, <span class="built_in">len</span>(labels) </span><br></pre></td></tr></table></figure><h3 id="训练网络模型"><a href="#训练网络模型" class="headerlink" title="训练网络模型"></a>训练网络模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">net = CNN() </span><br><span class="line"><span class="comment">#损失函数</span></span><br><span class="line">criterion = nn.CrossEntropyLoss() </span><br><span class="line"><span class="comment">#优化器</span></span><br><span class="line">optimizer = optim.Adam(net.parameters(), lr=<span class="number">0.001</span>) <span class="comment">#定义优化器，普通的随机梯度下降算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开始训练循环</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="comment">#当前epoch的结果保存下来</span></span><br><span class="line">    train_rights = [] </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):  <span class="comment">#针对容器中的每一个批进行循环</span></span><br><span class="line">        net.train()                             </span><br><span class="line">        output = net(data) </span><br><span class="line">        loss = criterion(output, target) </span><br><span class="line">        optimizer.zero_grad() </span><br><span class="line">        loss.backward() </span><br><span class="line">        optimizer.step() </span><br><span class="line">        right = accuracy(output, target) </span><br><span class="line">        train_rights.append(right) </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> batch_idx % <span class="number">100</span> == <span class="number">0</span>: </span><br><span class="line">            </span><br><span class="line">            net.<span class="built_in">eval</span>() </span><br><span class="line">            val_rights = [] </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (data, target) <span class="keyword">in</span> test_loader:</span><br><span class="line">                output = net(data) </span><br><span class="line">                right = accuracy(output, target) </span><br><span class="line">                val_rights.append(right)</span><br><span class="line">                </span><br><span class="line">            <span class="comment">#准确率计算</span></span><br><span class="line">            train_r = (<span class="built_in">sum</span>([tup[<span class="number">0</span>] <span class="keyword">for</span> tup <span class="keyword">in</span> train_rights]), <span class="built_in">sum</span>([tup[<span class="number">1</span>] <span class="keyword">for</span> tup <span class="keyword">in</span> train_rights]))</span><br><span class="line">            val_r = (<span class="built_in">sum</span>([tup[<span class="number">0</span>] <span class="keyword">for</span> tup <span class="keyword">in</span> val_rights]), <span class="built_in">sum</span>([tup[<span class="number">1</span>] <span class="keyword">for</span> tup <span class="keyword">in</span> val_rights]))</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;当前epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\t损失: &#123;:.6f&#125;\t训练集准确率: &#123;:.2f&#125;%\t测试集正确率: &#123;:.2f&#125;%&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                epoch, batch_idx * batch_size, <span class="built_in">len</span>(train_loader.dataset),</span><br><span class="line">                <span class="number">100.</span> * batch_idx / <span class="built_in">len</span>(train_loader), </span><br><span class="line">                loss.data, </span><br><span class="line">                <span class="number">100.</span> * train_r[<span class="number">0</span>].numpy() / train_r[<span class="number">1</span>], </span><br><span class="line">                <span class="number">100.</span> * val_r[<span class="number">0</span>].numpy() / val_r[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><pre><code>当前epoch: 0 [0/60000 (0%)]    损失: 2.298275    训练集准确率: 18.75%    测试集正确率: 16.69%当前epoch: 0 [6400/60000 (11%)]    损失: 0.366936    训练集准确率: 77.09%    测试集正确率: 91.76%当前epoch: 0 [12800/60000 (21%)]    损失: 0.197412    训练集准确率: 85.04%    测试集正确率: 95.32%当前epoch: 0 [19200/60000 (32%)]    损失: 0.065437    训练集准确率: 88.57%    测试集正确率: 95.96%当前epoch: 0 [25600/60000 (43%)]    损失: 0.245751    训练集准确率: 90.43%    测试集正确率: 97.05%当前epoch: 0 [32000/60000 (53%)]    损失: 0.116508    训练集准确率: 91.65%    测试集正确率: 97.33%当前epoch: 0 [38400/60000 (64%)]    损失: 0.106026    训练集准确率: 92.51%    测试集正确率: 97.47%当前epoch: 0 [44800/60000 (75%)]    损失: 0.024781    训练集准确率: 93.20%    测试集正确率: 97.79%当前epoch: 0 [51200/60000 (85%)]    损失: 0.040254    训练集准确率: 93.77%    测试集正确率: 97.44%当前epoch: 0 [57600/60000 (96%)]    损失: 0.013604    训练集准确率: 94.19%    测试集正确率: 97.57%当前epoch: 1 [0/60000 (0%)]    损失: 0.038379    训练集准确率: 100.00%    测试集正确率: 97.90%当前epoch: 1 [6400/60000 (11%)]    损失: 0.091921    训练集准确率: 97.94%    测试集正确率: 98.26%当前epoch: 1 [12800/60000 (21%)]    损失: 0.082685    训练集准确率: 97.88%    测试集正确率: 98.12%当前epoch: 1 [19200/60000 (32%)]    损失: 0.030613    训练集准确率: 97.95%    测试集正确率: 98.53%当前epoch: 1 [25600/60000 (43%)]    损失: 0.098491    训练集准确率: 97.96%    测试集正确率: 98.30%当前epoch: 1 [32000/60000 (53%)]    损失: 0.078065    训练集准确率: 97.97%    测试集正确率: 98.50%当前epoch: 1 [38400/60000 (64%)]    损失: 0.013370    训练集准确率: 98.02%    测试集正确率: 98.55%当前epoch: 1 [44800/60000 (75%)]    损失: 0.065581    训练集准确率: 98.09%    测试集正确率: 98.65%当前epoch: 1 [51200/60000 (85%)]    损失: 0.077535    训练集准确率: 98.12%    测试集正确率: 98.23%当前epoch: 1 [57600/60000 (96%)]    损失: 0.007826    训练集准确率: 98.16%    测试集正确率: 98.65%当前epoch: 2 [0/60000 (0%)]    损失: 0.170131    训练集准确率: 98.44%    测试集正确率: 98.57%当前epoch: 2 [6400/60000 (11%)]    损失: 0.046841    训练集准确率: 98.64%    测试集正确率: 98.40%当前epoch: 2 [12800/60000 (21%)]    损失: 0.095354    训练集准确率: 98.50%    测试集正确率: 98.58%当前epoch: 2 [19200/60000 (32%)]    损失: 0.009594    训练集准确率: 98.58%    测试集正确率: 98.68%当前epoch: 2 [25600/60000 (43%)]    损失: 0.017973    训练集准确率: 98.62%    测试集正确率: 98.82%当前epoch: 2 [32000/60000 (53%)]    损失: 0.045781    训练集准确率: 98.66%    测试集正确率: 98.63%当前epoch: 2 [38400/60000 (64%)]    损失: 0.056535    训练集准确率: 98.65%    测试集正确率: 98.94%当前epoch: 2 [44800/60000 (75%)]    损失: 0.014779    训练集准确率: 98.66%    测试集正确率: 98.97%当前epoch: 2 [51200/60000 (85%)]    损失: 0.010532    训练集准确率: 98.71%    测试集正确率: 98.50%当前epoch: 2 [57600/60000 (96%)]    损失: 0.076463    训练集准确率: 98.68%    测试集正确率: 98.79%</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pytorch神经网络分类</title>
    <link href="/2020/09/02/pytorch%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB/"/>
    <url>/2020/09/02/pytorch%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="Mnist分类任务："><a href="#Mnist分类任务：" class="headerlink" title="Mnist分类任务："></a>Mnist分类任务：</h3><ul><li><p>网络基本构建与训练方法，常用函数解析</p></li><li><p>torch.nn.functional模块</p></li><li><p>nn.Module模块</p></li></ul><h3 id="读取Mnist数据集"><a href="#读取Mnist数据集" class="headerlink" title="读取Mnist数据集"></a>读取Mnist数据集</h3><ul><li>会自动进行下载</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">DATA_PATH = Path(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">PATH = DATA_PATH / <span class="string">&quot;mnist&quot;</span></span><br><span class="line"></span><br><span class="line">PATH.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://deeplearning.net/data/mnist/&quot;</span></span><br><span class="line">FILENAME = <span class="string">&quot;mnist.pkl.gz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (PATH / FILENAME).exists():</span><br><span class="line">        content = requests.get(URL + FILENAME).content</span><br><span class="line">        (PATH / FILENAME).<span class="built_in">open</span>(<span class="string">&quot;wb&quot;</span>).write(content)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> gzip.<span class="built_in">open</span>((PATH / FILENAME).as_posix(), <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=<span class="string">&quot;latin-1&quot;</span>)</span><br></pre></td></tr></table></figure><p>784是mnist数据集每个样本的像素点个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pyplot.imshow(x_train[<span class="number">0</span>].reshape((<span class="number">28</span>, <span class="number">28</span>)), cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x_train.shape)</span><br></pre></td></tr></table></figure><pre><code>(50000, 784)</code></pre><p><img src="/images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/output_6_1.png" alt="png"></p><img src="/images/神经网络分类任务/4.png" alt="FAO" width="790"><img src="/images/神经网络分类任务/5.png" alt="FAO" width="790"><p>注意数据需转换成tensor才能参与后续建模训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x_train, y_train, x_valid, y_valid = <span class="built_in">map</span>(</span><br><span class="line">    torch.tensor, (x_train, y_train, x_valid, y_valid)</span><br><span class="line">)</span><br><span class="line">n, c = x_train.shape</span><br><span class="line">x_train, x_train.shape, y_train.<span class="built_in">min</span>(), y_train.<span class="built_in">max</span>()</span><br><span class="line"><span class="built_in">print</span>(x_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(x_train.shape)</span><br><span class="line"><span class="built_in">print</span>(y_train.<span class="built_in">min</span>(), y_train.<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure><pre><code>tensor([[0., 0., 0.,  ..., 0., 0., 0.],        [0., 0., 0.,  ..., 0., 0., 0.],        [0., 0., 0.,  ..., 0., 0., 0.],        ...,        [0., 0., 0.,  ..., 0., 0., 0.],        [0., 0., 0.,  ..., 0., 0., 0.],        [0., 0., 0.,  ..., 0., 0., 0.]]) tensor([5, 0, 4,  ..., 8, 4, 8])torch.Size([50000, 784])tensor(0) tensor(9)</code></pre><h3 id="torch-nn-functional-很多层和函数在这里都会见到"><a href="#torch-nn-functional-很多层和函数在这里都会见到" class="headerlink" title="torch.nn.functional 很多层和函数在这里都会见到"></a>torch.nn.functional 很多层和函数在这里都会见到</h3><p>torch.nn.functional中有很多功能，后续会常用的。那什么时候使用nn.Module，什么时候使用nn.functional呢？一般情况下，如果模型有可学习的参数，最好用nn.Module，其他情况nn.functional相对更简单一些</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line">loss_func = F.cross_entropy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span>(<span class="params">xb</span>):</span></span><br><span class="line">    <span class="keyword">return</span> xb.mm(weights) + bias</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bs = <span class="number">64</span></span><br><span class="line">xb = x_train[<span class="number">0</span>:bs]  <span class="comment"># a mini-batch from x</span></span><br><span class="line">yb = y_train[<span class="number">0</span>:bs]</span><br><span class="line">weights = torch.randn([<span class="number">784</span>, <span class="number">10</span>], dtype = torch.<span class="built_in">float</span>,  requires_grad = <span class="literal">True</span>) </span><br><span class="line">bs = <span class="number">64</span></span><br><span class="line">bias = torch.zeros(<span class="number">10</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(loss_func(model(xb), yb))</span><br></pre></td></tr></table></figure><pre><code>tensor(10.7988, grad_fn=&lt;NllLossBackward&gt;)</code></pre><h3 id="创建一个model来更简化代码"><a href="#创建一个model来更简化代码" class="headerlink" title="创建一个model来更简化代码"></a>创建一个model来更简化代码</h3><ul><li>必须继承nn.Module且在其构造函数中需调用nn.Module的构造函数</li><li>无需写反向传播函数，nn.Module能够利用autograd自动实现反向传播</li><li>Module中的可学习参数可以通过named_parameters()或者parameters()返回迭代器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist_NN</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.hidden1 = nn.Linear(<span class="number">784</span>, <span class="number">128</span>)</span><br><span class="line">        self.hidden2 = nn.Linear(<span class="number">128</span>, <span class="number">256</span>)</span><br><span class="line">        self.out  = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = F.relu(self.hidden1(x))</span><br><span class="line">        x = F.relu(self.hidden2(x))</span><br><span class="line">        x = self.out(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">        </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net = Mnist_NN()</span><br><span class="line"><span class="built_in">print</span>(net)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Mnist_NN(  (hidden1): Linear(in_features=784, out_features=128, bias=True)  (hidden2): Linear(in_features=128, out_features=256, bias=True)  (out): Linear(in_features=256, out_features=10, bias=True))</code></pre><p>可以打印我们定义好名字里的权重和偏置项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, parameter <span class="keyword">in</span> net.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(name, parameter,parameter.size())</span><br></pre></td></tr></table></figure><pre><code>hidden1.weight Parameter containing:tensor([[ 0.0018,  0.0218,  0.0036,  ..., -0.0286, -0.0166,  0.0089],        [-0.0349,  0.0268,  0.0328,  ...,  0.0263,  0.0200, -0.0137],        [ 0.0061,  0.0060, -0.0351,  ...,  0.0130, -0.0085,  0.0073],        ...,        [-0.0231,  0.0195, -0.0205,  ..., -0.0207, -0.0103, -0.0223],        [-0.0299,  0.0305,  0.0098,  ...,  0.0184, -0.0247, -0.0207],        [-0.0306, -0.0252, -0.0341,  ...,  0.0136, -0.0285,  0.0057]],       requires_grad=True) torch.Size([128, 784])hidden1.bias Parameter containing:tensor([ 0.0072, -0.0269, -0.0320, -0.0162,  0.0102,  0.0189, -0.0118, -0.0063,        -0.0277,  0.0349,  0.0267, -0.0035,  0.0127, -0.0152, -0.0070,  0.0228,        -0.0029,  0.0049,  0.0072,  0.0002, -0.0356,  0.0097, -0.0003, -0.0223,        -0.0028, -0.0120, -0.0060, -0.0063,  0.0237,  0.0142,  0.0044, -0.0005,         0.0349, -0.0132,  0.0138, -0.0295, -0.0299,  0.0074,  0.0231,  0.0292,        -0.0178,  0.0046,  0.0043, -0.0195,  0.0175, -0.0069,  0.0228,  0.0169,         0.0339,  0.0245, -0.0326, -0.0260, -0.0029,  0.0028,  0.0322, -0.0209,        -0.0287,  0.0195,  0.0188,  0.0261,  0.0148, -0.0195, -0.0094, -0.0294,        -0.0209, -0.0142,  0.0131,  0.0273,  0.0017,  0.0219,  0.0187,  0.0161,         0.0203,  0.0332,  0.0225,  0.0154,  0.0169, -0.0346, -0.0114,  0.0277,         0.0292, -0.0164,  0.0001, -0.0299, -0.0076, -0.0128, -0.0076, -0.0080,        -0.0209, -0.0194, -0.0143,  0.0292, -0.0316, -0.0188, -0.0052,  0.0013,        -0.0247,  0.0352, -0.0253, -0.0306,  0.0035, -0.0253,  0.0167, -0.0260,        -0.0179, -0.0342,  0.0033, -0.0287, -0.0272,  0.0238,  0.0323,  0.0108,         0.0097,  0.0219,  0.0111,  0.0208, -0.0279,  0.0324, -0.0325, -0.0166,        -0.0010, -0.0007,  0.0298,  0.0329,  0.0012, -0.0073, -0.0010,  0.0057],       requires_grad=True) torch.Size([128])hidden2.weight Parameter containing:tensor([[-0.0383, -0.0649,  0.0665,  ..., -0.0312,  0.0394, -0.0801],        [-0.0189, -0.0342,  0.0431,  ..., -0.0321,  0.0072,  0.0367],        [ 0.0289,  0.0780,  0.0496,  ...,  0.0018, -0.0604, -0.0156],        ...,        [-0.0360,  0.0394, -0.0615,  ...,  0.0233, -0.0536, -0.0266],        [ 0.0416,  0.0082, -0.0345,  ...,  0.0808, -0.0308, -0.0403],        [-0.0477,  0.0136, -0.0408,  ...,  0.0180, -0.0316, -0.0782]],       requires_grad=True) torch.Size([256, 128])hidden2.bias Parameter containing:tensor([-0.0694, -0.0363, -0.0178,  0.0206, -0.0875, -0.0876, -0.0369, -0.0386,         0.0642, -0.0738, -0.0017, -0.0243, -0.0054,  0.0757, -0.0254,  0.0050,         0.0519, -0.0695,  0.0318, -0.0042, -0.0189, -0.0263, -0.0627, -0.0691,         0.0713, -0.0696, -0.0672,  0.0297,  0.0102,  0.0040,  0.0830,  0.0214,         0.0714,  0.0327, -0.0582, -0.0354,  0.0621,  0.0475,  0.0490,  0.0331,        -0.0111, -0.0469, -0.0695, -0.0062, -0.0432, -0.0132, -0.0856, -0.0219,        -0.0185, -0.0517,  0.0017, -0.0788, -0.0403,  0.0039,  0.0544, -0.0496,         0.0588, -0.0068,  0.0496,  0.0588, -0.0100,  0.0731,  0.0071, -0.0155,        -0.0872, -0.0504,  0.0499,  0.0628, -0.0057,  0.0530, -0.0518, -0.0049,         0.0767,  0.0743,  0.0748, -0.0438,  0.0235, -0.0809,  0.0140, -0.0374,         0.0615, -0.0177,  0.0061, -0.0013, -0.0138, -0.0750, -0.0550,  0.0732,         0.0050,  0.0778,  0.0415,  0.0487,  0.0522,  0.0867, -0.0255, -0.0264,         0.0829,  0.0599,  0.0194,  0.0831, -0.0562,  0.0487, -0.0411,  0.0237,         0.0347, -0.0194, -0.0560, -0.0562, -0.0076,  0.0459, -0.0477,  0.0345,        -0.0575, -0.0005,  0.0174,  0.0855, -0.0257, -0.0279, -0.0348, -0.0114,        -0.0823, -0.0075, -0.0524,  0.0331,  0.0387, -0.0575,  0.0068, -0.0590,        -0.0101, -0.0880, -0.0375,  0.0033, -0.0172, -0.0641, -0.0797,  0.0407,         0.0741, -0.0041, -0.0608,  0.0672, -0.0464, -0.0716, -0.0191, -0.0645,         0.0397,  0.0013,  0.0063,  0.0370,  0.0475, -0.0535,  0.0721, -0.0431,         0.0053, -0.0568, -0.0228, -0.0260, -0.0784, -0.0148,  0.0229, -0.0095,        -0.0040,  0.0025,  0.0781,  0.0140, -0.0561,  0.0384, -0.0011, -0.0366,         0.0345,  0.0015,  0.0294, -0.0734, -0.0852, -0.0015, -0.0747, -0.0100,         0.0801, -0.0739,  0.0611,  0.0536,  0.0298, -0.0097,  0.0017, -0.0398,         0.0076, -0.0759, -0.0293,  0.0344, -0.0463, -0.0270,  0.0447,  0.0814,        -0.0193, -0.0559,  0.0160,  0.0216, -0.0346,  0.0316,  0.0881, -0.0652,        -0.0169,  0.0117, -0.0107, -0.0754, -0.0231, -0.0291,  0.0210,  0.0427,         0.0418,  0.0040,  0.0762,  0.0645, -0.0368, -0.0229, -0.0569, -0.0881,        -0.0660,  0.0297,  0.0433, -0.0777,  0.0212, -0.0601,  0.0795, -0.0511,        -0.0634,  0.0720,  0.0016,  0.0693, -0.0547, -0.0652, -0.0480,  0.0759,         0.0194, -0.0328, -0.0211, -0.0025, -0.0055, -0.0157,  0.0817,  0.0030,         0.0310, -0.0735,  0.0160, -0.0368,  0.0528, -0.0675, -0.0083, -0.0427,        -0.0872,  0.0699,  0.0795, -0.0738, -0.0639,  0.0350,  0.0114,  0.0303],       requires_grad=True) torch.Size([256])out.weight Parameter containing:tensor([[ 0.0232, -0.0571,  0.0439,  ..., -0.0417, -0.0237,  0.0183],        [ 0.0210,  0.0607,  0.0277,  ..., -0.0015,  0.0571,  0.0502],        [ 0.0297, -0.0393,  0.0616,  ...,  0.0131, -0.0163, -0.0239],        ...,        [ 0.0416,  0.0309, -0.0441,  ..., -0.0493,  0.0284, -0.0230],        [ 0.0404, -0.0564,  0.0442,  ..., -0.0271, -0.0526, -0.0554],        [-0.0404, -0.0049, -0.0256,  ..., -0.0262, -0.0130,  0.0057]],       requires_grad=True) torch.Size([10, 256])out.bias Parameter containing:tensor([-0.0536,  0.0007,  0.0227, -0.0072, -0.0168, -0.0125, -0.0207, -0.0558,         0.0579, -0.0439], requires_grad=True) torch.Size([10])</code></pre><h3 id="使用TensorDataset和DataLoader来简化"><a href="#使用TensorDataset和DataLoader来简化" class="headerlink" title="使用TensorDataset和DataLoader来简化"></a>使用TensorDataset和DataLoader来简化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> TensorDataset</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">train_ds = TensorDataset(x_train, y_train)</span><br><span class="line">train_dl = DataLoader(train_ds, batch_size=bs, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">valid_ds = TensorDataset(x_valid, y_valid)</span><br><span class="line">valid_dl = DataLoader(valid_ds, batch_size=bs * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">train_ds, valid_ds, bs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        DataLoader(train_ds, batch_size=bs, shuffle=<span class="literal">True</span>),</span><br><span class="line">        DataLoader(valid_ds, batch_size=bs * <span class="number">2</span>),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><ul><li>一般在训练模型时加上model.train()，这样会正常使用Batch Normalization和 Dropout</li><li>测试的时候一般选择model.eval()，这样就不会使用Batch Normalization和 Dropout</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">steps, model, loss_func, opt, train_dl, valid_dl</span>):</span></span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(steps):</span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">for</span> xb, yb <span class="keyword">in</span> train_dl:</span><br><span class="line">            loss_batch(model, loss_func, xb, yb, opt)</span><br><span class="line"></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            losses, nums = <span class="built_in">zip</span>(</span><br><span class="line">                *[loss_batch(model, loss_func, xb, yb) <span class="keyword">for</span> xb, yb <span class="keyword">in</span> valid_dl]</span><br><span class="line">            )</span><br><span class="line">        val_loss = np.<span class="built_in">sum</span>(np.multiply(losses, nums)) / np.<span class="built_in">sum</span>(nums)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前step:&#x27;</span>+<span class="built_in">str</span>(step), <span class="string">&#x27;验证集损失：&#x27;</span>+<span class="built_in">str</span>(val_loss))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model</span>():</span></span><br><span class="line">    model = Mnist_NN()</span><br><span class="line">    <span class="keyword">return</span> model, optim.SGD(model.parameters(), lr=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss_batch</span>(<span class="params">model, loss_func, xb, yb, opt=<span class="literal">None</span></span>):</span></span><br><span class="line">    loss = loss_func(model(xb), yb)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> opt <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        loss.backward()</span><br><span class="line">        opt.step()</span><br><span class="line">        opt.zero_grad()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss.item(), <span class="built_in">len</span>(xb)</span><br></pre></td></tr></table></figure><h3 id="三行搞定！"><a href="#三行搞定！" class="headerlink" title="三行搞定！"></a>三行搞定！</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_dl, valid_dl = get_data(train_ds, valid_ds, bs)</span><br><span class="line">model, opt = get_model()</span><br><span class="line">fit(<span class="number">25</span>, model, loss_func, opt, train_dl, valid_dl)</span><br></pre></td></tr></table></figure><pre><code>当前step:0 验证集损失：2.2796445930480957当前step:1 验证集损失：2.2440698066711424当前step:2 验证集损失：2.1889826164245605当前step:3 验证集损失：2.0985311767578123当前step:4 验证集损失：1.9517273582458496当前step:5 验证集损失：1.7341805934906005当前step:6 验证集损失：1.4719875366210937当前step:7 验证集损失：1.2273896869659424当前step:8 验证集损失：1.0362271406173706当前step:9 验证集损失：0.8963696184158325当前step:10 验证集损失：0.7927186088562012当前step:11 验证集损失：0.7141492074012756当前step:12 验证集损失：0.6529350900650024当前step:13 验证集损失：0.60417300491333当前step:14 验证集损失：0.5643046331882476当前step:15 验证集损失：0.5317994566917419当前step:16 验证集损失：0.5047958114624024当前step:17 验证集损失：0.4813900615692139当前step:18 验证集损失：0.4618900228500366当前step:19 验证集损失：0.4443243554592133当前step:20 验证集损失：0.4297310716629028当前step:21 验证集损失：0.416976597738266当前step:22 验证集损失：0.406348459148407当前step:23 验证集损失：0.3963301926612854当前step:24 验证集损失：0.38733808159828187</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pytorch神经网络气温预测</title>
    <link href="/2020/09/02/pytorch%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%B0%94%E6%B8%A9%E9%A2%84%E6%B5%8B/"/>
    <url>/2020/09/02/pytorch%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%B0%94%E6%B8%A9%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">features = pd.read_csv(<span class="string">&#x27;temps.csv&#x27;</span>)</span><br><span class="line">features.head()</span><br><span class="line"><span class="comment"># temp_2 前天最高气温</span></span><br><span class="line"><span class="comment"># temp_1 昨天最高气温</span></span><br><span class="line"><span class="comment"># 历史上这一天平均最高气温</span></span><br></pre></td></tr></table></figure><table border="1" style="overflow:scroll; width=500px">  <thead>    <tr style="text-align: right;">      <th></th>      <th>year</th>      <th>month</th>      <th>day</th>      <th>week</th>      <th>temp_2</th>      <th>temp_1</th>      <th>average</th>      <th>actual</th>      <th>friend</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2016</td>      <td>1</td>      <td>1</td>      <td>Fri</td>      <td>45</td>      <td>45</td>      <td>45.6</td>      <td>45</td>      <td>29</td>    </tr>    <tr>      <th>1</th>      <td>2016</td>      <td>1</td>      <td>2</td>      <td>Sat</td>      <td>44</td>      <td>45</td>      <td>45.7</td>      <td>44</td>      <td>61</td>    </tr>    <tr>      <th>2</th>      <td>2016</td>      <td>1</td>      <td>3</td>      <td>Sun</td>      <td>45</td>      <td>44</td>      <td>45.8</td>      <td>41</td>      <td>56</td>    </tr>    <tr>      <th>3</th>      <td>2016</td>      <td>1</td>      <td>4</td>      <td>Mon</td>      <td>44</td>      <td>41</td>      <td>45.9</td>      <td>40</td>      <td>53</td>    </tr>    <tr>      <th>4</th>      <td>2016</td>      <td>1</td>      <td>5</td>      <td>Tues</td>      <td>41</td>      <td>40</td>      <td>46.0</td>      <td>44</td>      <td>41</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(features.shape)</span><br></pre></td></tr></table></figure><pre><code>(348, 9)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理时间数据</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">years = features[<span class="string">&#x27;year&#x27;</span>]</span><br><span class="line">months = features[<span class="string">&#x27;month&#x27;</span>]</span><br><span class="line">days = features[<span class="string">&#x27;day&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 格式</span></span><br><span class="line">dates = [<span class="built_in">str</span>(<span class="built_in">int</span>(year)) + <span class="string">&quot;-&quot;</span> + <span class="built_in">str</span>((<span class="built_in">int</span>(month))) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(day)) <span class="keyword">for</span> year, month, day <span class="keyword">in</span> <span class="built_in">zip</span>(years, months, days)]</span><br><span class="line">dates = [datetime.datetime.strptime(date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">for</span> date <span class="keyword">in</span> dates]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dates[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>[datetime.datetime(2016, 1, 1, 0, 0), datetime.datetime(2016, 1, 2, 0, 0), datetime.datetime(2016, 1, 3, 0, 0), datetime.datetime(2016, 1, 4, 0, 0), datetime.datetime(2016, 1, 5, 0, 0)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备画图</span></span><br><span class="line">plt.style.use(<span class="string">&#x27;fivethirtyeight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置布局</span></span><br><span class="line">fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(nrows=<span class="number">2</span>,ncols=<span class="number">2</span>,figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">fig.autofmt_xdate(rotation = <span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签值</span></span><br><span class="line">ax1.plot(dates, features[<span class="string">&#x27;actual&#x27;</span>])</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;Temperature&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Max Temp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 昨天</span></span><br><span class="line">ax2.plot(dates, features[<span class="string">&#x27;temp_1&#x27;</span>])</span><br><span class="line">ax2.set_xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;Temperature&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;Previous Max Temp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前天</span></span><br><span class="line">ax3.plot(dates, features[<span class="string">&#x27;temp_2&#x27;</span>])</span><br><span class="line">ax3.set_xlabel(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">ax3.set_ylabel(<span class="string">&#x27;Temperature&#x27;</span>)</span><br><span class="line">ax3.set_title(<span class="string">&#x27;Two Days Prior Max Temp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的逗比朋友</span></span><br><span class="line">ax4.plot(dates, features[<span class="string">&#x27;friend&#x27;</span>])</span><br><span class="line">ax4.set_xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">ax4.set_ylabel(<span class="string">&#x27;Temperature&#x27;</span>)</span><br><span class="line">ax4.set_title(<span class="string">&#x27;Friend Estimate&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout(pad = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/pytorch%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%B0%94%E6%B8%A9%E9%A2%84%E6%B5%8B/output_5_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one-hot编码</span></span><br><span class="line">features = pd.get_dummies(features)</span><br><span class="line">features.head(<span class="number">5</span>) <span class="comment"># 自动判断</span></span><br></pre></td></tr></table></figure><div style="overflow-x: scroll;"><table border="1" >  <thead>    <tr style="text-align: right;">      <th></th>      <th width="100">year</th>      <th width="100">month</th>      <th width="100">day</th>      <th width="100">temp_2</th>      <th width="100">temp_1</th>      <th width="100">average</th>      <th width="100">actual</th>      <th width="100">friend</th>      <th width="100">week_Fri</th>      <th width="100">week_Mon</th>      <th width="100">week_Sat</th>      <th width="100">week_Sun</th>      <th width="100">week_Thurs</th>      <th width="100">week_Tues</th>      <th width="100">week_Wed</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2016</td>      <td>1</td>      <td>1</td>      <td>45</td>      <td>45</td>      <td>45.6</td>      <td>45</td>      <td>29</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>2016</td>      <td>1</td>      <td>2</td>      <td>44</td>      <td>45</td>      <td>45.7</td>      <td>44</td>      <td>61</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>2016</td>      <td>1</td>      <td>3</td>      <td>45</td>      <td>44</td>      <td>45.8</td>      <td>41</td>      <td>56</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>2016</td>      <td>1</td>      <td>4</td>      <td>44</td>      <td>41</td>      <td>45.9</td>      <td>40</td>      <td>53</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>2016</td>      <td>1</td>      <td>5</td>      <td>41</td>      <td>40</td>      <td>46.0</td>      <td>44</td>      <td>41</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标签</span></span><br><span class="line">labels = np.array(features[<span class="string">&#x27;actual&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉标签</span></span><br><span class="line">features = features.drop(<span class="string">&#x27;actual&#x27;</span>, axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">feature_list = <span class="built_in">list</span>(features.columns)</span><br><span class="line"></span><br><span class="line">features = np.array(features)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(features.shape)</span><br></pre></td></tr></table></figure><pre><code>(348, 14)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line">input_features = preprocessing.StandardScaler().fit_transform(features)</span><br><span class="line">input_features[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>array([ 0.        , -1.5678393 , -1.65682171, -1.48452388, -1.49443549,       -1.3470703 , -1.98891668,  2.44131112, -0.40482045, -0.40961596,       -0.40482045, -0.40482045, -0.41913682, -0.40482045])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建网络模型-麻烦方法</span></span><br><span class="line">x = torch.tensor(input_features, dtype=<span class="built_in">float</span>)</span><br><span class="line">y = torch.tensor(labels, dtype = <span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权重参数初始化</span></span><br><span class="line">weights = torch.randn((<span class="number">14</span>,<span class="number">128</span>), dtype=<span class="built_in">float</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">biases = torch.randn(<span class="number">128</span>, dtype=<span class="built_in">float</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">weights2 = torch.randn((<span class="number">128</span>,<span class="number">1</span>), dtype=<span class="built_in">float</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">biases2 = torch.randn(<span class="number">1</span>, dtype=<span class="built_in">float</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br><span class="line">losses = []</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># 计算隐藏层</span></span><br><span class="line">    hidden = x.mm(weights) + biases</span><br><span class="line">    hidden = torch.relu(hidden)</span><br><span class="line">    predictions = hidden.mm(weights2) + biases2</span><br><span class="line">    loss = torch.mean((predictions - y)**<span class="number">2</span>)</span><br><span class="line">    losses.append(loss.data.numpy())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印损失</span></span><br><span class="line">    <span class="keyword">if</span> i %<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;loss: &#x27;</span>, loss)</span><br><span class="line">    loss.backward() <span class="comment"># 反向传播</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    weights.data.add_(- learning_rate * weights.grad.data)</span><br><span class="line">    biases.data.add_(- learning_rate * biases.grad.data)</span><br><span class="line">    weights2.data.add_(- learning_rate * weights2.grad.data)</span><br><span class="line">    biases.data.add_(- learning_rate * biases2.grad.data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 梯度清空</span></span><br><span class="line">    weights.grad.data.zero_()</span><br><span class="line">    biases.grad.data.zero_()</span><br><span class="line">    weights2.grad.data.zero_()</span><br><span class="line">    biases2.grad.data.zero_()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>loss:  tensor(2628.1660, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(155.1873, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(146.8026, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(144.0431, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(142.7121, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(141.9236, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(141.3944, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(141.0007, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(140.7019, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss:  tensor(140.4667, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更简单的网络模型</span></span><br><span class="line">input_size = input_features.shape[<span class="number">1</span>]</span><br><span class="line">hidden_size = <span class="number">128</span></span><br><span class="line">output_size = <span class="number">1</span></span><br><span class="line">batch_size = <span class="number">16</span></span><br><span class="line">my_nn = torch.nn.Sequential(</span><br><span class="line">    torch.nn.Linear(input_size, hidden_size),</span><br><span class="line">    torch.nn.Sigmoid(),</span><br><span class="line">    torch.nn.Linear(hidden_size, output_size),</span><br><span class="line">)</span><br><span class="line">cost = torch.nn.MSELoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">optimizer = torch.optim.Adam(my_nn.parameters(), lr=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">losses = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    batch_loss = []</span><br><span class="line">    <span class="keyword">for</span> start <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(input_features), batch_size):</span><br><span class="line">        end = start + batch_size <span class="keyword">if</span> start + batch_size &lt; <span class="built_in">len</span>(input_features) <span class="keyword">else</span> <span class="built_in">len</span>(input_features)</span><br><span class="line">        xx = torch.tensor(input_features[start:end], dtype=torch.<span class="built_in">float</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">        yy = torch.tensor(labels[start:end], dtype=torch.<span class="built_in">float</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">        prediction = my_nn(xx)</span><br><span class="line">        loss = cost(prediction, yy)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward(retain_graph=<span class="literal">True</span>)</span><br><span class="line">        optimizer.step()</span><br><span class="line">        batch_loss.append(loss.data.numpy())</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        losses.append(np.mean(batch_loss))</span><br><span class="line">        <span class="built_in">print</span>(i, np.mean(batch_loss))</span><br></pre></td></tr></table></figure><pre><code>0 3880.0461100 38.13609200 35.70337300 35.309303400 35.13356500 34.999176600 34.880596700 34.76389800 34.643845900 34.51949</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预测</span></span><br><span class="line">x = torch.tensor(input_features, dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">predict = my_nn(x).data.numpy()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换日期格式</span></span><br><span class="line">dates = [<span class="built_in">str</span>(<span class="built_in">int</span>(year)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(month)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(day)) <span class="keyword">for</span> year, month, day <span class="keyword">in</span> <span class="built_in">zip</span>(years, months, days)]</span><br><span class="line">dates = [datetime.datetime.strptime(date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">for</span> date <span class="keyword">in</span> dates]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个表格来存日期和其对应的标签数值</span></span><br><span class="line">true_data = pd.DataFrame(data = &#123;<span class="string">&#x27;date&#x27;</span>: dates, <span class="string">&#x27;actual&#x27;</span>: labels&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同理，再创建一个来存日期和其对应的模型预测值</span></span><br><span class="line">months = features[:, feature_list.index(<span class="string">&#x27;month&#x27;</span>)]</span><br><span class="line">days = features[:, feature_list.index(<span class="string">&#x27;day&#x27;</span>)]</span><br><span class="line">years = features[:, feature_list.index(<span class="string">&#x27;year&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">test_dates = [<span class="built_in">str</span>(<span class="built_in">int</span>(year)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(month)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(day)) <span class="keyword">for</span> year, month, day <span class="keyword">in</span> <span class="built_in">zip</span>(years, months, days)]</span><br><span class="line"></span><br><span class="line">test_dates = [datetime.datetime.strptime(date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">for</span> date <span class="keyword">in</span> test_dates]</span><br><span class="line"></span><br><span class="line">predictions_data = pd.DataFrame(data = &#123;<span class="string">&#x27;date&#x27;</span>: test_dates, <span class="string">&#x27;prediction&#x27;</span>: predict.reshape(-<span class="number">1</span>)&#125;) </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 真实值</span></span><br><span class="line">plt.plot(true_data[<span class="string">&#x27;date&#x27;</span>], true_data[<span class="string">&#x27;actual&#x27;</span>], <span class="string">&#x27;b-&#x27;</span>, label = <span class="string">&#x27;actual&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测值</span></span><br><span class="line">plt.plot(predictions_data[<span class="string">&#x27;date&#x27;</span>], predictions_data[<span class="string">&#x27;prediction&#x27;</span>], <span class="string">&#x27;ro&#x27;</span>, label = <span class="string">&#x27;prediction&#x27;</span>)</span><br><span class="line">plt.xticks(rotation = <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图名</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Date&#x27;</span>); plt.ylabel(<span class="string">&#x27;Maximum Temperature (F)&#x27;</span>); plt.title(<span class="string">&#x27;Actual and Predicted Values&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/pytorch%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%B0%94%E6%B8%A9%E9%A2%84%E6%B5%8B/output_14_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hub模块</title>
    <link href="/2020/09/01/Hub%E6%A8%A1%E5%9D%97/"/>
    <url>/2020/09/01/Hub%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="加载别人的模型与参数"><a href="#加载别人的模型与参数" class="headerlink" title="加载别人的模型与参数"></a>加载别人的模型与参数</h1><p>模型 <a href="https://pytorch.org/hub/">https://pytorch.org/hub/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tensor常见的形式</title>
    <link href="/2020/09/01/tensor%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BD%A2%E5%BC%8F/"/>
    <url>/2020/09/01/tensor%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BD%A2%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tensor常见形式</span></span><br><span class="line"><span class="comment"># 0:scalar</span></span><br><span class="line"><span class="comment"># 1:vector</span></span><br><span class="line"><span class="comment"># 2:matrix</span></span><br><span class="line"><span class="comment"># 3:n-dimensional tensor</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> tensor</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scalar</span></span><br><span class="line">x = tensor(<span class="number">42.</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>tensor(42.)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.dim()</span><br></pre></td></tr></table></figure><pre><code>0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.item()</span><br></pre></td></tr></table></figure><pre><code>42.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vector 向量</span></span><br><span class="line">v = tensor([<span class="number">1.5</span>, -<span class="number">0.5</span>, <span class="number">3.0</span>])</span><br><span class="line">v</span><br></pre></td></tr></table></figure><pre><code>tensor([ 1.5000, -0.5000,  3.0000])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.dim()</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.size()</span><br></pre></td></tr></table></figure><pre><code>torch.Size([3])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Matrix</span></span><br><span class="line">M = tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">M</span><br></pre></td></tr></table></figure><pre><code>tensor([[1, 2],        [3, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M.matmul(M)</span><br></pre></td></tr></table></figure><pre><code>tensor([[ 7, 10],        [15, 22]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([<span class="number">1</span>,<span class="number">0</span>]).matmul(M)</span><br></pre></td></tr></table></figure><pre><code>tensor([1, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M * M</span><br></pre></td></tr></table></figure><pre><code>tensor([[ 1,  4],        [ 9, 16]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([<span class="number">1</span>,<span class="number">2</span>]).matmul(M)</span><br></pre></td></tr></table></figure><pre><code>tensor([ 7, 10])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>autograd机制</title>
    <link href="/2020/09/01/autograd%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/09/01/autograd%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求导方法1</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>,<span class="number">4</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>tensor([[ 2.2854,  0.9512, -2.4467, -0.7123],        [-0.7575,  1.1755,  0.4198, -0.2310],        [-0.9698,  1.2129,  1.3573, -0.6167]], requires_grad=True)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">x.requires_grad = <span class="literal">True</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>tensor([[-0.5929,  0.5802, -0.1118, -2.5752],        [-0.1841, -0.5498, -0.0166, -1.0571],        [-0.3336,  0.5076, -0.1564, -0.3230]], requires_grad=True)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = torch.randn(<span class="number">3</span>,<span class="number">4</span>, requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = x+b</span><br><span class="line">y = t.<span class="built_in">sum</span>()</span><br><span class="line">y</span><br></pre></td></tr></table></figure><pre><code>tensor(-0.6402, grad_fn=&lt;SumBackward0&gt;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y.backward() <span class="comment"># 自动反向传播</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.grad</span><br></pre></td></tr></table></figure><pre><code>tensor([[1., 1., 1., 1.],        [1., 1., 1., 1.],        [1., 1., 1., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.requires_grad</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 小例子</span></span><br><span class="line"><span class="comment"># z = b + y </span></span><br><span class="line"><span class="comment"># y = WX</span></span><br><span class="line">x = torch.rand(<span class="number">1</span>)</span><br><span class="line">b = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = w*b</span><br><span class="line">z = y+b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向传播</span></span><br><span class="line">z.backward(retain_graph=<span class="literal">True</span>)</span><br><span class="line">w.grad  <span class="comment"># w的梯度</span></span><br></pre></td></tr></table></figure><pre><code>tensor([0.4825])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.grad  <span class="comment"># 若对梯度不清零，梯度会默认累加，要清零</span></span><br></pre></td></tr></table></figure><pre><code>tensor([1.1871])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性回归</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x_values = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">x_train = np.array(x_values, dtype=np.float32)</span><br><span class="line">x_train = x_train.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">x_train.shape</span><br></pre></td></tr></table></figure><pre><code>(11, 1)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y_values = [<span class="number">2</span>*i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_values]</span><br><span class="line">y_train = np.array(y_values, dtype=np.float32)</span><br><span class="line">y_train = y_train.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">y_train.shape</span><br></pre></td></tr></table></figure><pre><code>(11, 1)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性回归模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearRegressionMode</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_dim, output_dim</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(LinearRegressionMode, self).__init__()</span><br><span class="line">        self.linear = nn.Linear(input_dim, output_dim)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.linear(x)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input_dim = <span class="number">1</span></span><br><span class="line">output_dim = <span class="number">1</span></span><br><span class="line">model = LinearRegressionMode(input_dim, output_dim)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用GPU训练</span></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">model.to(device)</span><br><span class="line"><span class="comment"># 模型与输入</span></span><br><span class="line">model</span><br></pre></td></tr></table></figure><pre><code>LinearRegressionMode(  (linear): Linear(in_features=1, out_features=1, bias=True))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定参数与损失函数</span></span><br><span class="line">epochs = <span class="number">1000</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)</span><br><span class="line">criterion = nn.MSELoss() <span class="comment"># 损失函数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    epoch += <span class="number">1</span></span><br><span class="line">    inputs = torch.from_numpy(x_train)</span><br><span class="line">    labels = torch.from_numpy(y_train)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用GPU</span></span><br><span class="line">    <span class="comment"># inputs = torch.from_numpy(x_train).to(device)</span></span><br><span class="line">    <span class="comment"># labels = torch.from_numpy(y_train).to(device)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 梯度清零</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    outputs = model(inputs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = criterion(outputs, labels)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新权重参数</span></span><br><span class="line">    optimizer.step()</span><br><span class="line">    <span class="keyword">if</span> epoch%<span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;epoch &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch, loss.item()))</span><br></pre></td></tr></table></figure><pre><code>epoch 50, loss 0.061197102069854736epoch 100, loss 0.03490455821156502epoch 150, loss 0.019908230751752853epoch 200, loss 0.011354891583323479epoch 250, loss 0.0064764260314404964epoch 300, loss 0.0036938709672540426epoch 350, loss 0.0021068572532385588epoch 400, loss 0.00120164779946208epoch 450, loss 0.0006853902596049011epoch 500, loss 0.0003909121442120522epoch 550, loss 0.00022296742827165872epoch 600, loss 0.0001271772343898192epoch 650, loss 7.253594958456233e-05epoch 700, loss 4.137093128520064e-05epoch 750, loss 2.359419704589527e-05epoch 800, loss 1.3457529348670505e-05epoch 850, loss 7.676342647755519e-06epoch 900, loss 4.378400262794457e-06epoch 950, loss 2.49663571594283e-06epoch 1000, loss 1.424497213520226e-06</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型测试</span></span><br><span class="line">predicted = model(torch.from_numpy(x_train).requires_grad_()).data.numpy()</span><br><span class="line">predicted</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.99778  ],       [ 2.9980998],       [ 4.9984193],       [ 6.9987392],       [ 8.999059 ],       [10.999378 ],       [12.999699 ],       [15.000018 ],       [17.000338 ],       [19.000658 ],       [21.000977 ]], dtype=float32)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">torch.save(model.state_dict(),<span class="string">&#x27;model.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;model.pkl&#x27;</span>))</span><br></pre></td></tr></table></figure><pre><code>&lt;All keys matched successfully&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pytorch基本操作</title>
    <link href="/2020/09/01/pytorch%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/09/01/pytorch%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.__version__</span><br></pre></td></tr></table></figure><pre><code>&#39;1.5.1&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空向量</span></span><br><span class="line">x = torch.empty(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0.0000e+00,  0.0000e+00,  0.0000e+00],        [ 0.0000e+00,  0.0000e+00,  1.1614e-41],        [ 0.0000e+00,  2.2369e+08,  0.0000e+00],        [ 0.0000e+00,  2.8699e-42,  2.8699e-42],        [        nan,         nan, -1.6905e-07]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机值</span></span><br><span class="line">x = torch.rand(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>tensor([[0.0896, 0.1420, 0.0921],        [0.5026, 0.8910, 0.7219],        [0.4368, 0.9443, 0.7994],        [0.8293, 0.0944, 0.5980],        [0.4768, 0.9790, 0.5101]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全零</span></span><br><span class="line">x = torch.zeros(<span class="number">5</span>,<span class="number">3</span>, dtype=torch.long)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>tensor([[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.size()</span><br></pre></td></tr></table></figure><pre><code>torch.Size([5, 3])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = torch.rand(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">x + y</span><br></pre></td></tr></table></figure><pre><code>tensor([[0.2258, 0.2405, 0.4114],        [0.2318, 0.3827, 0.7611],        [0.1114, 0.5431, 0.2139],        [0.3742, 0.6116, 0.5016],        [0.5376, 0.2027, 0.1309]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引</span></span><br><span class="line">x[:,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>tensor([0, 0, 0, 0, 0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">y = x.view(<span class="number">16</span>) <span class="comment"># 16维</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><pre><code>tensor([-1.2441,  0.8297,  1.1797, -0.5350,  1.1497, -0.0510,  0.1188,  0.6360,        -1.9398, -0.7194, -0.3698, -1.3789, -1.4802, -1.0151, -1.5127, -0.9896])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z = x.view(-<span class="number">1</span>, <span class="number">8</span>) <span class="comment"># -1自动做计算</span></span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span>(z.size())</span><br></pre></td></tr></table></figure><pre><code>tensor([[-1.2441,  0.8297,  1.1797, -0.5350,  1.1497, -0.0510,  0.1188,  0.6360],        [-1.9398, -0.7194, -0.3698, -1.3789, -1.4802, -1.0151, -1.5127, -0.9896]])torch.Size([2, 8])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与numpy协同操作</span></span><br><span class="line">a = torch.ones(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>tensor([1., 1., 1., 1., 1.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = a.numpy()</span><br><span class="line">b</span><br></pre></td></tr></table></figure><pre><code>array([1., 1., 1., 1., 1.], dtype=float32)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line">b</span><br></pre></td></tr></table></figure><pre><code>tensor([1., 1., 1., 1., 1.], dtype=torch.float64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fbprophet-比特币预测</title>
    <link href="/2020/08/20/fbprophet-%E6%AF%94%E7%89%B9%E5%B8%81%E9%A2%84%E6%B5%8B/"/>
    <url>/2020/08/20/fbprophet-%E6%AF%94%E7%89%B9%E5%B8%81%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> fbprophet <span class="keyword">import</span> Prophet</span><br><span class="line"></span><br><span class="line">plt.style.use(<span class="string">&#x27;ggplot&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.  import pandas.util.testing as tm</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">df_original = pd.read_csv(<span class="string">&#x27;./data/bitcoin.csv&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(df_original.head())</span><br><span class="line">df_original.rename(columns=&#123;</span><br><span class="line">    <span class="string">&quot;收盘&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="string">&quot;日期&quot;</span>: <span class="string">&#x27;date&#x27;</span></span><br><span class="line">&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df_index = [re.sub(<span class="string">&quot;[日]&quot;</span>, <span class="string">&quot;&quot;</span>, re.sub(<span class="string">&quot;[年月]&quot;</span>, <span class="string">&quot;-&quot;</span>, i)) <span class="keyword">for</span> i <span class="keyword">in</span> df_original.index]</span><br><span class="line">df_close = [<span class="built_in">float</span>(re.sub(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>, i)) <span class="keyword">for</span> i <span class="keyword">in</span> df_original[<span class="string">&#x27;close&#x27;</span>]]</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;date&#x27;</span>: df_index, <span class="string">&#x27;close&#x27;</span>: df_close&#125;).set_index(<span class="string">&#x27;date&#x27;</span>)</span><br><span class="line">df = df.sort_index(axis=<span class="number">0</span>, ascending=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df.tail())</span><br></pre></td></tr></table></figure><pre><code>                  收盘        开盘         高         低      交易量     涨跌幅日期                                                                 2020年8月20日  11,769.4  11,751.0  11,822.2  11,672.7  463.59K   0.16%2020年8月19日  11,750.2  11,944.4  12,013.2  11,602.6  550.26K  -1.65%2020年8月18日  11,947.6  12,283.0  12,381.4  11,842.0  606.79K  -2.73%2020年8月17日  12,282.6  11,898.8  12,444.1  11,764.0  628.41K   3.22%2020年8月16日  11,899.0  11,845.5  11,922.5  11,688.9  410.81K   0.45%            closedate             2020-8-5  11735.12020-8-6  11757.12020-8-7  11592.02020-8-8  11764.32020-8-9  11681.2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.plot(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/matplotlib/font_manager.py:1328: UserWarning: findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans  (prop.get_family(), self.defaultFamily[fontext]))</code></pre><p><img src="/images/fbprophet-btc/output_2_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;ds&#x27;</span>] = df.index</span><br><span class="line">df[<span class="string">&#x27;y&#x27;</span>] = df[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line"></span><br><span class="line">m = Prophet()</span><br><span class="line">m.fit(df)  <span class="comment"># 去训练</span></span><br><span class="line">future = m.make_future_dataframe(freq=<span class="string">&#x27;D&#x27;</span>, periods=<span class="number">7</span>)  <span class="comment"># 再现有数据的基础上外推7天</span></span><br><span class="line"><span class="built_in">print</span>(future.tail())</span><br></pre></td></tr></table></figure><pre><code>INFO:fbprophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.             ds3066 2020-08-233067 2020-08-243068 2020-08-253069 2020-08-263070 2020-08-27</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forecast = m.predict(future)</span><br><span class="line"><span class="built_in">print</span>(forecast[[<span class="string">&#x27;ds&#x27;</span>, <span class="string">&#x27;yhat&#x27;</span>, <span class="string">&#x27;yhat_lower&#x27;</span>, <span class="string">&#x27;yhat_upper&#x27;</span>]].tail())</span><br></pre></td></tr></table></figure><pre><code>             ds          yhat   yhat_lower    yhat_upper3066 2020-08-23  10811.656882  9364.713434  12508.9431923067 2020-08-24  10823.539358  9182.644030  12364.0489823068 2020-08-25  10809.708244  9246.669308  12347.5741303069 2020-08-26  10808.611203  9219.850904  12331.3275373070 2020-08-27  10791.636069  9264.811965  12232.313781</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.plot(forecast).show()  <span class="comment"># 绘制预测效果图</span></span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/matplotlib/cbook/__init__.py:2062: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  x[:, None]//anaconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py:250: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  y = y[:, np.newaxis]//anaconda3/lib/python3.7/site-packages/matplotlib/font_manager.py:1328: UserWarning: findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans  (prop.get_family(), self.defaultFamily[fontext]))//anaconda3/lib/python3.7/site-packages/matplotlib/figure.py:459: UserWarning: matplotlib is currently using a non-GUI backend, so cannot show the figure  &quot;matplotlib is currently using a non-GUI backend, &quot;</code></pre><p><img src="/images/fbprophet-btc/output_5_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.plot_components(forecast).show()  <span class="comment"># 画出分解图</span></span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/matplotlib/cbook/__init__.py:2062: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  x[:, None]//anaconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py:250: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  y = y[:, np.newaxis]//anaconda3/lib/python3.7/site-packages/matplotlib/cbook/__init__.py:2062: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  x[:, None]//anaconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py:250: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  y = y[:, np.newaxis]//anaconda3/lib/python3.7/site-packages/matplotlib/font_manager.py:1328: UserWarning: findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans  (prop.get_family(), self.defaultFamily[fontext]))//anaconda3/lib/python3.7/site-packages/matplotlib/figure.py:459: UserWarning: matplotlib is currently using a non-GUI backend, so cannot show the figure  &quot;matplotlib is currently using a non-GUI backend, &quot;</code></pre><p><img src="/images/fbprophet-btc/output_6_1.png" alt="png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARIMA时间序列预测-5维基百科EDA</title>
    <link href="/2020/08/20/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91EDA/"/>
    <url>/2020/08/20/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91EDA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">&#x27;./data/train_1.csv&#x27;</span>).fillna(<span class="number">0</span>)</span><br><span class="line">train.head()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 145063 entries, 0 to 145062Columns: 551 entries, Page to 2016-12-31dtypes: float64(550), object(1)memory usage: 609.8+ MB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> train.columns[<span class="number">1</span>:]:</span><br><span class="line">    train[col] = pd.to_numeric(train[col],downcast=<span class="string">&#x27;integer&#x27;</span>)</span><br><span class="line">train.head()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 145063 entries, 0 to 145062Columns: 551 entries, Page to 2016-12-31dtypes: int32(550), object(1)memory usage: 305.5+ MB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_language</span>(<span class="params">page</span>):</span></span><br><span class="line">    res = re.search(<span class="string">&#x27;[a-z][a-z].wikipedia.org&#x27;</span>,page)</span><br><span class="line">    <span class="comment">#print (res.group()[0:2])</span></span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        <span class="keyword">return</span> res.group()[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;na&#x27;</span></span><br><span class="line"></span><br><span class="line">train[<span class="string">&#x27;lang&#x27;</span>] = train.Page.<span class="built_in">map</span>(get_language)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Counter(train.lang))</span><br></pre></td></tr></table></figure><pre><code>Counter(&#123;&#39;en&#39;: 24108, &#39;ja&#39;: 20431, &#39;de&#39;: 18547, &#39;na&#39;: 17855, &#39;fr&#39;: 17802, &#39;zh&#39;: 17229, &#39;ru&#39;: 15022, &#39;es&#39;: 14069&#125;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lang_sets = &#123;&#125;</span><br><span class="line">lang_sets[<span class="string">&#x27;en&#x27;</span>] = train[train.lang==<span class="string">&#x27;en&#x27;</span>].iloc[:,<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">lang_sets[<span class="string">&#x27;ja&#x27;</span>] = train[train.lang==<span class="string">&#x27;ja&#x27;</span>].iloc[:,<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">lang_sets[<span class="string">&#x27;de&#x27;</span>] = train[train.lang==<span class="string">&#x27;de&#x27;</span>].iloc[:,<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">lang_sets[<span class="string">&#x27;na&#x27;</span>] = train[train.lang==<span class="string">&#x27;na&#x27;</span>].iloc[:,<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">lang_sets[<span class="string">&#x27;fr&#x27;</span>] = train[train.lang==<span class="string">&#x27;fr&#x27;</span>].iloc[:,<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">lang_sets[<span class="string">&#x27;zh&#x27;</span>] = train[train.lang==<span class="string">&#x27;zh&#x27;</span>].iloc[:,<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">lang_sets[<span class="string">&#x27;ru&#x27;</span>] = train[train.lang==<span class="string">&#x27;ru&#x27;</span>].iloc[:,<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">lang_sets[<span class="string">&#x27;es&#x27;</span>] = train[train.lang==<span class="string">&#x27;es&#x27;</span>].iloc[:,<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">sums = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> lang_sets:</span><br><span class="line">    sums[key] = lang_sets[key].iloc[:,<span class="number">1</span>:].<span class="built_in">sum</span>(axis=<span class="number">0</span>) / lang_sets[key].shape[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">days = [r <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(sums[<span class="string">&#x27;en&#x27;</span>].shape[<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line">fig = plt.figure(<span class="number">1</span>,figsize=[<span class="number">10</span>,<span class="number">10</span>])</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Views per Page&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Day&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Pages in Different Languages&#x27;</span>)</span><br><span class="line">labels=&#123;<span class="string">&#x27;en&#x27;</span>:<span class="string">&#x27;English&#x27;</span>,<span class="string">&#x27;ja&#x27;</span>:<span class="string">&#x27;Japanese&#x27;</span>,<span class="string">&#x27;de&#x27;</span>:<span class="string">&#x27;German&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;na&#x27;</span>:<span class="string">&#x27;Media&#x27;</span>,<span class="string">&#x27;fr&#x27;</span>:<span class="string">&#x27;French&#x27;</span>,<span class="string">&#x27;zh&#x27;</span>:<span class="string">&#x27;Chinese&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ru&#x27;</span>:<span class="string">&#x27;Russian&#x27;</span>,<span class="string">&#x27;es&#x27;</span>:<span class="string">&#x27;Spanish&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> sums:</span><br><span class="line">    plt.plot(days,sums[key],label = labels[key] )</span><br><span class="line">    </span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/matplotlib/cbook/__init__.py:2062: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  x[:, None]//anaconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py:250: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  y = y[:, np.newaxis]</code></pre><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_7_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_entry</span>(<span class="params">key,idx</span>):</span></span><br><span class="line">    data = lang_sets[key].iloc[idx,<span class="number">1</span>:]</span><br><span class="line">    fig = plt.figure(<span class="number">1</span>,figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">    plt.plot(days,data)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;day&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;views&#x27;</span>)</span><br><span class="line">    plt.title(train.iloc[lang_sets[key].index[idx],<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">idx = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">250</span>,<span class="number">500</span>, <span class="number">750</span>,<span class="number">1000</span>,<span class="number">1500</span>,<span class="number">2000</span>,<span class="number">3000</span>,<span class="number">4000</span>,<span class="number">5000</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">    plot_entry(<span class="string">&#x27;en&#x27;</span>,i)</span><br></pre></td></tr></table></figure><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_0.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_1.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_2.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_3.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_4.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_5.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_6.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_7.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_8.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_9.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_10.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_11.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_12.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_9_13.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npages = <span class="number">5</span></span><br><span class="line">top_pages = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> lang_sets:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    sum_set = pd.DataFrame(lang_sets[key][[<span class="string">&#x27;Page&#x27;</span>]])</span><br><span class="line">    sum_set[<span class="string">&#x27;total&#x27;</span>] = lang_sets[key].<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">    sum_set = sum_set.sort_values(<span class="string">&#x27;total&#x27;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(sum_set.head(<span class="number">10</span>))</span><br><span class="line">    top_pages[key] = sum_set.index[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n\n&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>en                                                    Page        total38573   Main_Page_en.wikipedia.org_all-access_all-agents  120661811029774       Main_Page_en.wikipedia.org_desktop_all-agents   877449745874114   Main_Page_en.wikipedia.org_mobile-web_all-agents   315398488239180  Special:Search_en.wikipedia.org_all-access_all...   130407935310403  Special:Search_en.wikipedia.org_desktop_all-ag...   101184774874690  Special:Search_en.wikipedia.org_mobile-web_all...    29216283939172  Special:Book_en.wikipedia.org_all-access_all-a...    13399314410399   Special:Book_en.wikipedia.org_desktop_all-agents    13328590833644       Main_Page_en.wikipedia.org_all-access_spider    12902040734257  Special:Search_en.wikipedia.org_all-access_spider    124310206</code></pre><p>​<br>​    </p><pre><code>ja                                                     Page      total120336      メインページ_ja.wikipedia.org_all-access_all-agents  21075379586431          メインページ_ja.wikipedia.org_desktop_all-agents  134147415123025       特別:検索_ja.wikipedia.org_all-access_all-agents   7031692989202           特別:検索_ja.wikipedia.org_desktop_all-agents   6921520657309       メインページ_ja.wikipedia.org_mobile-web_all-agents   66459122119609    特別:最近の更新_ja.wikipedia.org_all-access_all-agents   1766279188897        特別:最近の更新_ja.wikipedia.org_desktop_all-agents   17627621119625        真田信繁_ja.wikipedia.org_all-access_all-agents   10793039123292  特別:外部リンク検索_ja.wikipedia.org_all-access_all-agents   1033119189463      特別:外部リンク検索_ja.wikipedia.org_desktop_all-agents   10327917</code></pre><p>​<br>​    </p><pre><code>de                                                     Page       total139119  Wikipedia:Hauptseite_de.wikipedia.org_all-acce...  1603934248116196  Wikipedia:Hauptseite_de.wikipedia.org_mobile-w...  111268908467049   Wikipedia:Hauptseite_de.wikipedia.org_desktop_...   426992426140151  Spezial:Suche_de.wikipedia.org_all-access_all-...   22342594466736   Spezial:Suche_de.wikipedia.org_desktop_all-agents   219636761140147  Spezial:Anmelden_de.wikipedia.org_all-access_a...    40291806138800  Special:Search_de.wikipedia.org_all-access_all...    3988154368104   Spezial:Anmelden_de.wikipedia.org_desktop_all-...    3535522668511   Special:MyPage/toolserverhelferleinconfig.js_d...    32584955137765  Hauptseite_de.wikipedia.org_all-access_all-agents    31732458</code></pre><p>​<br>​    </p><pre><code>na                                                    Page     total45071  Special:Search_commons.wikimedia.org_all-acces...  6715063881665  Special:Search_commons.wikimedia.org_desktop_a...  6334975645056  Special:CreateAccount_commons.wikimedia.org_al...  5379538645028  Main_Page_commons.wikimedia.org_all-access_all...  5273229281644  Special:CreateAccount_commons.wikimedia.org_de...  4806102981610  Main_Page_commons.wikimedia.org_desktop_all-ag...  3916092346078  Special:RecentChangesLinked_commons.wikimedia....  2830633645078  Special:UploadWizard_commons.wikimedia.org_all...  2373380581671  Special:UploadWizard_commons.wikimedia.org_des...  2200854482680  Special:RecentChangesLinked_commons.wikimedia....  21915202</code></pre><p>​<br>​    </p><pre><code>fr                                                     Page      total27330   Wikipédia:Accueil_principal_fr.wikipedia.org_a...  86848066755104   Wikipédia:Accueil_principal_fr.wikipedia.org_m...  6113028217344    Wikipédia:Accueil_principal_fr.wikipedia.org_d...  23958901227825   Spécial:Recherche_fr.wikipedia.org_all-access_...   956663748221    Spécial:Recherche_fr.wikipedia.org_desktop_all...   8844893826500   Sp?cial:Search_fr.wikipedia.org_all-access_all...   761945686978    Sp?cial:Search_fr.wikipedia.org_desktop_all-ag...   76185450131296  Wikipédia:Accueil_principal_fr.wikipedia.org_a...   6386079926993   Organisme_de_placement_collectif_en_valeurs_mo...   366479297213    Organisme_de_placement_collectif_en_valeurs_mo...   36624145</code></pre><p>​<br>​    </p><pre><code>zh                                                     Page      total28727   Wikipedia:首页_zh.wikipedia.org_all-access_all-a...  12369431261350    Wikipedia:首页_zh.wikipedia.org_desktop_all-agents   66435641105844  Wikipedia:首页_zh.wikipedia.org_mobile-web_all-a...   5088742928728   Special:搜索_zh.wikipedia.org_all-access_all-agents   4867812461351      Special:搜索_zh.wikipedia.org_desktop_all-agents   4820384328089   Running_Man_zh.wikipedia.org_all-access_all-ag...   1148584530960   Special:链接搜索_zh.wikipedia.org_all-access_all-a...   1032040363510    Special:链接搜索_zh.wikipedia.org_desktop_all-agents   1032033660711     Running_Man_zh.wikipedia.org_desktop_all-agents    796844330446    瑯琊榜_(電視劇)_zh.wikipedia.org_all-access_all-agents    5891589</code></pre><p>​<br>​    </p><pre><code>ru                                                     Page       total99322   Заглавная_страница_ru.wikipedia.org_all-access...  1086019452103123  Заглавная_страница_ru.wikipedia.org_desktop_al...   74288001617670   Заглавная_страница_ru.wikipedia.org_mobile-web...   32793043399537   Служебная:Поиск_ru.wikipedia.org_all-access_al...   103764279103349  Служебная:Поиск_ru.wikipedia.org_desktop_all-a...    98664171100414  Служебная:Ссылки_сюда_ru.wikipedia.org_all-acc...    25102004104195  Служебная:Ссылки_сюда_ru.wikipedia.org_desktop...    2505815597670   Special:Search_ru.wikipedia.org_all-access_all...    24374572101457  Special:Search_ru.wikipedia.org_desktop_all-ag...    2195847298301   Служебная:Вход_ru.wikipedia.org_all-access_all...    12162587</code></pre><p>​<br>​    </p><pre><code>es                                                     Page      total92205   Wikipedia:Portada_es.wikipedia.org_all-access_...  75149230495855   Wikipedia:Portada_es.wikipedia.org_mobile-web_...  56507737290810   Especial:Buscar_es.wikipedia.org_all-access_al...  19449124571199   Wikipedia:Portada_es.wikipedia.org_desktop_all...  16543935469939   Especial:Buscar_es.wikipedia.org_desktop_all-a...  16043127194389   Especial:Buscar_es.wikipedia.org_mobile-web_al...   3405996690813   Especial:Entrar_es.wikipedia.org_all-access_al...   33983359143440  Wikipedia:Portada_es.wikipedia.org_all-access_...   3161540993094   Lali_Espósito_es.wikipedia.org_all-access_all-...   2660268869942   Especial:Entrar_es.wikipedia.org_desktop_all-a...   25747141</code></pre><p>​<br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> top_pages:</span><br><span class="line">    fig = plt.figure(<span class="number">1</span>,figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">    cols = train.columns</span><br><span class="line">    cols = cols[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">    data = train.loc[top_pages[key],cols]</span><br><span class="line">    plt.plot(days,data)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Days&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Views&#x27;</span>)</span><br><span class="line">    plt.title(train.loc[top_pages[key],<span class="string">&#x27;Page&#x27;</span>])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/matplotlib/cbook/__init__.py:2062: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  x[:, None]//anaconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py:250: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  y = y[:, np.newaxis]</code></pre><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_11_1.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_11_2.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_11_3.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_11_4.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_11_5.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_11_6.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_11_7.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-5%E7%BB%B4%E5%9F%BA%E6%95%B0%E6%8D%AEEDA/output_11_8.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARIMA时间序列预测-4tsfresh</title>
    <link href="/2020/08/19/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-4tsfresh/"/>
    <url>/2020/08/19/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-4tsfresh/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> tsfresh <span class="keyword">import</span> extract_features, select_features, extract_relevant_features</span><br><span class="line"><span class="keyword">from</span> tsfresh.examples <span class="keyword">import</span> download_robot_execution_failures, load_robot_execution_failures</span><br><span class="line"><span class="keyword">from</span> tsfresh.feature_extraction <span class="keyword">import</span> ComprehensiveFCParameters</span><br><span class="line"><span class="keyword">from</span> tsfresh.utilities.dataframe_functions <span class="keyword">import</span> impute</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.  import pandas.util.testing as tm//anaconda3/lib/python3.7/site-packages/statsmodels/compat/pandas.py:23: FutureWarning: The Panel class is removed from pandas. Accessing it from the top-level namespace will also be removed in the next version  data_klasses = (pandas.Series, pandas.DataFrame, pandas.Panel)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">download_robot_execution_failures()</span><br><span class="line">df, y = load_robot_execution_failures()</span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>   id  time  F_x  F_y  F_z  T_x  T_y  T_z0   1     0   -1   -1   63   -3   -1    01   1     1    0    0   62   -3   -1    02   1     2   -1   -1   61   -3    0    03   1     3   -1   -1   63   -2   -1    04   1     4   -1   -1   63   -3   -1    0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[df.<span class="built_in">id</span> == <span class="number">3</span>][[<span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;F_x&#x27;</span>, <span class="string">&#x27;F_y&#x27;</span>, <span class="string">&#x27;F_z&#x27;</span>, <span class="string">&#x27;T_x&#x27;</span>, <span class="string">&#x27;T_y&#x27;</span>, <span class="string">&#x27;T_z&#x27;</span>]].plot(x=<span class="string">&#x27;time&#x27;</span>, title=<span class="string">&quot;Success example (id 3)&quot;</span>,                                                                       figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">df[df.<span class="built_in">id</span> == <span class="number">20</span>][[<span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;F_x&#x27;</span>, <span class="string">&#x27;F_y&#x27;</span>, <span class="string">&#x27;F_z&#x27;</span>, <span class="string">&#x27;T_x&#x27;</span>, <span class="string">&#x27;T_y&#x27;</span>, <span class="string">&#x27;T_z&#x27;</span>]].plot(x=<span class="string">&#x27;time&#x27;</span>, title=<span class="string">&quot;Success example (id 20)&quot;</span>,                                                                    figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-4tsfresh/output_2_0.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-4tsfresh/output_2_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extracted_features = extract_features(df, column_id=<span class="string">&quot;id&quot;</span>, column_sort=<span class="string">&quot;time&quot;</span>)</span><br><span class="line">X = impute(extracted_features)</span><br><span class="line"><span class="built_in">print</span>(X)</span><br></pre></td></tr></table></figure><pre><code>Feature Extraction: 100%|██████████| 10/10 [00:10&lt;00:00,  1.08s/it]//anaconda3/lib/python3.7/site-packages/tsfresh/utilities/dataframe_functions.py:173: RuntimeWarning: The columns [&#39;F_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_50__f_agg_&quot;max&quot;&#39; &#39;F_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_50__f_agg_&quot;mean&quot;&#39; &#39;F_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_50__f_agg_&quot;min&quot;&#39; ... &#39;T_z__fft_coefficient__attr_&quot;real&quot;__coeff_98&#39; &#39;T_z__fft_coefficient__attr_&quot;real&quot;__coeff_99&#39; &#39;T_z__spkt_welch_density__coeff_8&#39;] did not have any finite values. Filling with zeros.  df.iloc[:, np.where(is_col_non_finite)[0]].columns.values), RuntimeWarning)variable  F_x__abs_energy  F_x__absolute_sum_of_changes  \id                                                        1                    14.0                           2.0   2                    25.0                          14.0   3                    12.0                          10.0   4                    16.0                          17.0   5                    17.0                          13.0   ..                    ...                           ...   84                96833.0                         100.0   85                 1683.0                          19.0   86                83497.0                         127.0   87              1405437.0                         181.0   88                 1427.0                          11.0   variable  F_x__agg_autocorrelation__f_agg_&quot;mean&quot;__maxlag_40  \id                                                            1                                                 -0.106351   2                                                 -0.039098   3                                                 -0.029815   4                                                 -0.049773   5                                                 -0.061467   ..                                                      ...   84                                                -0.435813   85                                                -0.599870   86                                                -0.603352   87                                                -0.455727   88                                                -0.614351   variable  F_x__agg_autocorrelation__f_agg_&quot;median&quot;__maxlag_40  \id                                                              1                                             -7.206633e-02     2                                             -4.935275e-02     3                                              1.301043e-17     4                                             -6.417112e-02     5                                             -5.172414e-02     ..                                                      ...     84                                            -8.343714e-01     85                                            -4.380362e-01     86                                            -4.802260e-01     87                                            -4.355676e-01     88                                            -5.887814e-01     variable  F_x__agg_autocorrelation__f_agg_&quot;var&quot;__maxlag_40  \id                                                           1                                                 0.016879   2                                                 0.088790   3                                                 0.105435   4                                                 0.143580   5                                                 0.052642   ..                                                     ...   84                                                0.538354   85                                                0.991429   86                                                0.994691   87                                                0.516457   88                                                1.121329   variable  F_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_10__f_agg_&quot;max&quot;  \id                                                                             1                                                       0.0                    2                                                       0.0                    3                                                       1.0                    4                                                       1.0                    5                                                       2.0                    ..                                                      ...                    84                                                    -25.0                    85                                                     12.0                    86                                                     70.0                    87                                                    340.0                    88                                                     -6.0                    variable  F_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_10__f_agg_&quot;mean&quot;  \id                                                                              1                                                      -0.9                     2                                                      -0.7                     3                                                      -0.5                     4                                                      -0.4                     5                                                      -0.5                     ..                                                      ...                     84                                                    -55.3                     85                                                      6.7                     86                                                     40.4                     87                                                    281.0                     88                                                     -8.4                     variable  F_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_10__f_agg_&quot;min&quot;  \id                                                                             1                                                      -1.0                    2                                                      -3.0                    3                                                      -1.0                    4                                                      -2.0                    5                                                      -2.0                    ..                                                      ...                    84                                                   -110.0                    85                                                      4.0                    86                                                     21.0                    87                                                    171.0                    88                                                    -11.0                    variable  F_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_10__f_agg_&quot;var&quot;  \id                                                                             1                                                      0.09                    2                                                      0.81                    3                                                      0.45                    4                                                      1.24                    5                                                      1.05                    ..                                                      ...                    84                                                  1216.61                    85                                                     5.01                    86                                                   236.84                    87                                                  3848.20                    88                                                     1.84                    variable  F_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_50__f_agg_&quot;max&quot;  \id                                                                             1                                                       0.0                    2                                                       0.0                    3                                                       0.0                    4                                                       0.0                    5                                                       0.0                    ..                                                      ...                    84                                                      0.0                    85                                                      0.0                    86                                                      0.0                    87                                                      0.0                    88                                                      0.0                    variable  ...  T_z__symmetry_looking__r_0.9500000000000001  \id        ...                                                1         ...                                          0.0   2         ...                                          1.0   3         ...                                          1.0   4         ...                                          1.0   5         ...                                          1.0   ..        ...                                          ...   84        ...                                          1.0   85        ...                                          1.0   86        ...                                          1.0   87        ...                                          1.0   88        ...                                          1.0   variable  T_z__time_reversal_asymmetry_statistic__lag_1  \id                                                        1                                              0.000000   2                                              0.000000   3                                              0.000000   4                                              0.000000   5                                             -0.076923   ..                                                  ...   84                                         -1254.846154   85                                           -34.846154   86                                            81.538462   87                                          8445.769231   88                                            14.230769   variable  T_z__time_reversal_asymmetry_statistic__lag_2  \id                                                        1                                              0.000000   2                                              0.000000   3                                             -0.090909   4                                             -0.181818   5                                             -0.090909   ..                                                  ...   84                                         -3182.363636   85                                           -57.545455   86                                           141.000000   87                                         16935.636364   88                                            27.181818   variable  T_z__time_reversal_asymmetry_statistic__lag_3  \id                                                        1                                              0.000000   2                                              0.000000   3                                              0.000000   4                                              0.000000   5                                             -0.222222   ..                                                  ...   84                                         -6043.333333   85                                           -84.000000   86                                           280.888889   87                                         25770.555556   88                                            36.222222   variable  T_z__value_count__value_-1  T_z__value_count__value_0  \id                                                                1                                0.0                       15.0   2                                4.0                       11.0   3                                4.0                       11.0   4                                6.0                        8.0   5                                4.0                        9.0   ..                               ...                        ...   84                               1.0                        1.0   85                               1.0                        1.0   86                               0.0                        0.0   87                               0.0                        0.0   88                               0.0                        0.0   variable  T_z__value_count__value_1  T_z__variance  \id                                                   1                               0.0       0.000000   2                               0.0       0.195556   3                               0.0       0.195556   4                               1.0       0.355556   5                               2.0       0.382222   ..                              ...            ...   84                              0.0      93.315556   85                              0.0       4.648889   86                              1.0      29.840000   87                              0.0      98.088889   88                              0.0       0.782222   variable  T_z__variance_larger_than_standard_deviation  \id                                                       1                                                  0.0   2                                                  0.0   3                                                  0.0   4                                                  0.0   5                                                  0.0   ..                                                 ...   84                                                 1.0   85                                                 1.0   86                                                 1.0   87                                                 1.0   88                                                 0.0   variable  T_z__variation_coefficient  id                                    1                          -0.238179  2                          -1.658312  3                          -1.658312  4                          -1.788854  5                          -4.636809  ..                               ...  84                         -0.624569  85                         -0.621960  86                         -1.011593  87                          0.312757  88                          0.181733  [88 rows x 4578 columns]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X_filtered = extract_relevant_features(df, y,</span><br><span class="line">                                       column_id=<span class="string">&#x27;id&#x27;</span>, column_sort=<span class="string">&#x27;time&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(X_filtered)</span><br></pre></td></tr></table></figure><pre><code>Feature Extraction: 100%|██████████| 10/10 [00:10&lt;00:00,  1.06s/it]variable  F_x__value_count__value_-1  F_x__abs_energy  \id                                                      1                               14.0             14.0   2                                7.0             25.0   3                               11.0             12.0   4                                5.0             16.0   5                                9.0             17.0   ..                               ...              ...   84                               0.0          96833.0   85                               0.0           1683.0   86                               0.0          83497.0   87                               0.0        1405437.0   88                               0.0           1427.0   variable  F_x__range_count__max_1__min_-1  F_y__abs_energy  \id                                                           1                                    15.0             13.0   2                                    13.0             76.0   3                                    14.0             40.0   4                                    10.0             60.0   5                                    13.0             46.0   ..                                    ...              ...   84                                    0.0          42780.0   85                                    0.0           1523.0   86                                    0.0          21064.0   87                                    0.0         308658.0   88                                    0.0            113.0   variable  T_y__standard_deviation  T_y__variance  \id                                                 1                        0.471405       0.222222   2                        2.054805       4.222222   3                        1.768867       3.128889   4                        2.669998       7.128889   5                        2.039608       4.160000   ..                            ...            ...   84                      39.541483    1563.528889   85                       3.841296      14.755556   86                      52.807154    2788.595556   87                      80.098162    6415.715556   88                       2.628054       6.906667   variable  F_x__fft_coefficient__attr_&quot;abs&quot;__coeff_1  \id                                                    1                                          1.000000   2                                          0.624118   3                                          2.203858   4                                          0.844394   5                                          2.730599   ..                                              ...   84                                       359.248162   85                                        36.770027   86                                       312.044052   87                                       481.046930   88                                        15.524355   variable  T_y__fft_coefficient__attr_&quot;abs&quot;__coeff_1  T_y__abs_energy  \id                                                                     1                                          1.165352             10.0   2                                          6.020261             90.0   3                                          8.235442            103.0   4                                         12.067855            124.0   5                                          6.445330            180.0   ..                                              ...              ...   84                                       309.190088         171261.0   85                                        26.631007            503.0   86                                       429.697740         118013.0   87                                       683.196535        2430295.0   88                                        16.768541           7630.0   variable  F_z__standard_deviation  ...  \id                                 ...   1                        1.203698  ...   2                        4.333846  ...   3                        4.616877  ...   4                        3.833188  ...   5                        4.841487  ...   ..                            ...  ...   84                     291.988082  ...   85                      14.501494  ...   86                     121.420189  ...   87                     204.966621  ...   88                      10.627010  ...   variable  T_x__agg_linear_trend__attr_&quot;intercept&quot;__chunk_len_5__f_agg_&quot;min&quot;  \id                                                                            1                                                 -3.000000                   2                                                 -4.166667                   3                                                 -5.833333                   4                                                 -9.333333                   5                                                -11.833333                   ..                                                      ...                   84                                               203.333333                   85                                               -29.166667                   86                                               -53.000000                   87                                              -139.333333                   88                                               -20.000000                   variable  T_x__number_peaks__n_1  T_y__number_cwt_peaks__n_1  \id                                                             1                            1.0                         4.0   2                            4.0                         4.0   3                            6.0                         3.0   4                            5.0                         5.0   5                            5.0                         5.0   ..                           ...                         ...   84                           3.0                         2.0   85                           3.0                         3.0   86                           2.0                         3.0   87                           2.0                         3.0   88                           3.0                         3.0   variable  T_y__count_below__t_0  \id                                1                      1.000000   2                      0.933333   3                      0.866667   4                      0.733333   5                      0.933333   ..                          ...   84                     0.000000   85                     0.066667   86                     0.000000   87                     0.000000   88                     1.000000   variable  T_x__change_quantiles__f_agg_&quot;var&quot;__isabs_True__qh_0.2__ql_0.0  \id                                                                         1                                                  0.000000                2                                                  0.000000                3                                                  0.000000                4                                                  0.000000                5                                                  0.000000                ..                                                      ...                84                                                64.000000                85                                                 4.666667                86                                                 0.250000                87                                                 0.000000                88                                                 4.666667                variable  F_z__change_quantiles__f_agg_&quot;mean&quot;__isabs_True__qh_1.0__ql_0.8  \id                                                                          1                                                       0.0                 2                                                       1.0                 3                                                       3.0                 4                                                       0.0                 5                                                       0.0                 ..                                                      ...                 84                                                     46.0                 85                                                      4.5                 86                                                      7.0                 87                                                     90.5                 88                                                      0.0                 variable  T_x__quantile__q_0.1  F_y__has_duplicate_max  \id                                                       1                         -3.0                     1.0   2                         -9.2                     1.0   3                         -6.6                     0.0   4                         -9.0                     0.0   5                         -9.6                     0.0   ..                         ...                     ...   84                       203.2                     0.0   85                       -41.6                     0.0   86                       -84.8                     0.0   87                      -139.2                     0.0   88                       -24.6                     0.0   variable  F_y__cwt_coefficients__coeff_13__w_2__widths_(2, 5, 10, 20)  \id                                                                      1                                                 -0.310265             2                                                 -0.202951             3                                                  0.539121             4                                                 -2.641390             5                                                  0.591927             ..                                                      ...             84                                                38.559593             85                                                14.429645             86                                                60.760842             87                                               109.029954             88                                                 2.455593             variable  F_y__cwt_coefficients__coeff_14__w_5__widths_(2, 5, 10, 20)  id                                                                     1                                                 -0.751682            2                                                  0.057818            3                                                  0.912474            4                                                 -0.609735            5                                                  0.072771            ..                                                      ...            84                                                71.641254            85                                                16.349699            86                                                71.095480            87                                               173.699573            88                                                 3.226801            [88 rows x 626 columns]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X_train, X_test, X_filtered_train, X_filtered_test, y_train, y_test = train_test_split(X, X_filtered, y, test_size=<span class="number">0.25</span>)</span><br><span class="line">c1 = DecisionTreeClassifier()</span><br><span class="line">c1.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test,c1.predict(X_test)))</span><br></pre></td></tr></table></figure><pre><code>              precision    recall  f1-score   support       False       1.00      0.93      0.96        14        True       0.89      1.00      0.94         8    accuracy                           0.95        22   macro avg       0.94      0.96      0.95        22weighted avg       0.96      0.95      0.96        22</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(c1.n_features_)</span><br></pre></td></tr></table></figure><pre><code>4578</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c2 = DecisionTreeClassifier()</span><br><span class="line">c2.fit(X_filtered_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test,c2.predict(X_filtered_test)))</span><br></pre></td></tr></table></figure><pre><code>              precision    recall  f1-score   support       False       0.93      0.93      0.93        14        True       0.88      0.88      0.88         8    accuracy                           0.91        22   macro avg       0.90      0.90      0.90        22weighted avg       0.91      0.91      0.91        22</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(c2.n_features_)</span><br></pre></td></tr></table></figure><pre><code>626</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARIMA时间序列预测-3-股票预测</title>
    <link href="/2020/08/19/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-3-%E8%82%A1%E7%A5%A8%E9%A2%84%E6%B5%8B/"/>
    <url>/2020/08/19/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-3-%E8%82%A1%E7%A5%A8%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># import pandas_datareader</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf, plot_pacf</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima_model <span class="keyword">import</span> ARIMA</span><br><span class="line"></span><br><span class="line">plt.style.use(<span class="string">&#x27;ggplot&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stockFile = <span class="string">&#x27;./data/T10yr.csv&#x27;</span></span><br><span class="line">stock = pd.read_csv(stockFile, index_col=<span class="number">0</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(stock.tail(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>             Open   High    Low  Close  Volume  Adj CloseDate                                                     2016-07-18  1.577  1.604  1.556  1.587       0      1.5872016-07-19  1.553  1.575  1.546  1.558       0      1.5582016-07-20  1.568  1.596  1.566  1.580       0      1.5802016-07-21  1.601  1.628  1.563  1.565       0      1.5652016-07-22  1.585  1.599  1.544  1.570       0      1.5702016-07-25  1.584  1.584  1.554  1.571       0      1.5712016-07-26  1.559  1.587  1.549  1.563       0      1.5632016-07-27  1.570  1.570  1.511  1.515       0      1.5152016-07-28  1.525  1.535  1.493  1.511       0      1.5112016-07-29  1.525  1.530  1.458  1.458       0      1.458</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对close值重采样，按每周重采样</span></span><br><span class="line">stock_week = stock[<span class="string">&#x27;Close&#x27;</span>].resample(<span class="string">&#x27;W-MON&#x27;</span>).mean()</span><br><span class="line">stock_train = stock_week[<span class="string">&#x27;2000&#x27;</span>:<span class="string">&#x27;2015&#x27;</span>]</span><br><span class="line"></span><br><span class="line">stock_train.plot(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1.25</span>, <span class="number">0.5</span>))</span><br><span class="line">plt.title(<span class="string">&quot;Stock Close&quot;</span>)</span><br><span class="line">sns.despine()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/matplotlib/font_manager.py:1328: UserWarning: findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans  (prop.get_family(), self.defaultFamily[fontext]))</code></pre><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-3%E8%82%A1%E7%A5%A8%E9%A2%84%E6%B5%8B/output_2_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据不平稳，做差分</span></span><br><span class="line">stock_diff = stock_train.diff()</span><br><span class="line">stock_diff = stock_diff.dropna()</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(stock_diff)</span><br><span class="line">plt.title(<span class="string">&#x27;一阶差分&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-3%E8%82%A1%E7%A5%A8%E9%A2%84%E6%B5%8B/output_3_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># acf-q</span></span><br><span class="line">acf = plot_acf(stock_diff, lags=<span class="number">20</span>)</span><br><span class="line">plt.title(<span class="string">&quot;ACF&quot;</span>)</span><br><span class="line">acf.show()</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/matplotlib/figure.py:459: UserWarning: matplotlib is currently using a non-GUI backend, so cannot show the figure  &quot;matplotlib is currently using a non-GUI backend, &quot;</code></pre><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-3%E8%82%A1%E7%A5%A8%E9%A2%84%E6%B5%8B/output_4_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pacf</span></span><br><span class="line">pacf = plot_pacf(stock_diff, lags=<span class="number">20</span>)</span><br><span class="line">plt.title(<span class="string">&quot;PACF&quot;</span>)</span><br><span class="line">pacf.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-3%E8%82%A1%E7%A5%A8%E9%A2%84%E6%B5%8B/output_5_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = ARIMA(stock_train, order=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), freq=<span class="string">&quot;W-MON&quot;</span>)</span><br><span class="line">result = model.fit()</span><br><span class="line"><span class="built_in">print</span>(result.summary())</span><br></pre></td></tr></table></figure><pre><code>                             ARIMA Model Results                              ==============================================================================Dep. Variable:                D.Close   No. Observations:                  834Model:                 ARIMA(1, 1, 1)   Log Likelihood                 720.846Method:                       css-mle   S.D. of innovations              0.102Date:                Wed, 19 Aug 2020   AIC                          -1433.692Time:                        17:26:05   BIC                          -1414.787Sample:                    01-10-2000   HQIC                         -1426.444                         - 12-28-2015                                         =================================================================================                    coef    std err          z      P&gt;|z|      [0.025      0.975]---------------------------------------------------------------------------------const            -0.0052      0.005     -1.145      0.252      -0.014       0.004ar.L1.D.Close     0.2841      0.203      1.397      0.163      -0.115       0.683ma.L1.D.Close    -0.0869      0.213     -0.408      0.683      -0.504       0.330                                    Roots                                    =============================================================================                  Real          Imaginary           Modulus         Frequency-----------------------------------------------------------------------------AR.1            3.5199           +0.0000j            3.5199            0.0000MA.1           11.5087           +0.0000j           11.5087            0.0000-----------------------------------------------------------------------------</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始时间从已知时间开始</span></span><br><span class="line">pred = result.predict(<span class="string">&#x27;20140609&#x27;</span>, <span class="string">&#x27;20160704&#x27;</span>, dynamic=<span class="literal">True</span>, typ=<span class="string">&#x27;levels&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pred)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>2014-06-09    2.4635592014-06-16    2.4555392014-06-23    2.4495692014-06-30    2.4441832014-07-07    2.4389622014-07-14    2.4337882014-07-21    2.4286272014-07-28    2.4234702014-08-04    2.4183152014-08-11    2.4131592014-08-18    2.4080042014-08-25    2.4028492014-09-01    2.3976932014-09-08    2.3925382014-09-15    2.3873832014-09-22    2.3822272014-09-29    2.3770722014-10-06    2.3719172014-10-13    2.3667612014-10-20    2.3616062014-10-27    2.3564512014-11-03    2.3512962014-11-10    2.3461402014-11-17    2.3409852014-11-24    2.3358302014-12-01    2.3306742014-12-08    2.3255192014-12-15    2.3203642014-12-22    2.3152082014-12-29    2.310053                ...   2015-12-14    2.0522882015-12-21    2.0471322015-12-28    2.0419772016-01-04    2.0368222016-01-11    2.0316662016-01-18    2.0265112016-01-25    2.0213562016-02-01    2.0162002016-02-08    2.0110452016-02-15    2.0058902016-02-22    2.0007342016-02-29    1.9955792016-03-07    1.9904242016-03-14    1.9852692016-03-21    1.9801132016-03-28    1.9749582016-04-04    1.9698032016-04-11    1.9646472016-04-18    1.9594922016-04-25    1.9543372016-05-02    1.9491812016-05-09    1.9440262016-05-16    1.9388712016-05-23    1.9337152016-05-30    1.9285602016-06-06    1.9234052016-06-13    1.9182492016-06-20    1.9130942016-06-27    1.9079392016-07-04    1.902784Freq: W-MON, Length: 109, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">6</span>))</span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">plt.plot(pred)</span><br><span class="line">plt.plot(stock_train)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-3%E8%82%A1%E7%A5%A8%E9%A2%84%E6%B5%8B/output_8_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARIMA时间序列预测-2</title>
    <link href="/2020/08/18/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-2/"/>
    <url>/2020/08/18/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> statsmodels.formula.api <span class="keyword">as</span> smf</span><br><span class="line"><span class="keyword">import</span> statsmodels.tsa.api <span class="keyword">as</span> smt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.float_format&#x27;</span>, <span class="keyword">lambda</span> x:<span class="string">&#x27;%0.5f&#x27;</span> %x)</span><br><span class="line">np.set_printoptions(precision=<span class="number">5</span>, suppress=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">sns.<span class="built_in">set</span>(style=<span class="string">&#x27;ticks&#x27;</span>, context=<span class="string">&#x27;poster&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename_ts = <span class="string">&#x27;data/series1.csv&#x27;</span></span><br><span class="line">ts_df = pd.read_csv(filename_ts, index_col=<span class="number">0</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">n_samples = ts_df.shape[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(ts_df.shape)</span><br><span class="line"><span class="built_in">print</span>(ts_df.head())</span><br></pre></td></tr></table></figure><pre><code>(120, 1)              value2006-06-01  0.215072006-07-01  1.142252006-08-01  0.080772006-09-01 -0.739522006-10-01  0.53552</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n_train=<span class="built_in">int</span>(<span class="number">0.95</span>*n_samples) + <span class="number">1</span></span><br><span class="line">n_forecast = n_samples-n_train</span><br><span class="line"></span><br><span class="line">ts_train = ts_df.iloc[:n_train][<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">ts_test = ts_df.iloc[n_train:][<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(ts_train.shape)</span><br><span class="line"><span class="built_in">print</span>(ts_test.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Training Series:&quot;</span>, <span class="string">&quot;\n&quot;</span>, ts_train.tail(), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing Series:&quot;</span>, <span class="string">&quot;\n&quot;</span>, ts_test.head())</span><br></pre></td></tr></table></figure><pre><code>(115,)(5,)Training Series:  2015-08-01    0.603712015-09-01   -1.273722015-10-01   -0.932842015-11-01    0.085522015-12-01    1.20534Name: value, dtype: float64 Testing Series:  2016-01-01    2.164112016-02-01    0.952262016-03-01    0.364852016-04-01   -2.264872016-05-01   -2.38168Name: value, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tsplot</span>(<span class="params">y, lags=<span class="literal">None</span>, title=<span class="string">&#x27;&#x27;</span>, figsize = (<span class="params"><span class="number">14</span>,<span class="number">10</span></span>)</span>):</span></span><br><span class="line">    fig = plt.figure(figsize=figsize)</span><br><span class="line">    layout = (<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">    ts_ax = plt.subplot2grid(layout, (<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    hist_ax = plt.subplot2grid(layout, (<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    acf_ax = plt.subplot2grid(layout, (<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    pacf_ax = plt.subplot2grid(layout, (<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    y.plot(ax=ts_ax)</span><br><span class="line">    ts_ax.tick_params(labelsize=<span class="number">15</span>)</span><br><span class="line">    ts_ax.set_title(title)</span><br><span class="line">    y.plot(ax=hist_ax, kind=<span class="string">&#x27;hist&#x27;</span>, bins=<span class="number">25</span>)</span><br><span class="line">    hist_ax.tick_params(labelsize=<span class="number">15</span>)</span><br><span class="line">    hist_ax.set_title(<span class="string">&#x27;Histogram&#x27;</span>)</span><br><span class="line">    smt.graphics.plot_acf(y, lags=lags, ax=acf_ax)</span><br><span class="line">    acf_ax.tick_params(labelsize=<span class="number">15</span>)</span><br><span class="line">    smt.graphics.plot_pacf(y, lags=lags, ax=pacf_ax)</span><br><span class="line">    pacf_ax.tick_params(labelsize=<span class="number">15</span>)</span><br><span class="line">    [ax.set_xlim(<span class="number">0</span>) <span class="keyword">for</span> ax <span class="keyword">in</span> [acf_ax, pacf_ax]]</span><br><span class="line">    sns.despine()</span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    <span class="keyword">return</span> ts_ax, acf_ax, pacf_ax</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsplot(ts_train, title=<span class="string">&#x27;A Given Training Series&#x27;</span>, lags=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><pre><code>(&lt;matplotlib.axes._subplots.AxesSubplot at 0x1c21cf6080&gt;, &lt;matplotlib.axes._subplots.AxesSubplot at 0x1c2240c358&gt;, &lt;matplotlib.axes._subplots.AxesSubplot at 0x1c22432e10&gt;)</code></pre><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%90-2/output_5_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">arima200 = sm.tsa.SARIMAX(ts_train,order=(<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>)) <span class="comment">#(p,b,q)</span></span><br><span class="line">model_results = arima200.fit()</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">p_min = <span class="number">0</span></span><br><span class="line">d_min = <span class="number">0</span></span><br><span class="line">q_min = <span class="number">0</span></span><br><span class="line">p_max = <span class="number">4</span></span><br><span class="line">d_max = <span class="number">0</span></span><br><span class="line">q_max = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">results_bic = pd.DataFrame(index=[<span class="string">&#x27;AR&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p_min, p_max+<span class="number">1</span>)],</span><br><span class="line">                          columns=[<span class="string">&#x27;MA&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q_min, q_max+<span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p, d, q <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(p_min,p_max+<span class="number">1</span>),</span><br><span class="line">                                <span class="built_in">range</span>(d_min, d_max+<span class="number">1</span>),</span><br><span class="line">                                <span class="built_in">range</span>(q_min, q_max+<span class="number">1</span>)):</span><br><span class="line">    <span class="keyword">if</span> p == <span class="number">0</span> <span class="keyword">and</span> d==<span class="number">0</span> <span class="keyword">and</span> q==<span class="number">0</span>:</span><br><span class="line">        results_bic.loc[<span class="string">&#x27;AR&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p), <span class="string">&#x27;MA&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(q)] = np.nan</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        model = sm.tsa.SARIMAX(ts_train, order=(p,d,q))</span><br><span class="line">        results = model.fit()</span><br><span class="line">        results_bic.loc[<span class="string">&#x27;AR&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p), <span class="string">&#x27;MA&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(q)] = results.bic</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">results_bic = results_bic[results_bic.columns].astype(<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/statespace/sarimax.py:961: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.  warn(&#39;Non-invertible starting MA parameters found.&#39;//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/statespace/sarimax.py:949: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.  warn(&#39;Non-stationary starting autoregressive parameters&#39;//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/base/model.py:512: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  &quot;Check mle_retvals&quot;, ConvergenceWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/base/model.py:512: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  &quot;Check mle_retvals&quot;, ConvergenceWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.  % freq, ValueWarning)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig,ax = plt.subplots(figsize=(<span class="number">10</span>,<span class="number">8</span>))</span><br><span class="line">ax = sns.heatmap(results_bic,</span><br><span class="line">                mask=results_bic.isnull(),</span><br><span class="line">                ax = ax,</span><br><span class="line">                annot=<span class="literal">True</span>,</span><br><span class="line">                fmt=<span class="string">&#x27;.2f&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;BIC&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0.5,1,&#39;BIC&#39;)</code></pre><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%90-2/output_8_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_results = sm.tsa.arma_order_select_ic(ts_train, ic=[<span class="string">&#x27;aic&#x27;</span>, <span class="string">&#x27;bic&#x27;</span>], trend=<span class="string">&#x27;nc&#x27;</span>, max_ar=<span class="number">4</span>, max_ma=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;AIC&#x27;</span>, train_results.aic_min_order)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;BIC&#x27;</span>, train_results.bic_min_order)</span><br></pre></td></tr></table></figure><pre><code>//anaconda3/lib/python3.7/site-packages/statsmodels/base/model.py:492: HessianInversionWarning: Inverting hessian failed, no bse or cov_params available  &#39;available&#39;, HessianInversionWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/base/model.py:512: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  &quot;Check mle_retvals&quot;, ConvergenceWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/base/model.py:492: HessianInversionWarning: Inverting hessian failed, no bse or cov_params available  &#39;available&#39;, HessianInversionWarning)//anaconda3/lib/python3.7/site-packages/statsmodels/base/model.py:512: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals  &quot;Check mle_retvals&quot;, ConvergenceWarning)AIC (4, 2)BIC (1, 1)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_results.plot_diagnostics(figsize=(<span class="number">16</span>,<span class="number">12</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%90-2/output_10_0.png" alt="png"></p><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%90-2/output_10_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARIMA时间序列预测-1</title>
    <link href="/2020/08/18/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-1/"/>
    <url>/2020/08/18/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B-1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><ul><li>时间戳</li><li>时间间隔</li><li>固定周期</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># D 天</span></span><br><span class="line"><span class="comment"># H 小时</span></span><br><span class="line"><span class="comment"># M 月</span></span><br><span class="line">rng = pd.date_range(<span class="string">&#x27;2016/07/01&#x27;</span>, periods=<span class="number">10</span> , freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">rng</span><br></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2016-07-01&#39;, &#39;2016-07-02&#39;, &#39;2016-07-03&#39;, &#39;2016-07-04&#39;,               &#39;2016-07-05&#39;, &#39;2016-07-06&#39;, &#39;2016-07-07&#39;, &#39;2016-07-08&#39;,               &#39;2016-07-09&#39;, &#39;2016-07-10&#39;],              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rng = pd.date_range(<span class="string">&#x27;2016/07/01&#x27;</span>, periods=<span class="number">10</span> , freq=<span class="string">&#x27;3D&#x27;</span>)</span><br><span class="line">rng</span><br></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2016-07-01&#39;, &#39;2016-07-04&#39;, &#39;2016-07-07&#39;, &#39;2016-07-10&#39;,               &#39;2016-07-13&#39;, &#39;2016-07-16&#39;, &#39;2016-07-19&#39;, &#39;2016-07-22&#39;,               &#39;2016-07-25&#39;, &#39;2016-07-28&#39;],              dtype=&#39;datetime64[ns]&#39;, freq=&#39;3D&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time = pd.Series(np.random.randn(<span class="number">20</span>), index=pd.date_range(<span class="string">&#x27;2016/1/1&#x27;</span>, periods=<span class="number">20</span>))</span><br><span class="line">time</span><br></pre></td></tr></table></figure><pre><code>2016-01-01   -0.5125702016-01-02   -1.0776382016-01-03    0.1264732016-01-04   -1.2423042016-01-05   -0.3111262016-01-06   -0.3803492016-01-07    1.4595042016-01-08   -0.3288052016-01-09    0.5374772016-01-10   -0.3777152016-01-11   -0.0362802016-01-12   -2.5227502016-01-13   -0.9365642016-01-14    0.2208232016-01-15   -0.5157072016-01-16   -0.3387332016-01-17    1.4037782016-01-18    1.3168502016-01-19   -0.9884792016-01-20   -1.655101Freq: D, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.date_range(<span class="string">&#x27;2020/01/01&#x27;</span>,<span class="string">&#x27;2020/01/20&#x27;</span>,freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2020-01-01&#39;, &#39;2020-01-02&#39;, &#39;2020-01-03&#39;, &#39;2020-01-04&#39;,               &#39;2020-01-05&#39;, &#39;2020-01-06&#39;, &#39;2020-01-07&#39;, &#39;2020-01-08&#39;,               &#39;2020-01-09&#39;, &#39;2020-01-10&#39;, &#39;2020-01-11&#39;, &#39;2020-01-12&#39;,               &#39;2020-01-13&#39;, &#39;2020-01-14&#39;, &#39;2020-01-15&#39;, &#39;2020-01-16&#39;,               &#39;2020-01-17&#39;, &#39;2020-01-18&#39;, &#39;2020-01-19&#39;, &#39;2020-01-20&#39;],              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)</code></pre><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.truncate(before=<span class="string">&#x27;2016-1-10&#x27;</span>)   <span class="comment"># after</span></span><br></pre></td></tr></table></figure><pre><code>2016-01-10   -0.3777152016-01-11   -0.0362802016-01-12   -2.5227502016-01-13   -0.9365642016-01-14    0.2208232016-01-15   -0.5157072016-01-16   -0.3387332016-01-17    1.4037782016-01-18    1.3168502016-01-19   -0.9884792016-01-20   -1.655101Freq: D, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Timestamp(<span class="string">&#x27;2020/01/01&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2020-01-01 00:00:00&#39;)</code></pre><h2 id="数据重采样"><a href="#数据重采样" class="headerlink" title="数据重采样"></a>数据重采样</h2><ul><li>升采样</li><li>降采样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rng = pd.date_range(<span class="string">&#x27;2020/01/01&#x27;</span>, periods=<span class="number">90</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">ts = pd.Series(np.random.randn(<span class="built_in">len</span>(rng)), index=rng)</span><br><span class="line">ts.head()</span><br></pre></td></tr></table></figure><pre><code>2020-01-01    1.3163772020-01-02    1.9790662020-01-03   -1.1017332020-01-04   -0.1548402020-01-05    0.661635Freq: D, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts.resample(<span class="string">&#x27;M&#x27;</span>).<span class="built_in">sum</span>()  <span class="comment"># 将天转化为月</span></span><br></pre></td></tr></table></figure><pre><code>2020-01-31    6.5218082020-02-29    1.5203562020-03-31   -6.827269Freq: M, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">day3D = ts.resample(<span class="string">&#x27;3D&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(day3D)</span><br></pre></td></tr></table></figure><pre><code>2020-01-01    2.1937102020-01-04    0.2169712020-01-07   -1.3213362020-01-10    1.0990152020-01-13    3.5684122020-01-16    2.9043862020-01-19   -2.1074152020-01-22   -0.3247932020-01-25   -1.0177332020-01-28    0.3571972020-01-31    0.5862232020-02-03   -1.6028442020-02-06    0.6767912020-02-09   -2.4438762020-02-12   -0.5468032020-02-15    4.9273712020-02-18   -0.7262252020-02-21    1.5868112020-02-24    0.5000582020-02-27   -0.4837572020-03-01   -0.5201312020-03-04    3.0735322020-03-07   -2.0369332020-03-10   -3.0027542020-03-13    1.6588332020-03-16   -0.8048282020-03-19   -1.1982262020-03-22   -3.4941612020-03-25    1.9423002020-03-28   -2.444900Freq: 3D, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升采样</span></span><br><span class="line"><span class="built_in">print</span>(day3D.resample(<span class="string">&#x27;D&#x27;</span>).asfreq())</span><br></pre></td></tr></table></figure><pre><code>2020-01-01    2.1937102020-01-02         NaN2020-01-03         NaN2020-01-04    0.2169712020-01-05         NaN2020-01-06         NaN2020-01-07   -1.3213362020-01-08         NaN2020-01-09         NaN2020-01-10    1.0990152020-01-11         NaN2020-01-12         NaN2020-01-13    3.5684122020-01-14         NaN2020-01-15         NaN2020-01-16    2.9043862020-01-17         NaN2020-01-18         NaN2020-01-19   -2.1074152020-01-20         NaN2020-01-21         NaN2020-01-22   -0.3247932020-01-23         NaN2020-01-24         NaN2020-01-25   -1.0177332020-01-26         NaN2020-01-27         NaN2020-01-28    0.3571972020-01-29         NaN2020-01-30         NaN                ...   2020-02-28         NaN2020-02-29         NaN2020-03-01   -0.5201312020-03-02         NaN2020-03-03         NaN2020-03-04    3.0735322020-03-05         NaN2020-03-06         NaN2020-03-07   -2.0369332020-03-08         NaN2020-03-09         NaN2020-03-10   -3.0027542020-03-11         NaN2020-03-12         NaN2020-03-13    1.6588332020-03-14         NaN2020-03-15         NaN2020-03-16   -0.8048282020-03-17         NaN2020-03-18         NaN2020-03-19   -1.1982262020-03-20         NaN2020-03-21         NaN2020-03-22   -3.4941612020-03-23         NaN2020-03-24         NaN2020-03-25    1.9423002020-03-26         NaN2020-03-27         NaN2020-03-28   -2.444900Freq: D, Length: 88, dtype: float64</code></pre><h2 id="插值方法："><a href="#插值方法：" class="headerlink" title="插值方法："></a>插值方法：</h2><ul><li>ffill 空值取前面的值</li><li>bfill 空值取后面的值</li><li>interpolate 线性取值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">day3D.resample(<span class="string">&#x27;D&#x27;</span>).ffill(<span class="number">1</span>).head()</span><br></pre></td></tr></table></figure><pre><code>2020-01-01    2.1937102020-01-02    2.1937102020-01-03         NaN2020-01-04    0.2169712020-01-05    0.216971Freq: D, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">day3D.resample(<span class="string">&#x27;D&#x27;</span>).interpolate(<span class="string">&#x27;linear&#x27;</span>).head()</span><br></pre></td></tr></table></figure><pre><code>2020-01-01    2.1937102020-01-02    1.5347972020-01-03    0.8758842020-01-04    0.2169712020-01-05   -0.295798Freq: D, dtype: float64</code></pre><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = ts.rolling(window=<span class="number">10</span>)</span><br><span class="line">r</span><br></pre></td></tr></table></figure><pre><code>Rolling [window=10,center=False,axis=0]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># r.max r.median r.std r.skew r.sum r.var</span></span><br><span class="line"><span class="built_in">print</span>(r.mean())</span><br></pre></td></tr></table></figure><pre><code>2020-01-01         NaN2020-01-02         NaN2020-01-03         NaN2020-01-04         NaN2020-01-05         NaN2020-01-06         NaN2020-01-07         NaN2020-01-08         NaN2020-01-09         NaN2020-01-10    0.2271672020-01-11    0.0782122020-01-12   -0.1107082020-01-13    0.1485392020-01-14    0.2977142020-01-15    0.3056272020-01-16    0.5759042020-01-17    0.6114402020-01-18    0.7002472020-01-19    0.6210962020-01-20    0.3205212020-01-21    0.4455252020-01-22    0.1989972020-01-23    0.0404072020-01-24    0.1212942020-01-25   -0.0117932020-01-26   -0.3311012020-01-27   -0.3507142020-01-28   -0.3191072020-01-29   -0.2047082020-01-30    0.009153                ...   2020-03-01    0.1176442020-03-02   -0.0735292020-03-03   -0.0475482020-03-04    0.1607322020-03-05    0.3459532020-03-06    0.3345222020-03-07    0.2879582020-03-08    0.2730202020-03-09    0.0633492020-03-10   -0.1360582020-03-11   -0.1515452020-03-12   -0.1305242020-03-13   -0.1496612020-03-14   -0.3840042020-03-15   -0.2718792020-03-16   -0.5007382020-03-17   -0.3599472020-03-18   -0.3577072020-03-19   -0.2656552020-03-20   -0.1616952020-03-21   -0.0888382020-03-22   -0.1856942020-03-23   -0.3307752020-03-24   -0.4075652020-03-25   -0.4579542020-03-26   -0.2544312020-03-27   -0.4146232020-03-28   -0.2913192020-03-29   -0.4246872020-03-30   -0.384974Freq: D, Length: 90, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">ts.plot(style=<span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">ts.rolling(window = <span class="number">10</span>).mean().plot(style=<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x123521400&gt;</code></pre><p><img src="/images/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%90-1/output_20_1.png" alt="png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Hyperledger Fabric的智能合约微服务化团队架构</title>
    <link href="/2020/06/05/%E5%9F%BA%E4%BA%8EHyperledger-Fabric%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8C%96%E5%9B%A2%E9%98%9F%E6%9E%B6%E6%9E%84/"/>
    <url>/2020/06/05/%E5%9F%BA%E4%BA%8EHyperledger-Fabric%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8C%96%E5%9B%A2%E9%98%9F%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<img src="https://user-images.githubusercontent.com/17808702/83887836-94f32480-a77b-11ea-899f-eeb4173bb9dc.png" alt="智能合约微服务化团队" width="450px"><p>康威定律指出系统的架构往往受制于产生这些设计的组织的沟通结构,高效的智能合约微服务化团队往往会促进智能合约微服务化开发效率,如图3所示给出了智能合约微服务化团队的范例,对于智能合约微服务化团队有如下建议:</p><ul><li>两个披萨原则,如果两个披萨不足以喂饱整个项目团队,那么项目团队就太大了,即采用小而精的团队.根据沟通渠道公式<em>n(n-1)/2</em>(<em>n</em>代表组织中的人数),有效的沟通和反馈是团队高效运作的核心,小而精的团队能有效的降低沟通成本.目前大多数开发团队依赖敏捷实践采取小而精的团队促进规划和软件发布,这促进了普通团队向智能合约微服务化团队的转型;</li><li>在确立了新的团队之后,选取适合团队成员的熟悉的自动化工具.智能合约微服务化的开发借鉴微服务的思想,将新型智能合约应用采用传统微服务的工具联系起来.选取适合熟悉的开发工具能够使团队成员能降低团队成员的开发、运维智能合约应用的门槛.在团队稳定成熟之后,可以开发适合自己团队组织结构的智能合约微服务化工具及工具链,满足本团队对自动化工具的需求;</li><li>针对业务与团队需求,灵活搭配流水线各开发流程以及团队敏捷协作工具.智能合约微服务化开发流程以及敏捷协作工具都是固定的,要想清楚这些流程及工具背后的意义,针对于自己的团队的沟通模式以及业务需求,一步步选取搭配适合自己团队的开发流水线及协作模式;</li><li>形成自己团队文化及价值观,消除需求、开发、测试、运维之间隔阂,使其通力合作,团队成员完全对自己开发的智能合约微服务全部生命周期负责,建立完善的制度激发团队成员的热情.</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>华为云 HE2E研发全流程管理</title>
    <link href="/2020/05/09/%E5%8D%8E%E4%B8%BA%E4%BA%91-HE2E%E7%A0%94%E5%8F%91%E5%85%A8%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2020/05/09/%E5%8D%8E%E4%B8%BA%E4%BA%91-HE2E%E7%A0%94%E5%8F%91%E5%85%A8%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>姚冬</li><li>Devops精要业务视角</li></ul><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>亨利福特：<ul><li>泰勒科学管理方法：将生产制造的阶段拆散</li><li>规模化降低成本</li><li>输入什么，输出确定。最终环节保证质量</li><li>需求固定</li></ul></li><li>大野耐一：<ul><li>丰田精益生产TPS</li><li>按需生产，按照需要随时改造</li><li>小批量生产控制成本</li><li>bug为浪费，客户不需要功能的为浪费</li><li>Just in time</li><li>质量检查环节内建</li><li>员工可以随时停止流水线</li><li>teamwork一起检查问题</li></ul></li><li>埃隆马斯克<ul><li>联网思维，第一性原理</li><li>IOT服务</li></ul></li></ul><h1 id="业界软件阶段"><a href="#业界软件阶段" class="headerlink" title="业界软件阶段"></a>业界软件阶段</h1><ul><li>瀑布</li><li>敏捷</li><li>DevOps: 反脆弱</li></ul><h1 id="华为DevOps之路"><a href="#华为DevOps之路" class="headerlink" title="华为DevOps之路"></a>华为DevOps之路</h1><ul><li>瀑布</li><li>IPD</li><li>CMMI</li><li>持续集成<ul><li>单元测试</li><li>构建</li><li>开发测试</li><li>测试用例自动生成</li></ul></li><li>持续交付</li><li>服务化-容器化开发</li><li>云原生</li></ul><blockquote><p>眼界打开，为什么有这些步骤？</p></blockquote><h1 id="Devops思路"><a href="#Devops思路" class="headerlink" title="Devops思路"></a>Devops思路</h1><ul><li><p>研发交付的核心目的</p><ul><li>可持续、可交付、高质量、快速、可工作</li><li>业务能力、研发能力、技术能力、工程能力</li></ul></li><li><p>价值过程中的混乱之墙</p><ul><li>客户：希望产生价值</li><li>业务部门：客户至上，所有需求都承诺</li><li>开发：交付快</li><li>运维：稳定</li></ul></li><li><p>Devops实践总结-全景</p><ul><li>1铁三角<ul><li>团队</li><li>迭代开发</li><li>最小可工作产品</li></ul></li><li>2端到端交付环</li><li>17个实践</li></ul></li><li><p>需求：漏斗</p><ul><li>全需求</li><li>产品backlog</li><li>迭代backlog</li></ul></li><li><p>微服务团队：自己养活自己</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fabric node sdk 1.4.0</title>
    <link href="/2020/04/07/fabric-node-sdk-1-4-0/"/>
    <url>/2020/04/07/fabric-node-sdk-1-4-0/</url>
    
    <content type="html"><![CDATA[<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install  --save fabric-ca-client</span><br><span class="line">npm install  --save fabric-client</span><br><span class="line">npm install --save grpc</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><ol><li>enrollAdmin.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册管理员用户</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Fabric_Client = <span class="built_in">require</span>(<span class="string">&#x27;fabric-client&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> Fabric_CA_Client = <span class="built_in">require</span>(<span class="string">&#x27;fabric-ca-client&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fabric_client = <span class="keyword">new</span> Fabric_Client();</span><br><span class="line"><span class="keyword">var</span> fabric_ca_client = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> admin_user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> member_user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> store_path = path.join(__dirname, <span class="string">&#x27;hfc-key-store&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27; Store path:&#x27;</span>+store_path);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fabric_Client.newDefaultKeyValueStore(&#123; <span class="attr">path</span>: store_path</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">state_store</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    fabric_client.setStateStore(state_store);</span><br><span class="line">    <span class="keyword">var</span> crypto_suite = Fabric_Client.newCryptoSuite();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> crypto_store = Fabric_Client.newCryptoKeyStore(&#123;<span class="attr">path</span>: store_path&#125;);</span><br><span class="line">    crypto_suite.setCryptoKeyStore(crypto_store);</span><br><span class="line">    fabric_client.setCryptoSuite(crypto_suite);</span><br><span class="line">    <span class="keyword">var</span> tlsOptions = &#123;</span><br><span class="line">        <span class="attr">trustedRoots</span>: [],</span><br><span class="line">        <span class="attr">verify</span>: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fabric_ca_client = <span class="keyword">new</span> Fabric_CA_Client(<span class="string">&#x27;http://39.106.189.16:7054&#x27;</span>, tlsOptions , <span class="string">&#x27;ca.example.com&#x27;</span>, crypto_suite);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fabric_client.getUserContext(<span class="string">&#x27;admin&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">user_from_store</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user_from_store &amp;&amp; user_from_store.isEnrolled()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Successfully loaded admin from persistence&#x27;</span>);</span><br><span class="line">        admin_user = user_from_store;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fabric_ca_client.enroll(&#123;</span><br><span class="line">            <span class="attr">enrollmentID</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">            <span class="attr">enrollmentSecret</span>: <span class="string">&#x27;adminpw&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">enrollment</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Successfully enrolled admin user &quot;admin&quot;&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> fabric_client.createUser(</span><br><span class="line">                &#123;<span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">                    <span class="attr">mspid</span>: <span class="string">&#x27;Org1MSP&#x27;</span>,</span><br><span class="line">                    <span class="attr">cryptoContent</span>: &#123; <span class="attr">privateKeyPEM</span>: enrollment.key.toBytes(), <span class="attr">signedCertPEM</span>: enrollment.certificate &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">            admin_user = user;</span><br><span class="line">            <span class="keyword">return</span> fabric_client.setUserContext(admin_user);</span><br><span class="line">        &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;Failed to enroll and persist admin. Error: &#x27;</span> + err.stack ? err.stack : err);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Failed to enroll admin&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Assigned the admin user to the fabric client ::&#x27;</span> + admin_user.toString());</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;Failed to enroll admin: &#x27;</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>registerUser.js</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">//注册普通用户</span><br><span class="line"></span><br><span class="line">var Fabric_Client = require(&#x27;fabric-client&#x27;);</span><br><span class="line">var Fabric_CA_Client = require(&#x27;fabric-ca-client&#x27;);</span><br><span class="line"></span><br><span class="line">var path = require(&#x27;path&#x27;);</span><br><span class="line">var util = require(&#x27;util&#x27;);</span><br><span class="line">var os = require(&#x27;os&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var fabric_client = new Fabric_Client();</span><br><span class="line">var fabric_ca_client = null;</span><br><span class="line">var admin_user = null;</span><br><span class="line">var member_user = null;</span><br><span class="line">var store_path = path.join(__dirname, &#x27;hfc-key-store&#x27;);</span><br><span class="line">console.log(&#x27; Store path:&#x27;+store_path);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fabric_Client.newDefaultKeyValueStore(&#123; path: store_path</span><br><span class="line">&#125;).then((state_store) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    fabric_client.setStateStore(state_store);</span><br><span class="line">    var crypto_suite = Fabric_Client.newCryptoSuite();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var crypto_store = Fabric_Client.newCryptoKeyStore(&#123;path: store_path&#125;);</span><br><span class="line">    crypto_suite.setCryptoKeyStore(crypto_store);</span><br><span class="line">    fabric_client.setCryptoSuite(crypto_suite);</span><br><span class="line">    var tlsOptions = &#123;</span><br><span class="line">        trustedRoots: [],</span><br><span class="line">        verify: false</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fabric_ca_client = new Fabric_CA_Client(&#x27;http://localhost:7054&#x27;, null , &#x27;&#x27;, crypto_suite);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return fabric_client.getUserContext(&#x27;admin&#x27;, true);</span><br><span class="line">&#125;).then((user_from_store) =&gt; &#123;</span><br><span class="line">    if (user_from_store &amp;&amp; user_from_store.isEnrolled()) &#123;</span><br><span class="line">        console.log(&#x27;Successfully loaded admin from persistence&#x27;);</span><br><span class="line">        admin_user = user_from_store;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new Error(&#x27;Failed to get admin.... run enrollAdmin.js&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return fabric_ca_client.register(&#123;enrollmentID: &#x27;user1&#x27;, affiliation: &#x27;org1.department1&#x27;,role: &#x27;client&#x27;&#125;, admin_user);</span><br><span class="line">&#125;).then((secret) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;Successfully registered user1 - secret:&#x27;+ secret);</span><br><span class="line"></span><br><span class="line">    return fabric_ca_client.enroll(&#123;enrollmentID: &#x27;user1&#x27;, enrollmentSecret: secret&#125;);</span><br><span class="line">&#125;).then((enrollment) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;Successfully enrolled member user &quot;user1&quot; &#x27;);</span><br><span class="line">  return fabric_client.createUser(</span><br><span class="line">     &#123;username: &#x27;user1&#x27;,</span><br><span class="line">     mspid: &#x27;Org1MSP&#x27;,</span><br><span class="line">     cryptoContent: &#123; privateKeyPEM: enrollment.key.toBytes(), signedCertPEM: enrollment.certificate &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;).then((user) =&gt; &#123;</span><br><span class="line">     member_user = user;</span><br><span class="line"></span><br><span class="line">     return fabric_client.setUserContext(member_user);</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">     console.log(&#x27;User1 was successfully registered and enrolled and is ready to interact with the fabric network&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;).catch((err) =&gt; &#123;</span><br><span class="line">    console.error(&#x27;Failed to register: &#x27; + err);</span><br><span class="line">    if(err.toString().indexOf(&#x27;Authorization&#x27;) &gt; -1) &#123;</span><br><span class="line">        console.error(&#x27;Authorization failures may be caused by having admin credentials from a previous CA instance.\n&#x27; +</span><br><span class="line">        &#x27;Try again after deleting the contents of the store directory &#x27;+store_path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>query.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过链码查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Fabric_Client = <span class="built_in">require</span>(<span class="string">&#x27;fabric-client&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fabric_client = <span class="keyword">new</span> Fabric_Client();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> channel = fabric_client.newChannel(<span class="string">&#x27;mychannel&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> peer = fabric_client.newPeer(<span class="string">&#x27;grpc://localhost:7051&#x27;</span>);</span><br><span class="line">channel.addPeer(peer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member_user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> store_path = path.join(__dirname, <span class="string">&#x27;hfc-key-store&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Store path:&#x27;</span> + store_path);</span><br><span class="line"><span class="keyword">var</span> tx_id = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = <span class="keyword">async</span> (chaincodeId, fcn, args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> state_store = <span class="keyword">await</span> Fabric_Client.newDefaultKeyValueStore(&#123;<span class="attr">path</span>: store_path&#125;);</span><br><span class="line">        fabric_client.setStateStore(state_store);</span><br><span class="line">        <span class="keyword">var</span> crypto_suite = Fabric_Client.newCryptoSuite();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> crypto_store = Fabric_Client.newCryptoKeyStore(&#123;<span class="attr">path</span>: store_path&#125;);</span><br><span class="line">        crypto_suite.setCryptoKeyStore(crypto_store);</span><br><span class="line">        fabric_client.setCryptoSuite(crypto_suite);</span><br><span class="line">        <span class="keyword">var</span> user_from_store = <span class="keyword">await</span> fabric_client.getUserContext(<span class="string">&#x27;user1&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">if</span> (user_from_store &amp;&amp; user_from_store.isEnrolled()) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Successfully loaded user1 from persistence&#x27;</span>);</span><br><span class="line">            member_user = user_from_store;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Failed to get user1.... run registerUser.js&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更改这里</span></span><br><span class="line">        <span class="keyword">const</span> request = &#123;</span><br><span class="line">            <span class="attr">chaincodeId</span>: chaincodeId,</span><br><span class="line">            <span class="attr">fcn</span>: fcn,</span><br><span class="line">            <span class="attr">args</span>: args</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> query_responses = <span class="keyword">await</span> channel.queryByChaincode(request);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Query has completed, checking results&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (query_responses &amp;&amp; query_responses.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (query_responses[<span class="number">0</span>] <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">&quot;error from query = &quot;</span>, query_responses[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;error from query = &quot;</span> + query_responses[<span class="number">0</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;Response is &quot;</span>, query_responses[<span class="number">0</span>].toString());</span><br><span class="line">                <span class="keyword">return</span> query_responses[<span class="number">0</span>].toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;No payloads were returned from query&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No payloads were returned from query&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;Failed to query successfully :: &#x27;</span> + err);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Failed to query successfully :: &#x27;</span> + err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = query;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4）invoke.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Copyright IBM Corp All Rights Reserved</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Chaincode Invoke</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Fabric_Client = <span class="built_in">require</span>(<span class="string">&#x27;fabric-client&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> fabric_client = <span class="keyword">new</span> Fabric_Client();</span><br><span class="line"></span><br><span class="line"><span class="comment">// setup the fabric network</span></span><br><span class="line"><span class="keyword">var</span> channel = fabric_client.newChannel(<span class="string">&#x27;mychannel&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> peer = fabric_client.newPeer(<span class="string">&#x27;grpc://localhost:7051&#x27;</span>);</span><br><span class="line">channel.addPeer(peer);</span><br><span class="line"><span class="keyword">var</span> order = fabric_client.newOrderer(<span class="string">&#x27;grpc://localhost:7050&#x27;</span>)</span><br><span class="line">channel.addOrderer(order);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> member_user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> store_path = path.join(__dirname, <span class="string">&#x27;hfc-key-store&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Store path:&#x27;</span> + store_path);</span><br><span class="line"><span class="keyword">var</span> tx_id = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invoke = <span class="keyword">async</span> (chainId, chaincodeId, fcn, args) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the key value store as defined in the fabric-client/config/default.json &#x27;key-value-store&#x27; setting</span></span><br><span class="line">    Fabric_Client.newDefaultKeyValueStore(&#123;</span><br><span class="line">        <span class="attr">path</span>: store_path</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">state_store</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// assign the store to the fabric client</span></span><br><span class="line">        fabric_client.setStateStore(state_store);</span><br><span class="line">        <span class="keyword">var</span> crypto_suite = Fabric_Client.newCryptoSuite();</span><br><span class="line">        <span class="comment">// use the same location for the state store (where the users&#x27; certificate are kept)</span></span><br><span class="line">        <span class="comment">// and the crypto store (where the users&#x27; keys are kept)</span></span><br><span class="line">        <span class="keyword">var</span> crypto_store = Fabric_Client.newCryptoKeyStore(&#123;<span class="attr">path</span>: store_path&#125;);</span><br><span class="line">        crypto_suite.setCryptoKeyStore(crypto_store);</span><br><span class="line">        fabric_client.setCryptoSuite(crypto_suite);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the enrolled user from persistence, this user will sign all requests</span></span><br><span class="line">        <span class="keyword">return</span> fabric_client.getUserContext(<span class="string">&#x27;user1&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">user_from_store</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (user_from_store &amp;&amp; user_from_store.isEnrolled()) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Successfully loaded user1 from persistence&#x27;</span>);</span><br><span class="line">            member_user = user_from_store;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Failed to get user1.... run registerUser.js&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get a transaction id object based on the current user assigned to fabric client</span></span><br><span class="line">        tx_id = fabric_client.newTransactionID();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Assigning transaction_id: &quot;</span>, tx_id._transaction_id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// createCar chaincode function - requires 5 args, ex: args: [&#x27;CAR12&#x27;, &#x27;Honda&#x27;, &#x27;Accord&#x27;, &#x27;Black&#x27;, &#x27;Tom&#x27;],</span></span><br><span class="line">        <span class="comment">// changeCarOwner chaincode function - requires 2 args , ex: args: [&#x27;CAR10&#x27;, &#x27;Dave&#x27;],</span></span><br><span class="line">        <span class="comment">// must send the proposal to endorsing peers</span></span><br><span class="line">        <span class="keyword">var</span> request = &#123;</span><br><span class="line">            <span class="comment">//targets: let default to the peer assigned to the client</span></span><br><span class="line">            <span class="attr">chaincodeId</span>: chaincodeId,</span><br><span class="line">            <span class="attr">fcn</span>: fcn,</span><br><span class="line">            <span class="attr">args</span>: args,</span><br><span class="line">            <span class="attr">chainId</span>: chainId,</span><br><span class="line">            <span class="attr">txId</span>: tx_id</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// send the transaction proposal to the peers</span></span><br><span class="line">        <span class="keyword">return</span> channel.sendTransactionProposal(request);</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> proposalResponses = results[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> proposal = results[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> isProposalGood = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(proposalResponses)</span><br><span class="line">        <span class="keyword">if</span> (proposalResponses &amp;&amp; proposalResponses[<span class="number">0</span>].response &amp;&amp;</span><br><span class="line">            proposalResponses[<span class="number">0</span>].response.status === <span class="number">200</span>) &#123;</span><br><span class="line">            isProposalGood = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Transaction proposal was good&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;Transaction proposal was bad&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isProposalGood) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(util.format(</span><br><span class="line">                <span class="string">&#x27;Successfully sent Proposal and received ProposalResponse: Status - %s, message - &quot;%s&quot;&#x27;</span>,</span><br><span class="line">                proposalResponses[<span class="number">0</span>].response.status, proposalResponses[<span class="number">0</span>].response.message));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// build up the request for the orderer to have the transaction committed</span></span><br><span class="line">            <span class="keyword">var</span> request = &#123;</span><br><span class="line">                <span class="attr">proposalResponses</span>: proposalResponses,</span><br><span class="line">                <span class="attr">proposal</span>: proposal</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// set the transaction listener and set a timeout of 30 sec</span></span><br><span class="line">            <span class="comment">// if the transaction did not get committed within the timeout period,</span></span><br><span class="line">            <span class="comment">// report a TIMEOUT status</span></span><br><span class="line">            <span class="keyword">var</span> transaction_id_string = tx_id.getTransactionID(); <span class="comment">//Get the transaction ID string to be used by the event processing</span></span><br><span class="line">            <span class="keyword">var</span> promises = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> sendPromise = channel.sendTransaction(request);</span><br><span class="line">            promises.push(sendPromise); <span class="comment">//we want the send transaction first, so that we know where to check status</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// get an eventhub once the fabric client has a user assigned. The user</span></span><br><span class="line">            <span class="comment">// is required bacause the event registration must be signed</span></span><br><span class="line">            <span class="keyword">let</span> event_hub = channel.newChannelEventHub(peer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// using resolve the promise so that result status may be processed</span></span><br><span class="line">            <span class="comment">// under the then clause rather than having the catch clause process</span></span><br><span class="line">            <span class="comment">// the status</span></span><br><span class="line">            <span class="keyword">let</span> txPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> handle = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    event_hub.unregisterTxEvent(transaction_id_string);</span><br><span class="line">                    event_hub.disconnect();</span><br><span class="line">                    resolve(&#123;<span class="attr">event_status</span>: <span class="string">&#x27;TIMEOUT&#x27;</span>&#125;); <span class="comment">//we could use reject(new Error(&#x27;Trnasaction did not complete within 30 seconds&#x27;));</span></span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">                event_hub.registerTxEvent(transaction_id_string, <span class="function">(<span class="params">tx, code</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// this is the callback for transaction event status</span></span><br><span class="line">                        <span class="comment">// first some clean up of event listener</span></span><br><span class="line">                        <span class="built_in">clearTimeout</span>(handle);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// now let the application know what happened</span></span><br><span class="line">                        <span class="keyword">var</span> return_status = &#123;<span class="attr">event_status</span>: code, <span class="attr">tx_id</span>: transaction_id_string&#125;;</span><br><span class="line">                        <span class="keyword">if</span> (code !== <span class="string">&#x27;VALID&#x27;</span>) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.error(<span class="string">&#x27;The transaction was invalid, code = &#x27;</span> + code);</span><br><span class="line">                            resolve(return_status); <span class="comment">// we could use reject(new Error(&#x27;Problem with the tranaction, event status ::&#x27;+code));</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">&#x27;The transaction has been committed on peer &#x27;</span> + event_hub.getPeerAddr());</span><br><span class="line">                            resolve(return_status);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">//this is the callback if something goes wrong with the event registration or processing</span></span><br><span class="line">                        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;There was a problem with the eventhub ::&#x27;</span> + err));</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;<span class="attr">disconnect</span>: <span class="literal">true</span>&#125; <span class="comment">//disconnect when complete</span></span><br><span class="line">                );</span><br><span class="line">                event_hub.connect();</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            promises.push(txPromise);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;Failed to send Proposal or receive valid response. Response null or status is not 200. exiting...&#x27;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Failed to send Proposal or receive valid response. Response null or status is not 200. exiting...&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Send transaction promise and event listener promise have completed&#x27;</span>);</span><br><span class="line">        <span class="comment">// check the results in the order the promises were added to the promise all list</span></span><br><span class="line">        <span class="keyword">if</span> (results &amp;&amp; results[<span class="number">0</span>] &amp;&amp; results[<span class="number">0</span>].status === <span class="string">&#x27;SUCCESS&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Successfully sent transaction to the orderer.&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Successfully sent transaction to the orderer.&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;Failed to order the transaction. Error code: &#x27;</span> + results[<span class="number">0</span>].status);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Failed to order the transaction. Error code: &#x27;</span> + results[<span class="number">0</span>].status</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (results &amp;&amp; results[<span class="number">1</span>] &amp;&amp; results[<span class="number">1</span>].event_status === <span class="string">&#x27;VALID&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Successfully committed the change to the ledger by the peer&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Successfully committed the change to the ledger by the peer&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Transaction failed to be committed to the ledger due to ::&#x27;</span> + results[<span class="number">1</span>].event_status);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Transaction failed to be committed to the ledger due to ::&#x27;</span> + results[<span class="number">1</span>].event_status</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;Failed to invoke successfully :: &#x27;</span> + err);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Failed to invoke successfully :: &#x27;</span> + err</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = invoke;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>app.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> query = <span class="built_in">require</span>(<span class="string">&quot;./query&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> invoke = <span class="built_in">require</span>(<span class="string">&quot;./invoke&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决跨域</span></span><br><span class="line">app.all(<span class="string">&#x27;*&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With&#x27;</span>);</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        res.send(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/queryAllFishes&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; res.send(<span class="keyword">await</span> query(<span class="string">&quot;fishcc&quot;</span>,<span class="string">&quot;queryAllFishes&quot;</span>,<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;x&quot;</span>))));</span><br><span class="line">app.get(<span class="string">&#x27;/queryFish&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; res.send(</span><br><span class="line">    <span class="keyword">await</span> query(<span class="string">&quot;fishcc&quot;</span>, <span class="string">&quot;queryFish&quot;</span>, <span class="keyword">new</span> <span class="built_in">Array</span>(req.query.fish))</span><br><span class="line">));</span><br><span class="line">app.get(<span class="string">&#x27;/queryHistory&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; res.send(</span><br><span class="line">    <span class="keyword">await</span> query(<span class="string">&quot;fishcc&quot;</span>, <span class="string">&quot;queryHistory&quot;</span>, <span class="keyword">new</span> <span class="built_in">Array</span>(req.query.fish))</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  channel:mychannel</span></span><br><span class="line"><span class="comment">*  chaincode:fishcc</span></span><br><span class="line"><span class="comment">*  fcn:updateHolder</span></span><br><span class="line"><span class="comment">*  fish:FISH0</span></span><br><span class="line"><span class="comment">*  holder:1111</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">app.post(<span class="string">&quot;/updateHolder&quot;</span>, <span class="keyword">async</span> (req, res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="keyword">await</span> invoke(req.body.channel, req.body.chaincode, req.body.fcn, [req.body.fish, req.body.holder]))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * channel:mychannel</span></span><br><span class="line"><span class="comment"> * chaincode:fishcc</span></span><br><span class="line"><span class="comment"> * fcn:recordFish</span></span><br><span class="line"><span class="comment"> * fish:FISH40</span></span><br><span class="line"><span class="comment"> * holder:1111</span></span><br><span class="line"><span class="comment"> * location:1.0000, 4.0000</span></span><br><span class="line"><span class="comment"> * temperature:22</span></span><br><span class="line"><span class="comment"> * timestamp:111111</span></span><br><span class="line"><span class="comment"> * vessel:辽宁号</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">app.post(<span class="string">&quot;/recordFish&quot;</span>, <span class="keyword">async</span> (req, res)=&gt;&#123;</span><br><span class="line">    res.send(</span><br><span class="line">        <span class="keyword">await</span> invoke(req.body.channel, req.body.chaincode, req.body.fcn,</span><br><span class="line">            [req.body.fish, req.body.holder, req.body.location, req.body.temperature, req.body.timestamp, req.body.vessel]</span><br><span class="line">        ));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fabric-couchdb配置</title>
    <link href="/2020/04/02/fabric-couchdb%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/04/02/fabric-couchdb%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在fabric中启动，端口为5984，ip:5984/_utils</p></blockquote><p>1、查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;selector&quot;: &#123;</span><br><span class="line">      &quot;_id&quot;: &#123;</span><br><span class="line">         &quot;$gt&quot;: &quot;FISH0&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、配置用户名密码: docker-compose.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">peer0.org1.example.com:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=</span></span><br><span class="line"></span><br><span class="line"><span class="attr">couchdb:</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">COUCHDB_USER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=</span></span><br></pre></td></tr></table></figure><p>3、yaml文件docker-compose-couchdb.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">byfn:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">couchdb0:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">couchdb0</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-couchdb</span></span><br><span class="line">    <span class="comment"># Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password</span></span><br><span class="line">    <span class="comment"># for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_USER=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=</span></span><br><span class="line">    <span class="comment"># Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,</span></span><br><span class="line">    <span class="comment"># for example map it to utilize Fauxton User Interface in dev environments.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5984:5984&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_STATEDATABASE=CouchDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984</span></span><br><span class="line">      <span class="comment"># The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD</span></span><br><span class="line">      <span class="comment"># provide the credentials for ledger to connect to CouchDB.  The username and password must</span></span><br><span class="line">      <span class="comment"># match the username and password set for the associated CouchDB.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">couchdb0</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">couchdb1:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">couchdb1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-couchdb</span></span><br><span class="line">    <span class="comment"># Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password</span></span><br><span class="line">    <span class="comment"># for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_USER=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=</span></span><br><span class="line">    <span class="comment"># Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,</span></span><br><span class="line">    <span class="comment"># for example map it to utilize Fauxton User Interface in dev environments.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6984:5984&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org1.example.com:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_STATEDATABASE=CouchDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1:5984</span></span><br><span class="line">      <span class="comment"># The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD</span></span><br><span class="line">      <span class="comment"># provide the credentials for ledger to connect to CouchDB.  The username and password must</span></span><br><span class="line">      <span class="comment"># match the username and password set for the associated CouchDB.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">couchdb1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">couchdb2:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">couchdb2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-couchdb</span></span><br><span class="line">    <span class="comment"># Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password</span></span><br><span class="line">    <span class="comment"># for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_USER=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=</span></span><br><span class="line">    <span class="comment"># Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,</span></span><br><span class="line">    <span class="comment"># for example map it to utilize Fauxton User Interface in dev environments.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7984:5984&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_STATEDATABASE=CouchDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb2:5984</span></span><br><span class="line">      <span class="comment"># The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD</span></span><br><span class="line">      <span class="comment"># provide the credentials for ledger to connect to CouchDB.  The username and password must</span></span><br><span class="line">      <span class="comment"># match the username and password set for the associated CouchDB.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">couchdb2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">couchdb3:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">couchdb3</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-couchdb</span></span><br><span class="line">    <span class="comment"># Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password</span></span><br><span class="line">    <span class="comment"># for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_USER=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=</span></span><br><span class="line">    <span class="comment"># Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,</span></span><br><span class="line">    <span class="comment"># for example map it to utilize Fauxton User Interface in dev environments.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8984:5984&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org2.example.com:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_STATEDATABASE=CouchDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb3:5984</span></span><br><span class="line">      <span class="comment"># The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD</span></span><br><span class="line">      <span class="comment"># provide the credentials for ledger to connect to CouchDB.  The username and password must</span></span><br><span class="line">      <span class="comment"># match the username and password set for the associated CouchDB.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">couchdb3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fabric开发者模式</title>
    <link href="/2020/04/02/fabric%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/04/02/fabric%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ol><li>docker-compose.yml</li></ol><p>command以及暴露7052端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Copyright IBM Corp All Rights Reserved</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">version: <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  basic:</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  ca.example.com:</span><br><span class="line">    image: hyperledger/fabric-ca</span><br><span class="line">    environment:</span><br><span class="line">      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server</span><br><span class="line">      - FABRIC_CA_SERVER_CA_NAME=ca.example.com</span><br><span class="line">      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem</span><br><span class="line">      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/4239aa0dcd76daeeb8ba0cda701851d14504d31aad1b2ddddbac6a57365e497c_sk</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;7054:7054&quot;</span><br><span class="line">    command: sh -c &#x27;fabric-ca-server start -b admin:adminpw&#x27;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config</span><br><span class="line">    container_name: ca.example.com</span><br><span class="line">    networks:</span><br><span class="line">      - basic</span><br><span class="line"></span><br><span class="line">  orderer.example.com:</span><br><span class="line">    container_name: orderer.example.com</span><br><span class="line">    image: hyperledger/fabric-orderer</span><br><span class="line">    environment:</span><br><span class="line">      - FABRIC_LOGGING_SPEC=info</span><br><span class="line">      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span><br><span class="line">      - ORDERER_GENERAL_GENESISMETHOD=file</span><br><span class="line">      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block</span><br><span class="line">      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span><br><span class="line">      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp</span><br><span class="line">    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer</span><br><span class="line">    command: orderer</span><br><span class="line">    ports:</span><br><span class="line">      - 7050:7050</span><br><span class="line">    volumes:</span><br><span class="line">        - ./config/:/etc/hyperledger/configtx</span><br><span class="line">        - ./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/:/etc/hyperledger/msp/orderer</span><br><span class="line">        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/msp/peerOrg1</span><br><span class="line">    networks:</span><br><span class="line">      - basic</span><br><span class="line"></span><br><span class="line">  peer0.org1.example.com:</span><br><span class="line">    container_name: peer0.org1.example.com</span><br><span class="line">    image: hyperledger/fabric-peer</span><br><span class="line">    environment:</span><br><span class="line">      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span><br><span class="line">      - CORE_PEER_ID=peer0.org1.example.com</span><br><span class="line">      - FABRIC_LOGGING_SPEC=info</span><br><span class="line">      - CORE_CHAINCODE_LOGGING_LEVEL=info</span><br><span class="line">      - CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/</span><br><span class="line">      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line">      # # the following setting starts chaincode containers on the same</span><br><span class="line">      # # bridge network as the peers</span><br><span class="line">      # # https://docs.docker.com/compose/networking/</span><br><span class="line">      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$&#123;COMPOSE_PROJECT_NAME&#125;_basic</span><br><span class="line">      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB</span><br><span class="line">      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb:5984</span><br><span class="line">      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD</span><br><span class="line">      # provide the credentials for ledger to connect to CouchDB.  The username and password must</span><br><span class="line">      # match the username and password set for the associated CouchDB.</span><br><span class="line">      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=</span><br><span class="line">      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=</span><br><span class="line">    working_dir: /opt/gopath/src/github.com/hyperledger/fabric</span><br><span class="line">    # command: peer node start</span><br><span class="line">    command: peer node start --peer-chaincodedev=true</span><br><span class="line">    ports:</span><br><span class="line">      - 7051:7051</span><br><span class="line">      - 7052:7052</span><br><span class="line">      - 7053:7053</span><br><span class="line">    volumes:</span><br><span class="line">        - /var/run/:/host/var/run/</span><br><span class="line">        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/msp/peer</span><br><span class="line">        - ./crypto-config/peerOrganizations/org1.example.com/users:/etc/hyperledger/msp/users</span><br><span class="line">        - ./config:/etc/hyperledger/configtx</span><br><span class="line">    depends_on:</span><br><span class="line">      - orderer.example.com</span><br><span class="line">      - couchdb</span><br><span class="line">    networks:</span><br><span class="line">      - basic</span><br><span class="line"></span><br><span class="line">  couchdb:</span><br><span class="line">    container_name: couchdb</span><br><span class="line">    image: hyperledger/fabric-couchdb</span><br><span class="line">    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password</span><br><span class="line">    # for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.</span><br><span class="line">    environment:</span><br><span class="line">      - COUCHDB_USER=</span><br><span class="line">      - COUCHDB_PASSWORD=</span><br><span class="line">    ports:</span><br><span class="line">      - 5984:5984</span><br><span class="line">    networks:</span><br><span class="line">      - basic</span><br><span class="line"></span><br><span class="line">  cli:</span><br><span class="line">    container_name: cli</span><br><span class="line">    image: hyperledger/fabric-tools</span><br><span class="line">    tty: true</span><br><span class="line">    environment:</span><br><span class="line">      - GOPATH=/opt/gopath</span><br><span class="line">      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span><br><span class="line">      - FABRIC_LOGGING_SPEC=info</span><br><span class="line">      - CORE_PEER_ID=cli</span><br><span class="line">      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line">      - CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">      - CORE_CHAINCODE_KEEPALIVE=10</span><br><span class="line">    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer</span><br><span class="line">    command: /bin/bash</span><br><span class="line">    volumes:</span><br><span class="line">        - /var/run/:/host/var/run/</span><br><span class="line">        - ./chaincode/:/opt/gopath/src/github.com/</span><br><span class="line">        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/</span><br><span class="line">    networks:</span><br><span class="line">        - basic</span><br><span class="line">    #depends_on:</span><br><span class="line">    #  - orderer.example.com</span><br><span class="line">    #  - peer0.org1.example.com</span><br><span class="line">    #  - couchdb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）start.sh</p><p>增加docker-compose up cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Copyright IBM Corp All Rights Reserved</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Exit on first error, print all commands.</span></span></span><br><span class="line">set -ev</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> don<span class="string">&#x27;t rewrite paths for Windows Git Bash users</span></span></span><br><span class="line">export MSYS_NO_PATHCONV=1</span><br><span class="line"></span><br><span class="line">docker-compose -f docker-compose.yml down</span><br><span class="line"></span><br><span class="line">docker-compose -f docker-compose.yml up -d ca.example.com orderer.example.com peer0.org1.example.com couchdb cli</span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> wait for Hyperledger Fabric to start</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> incase of errors when running later commands, issue export FABRIC_START_TIMEOUT=&lt;larger number&gt;</span></span></span><br><span class="line">export FABRIC_START_TIMEOUT=10</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">echo $&#123;FABRIC_START_TIMEOUT&#125;</span></span></span><br><span class="line">sleep $&#123;FABRIC_START_TIMEOUT&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Create the channel</span></span></span><br><span class="line">docker exec -e &quot;CORE_PEER_LOCALMSPID=Org1MSP&quot; -e &quot;CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp&quot; peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c mychannel -f /etc/hyperledger/configtx/channel.tx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Join peer0.org1.example.com to the channel.</span></span></span><br><span class="line">docker exec -e &quot;CORE_PEER_LOCALMSPID=Org1MSP&quot; -e &quot;CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp&quot; peer0.org1.example.com peer channel join -b mychannel.block</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>1）启动节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start.sh</span><br></pre></td></tr></table></figure><p>2）进入cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cli bash</span><br><span class="line">peer channel list</span><br></pre></td></tr></table></figure><p>3）编写智能合约</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir chaincode</span><br><span class="line">cd chaincode</span><br><span class="line">mkdir mycc </span><br><span class="line">cd mycc</span><br><span class="line">npm init</span><br><span class="line">npm install --save fabric-shim --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>4）智能合约代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shim = <span class="built_in">require</span>(<span class="string">&#x27;fabric-shim&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Chaincode = <span class="class"><span class="keyword">class</span></span>&#123;</span><br><span class="line">    <span class="comment">//链码初始化操作</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">Init</span>(<span class="params">stub</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = stub.getFunctionAndParameters();</span><br><span class="line">        <span class="keyword">var</span> args  = ret.params;</span><br><span class="line">        <span class="keyword">var</span> a = args[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> aValue = args[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> b = args[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">var</span> bValue = args[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">await</span>  stub.putState(a,Buffer.from(aValue));</span><br><span class="line">        <span class="keyword">await</span>  stub.putState(b,Buffer.from(bValue));</span><br><span class="line">        <span class="keyword">return</span> shim.success(Buffer.from(<span class="string">&#x27;heima chaincodinit successs&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">Invoke</span>(<span class="params">stub</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ret = stub.getFunctionAndParameters();</span><br><span class="line">        <span class="keyword">let</span> fcn = <span class="built_in">this</span>[ret.fcn];</span><br><span class="line">        <span class="keyword">return</span> fcn(stub,ret.params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询操作</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">query</span>(<span class="params">stub,args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> a = args[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> balance = <span class="keyword">await</span> stub.getState(a);</span><br><span class="line">        <span class="keyword">return</span> shim.success(balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">shim.start(<span class="keyword">new</span> Chaincode());</span><br></pre></td></tr></table></figure><ol start="5"><li>注册调用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注册，换成本机docker地址</span></span><br><span class="line">ifconfig</span><br><span class="line">172.18.0.1</span><br><span class="line">CORE_CHAINCODE_ID_NAME=&quot;mycc:v0&quot;  npm start -- --peer.address grpc://172.18.0.1:7052</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入cli</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装链码</span></span><br><span class="line">CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp peer chaincode install -l node -n mycc -v v0 -l node -p /opt/gopath/src/github.com/mycc/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实例化链码</span></span><br><span class="line">CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp peer chaincode instantiate -l node -n mycc -v v0 -C mychannel -c &#x27;&#123;&quot;args&quot;:[&quot;init&quot;,&quot;zzh&quot;,&quot;100&quot;,&quot;czbk&quot;,&quot;100&quot;]&#125;&#x27; -o 172.18.0.1:7050</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试代码</span></span><br><span class="line">CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp peer chaincode invoke -n mycc -C mychannel -c &#x27;&#123;&quot;args&quot;:[&quot;query&quot;,&quot;zzh&quot;]&#125;&#x27; -o 172.18.0.1:7050</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>手动搭建hyperledger fabric</title>
    <link href="/2020/03/29/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAhyperledger-fabric/"/>
    <url>/2020/03/29/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAhyperledger-fabric/</url>
    
    <content type="html"><![CDATA[<h2 id="Hyperledger-工作流程"><a href="#Hyperledger-工作流程" class="headerlink" title="Hyperledger 工作流程"></a>Hyperledger 工作流程</h2><p><img src="https://user-images.githubusercontent.com/17808702/77427465-6ff44400-6e11-11ea-8f1d-5a1ea6211ede.png" alt="image"></p><h2 id="Hyperledger-fabric-byfn-网络架构图"><a href="#Hyperledger-fabric-byfn-网络架构图" class="headerlink" title="Hyperledger fabric byfn 网络架构图"></a>Hyperledger fabric byfn 网络架构图</h2><p><img src="https://user-images.githubusercontent.com/17808702/77427349-315e8980-6e11-11ea-879a-44414b0be918.png" alt="image"></p><h2 id="手动创建end2end测试"><a href="#手动创建end2end测试" class="headerlink" title="手动创建end2end测试"></a>手动创建end2end测试</h2><p>1、创建 crypto-config.yaml, 写入</p><p>示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">  <span class="attr">Domain:</span> <span class="string">example.com</span></span><br><span class="line">  <span class="attr">Specs:</span></span><br><span class="line"><span class="attr">Hostname:</span> <span class="string">orderer</span></span><br><span class="line"><span class="comment">#- Name: Orderer2</span></span><br><span class="line"><span class="comment">#  Domain: example2.com</span></span><br><span class="line"><span class="comment">#  Specs:</span></span><br><span class="line"><span class="comment">#Hostname: orderer2</span></span><br><span class="line"><span class="attr">PeerOrgs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org1</span></span><br><span class="line"><span class="attr">Domain:</span> <span class="string">org1.example.com</span></span><br><span class="line"><span class="attr">Template:</span></span><br><span class="line"><span class="attr">Count:</span> <span class="number">2</span>  <span class="comment"># peer 节点的个数</span></span><br><span class="line"><span class="attr">Users:</span></span><br><span class="line"><span class="attr">Count:</span> <span class="number">1</span> <span class="comment"># 除admin外，user节点的个数 </span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org2</span></span><br><span class="line"><span class="attr">Domain:</span> <span class="string">org2.example.com</span></span><br><span class="line"><span class="attr">Template:</span></span><br><span class="line"><span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">Users:</span></span><br><span class="line"><span class="attr">Count:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"></span><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;OrdererOrgs&quot;</span> - Definition of organizations managing orderer nodes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line">OrdererOrgs:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Orderer</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line">  - Name: Orderer</span><br><span class="line">    Domain: example.com</span><br><span class="line">    EnableNodeOUs: true</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    # &quot;Specs&quot; - See PeerOrgs below for complete description</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    Specs:</span><br><span class="line">      - Hostname: orderer</span><br><span class="line">      - Hostname: orderer2</span><br><span class="line">      - Hostname: orderer3</span><br><span class="line">      - Hostname: orderer4</span><br><span class="line">      - Hostname: orderer5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;PeerOrgs&quot;</span> - Definition of organizations managing peer nodes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line">PeerOrgs:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Org1</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line">  - Name: Org1</span><br><span class="line">    Domain: org1.example.com</span><br><span class="line">    EnableNodeOUs: true</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    # &quot;Specs&quot;</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    # Uncomment this section to enable the explicit definition of hosts in your</span><br><span class="line">    # configuration.  Most users will want to use Template, below</span><br><span class="line">    #</span><br><span class="line">    # Specs is an array of Spec entries.  Each Spec entry consists of two fields:</span><br><span class="line">    #   - Hostname:   (Required) The desired hostname, sans the domain.</span><br><span class="line">    #   - CommonName: (Optional) Specifies the template or explicit override for</span><br><span class="line">    #                 the CN.  By default, this is the template:</span><br><span class="line">    #</span><br><span class="line">    #                              &quot;&#123;&#123;.Hostname&#125;&#125;.&#123;&#123;.Domain&#125;&#125;&quot;</span><br><span class="line">    #</span><br><span class="line">    #                 which obtains its values from the Spec.Hostname and</span><br><span class="line">    #                 Org.Domain, respectively.</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    # Specs:</span><br><span class="line">    #   - Hostname: foo # implicitly &quot;foo.org1.example.com&quot;</span><br><span class="line">    #     CommonName: foo27.org5.example.com # overrides Hostname-based FQDN set above</span><br><span class="line">    #   - Hostname: bar</span><br><span class="line">    #   - Hostname: baz</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    # &quot;Template&quot;</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    # Allows for the definition of 1 or more hosts that are created sequentially</span><br><span class="line">    # from a template. By default, this looks like &quot;peer%d&quot; from 0 to Count-1.</span><br><span class="line">    # You may override the number of nodes (Count), the starting index (Start)</span><br><span class="line">    # or the template used to construct the name (Hostname).</span><br><span class="line">    #</span><br><span class="line">    # Note: Template and Specs are not mutually exclusive.  You may define both</span><br><span class="line">    # sections and the aggregate nodes will be created for you.  Take care with</span><br><span class="line">    # name collisions</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    Template:</span><br><span class="line">      Count: 3</span><br><span class="line">      # Start: 5</span><br><span class="line">      # Hostname: &#123;&#123;.Prefix&#125;&#125;&#123;&#123;.Index&#125;&#125; # default</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    # &quot;Users&quot;</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    # Count: The number of user accounts _in addition_ to Admin</span><br><span class="line">    # ---------------------------------------------------------------------------</span><br><span class="line">    Users:</span><br><span class="line">      Count: 1</span><br><span class="line"><span class="meta">  #</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Org2: See <span class="string">&quot;Org1&quot;</span> <span class="keyword">for</span> full specification</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> ---------------------------------------------------------------------------</span></span><br><span class="line">  - Name: Org2</span><br><span class="line">    Domain: org2.example.com</span><br><span class="line">    EnableNodeOUs: true</span><br><span class="line">    Template:</span><br><span class="line">      Count: 3</span><br><span class="line">    Users:</span><br><span class="line">      Count: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash   cpp-generate.sh</span></span><br><span class="line"></span><br><span class="line">function one_line_pem &#123;</span><br><span class="line">    echo &quot;`awk &#x27;NF &#123;sub(/\\n/, &quot;&quot;); printf &quot;%s\\\\\\\n&quot;,$0;&#125;&#x27; $1`&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function json_ccp &#123;</span><br><span class="line">    local PP=$(one_line_pem $5)</span><br><span class="line">    local CP=$(one_line_pem $6)</span><br><span class="line">    sed -e &quot;s/\$&#123;ORG&#125;/$1/&quot; \</span><br><span class="line">        -e &quot;s/\$&#123;P0PORT&#125;/$2/&quot; \</span><br><span class="line">        -e &quot;s/\$&#123;P1PORT&#125;/$3/&quot; \</span><br><span class="line">        -e &quot;s/\$&#123;CAPORT&#125;/$4/&quot; \</span><br><span class="line">        -e &quot;s#\$&#123;PEERPEM&#125;#$PP#&quot; \</span><br><span class="line">        -e &quot;s#\$&#123;CAPEM&#125;#$CP#&quot; \</span><br><span class="line">        ccp-template.json </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function yaml_ccp &#123;</span><br><span class="line">    local PP=$(one_line_pem $5)</span><br><span class="line">    local CP=$(one_line_pem $6)</span><br><span class="line">    sed -e &quot;s/\$&#123;ORG&#125;/$1/&quot; \</span><br><span class="line">        -e &quot;s/\$&#123;P0PORT&#125;/$2/&quot; \</span><br><span class="line">        -e &quot;s/\$&#123;P1PORT&#125;/$3/&quot; \</span><br><span class="line">        -e &quot;s/\$&#123;CAPORT&#125;/$4/&quot; \</span><br><span class="line">        -e &quot;s#\$&#123;PEERPEM&#125;#$PP#&quot; \</span><br><span class="line">        -e &quot;s#\$&#123;CAPEM&#125;#$CP#&quot; \</span><br><span class="line">        ccp-template.yaml | sed -e $&#x27;s/\\\\n/\\\n        /g&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ORG=1</span><br><span class="line">P0PORT=7051</span><br><span class="line">P1PORT=8051</span><br><span class="line">CAPORT=7054</span><br><span class="line">PEERPEM=crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem</span><br><span class="line">CAPEM=crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem</span><br><span class="line"></span><br><span class="line">echo &quot;$(json_ccp $ORG $P0PORT $P1PORT $CAPORT $PEERPEM $CAPEM)&quot; &gt; connection-org1.json</span><br><span class="line">echo &quot;$(yaml_ccp $ORG $P0PORT $P1PORT $CAPORT $PEERPEM $CAPEM)&quot; &gt; connection-org1.yaml</span><br><span class="line"></span><br><span class="line">ORG=2</span><br><span class="line">P0PORT=9051</span><br><span class="line">P1PORT=10051</span><br><span class="line">CAPORT=8054</span><br><span class="line">PEERPEM=crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem</span><br><span class="line">CAPEM=crypto-config/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem</span><br><span class="line"></span><br><span class="line">echo &quot;$(json_ccp $ORG $P0PORT $P1PORT $CAPORT $PEERPEM $CAPEM)&quot; &gt; connection-org2.json</span><br><span class="line">echo &quot;$(yaml_ccp $ORG $P0PORT $P1PORT $CAPORT $PEERPEM $CAPEM)&quot; &gt; connection-org2.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、生成加密文件</p><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cryptogen generate --config=./crypto-config.yaml</span><br><span class="line">./cpp-gengerate.sh</span><br></pre></td></tr></table></figure><p>3、创建创世区块，创建时将现有参与者信息放入创世区块</p><blockquote><p>fabric-sample/config/configtx.yaml</p><p>​    Orderer：排序方式</p><p>​    Peer: 锚节点</p><p>​    性能优化（出块时间）</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Section: Organizations</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the different organizational identities which will</span></span><br><span class="line"><span class="comment">#   be referenced later in the configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SampleOrg defines an MSP using the sampleconfig.  It should never be used</span></span><br><span class="line">    <span class="comment"># in production but may be used as a template for other definitions</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;OrdererOrg</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">OrdererOrg</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">OrdererMSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># MSPDir is the filesystem path which contains the MSP configuration</span></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/ordererOrganizations/example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">        <span class="comment"># For organization policies, their canonical path is usually</span></span><br><span class="line">        <span class="comment">#   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">            <span class="attr">Readers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;OrdererMSP.member&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Writers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;OrdererMSP.member&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Admins:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;OrdererMSP.admin&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org1</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org1.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">        <span class="comment"># For organization policies, their canonical path is usually</span></span><br><span class="line">        <span class="comment">#   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">            <span class="attr">Readers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.admin&#x27;, &#x27;Org1MSP.peer&#x27;, &#x27;Org1MSP.client&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Writers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.admin&#x27;, &#x27;Org1MSP.client&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Admins:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.admin&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># leave this flag set to true.</span></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org2</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org2.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">        <span class="comment"># For organization policies, their canonical path is usually</span></span><br><span class="line">        <span class="comment">#   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">            <span class="attr">Readers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.admin&#x27;, &#x27;Org2MSP.peer&#x27;, &#x27;Org2MSP.client&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Writers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.admin&#x27;, &#x27;Org2MSP.client&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Admins:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.admin&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">9051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Capabilities</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the capabilities of fabric network. This is a new</span></span><br><span class="line"><span class="comment">#   concept as of v1.1.0 and should not be utilized in mixed networks with</span></span><br><span class="line"><span class="comment">#   v1.0.x peers and orderers.  Capabilities define features which must be</span></span><br><span class="line"><span class="comment">#   present in a fabric binary for that binary to safely participate in the</span></span><br><span class="line"><span class="comment">#   fabric network.  For instance, if a new MSP type is added, newer binaries</span></span><br><span class="line"><span class="comment">#   might recognize and validate the signatures from this type, while older</span></span><br><span class="line"><span class="comment">#   binaries without this support would be unable to validate those</span></span><br><span class="line"><span class="comment">#   transactions.  This could lead to different versions of the fabric binaries</span></span><br><span class="line"><span class="comment">#   having different world states.  Instead, defining a capability for a channel</span></span><br><span class="line"><span class="comment">#   informs those binaries without this capability that they must cease</span></span><br><span class="line"><span class="comment">#   processing transactions until they have been upgraded.  For v1.0.x if any</span></span><br><span class="line"><span class="comment">#   capabilities are defined (including a map with all capabilities turned off)</span></span><br><span class="line"><span class="comment">#   then the v1.0.x peer will deliberately crash.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Capabilities:</span></span><br><span class="line">    <span class="comment"># Channel capabilities apply to both the orderers and the peers and must be</span></span><br><span class="line">    <span class="comment"># supported by both.</span></span><br><span class="line">    <span class="comment"># Set the value of the capability to true to require it.</span></span><br><span class="line">    <span class="attr">Channel:</span> <span class="meta">&amp;ChannelCapabilities</span></span><br><span class="line">        <span class="comment"># V1.4.3 for Channel is a catchall flag for behavior which has been</span></span><br><span class="line">        <span class="comment"># determined to be desired for all orderers and peers running at the v1.4.3</span></span><br><span class="line">        <span class="comment"># level, but which would be incompatible with orderers and peers from</span></span><br><span class="line">        <span class="comment"># prior releases.</span></span><br><span class="line">        <span class="comment"># Prior to enabling V1.4.3 channel capabilities, ensure that all</span></span><br><span class="line">        <span class="comment"># orderers and peers on a channel are at v1.4.3 or later.</span></span><br><span class="line">        <span class="attr">V1_4_3:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># V1.3 for Channel enables the new non-backwards compatible</span></span><br><span class="line">        <span class="comment"># features and fixes of fabric v1.3</span></span><br><span class="line">        <span class="attr">V1_3:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># V1.1 for Channel enables the new non-backwards compatible</span></span><br><span class="line">        <span class="comment"># features and fixes of fabric v1.1</span></span><br><span class="line">        <span class="attr">V1_1:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Orderer capabilities apply only to the orderers, and may be safely</span></span><br><span class="line">    <span class="comment"># used with prior release peers.</span></span><br><span class="line">    <span class="comment"># Set the value of the capability to true to require it.</span></span><br><span class="line">    <span class="attr">Orderer:</span> <span class="meta">&amp;OrdererCapabilities</span></span><br><span class="line">        <span class="comment"># V1.4.2 for Orderer is a catchall flag for behavior which has been</span></span><br><span class="line">        <span class="comment"># determined to be desired for all orderers running at the v1.4.2</span></span><br><span class="line">        <span class="comment"># level, but which would be incompatible with orderers from prior releases.</span></span><br><span class="line">        <span class="comment"># Prior to enabling V1.4.2 orderer capabilities, ensure that all</span></span><br><span class="line">        <span class="comment"># orderers on a channel are at v1.4.2 or later.</span></span><br><span class="line">        <span class="attr">V1_4_2:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># V1.1 for Orderer enables the new non-backwards compatible</span></span><br><span class="line">        <span class="comment"># features and fixes of fabric v1.1</span></span><br><span class="line">        <span class="attr">V1_1:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Application capabilities apply only to the peer network, and may be safely</span></span><br><span class="line">    <span class="comment"># used with prior release orderers.</span></span><br><span class="line">    <span class="comment"># Set the value of the capability to true to require it.</span></span><br><span class="line">    <span class="attr">Application:</span> <span class="meta">&amp;ApplicationCapabilities</span></span><br><span class="line">        <span class="comment"># V1.4.2 for Application enables the new non-backwards compatible</span></span><br><span class="line">        <span class="comment"># features and fixes of fabric v1.4.2.</span></span><br><span class="line">        <span class="attr">V1_4_2:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># V1.3 for Application enables the new non-backwards compatible</span></span><br><span class="line">        <span class="comment"># features and fixes of fabric v1.3.</span></span><br><span class="line">        <span class="attr">V1_3:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># V1.2 for Application enables the new non-backwards compatible</span></span><br><span class="line">        <span class="comment"># features and fixes of fabric v1.2 (note, this need not be set if</span></span><br><span class="line">        <span class="comment"># later version capabilities are set)</span></span><br><span class="line">        <span class="attr">V1_2:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># V1.1 for Application enables the new non-backwards compatible</span></span><br><span class="line">        <span class="comment"># features and fixes of fabric v1.1 (note, this need not be set if</span></span><br><span class="line">        <span class="comment"># later version capabilities are set).</span></span><br><span class="line">        <span class="attr">V1_1:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for application related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the application side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Application policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/Application/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Capabilities:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Orderer</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for orderer related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Orderer:</span> <span class="meta">&amp;OrdererDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Orderer Type: The orderer implementation to start</span></span><br><span class="line">    <span class="comment"># Available types are &quot;solo&quot;,&quot;kafka&quot;  and &quot;etcdraft&quot;</span></span><br><span class="line">    <span class="attr">OrdererType:</span> <span class="string">solo</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer.example.com:7050</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch Timeout: The amount of time to wait before creating a batch</span></span><br><span class="line">    <span class="attr">BatchTimeout:</span> <span class="string">2s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch Size: Controls the number of messages batched into a block</span></span><br><span class="line">    <span class="attr">BatchSize:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Max Message Count: The maximum number of messages to permit in a batch</span></span><br><span class="line">        <span class="attr">MaxMessageCount:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Absolute Max Bytes: The absolute maximum number of bytes allowed for</span></span><br><span class="line">        <span class="comment"># the serialized messages in a batch.</span></span><br><span class="line">        <span class="attr">AbsoluteMaxBytes:</span> <span class="number">99</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Preferred Max Bytes: The preferred maximum number of bytes allowed for</span></span><br><span class="line">        <span class="comment"># the serialized messages in a batch. A message larger than the preferred</span></span><br><span class="line">        <span class="comment"># max bytes will result in a batch larger than preferred max bytes.</span></span><br><span class="line">        <span class="attr">PreferredMaxBytes:</span> <span class="number">512</span> <span class="string">KB</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Kafka:</span></span><br><span class="line">        <span class="comment"># Brokers: A list of Kafka brokers to which the orderer connects</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> Use IP:port notation</span></span><br><span class="line">        <span class="attr">Brokers:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># EtcdRaft defines configuration which must be set when the &quot;etcdraft&quot;</span></span><br><span class="line">    <span class="comment"># orderertype is chosen.</span></span><br><span class="line">    <span class="attr">EtcdRaft:</span></span><br><span class="line">        <span class="comment"># The set of Raft replicas for this network. For the etcd/raft-based</span></span><br><span class="line">        <span class="comment"># implementation, we expect every replica to also be an OSN. Therefore,</span></span><br><span class="line">        <span class="comment"># a subset of the host:port items enumerated in this list should be</span></span><br><span class="line">        <span class="comment"># replicated under the Orderer.Addresses key above.</span></span><br><span class="line">        <span class="attr">Consenters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">              <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt</span></span><br><span class="line">              <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer2.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">              <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt</span></span><br><span class="line">              <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer3.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">              <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt</span></span><br><span class="line">              <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer4.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">              <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt</span></span><br><span class="line">              <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer5.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">              <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt</span></span><br><span class="line">              <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the orderer side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Orderer policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/Orderer/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line">        <span class="comment"># BlockValidation specifies what signatures must be included in the block</span></span><br><span class="line">        <span class="comment"># from the orderer for the peer to validate it.</span></span><br><span class="line">        <span class="attr">BlockValidation:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   CHANNEL</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for channel related parameters.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Channel:</span> <span class="meta">&amp;ChannelDefaults</span></span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Channel policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="comment"># Who may invoke the &#x27;Deliver&#x27; API</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="comment"># Who may invoke the &#x27;Broadcast&#x27; API</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="comment"># By default, who may modify elements at this config level</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Capabilities describes the channel level capabilities, see the</span></span><br><span class="line">    <span class="comment"># dedicated Capabilities section elsewhere in this file for a full</span></span><br><span class="line">    <span class="comment"># description</span></span><br><span class="line">    <span class="attr">Capabilities:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelCapabilities</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Profile</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - Different configuration profiles may be encoded here to be specified</span></span><br><span class="line"><span class="comment">#   as parameters to the configtxgen tool</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">TwoOrgsOrdererGenesis:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">SampleConsortium:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">    <span class="attr">TwoOrgsChannel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">SampleDevModeKafka:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelCapabilities</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">OrdererType:</span> <span class="string">kafka</span></span><br><span class="line">            <span class="attr">Kafka:</span></span><br><span class="line">                <span class="attr">Brokers:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">kafka.example.com:9092</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">SampleConsortium:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">SampleMultiNodeEtcdRaft:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelCapabilities</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">OrdererType:</span> <span class="string">etcdraft</span></span><br><span class="line">            <span class="attr">EtcdRaft:</span></span><br><span class="line">                <span class="attr">Consenters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer.example.com</span></span><br><span class="line">                  <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">                  <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt</span></span><br><span class="line">                  <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer2.example.com</span></span><br><span class="line">                  <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">                  <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt</span></span><br><span class="line">                  <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer3.example.com</span></span><br><span class="line">                  <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">                  <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt</span></span><br><span class="line">                  <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer4.example.com</span></span><br><span class="line">                  <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">                  <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt</span></span><br><span class="line">                  <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer5.example.com</span></span><br><span class="line">                  <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">                  <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt</span></span><br><span class="line">                  <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt</span></span><br><span class="line">            <span class="attr">Addresses:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">orderer.example.com:7050</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">orderer2.example.com:7050</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">orderer3.example.com:7050</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">orderer4.example.com:7050</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">orderer5.example.com:7050</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">SampleConsortium:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、创建创世区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将每个参与者的公钥信息放到创世区块</span></span><br><span class="line">configtxgen -profile TwoOrgsOrdererGenesis -channelID byfn-sys-channel -outputBlock ./channel-artifacts/genesis.block</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个channel叫<span class="variable">$CHANNEL_NAME</span></span></span><br><span class="line">configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME  #mychannel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新org1锚节点</span></span><br><span class="line">configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新org2锚节点</span></span><br><span class="line">configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate \</span><br><span class="line">    ./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP</span><br></pre></td></tr></table></figure><p>5、启动节点</p><blockquote><p>docker-compose 脚本</p></blockquote><p>a) docker-compose-cli.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">  <span class="attr">peer1.org1.example.com:</span></span><br><span class="line">  <span class="attr">peer2.org1.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br><span class="line">  <span class="attr">peer1.org2.example.com:</span></span><br><span class="line">  <span class="attr">peer2.org2.example.com:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">byfn:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.example.com:</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>   <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">orderer.example.com</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.example.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer1.org1.example.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">peer2.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer2.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer2.org1.example.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1.org2.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer1.org2.example.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer2.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer2.org2.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer2.org2.example.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cli:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cli</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-tools:$IMAGE_TAG</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_CHANNEL=$SYS_CHANNEL</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GOPATH=/opt/gopath</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=cli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./../chaincode/:/opt/gopath/src/github.com/chaincode</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer2.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1.org2.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer2.org2.example.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>b) docker-compose-base.yaml—&gt;base文件夹下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">orderer-base</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer.example.com:/var/hyperledger/production/orderer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7050</span><span class="string">:7050</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer-base</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peer0.org1.example.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7051</span><span class="string">:7051</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer-base</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer1.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer1.org1.example.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer2.org1.example.com:9051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peer1.org1.example.com:/var/hyperledger/production</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8051</span><span class="string">:8051</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">peer2.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer2.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer-base</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer2.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer2.org1.example.com:9051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:9051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer2.org1.example.com:9052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.org1.example.com:9051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org1.example.com/peers/peer2.org1.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org1.example.com/peers/peer2.org1.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peer2.org1.example.com:/var/hyperledger/production</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9051</span><span class="string">:9051</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer-base</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.org2.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org2.example.com:10051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:10051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:10052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:10052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:10051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:11051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org2MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peer0.org2.example.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10051</span><span class="string">:10051</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1.org2.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer-base</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer1.org2.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer1.org2.example.com:11051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:11051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:11052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:11052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:11051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer2.org2.example.com:12051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org2MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peer1.org2.example.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">11051</span><span class="string">:11051</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer2.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer2.org2.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer-base</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer2.org2.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer2.org2.example.com:12051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:12051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer2.org2.example.com:12052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:12052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.org2.example.com:12051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:10051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org2MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org2.example.com/peers/peer2.org2.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org2.example.com/peers/peer2.org2.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peer2.org2.example.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">12051</span><span class="string">:12051</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line">version: &#x27;2&#x27;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  byfn:</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  ca0:</span><br><span class="line">    image: hyperledger/fabric-ca:$IMAGE_TAG</span><br><span class="line">    environment:</span><br><span class="line">      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server</span><br><span class="line">      - FABRIC_CA_SERVER_CA_NAME=ca-org1</span><br><span class="line">      - FABRIC_CA_SERVER_TLS_ENABLED=true</span><br><span class="line">      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem</span><br><span class="line">      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/$&#123;BYFN_CA1_PRIVATE_KEY&#125;</span><br><span class="line">      - FABRIC_CA_SERVER_PORT=7054</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;7054:7054&quot;</span><br><span class="line">    command: sh -c &#x27;fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/$&#123;BYFN_CA1_PRIVATE_KEY&#125; -b admin:adminpw -d&#x27;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config</span><br><span class="line">    container_name: ca_peerOrg1</span><br><span class="line">    networks:</span><br><span class="line">      - byfn</span><br><span class="line"></span><br><span class="line">  ca1:</span><br><span class="line">    image: hyperledger/fabric-ca:$IMAGE_TAG</span><br><span class="line">    environment:</span><br><span class="line">      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server</span><br><span class="line">      - FABRIC_CA_SERVER_CA_NAME=ca-org2</span><br><span class="line">      - FABRIC_CA_SERVER_TLS_ENABLED=true</span><br><span class="line">      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem</span><br><span class="line">      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/$&#123;BYFN_CA2_PRIVATE_KEY&#125;</span><br><span class="line">      - FABRIC_CA_SERVER_PORT=8054</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8054:8054&quot;</span><br><span class="line">    command: sh -c &#x27;fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/$&#123;BYFN_CA2_PRIVATE_KEY&#125; -b admin:adminpw -d&#x27;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config</span><br><span class="line">    container_name: ca_peerOrg2</span><br><span class="line">    networks:</span><br><span class="line">      - byfn</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export IMAGE_TAG=latest</span><br><span class="line">export COMPOSE_PROJECT_NAME=net</span><br><span class="line">docker-compose -f docker-compose-cli.yaml -f docker-compose-ca.yaml up -d # -d 后台启动</span><br><span class="line"><span class="meta">#</span><span class="bash"> Sleeping 15s to allow Raft cluster to complete booting</span></span><br><span class="line">sleep 15</span><br></pre></td></tr></table></figure><p>6、创建通道</p><p>a) 进入cli容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cli bash</span><br></pre></td></tr></table></figure><p>b) 切换路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/gopath/src/github.com/hyperledger/fabric/peer</span><br></pre></td></tr></table></figure><p>c) 创建通道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/</span><br><span class="line">peer channel create -o orderer.example.com:7050 -c mychannel -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem </span><br></pre></td></tr></table></figure><p>d) 加入通道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer0org1</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer1org1</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer1.org1.example.com:8051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer2org1</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer2.org1.example.com:9051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer2.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer0org2</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer0.org2.example.com:10051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer1org2</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer1.org2.example.com:11051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer2org2</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer2.org2.example.com:12051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer2.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/</span><br><span class="line">peer channel join -b mychannel.block</span><br></pre></td></tr></table></figure><p>e）更新锚节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0.org2.example.com:9051</span><br><span class="line"></span><br><span class="line">peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org2MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem </span><br></pre></td></tr></table></figure><p>F)  安装链码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer0org1</span></span><br><span class="line">export CC_SRC_PATH=&quot;/opt/gopath/src/github.com/chaincode/chaincode_example02/node/&quot;</span><br><span class="line">export CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/</span><br><span class="line">peer chaincode install -n mycc -v 1.0 -l node -p $&#123;CC_SRC_PATH&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> peer chaincode install -n mycc -v 1.0 -l node -p 智能合约代码的路径 <span class="comment"># -n 名字 -v 版本</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer1org1</span></span><br><span class="line">export CC_SRC_PATH=&quot;/opt/gopath/src/github.com/chaincode/chaincode_example02/node/&quot;</span><br><span class="line">export CORE_PEER_ADDRESS=peer1.org1.example.com:8051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/</span><br><span class="line">peer chaincode install -n mycc -v 1.0 -l node -p $&#123;CC_SRC_PATH&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer2org1</span></span><br><span class="line">export CC_SRC_PATH=&quot;/opt/gopath/src/github.com/chaincode/chaincode_example02/node/&quot;</span><br><span class="line">export CORE_PEER_ADDRESS=peer2.org1.example.com:9051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer2.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/</span><br><span class="line">peer chaincode install -n mycc -v 1.0 -l node -p $&#123;CC_SRC_PATH&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer0org2</span></span><br><span class="line">export CC_SRC_PATH=&quot;/opt/gopath/src/github.com/chaincode/chaincode_example02/node/&quot;</span><br><span class="line">export CORE_PEER_ADDRESS=peer0.org2.example.com:10051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/</span><br><span class="line">peer chaincode install -n mycc -v 1.0 -l node -p $&#123;CC_SRC_PATH&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer1org2</span></span><br><span class="line">export CC_SRC_PATH=&quot;/opt/gopath/src/github.com/chaincode/chaincode_example02/node/&quot;</span><br><span class="line">export CORE_PEER_ADDRESS=peer1.org2.example.com:11051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/</span><br><span class="line">peer chaincode install -n mycc -v 1.0 -l node -p $&#123;CC_SRC_PATH&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> peer2org2</span></span><br><span class="line">export CC_SRC_PATH=&quot;/opt/gopath/src/github.com/chaincode/chaincode_example02/node/&quot;</span><br><span class="line">export CORE_PEER_ADDRESS=peer2.org2.example.com:12051</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer2.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/</span><br><span class="line">peer chaincode install -n mycc -v 1.0 -l node -p $&#123;CC_SRC_PATH&#125;</span><br></pre></td></tr></table></figure><p>**Tips:**安装失败时，要到对应的peer节点容器下删除链码才能重新安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec containername/id -it /bin/sh</span><br><span class="line">rm -rf /var/hyperledger/production/chaincodes/&lt;ccname&gt;:&lt;ccversion&gt;</span><br></pre></td></tr></table></figure><p>G) 实例化链码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer0.org2</span></span><br><span class="line">CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org2.example.com:10051</span><br><span class="line">ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem </span><br><span class="line">CHANNEL_NAME=mychannel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -o order节点 -P 背书节点</span></span><br><span class="line">peer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -l node -v 1.0 -c &#x27;&#123;&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]&#125;&#x27; -P &quot;AND (&#x27;Org1MSP.peer&#x27;,&#x27;Org2MSP.peer&#x27;)&quot; </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例shell</span></span><br><span class="line">peer chaincode instantiate -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc -l node -v 1.0 -c &#x27;&#123;&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]&#125;&#x27; -P &#x27;AND (&#x27;\&#x27;&#x27;Org1MSP.peer&#x27;\&#x27;&#x27;,&#x27;\&#x27;&#x27;Org2MSP.peer&#x27;\&#x27;&#x27;)&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>H) 查询链码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer2.org1</span></span><br><span class="line">CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer2.org1.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">CORE_PEER_ADDRESS=peer2.org1.example.com:9051</span><br><span class="line">ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem </span><br><span class="line">CHANNEL_NAME=mychannel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peer chaincode query -C $CHANNEL_NAME -n mycc -c &#x27;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>I) 更新链码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer0.org2</span></span><br><span class="line">CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org2.example.com:10051</span><br><span class="line">ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem </span><br><span class="line">CHANNEL_NAME=mychannel</span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer.example.com:7050 -C $CHANNEL_NAME -n mycc  -c &#x27;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]&#125;&#x27; --tls --cafile $ORDERER_CA</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例shell   Sending invoke transaction on peer0.org1 peer0.org2...</span></span><br><span class="line">peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &#x27;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="出错怎么办？"><a href="#出错怎么办？" class="headerlink" title="出错怎么办？"></a>出错怎么办？</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop  $(docker ps -aq)</span><br><span class="line">docker rm  $(docker ps -aq)</span><br><span class="line">docker network prune</span><br><span class="line">docker volume prune</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>you-get下载视频</title>
    <link href="/2020/03/08/you-get%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/"/>
    <url>/2020/03/08/you-get%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p>首先，<a href="https://github.com/soimort/you-get">机票</a></p><p>这里是为什么你可能想使用它：</p><ul><li>你喜欢在互联网上的东西，只是想下载为自己的快乐。</li><li>您可以通过计算机在线观看自己喜爱的视频，但不能保存。你觉得你不能控制自己的电脑。（这不是一个开放的网络应该如何工作</li><li>您希望摆脱任何封闭源代码技术或专有JavaScript代码，并禁止在您的计算机上运行Flash等操作。</li><li>你是一个黑客文化和自由软件的坚持</li></ul><p>you-get可以为您做什么：</p><ul><li>从流行的网站（如YouTube，优酷，Niconico等）下载视频/音频。（查看<a href="https://link.jianshu.com/?t=https://you-get.org/#supported-sites">支持的网站</a>的<a href="https://link.jianshu.com/?t=https://you-get.org/#supported-sites">完整列表</a>）</li><li>在媒体播放器中串流播放线上影片。没有网络浏览器，没有更多的广告</li><li>通过抓取网页下载图像（感兴趣的）</li><li>下载任意非HTML内容，即二进制文件</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BeamBand-Hand Gesture Sensing with Ultrasonic Beamforming</title>
    <link href="/2020/02/27/BeamBand-Hand-Gesture-Sensing-with-Ultrasonic-Beamforming/"/>
    <url>/2020/02/27/BeamBand-Hand-Gesture-Sensing-with-Ultrasonic-Beamforming/</url>
    
    <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>BeamBand是一种手腕佩戴系统，使用超声波波束形成的手势感应。使用一组安置在手腕上的小型换能器，我们可以集成声波前缘，以特定的角度和焦距投射声波能量。这使得我们可以从多个角度，以一种类似光栅扫描的方式，用听不清的声音来研究手的表面几何结构。我们使用产生的特征反射来识别8帧每秒的手部姿势。在我们的用户研究中，我们发现BeamBand支持六类手势设置，其精确度为94.6%。即使在整个过程中，当传感器被移除并重新戴上之后，准确率仍然很高:89.4%。我们描述了我们的软件和硬件，以及未来集成到设备，如智能手表和VR控制器的途径。</p><h2 id="1、Introduction"><a href="#1、Introduction" class="headerlink" title="1、Introduction"></a>1、Introduction</h2><p>无论是智能手表还是AR/VR系统，强大的手势检测都有望丰富用户界面，提高沉浸感。不幸的是，在不使用手的情况下识别手势(例如，手套，控制器)已经被证明是具有挑战性的，这激发了识别新方法的需求。之前的研究包括利用肌电图，生物技术，电阻抗断层成像，轮廓感知，和磨损相机。虽然每种方法都有其优点和缺点，但一个共同的缺点是用户和会话之间的鲁棒准确性。</p><p>在这篇文章中，我们介绍了我们在BeamBand上的工作，这是一种利用声波束形成的用于佩戴手势感知的新方法。我们使用沿手腕轮廓布置的小型空中超声波传感器(图1A)，它提供了一个稳定的有利位置来捕捉手部姿势。利用主动波束形成技术，我们将超声引导和聚焦到手部感兴趣的区域(图1B)。我们还将我们的传感器进行多路复用，从稍微不同的角度捕获波束形成的反射(图1B)，为机器学习驱动的手势识别提供丰富的信号(图1C)。</p><p>为了评估BeamBand的识别性能，我们进行了一项10人参与的研究，采用了文献中的两个手势集，以便进行直接比较(即，而不是开发自定义集)。第一组包含七个手部姿势，而第二组有六个沿着三个旋转轴的关节。在这两个手势集上，BeamBand的准确率分别为92.5%和94.6%。更独特的是，在摘除和重新戴上带子后，准确率仍然很高，分别为86.0%和89.4%。</p><p><img src="https://user-images.githubusercontent.com/17808702/75416648-d482c700-5969-11ea-9eb4-0ade600449dd.png" alt="image"></p><h2 id="2、Related-work"><a href="#2、Related-work" class="headerlink" title="2、Related work"></a>2、Related work</h2><p>首先，我们回顾与手势识别应用领域相关的先前工作。然后我们开始使用声学反射测量法，特别关注HCI文献。最后，我们更详细地讨论了波束形成，因为这是我们的主要技术方法，并回顾了在HCI领域中使用它的少数系统。</p><h3 id="2-1-Hand-Gesture-Sensing"><a href="#2-1-Hand-Gesture-Sensing" class="headerlink" title="2.1 Hand Gesture Sensing"></a>2.1 Hand Gesture Sensing</h3><p>手的姿态和运动的健壮感知一直是HCI的一个长期目标。最直接的方法是直接测量双手，例如，手套中含有加速计、应变计和电容传感器。这些方法通常将传感器放置在适合其手势任务的位置。例如，Perng等人的把加速度计放在指尖，以进行交互，例如指向和哪根手指被举起。Whitmire等人使用导电织物作为电容传感器来检测手指和拇指之间的相互作用。</p><p>稍微不那么显眼和有侵略性的是那些试图从手腕或手臂感知手的系统。BeamBand就属于这一类。最流行的方法之一是使用光学传感器来检测用户手势时手部的几何变化。例如，腕旋使用一组红外近距离传感器来检测手相对于手腕的角度。另一种光学方法是使用摄像机观察手势并重建手部的三维模型。摄像机也可以安装在头戴式显示器上。还有大量的研究利用压力、红外和电容传感器来利用手臂轮廓的变化。</p><p>除了查询手的外部状态外，人们还利用身体内部的信号来确定手的状态。一种常用的方法是肌电描记术(EMG)，它能被动地检测肌肉收缩发出的电信号。主动感知也被探索过，如电阻抗断层成像，它被用来感知手臂内部结构的变化，用于手势感知。</p><p>与BeamBand最相关的是使用声信号的方法。例如，Amento等人的[1]、Hambone[8]、Skinput[15]和触觉老师[16]将被动的声学传感器置于皮肤上，以听由手指轻敲、轻弹和挤压产生的微振动。最近，研究表明，现成的智能手表也可以检测这些信号。方法和[46]提供了一个很好的调查手腕磨损的传感方法(包括声学)。</p><h3 id="2-2-Acoustic-Reflectometry-in-HCI"><a href="#2-2-Acoustic-Reflectometry-in-HCI" class="headerlink" title="2.2 Acoustic Reflectometry in HCI"></a>2.2 Acoustic Reflectometry in HCI</h3><p>BeamBand是建立在超声反射测量原理上的，它通过发射结构声波和测量反射信号来检测感兴趣的物体。声音的飞行时间可以用来推断物体的距离，这是可以得到的最基本的信息。一个例子是单发射极声纳，它已经在海洋应用中使用了大约一个世纪，还有回声定位，动物使用的时间要长得多。除了飞行时间，反射的振幅(包括不同频率的非线性阻尼)和多路径效应也可以揭示环境的各个方面(例如，材料属性、房间几何形状)。</p><p>在HCI文献中，声学反射法最常见的形式是用于测距的低成本声纳传感器。例如，“触摸之声”[31]和“指压”[53]都使用体内声纳探测手势。在空气声呐传感器中，指向身体的[25]探测用户手臂上的触摸输入。通过测量反射的多普勒频移来检测手势[3]和在前臂[31]上的划动(HCI中超声多普勒传感的测量见[36])。</p><h3 id="2-3-Acoustic-Beamforming"><a href="#2-3-Acoustic-Beamforming" class="headerlink" title="2.3 Acoustic Beamforming"></a>2.3 Acoustic Beamforming</h3><p>波束形成可以在任何传输介质中实现，尽管它最常应用于无线电波(如雷达、无线通信)和声音(如医用超声)。当多个波前被创造，信号经历建设性和破坏性的干扰，这可以用来形成受控的能量束，因此这项技术的名字。参见图2和视频图，以获得简明的视觉入门知识(以获得更全面的背景知识)。波束形成也可以反过来使用。[30]，使用一组被动接收器，例如，定位房间内的声音[2]或手指快照[14]。</p><p>在工作中最类似波束带的是海上应用的多发射极/接收器拖曳声呐阵列。在单发射极声纳(不管接收器的数量)中，遇到的第一个物体通常反射最大的信号。然而，有了多个发射器，就有可能协调波束形成“ping信号”，将能量聚焦在不同距离的感兴趣区域。这类似于医学超声[11]，它使用波束形成来聚焦身体特定深度的声波能量，然后本质上是光栅扫描来产生一个二维图像(在EchoFlex中用于手势感知)。这些装置花费数千美元，使用MHz范围的超声波，并且需要液体或凝胶来连接传感介质。BeamBand使用较低频率的40khz超声波，它可以更容易地在空气中传播，并与表面相互作用，而无需使用界面介质。超声波束形成也被用于触觉和空气悬浮在HCI文献。</p><p><img src="https://user-images.githubusercontent.com/17808702/75419620-38f55480-5971-11ea-89fd-824c47f1babd.png" alt="image"></p><h2 id="3、PILOT-EXPERIMENTS"><a href="#3、PILOT-EXPERIMENTS" class="headerlink" title="3、PILOT EXPERIMENTS"></a>3、PILOT EXPERIMENTS</h2><p>在开发我们的系统之前，我们试图更好地理解波束形成是如何在多发射极机载装置中工作的。我们从软件模拟开始，改变7个均匀间隔的发射器的相对相位，输出40 kHz波(室温空气中1020mbar的~8.5 mm波长)，使我们能够控制波前的角度和焦点(图2，顶部)。为了验证我们的理论模型，我们还进行了真实世界的物理实验，捕捉更复杂的相互作用，如传感器阻抗失配、多路径干扰和环境噪声。我们的物理传感器阵列匹配我们的软件模拟:七个均匀间隔，40khz的传感器。和以前一样，我们改变了发射源的相对相位，以创建不同的发射角和焦距。</p><p>为了捕获和可视化超声波，我们在数控龙门架上安装了一个内部相关的传感器。我们在12.4×12.4厘米的正方形范围内沿着4毫米的网格移动这个龙门架。在网格上的每个点上，传感器阵列将以指定的角度或焦距产生光束，传感器将记录该位置的声波交互作用。然后，机架将移动到网格中的下一个点，传感器阵列将重复相同的发射模式，传感器将再次进行记录。重复此过程，直到记录所有网格位置。一旦完成，所有波形可以同步重播，以可视化波前传播(见图2和视频图)。我们发现我们的软件和物理模型通常是匹配的(参见图2中的例子)。</p><p>在这一阶段的发展，我们也测试了许多不同的超声换能器与不同的功率，物理尺寸，和波束宽度。为了评估性能，我们把两个相同的换能器放在相距1厘米的地方，相互连接。一个驱动在100 Vpp，而另一个是由发射驱动。结果表明，接收信号最高的换能器具有最佳的发射效率和空气阻抗匹配。我们最终选择了[35]，这是一种直径为12.8 mm、谐振频率为40 kHz、波束宽度为70°的传感器。</p><p><img src="https://user-images.githubusercontent.com/17808702/75420939-216b9b00-5974-11ea-809b-23fcf9da053d.png" alt="image"></p><h2 id="4、IMPLEMENTATION"><a href="#4、IMPLEMENTATION" class="headerlink" title="4、IMPLEMENTATION"></a>4、IMPLEMENTATION</h2><p>BeamBand由三个主要组件组成。首先是我们的自定义传感器板(图3)，它生成、捕获和处理超声波信号。接下来是一个传感器带，它包含发射和接收信号的超声波传感器(图1A)。我们的概念验证硬件的总成本是220美元。最后，我们有基于膝上型电脑的软件，它从硬件接收数据并执行进一步的处理和机器学习。我们现在更详细地描述这些元素。</p><p><img src="https://user-images.githubusercontent.com/17808702/75421494-588e7c00-5975-11ea-8960-fe3232a0cb37.png" alt="image"></p><h3 id="4-1-Sensor-Board-and-Transducers"><a href="#4-1-Sensor-Board-and-Transducers" class="headerlink" title="4.1 Sensor Board and Transducers"></a>4.1 Sensor Board and Transducers</h3><p>我们使用8个40 kHz的空中超声压电换能器。单个传感装置包括使用7个换能器发射单个强脉冲，每个换能器具有指定的相移。为了用软件控制的波形来驱动这些传感器，我们构建了一个定制的传感器电路(图3)，它有三个主要组件:高压EMCO SIP100 DC-DC功率调节器[9]、高压放大器和多路模拟前端。一个微小的3.6被用来控制传感器电路[40]，我们超频到240兆赫。</p><p>我们配置微控制器来切换它的数字插脚，产生3.3 Vpp 40 kHz的方波。这个信号被放大到100 Vpp来驱动传感器。为了尽量减少跨通道干扰和开关开销，每个传感器都有专门的放大器。为了实现精确的波束形成，我们需要严格控制发射时间。为了最小化延迟，我们直接写入微控制器的I/O映射寄存器，允许我们在一个时钟周期(4.17 ns)中同时切换8个输出引脚。这种严密的控制使我们能够以~0.1°的粒度操作传感器的相对相位。</p><p>为了捕获反射的超声波，一个未使用的转换器被配置成一个接收器。在其他7个换能器的点火过程中，我们将换能器固定在地面上，这有助于防止由于声耦合和电噪声引起的误动作。点火完成后，我们断开夹具，将接收传感器连接到模拟前端。然后，我们通过一个固定增益(fc=39 kHz, G=5)的有源高通滤波器传递信号，附加一个增益可调至40倍的放大级。放大后的信号由直流偏置至VADC/2，由单片机的16位ADC以333 kHz采样。所有捕获的波形数据都通过USB传输到笔记本电脑上进行进一步的计算。</p><h3 id="4-2-Power-Consumption"><a href="#4-2-Power-Consumption" class="headerlink" title="4.2 Power Consumption"></a>4.2 Power Consumption</h3><p>我们没有优化我们的概念验证硬件的功耗，这是通过它的USB连接5V供电。尽管如此，我们还是测量了电流:大约400mA。在总电流中，250mA来自我们的超频小3.6板(100mA时不超频)。我们的DC-DC转换器消耗大约140mA，其中大部分是转换损耗。所有其他元件，包括我们的换能器，消耗~10mA。</p><h3 id="4-3-Transducer-Band"><a href="#4-3-Transducer-Band" class="headerlink" title="4.3 Transducer Band"></a>4.3 Transducer Band</h3><p>如图1所示，我们制作了一个可以戴在手臂或手腕上的带子。我们将8个传感器按马蹄形排列，沿着手臂的轮廓，在皮肤表面上方约1cm处。该带是由EVA泡沫[42]制成，以实现更大的一致性和减少传感器之间的声耦合。用一个可调节的橡皮筋把传感器固定在用户身上。我们选择不包括任何针对手背的传感器，因为手指通常向内连接。值得注意的是，这种布置与我们的物理模拟略有不同(传感器布置成线性阵列);我们用马蹄形布局重新运行了我们的物理模拟，发现波束形成的一致性和分辨率有轻微的偏差。然而，我们认为马蹄铁的紧凑安排超过了这一次要影响。</p><h3 id="4-4-Beamforming"><a href="#4-4-Beamforming" class="headerlink" title="4.4 Beamforming"></a>4.4 Beamforming</h3><p>我们选择了5个角度进行波束形成(-45°、-22.5°、0°、+22.5°、+45°)，如图1B所示，这些角度覆盖了手指和手腕运动的典型范围。我们也关注3处距离(图1B): 2厘米，大致与手掌底部相关;8厘米，大致与手指底部相关;和无限聚焦，以捕捉更遥远的特征，如指尖。无限聚焦和0°是相同的波束形成模式，因此，每一轮感知总共包含7个独特的波束形成发射。</p><h3 id="4-5-Acoustic-Viewpoints-amp-Waveforms"><a href="#4-5-Acoustic-Viewpoints-amp-Waveforms" class="headerlink" title="4.5 Acoustic Viewpoints &amp; Waveforms"></a>4.5 Acoustic Viewpoints &amp; Waveforms</h3><p>在任何给定的时间，七个传感器作为发射机，一个作为接收器。传感器板循环通过所有的收发组合，从而产生8种配置。对于每个换能器配置，我们发射全部7个波束形成发射，捕获500个反射波形样本(333 kHz采样率)，代表1.5 ms的数据。总的来说，这个过程产生56个记录波形(8种配置7种波束形成序列)，我们称之为“传感帧”(如图1B所示)。</p><p><img src="https://user-images.githubusercontent.com/17808702/75423470-bae97b80-5979-11ea-8e21-2498b6787e91.png" alt="image"></p><h3 id="4-6-Framerate"><a href="#4-6-Framerate" class="headerlink" title="4.6 Framerate"></a>4.6 Framerate</h3><p>每个波束形成发射序列生成和发射时间为0.5 ms，数据采集时间为1.5 ms。因此，覆盖一个完整的传感器框架(56个波形)需要112毫秒。这导致~8个完整的传感器帧每秒。</p><p>出于实验目的，我们捕获了非常大的缓冲区，以查看在更长的范围内是否有有趣的反射。然而，我们的研究(也可以从图4中看到)显示，大多数信号的返回时间都在0.8毫秒之内，如果我们缩短到这个较小的记录周期，帧率就会增加到14赫兹左右。它也可以预先生成波束形成序列并将其存储在内存中，这将进一步节省每帧约28毫秒，并将帧率提高到约22赫兹。进一步的优化可以包括emis的时间复用，这样一个在飞行而另一个返回。</p><p><img src="https://user-images.githubusercontent.com/17808702/75425874-83310280-597e-11ea-9e26-70a1215af1c4.png" alt="image"></p><h3 id="4-7-Features-and-Machine-Learning"><a href="#4-7-Features-and-Machine-Learning" class="headerlink" title="4.7 Features and Machine Learning"></a>4.7 Features and Machine Learning</h3><p>我们的机器学习管道首先将硬件捕获的56个输入波形转换成特征。我们将每个波形分割成20个bin，并以每个bin的标准差为特征，得到1120个值。我们使用Scikit-learn的随机森林(默认参数，500棵树)[33]进行分类。所有任务都在标准配置的2013款MacBook Pro 15上完成。</p><h2 id="5、GESTURE-SET"><a href="#5、GESTURE-SET" class="headerlink" title="5、GESTURE SET"></a>5、GESTURE SET</h2><p>我们并没有发明一个自定义的手势集，而是特意从文献中选择采用两个手势集来减少设计偏差，并使系统之间能够进行直接比较。第一个是Tomo[50]中定义的手势集。图5(绿色下划线)描述了这七个手势(放松+六个“手势”)。我们还采用了Jung等人定义的手势集[18]，该手势集使手沿着三个轴(两个手腕轴和一个手指轴)伸展或弯曲。图5(紫色下划线)描述了这六种手势。我们在后面的文本中将这个手势设置为“六轴”。注意这些手势集有四种常见的手势，右=手腕弯曲，左=手腕外展，拳头=手指弯曲，放松=手指伸展</p><p><img src="https://user-images.githubusercontent.com/17808702/75424512-b8882100-597b-11ea-9ba2-f030a77fc1a9.png" alt="image"></p><h2 id="6、EVALUATION"><a href="#6、EVALUATION" class="headerlink" title="6、EVALUATION"></a>6、EVALUATION</h2><p>在这项研究中，我们评估了BeamBand的手势分类性能。我们招募了10名参与者(4名女性，平均年龄25岁)，他们的平均手腕直径为5.5厘米(SD=0.8)。这项研究花了大约一个小时完成，花费了20美元。</p><h3 id="6-1-Procedure"><a href="#6-1-Procedure" class="headerlink" title="6.1 Procedure"></a>6.1 Procedure</h3><p>参与者在他们非惯用的手腕上戴着束带。(比如手表)。我们所有的参与者都是右撇子，所以束带戴在了左手腕上。每一轮的数据收集包括每一个手势，以随机的顺序执行一次。每个手势保持几秒钟，在此期间记录10个传感器帧。一次会议包括十轮数据收集。为了增加多样性和真实性，我们为每个用户收集了两个会话的数据，其间移除和重新佩戴传感器。这个过程产生了18000个传感器帧(10个传感器帧 9个手势 10轮 2个会话 10个参与者)。</p><h3 id="6-2-Within-Session-Accuracy"><a href="#6-2-Within-Session-Accuracy" class="headerlink" title="6.2 Within-Session Accuracy"></a>6.2 Within-Session Accuracy</h3><p>为了模拟系统在首次佩戴时进行校准时的手势识别性能，我们进行了一项leave-one-round-out交叉验证，我们在一个会话中进行了九轮训练，并在第十轮(所有组合)进行了测试。我们独立地对两个阶段重复这一步骤，并取平均值。在完整的9类组合手势集中，所有参与者会话内的平均准确率为90.2% (SD=3.7)。在Tomo手势集中，会话内的平均准确率为92.5% (SD=2.2)，而六轴手势集的准确率为94.6% (SD=3.4)。最大的错误来源是相似的握拳手势之间的混淆，如拳头和大拇指朝上，这些手势占手势集总错误的15.2%。混淆矩阵可以在图6中找到。</p><h3 id="6-3-Across-Session-Accuracy"><a href="#6-3-Across-Session-Accuracy" class="headerlink" title="6.3 Across-Session Accuracy"></a>6.3 Across-Session Accuracy</h3><p>对身体感知系统的一个重大挑战是在磨损会话中良好执行的能力。为了评估BeamBand被重新磨损后性能的下降，我们对每个参与者进行了一次跨验证，即对会话1中的所有数据进行训练，并对会话2中的所有数据进行测试，反之亦然。在完整的9类组合手势集中，所有参与者的平均跨会话准确率为81.4% (SD=15.9)。Tomo手势组的平均跨会话准确率为86.0% (SD-12.7)，六轴手势组的平均跨会话准确率为89.4% (SD=10.9)。我们发现拳头和大拇指向上之间也有类似的混淆，占手势设置总错误的9.1%。然而，在重新佩戴传感器后，其他手势似乎没有受到影响(例如，左手腕弯曲的频率分别为94.2%和96.2%)。本实验的混淆矩阵见图7。</p><h3 id="6-4-Across-User-Accuracy"><a href="#6-4-Across-User-Accuracy" class="headerlink" title="6.4 Across-User Accuracy"></a>6.4 Across-User Accuracy</h3><p>对身体系统的另一个重大挑战是一次训练的能力，并为所有用户工作(即。，而不需要进行人员培训或校准)。为了调查这一可能性，我们对每个参与者进行了一次“一用户退出”交叉验证，我们对9个参与者的两个会话中的所有数据进行训练，并对第10个参与者的两个会话中的所有数据进行测试(所有组合)。在完整的9类组合手势集中，平均跨用户准确率为44.2% (SD=8.8)。在Tomo手势集中，平均跨用户准确率为51.7% (SD=10.4)，而在六轴手势集中，平均跨用户准确率为63.2% (SD=8.5)。这种低性能表明用户的手是不同的，手势的表现也不同。尽管如此，一些手势在不同用户之间似乎更一致，比如手腕弯曲和径向偏差，分别为80.1%和79.2%。</p><h3 id="6-5-Comparison-to-Prior"><a href="#6-5-Comparison-to-Prior" class="headerlink" title="6.5 Comparison to Prior"></a>6.5 Comparison to Prior</h3><p>结果我们的会话内结果类似于我们从中绘制手势集的两个系统。在会话中，Jung等人的[18]报告了6种手势的95.4%的准确率，而手腕上的Tomo[50]在7种手势的准确率为96.6%。在这些方面，BeamBand分别达到了92.5%和94.6%。当手势集合并(9个类)时，BeamBand的准确率为90.2%。</p><p>我们的系统与其他自定义手势集系统的性能也相当。最值得注意的是，SensIR[29]报告12种手势的准确率为93.3%，zSense[47]报告9种手势的准确率为94.8%，Skinput[15]报告4种手指敲击手势的准确率为96.8%，而Mime[6]报告4种手势的准确率约为95%。注意，这些系统都不评估跨会话或跨用户的准确性。</p><p>很少有系统评估跨会话的准确性，这对身体感知系统来说是特别具有挑战性的。Tomo报告了7种手势在整个会话中的准确率为65.3%。在相同的手势设置下，BeamBand达到86.0%。Jung等人没有报告交叉会话的准确性，但作为参考，BeamBand在其手势集上实现了89.4%的准确性。</p><p>最罕见的是评估跨用户准确性的系统(除了磨损的计算机视觉系统，它往往是健壮的)。Tomo报告了7种手势对手腕的跨用户准确率为38.8%，而BeamBand在同一组手势上的准确率为51.7%。我们在文献中找不到其他的比较点。</p><h3 id="6-6-Robustness-to-Sleeve-Occlusion"><a href="#6-6-Robustness-to-Sleeve-Occlusion" class="headerlink" title="6.6 Robustness to Sleeve Occlusion"></a>6.6 Robustness to Sleeve Occlusion</h3><p>与光不同，超声波可以穿透薄织物。我们在开发过程中发现，我们可以把袖子卷到传感器上，训练被遮挡的系统，而对精度的影响最小。为了更正式地测量封套的稳健性，我们放置了两个相同的换能器，面对面，相距8厘米。我们驱动一个传感器使用功能发生器(40khz, 10vpp)，而另一个连接到示波器。然后，我们在发射换能器上覆盖了一层不同的织物来模拟套筒堵塞。我们测试了10种不同材质、厚度和编织密度的面料(图8)。</p><p>当厚度与信号强度相关时，一个更重要的因素是编织密度。例如，涤纶衬衫是我们测试过的面料中最薄的，但对性能的影响最大。相反，羊毛衫(低密度编织)是我们性能更好的面料之一，尽管它是我们最厚的面料。</p><h2 id="7、STRENGTHS-amp-WEAKNESSES"><a href="#7、STRENGTHS-amp-WEAKNESSES" class="headerlink" title="7、STRENGTHS &amp; WEAKNESSES"></a>7、STRENGTHS &amp; WEAKNESSES</h2><p>虽然BeamBand与以前的系统相比具有竞争力，但它还不够精确，例如，对于消费类设备来说。然而，作为概念的证明，技术方法看起来很有前途。为了实现“开箱即用”的手势识别，需要进行更多的工作来开发一个可推广的模型。通过广泛的参与者收集更多的数据可能会提高健壮性。从经典的机器学习方法转向深度学习可能也是有价值的。我们还怀疑增加一个校准台，使腕带的定位可以提高整个会话和跨用户的准确性。</p><p>未来研究的另一个方向是探索不同频率的超声波。运行在40khz的换能器无处不在(因此价格低廉)，但几乎可以肯定，它不是进行手势识别的最佳频率(约8.5mm的波长可能太大了)。更高的频率可以更好地感知精细的动作和手势，尽管代价是空气中更高的信号衰减，这必须通过更高的驱动电压或更敏感的模拟前端来克服。</p><p>虽然马蹄形布局应该允许在垂直于手掌的轴上有一定程度的波束形成，但我们把我们的阵列看作是线性的，它允许波束沿着平行于手掌的平面形成。更先进的波束形成模式，或二维传感器阵列，将使三维光栅扫描类似的能力，可以提供更丰富的信号。毫无疑问，它将有助于识别手势，如拳头和大拇指朝上，这在横截面上看起来相当相似。</p><p>我们使用通用微控制器来促进研究和快速原型。在商业实现中，波束形成模式将保存在内存中，而专用的、节能的硬件(如asic)将驱动整个传感过程。减少感知占空比和仅在检测到变化时以全帧率运行也可以提高功耗。传感原理本身是相当节能的;换能器本身几乎不需要任何动力来驱动。因此，我们相信通过适当的工程设计，可以实现一个不受束缚的、自包含的BeamBand版本。</p><p>还有一些重要的物理约束。例如，我们需要把换能器从皮肤上拿起来，以便在手掌底部的凸起上投射出声学效果，这样可以增加最小的厚度。另一个限制是传感器的尺寸，我们选择的传感器直径几乎为13毫米。然而，内部的压电层直径约为5毫米，这表明更紧密的集成是可能的。此外，超声换能器并不局限于圆柱形外壳;医学超声利用小方元素安排在一条。实际上，BeamBand可以坐在智能手表侧面的一个透明塑料窗口后面，这与医用超声波棒非常相似。</p><h2 id="8、CONCLUSION"><a href="#8、CONCLUSION" class="headerlink" title="8、CONCLUSION"></a>8、CONCLUSION</h2><p>摘要提出了一种基于超声波波束形成技术的手形识别方法。BeamBand以不同的角度和焦点将超声波的前沿投射到用户的手上，并测量反射回波段的声波。我们从文献中评估了两个手势集，我们的用户研究显示，无论是会话内还是跨会话，都有很好的准确性。我们希望我们的努力将作为一个催化剂，深入研究超声波波束形成，使新的相互作用。</p><h2 id="ACKNOWLEDGEMENTS"><a href="#ACKNOWLEDGEMENTS" class="headerlink" title="ACKNOWLEDGEMENTS"></a>ACKNOWLEDGEMENTS</h2><p>这项工作得到了帕克德基金会和斯隆基金会的慷慨资助。我们还要感谢Robert Xiao教授在嵌入式开发方面的帮助，还要感谢Evi Bernitsas，是他激发了我们对人类输入传感波束形成的兴趣。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>区块链总结</title>
    <link href="/2020/02/23/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%BB%E7%BB%93/"/>
    <url>/2020/02/23/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="区块链：总结"><a href="#区块链：总结" class="headerlink" title="区块链：总结"></a>区块链：总结</h2><p>1、区块链应用场景：</p><ul><li>有机蔬菜生产、运输、销售<ul><li>虽然能保证过程的不可更改</li><li>但是中间被调包了，区块链无法检测</li></ul></li></ul><p>2、在互不信任的实体之间进行共识交易</p><ul><li>成功的商业模式中既可以有中心化的方式也可以有去中心化的方式</li></ul><p>3、现实生活中的退款是两笔交易</p><ul><li>付钱</li><li>退款</li></ul><p>4、没有法律监护也就意味着没有法律保护</p><ul><li>法律的监管与支付方式没有关系</li></ul><p>5、比特币没有必要跟现有支付方式竞争</p><p>6、比特币新领域：</p><ul><li>网上跨国支付</li></ul><p>7、高考不是最好的制度，但是最不坏的制度</p><p>8、去中心化不一定是好事儿</p><p>9、如果商业模式是坏的，去中心化与中心化的制度都不行</p>]]></content>
    
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比特币基本知识</title>
    <link href="/2020/02/22/%E6%AF%94%E7%89%B9%E5%B8%81%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/02/22/%E6%AF%94%E7%89%B9%E5%B8%81%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>北大肖臻老师区块链技术与应用上课笔记</p></blockquote><h2 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h2><p>1、发明人：中本聪</p><p>2、著名交易所：门头沟（Mt. go）</p><p>3、私钥256位</p><h2 id="比特币：共识协议"><a href="#比特币：共识协议" class="headerlink" title="比特币：共识协议"></a>比特币：共识协议</h2><h3 id="Merkle-tree"><a href="#Merkle-tree" class="headerlink" title="Merkle tree"></a>Merkle tree</h3><p><img src="https://user-images.githubusercontent.com/17808702/74804197-7b3be780-531a-11ea-9211-0dcc684f6e65.png" alt="image"></p><h3 id="Double-Spending-Attack"><a href="#Double-Spending-Attack" class="headerlink" title="Double Spending Attack"></a>Double Spending Attack</h3><p>1、数字货币与纸质货币的区别：double spending attack，花两次攻击（数组货币可复制粘贴，纸质只有一个花了就没了 ）</p><p>方案1: 维护数据库，017号货币在某某手里，花出去修改数据库，中心化方案</p><p>2、去中心化的数字货币解决两个问题：</p><ul><li>数字货币的发行，谁有权利发行数字货币，什么时候发行</li><li>验证交易的有效性</li></ul><p>3、验证交易的有效性</p><p><img src="https://user-images.githubusercontent.com/17808702/74600423-7c77d500-50cc-11ea-8f0e-e0acf0b3803c.png" alt="image"></p><ul><li>signed by A，用A的私钥签名</li><li>A-&gt;B A要知道B的地址，B的公钥取hash，B公开公钥</li><li>B要知道A的公钥，所有节点都要A的公钥</li><li>输入要说明A的公钥，B的来源 </li><li>输出收款人公钥的hash</li><li>下个区块的输入脚本与上个脚本的输出脚本拼接完好成功执行才是无误</li><li>每个区块中可以形成merkle tree</li></ul><p>4、区块的组成：</p><p><img src="https://user-images.githubusercontent.com/17808702/74797984-76ba0380-5307-11ea-9ab3-5a229239fec0.png" alt="image"></p><ul><li>block header<ul><li>version</li><li>hash of previous block header</li><li>merkle root hash</li><li>target（H（block header）&lt;= target）</li><li>nonce(挖矿用的随机数) 4 bytes</li></ul></li><li>block body<ul><li>transaction list–最多不超过1M</li></ul></li></ul><p>5、系统中的节点:  full node、light node</p><ul><li>full node<ul><li>保存全部信息</li><li>内存维护UTXO集合–谁有多少钱</li></ul></li><li>light node<ul><li>只保存block header</li></ul></li></ul><p>6、账本的内容要取得分布式的共识</p><ul><li>分布式的hash table</li><li>FLP impossibility result：异步系统中（网络时延没有上线），有一个节点挂掉，这个异步系统也无法达到共识</li><li>CAP Theorem: 任何一个分布式系统，只能办满足以下两个<ul><li>consistency</li><li>availability</li><li>Partiontion tolerance</li></ul></li></ul><p>7、比特币中的共识协议：</p><ul><li><p>基于投票：</p><ul><li>hyperledger fabric 联盟链协议</li><li>比特币系统中无法控制投票权，一个密钥对就是一个账户，存在sybil attack，恶意照很多账户投票</li></ul></li><li><p>H(block header) &lt;= target</p><blockquote><p> 使用计算力来投票，每个节点都可以在本地组装一个候选区块将认为合法的交易放入，加入到区块链中，然后尝试不同的nonce值满足上述，则获得记账权；其他节点验证block header与block body是否合法</p></blockquote><ul><li><p>接受的区块应该是最长合法链，下图为分叉攻击，看是否存在两次转账，则只看前面的链，不看分叉链，解决方案：多等几个区块–6个；诚实的算力多，保证最长合法链，等待时间越长，被篡改几率越小</p><p><img src="https://user-images.githubusercontent.com/17808702/74799322-2cd31c80-530b-11ea-978d-2669211124f4.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/17808702/74799441-83405b00-530b-11ea-9c93-f34182a8ebbd.png" alt="image"></p></li><li><p>同时获得记账权，存在相同的最长合法链，然后竞争最长，最长合法链才是合法的</p></li><li><p>获得记账权的节点可以获得铸币权（coinbase transaction） 50BTC—21万个之后—25BTC—21万个之后—12.5BTC，每隔10分钟产生一个区块</p></li></ul></li><li><p>取得的共识是：去中心化账本中的内容是共识的</p></li><li><p>根据算力来，hash rate</p></li><li><p>争夺记账权的过程叫挖矿</p></li></ul><h2 id="比特币：实现"><a href="#比特币：实现" class="headerlink" title="比特币：实现"></a>比特币：实现</h2><p>1、transaction-based ledger</p><p>拥有记账权的节点，可以记录交易，并收取小费 </p><p>2、每一次挖矿的概率与挖矿时间无关，每次出块的平均时间为10分钟</p><p>3、系统中比特币的总量21w*50+21w*25+21w*12.5…..=2100w </p><h2 id="比特币：-挖矿"><a href="#比特币：-挖矿" class="headerlink" title="比特币： 挖矿"></a>比特币： 挖矿</h2><p>1、挖矿芯片</p><ul><li>CPU</li><li>GPU</li><li>ASIC：专用挖矿芯片，一种币种有专用的，除非mining puzzel相同</li></ul><p>2、矿池：充当全节点，给每个矿工分配任务，矿工只负责计算hash值，矿池负责组装</p><p>3、矿工如何证明工作量：每个矿工提交share（近似的hash）来证明工作量</p><p>4、coinbase–&gt;A: 在区块merkle tree里面</p><h2 id="比特币：-脚本"><a href="#比特币：-脚本" class="headerlink" title="比特币： 脚本"></a>比特币： 脚本</h2><p><img src="https://user-images.githubusercontent.com/17808702/74924075-cc2c0880-540c-11ea-908a-ddf0fa38059b.png" alt="image"></p><ul><li>只进行堆栈操作</li><li>输入脚本有签名</li><li>OP_RETURN: 当前区块的输出脚本，判断当前区块是否合法根本不执行这个脚本</li></ul><h2 id="比特币：分叉"><a href="#比特币：分叉" class="headerlink" title="比特币：分叉"></a>比特币：分叉</h2><ul><li><p>state fork</p><ul><li>分叉攻击</li></ul></li><li><p>protocol fork：由于是去中心化的，新协议无法全部普及到全部节点</p><ul><li><p>hard fork:</p><ul><li><p>新协议，旧节点不认新协议，新节点不认旧协议</p></li><li><p>block size limit: 1M—&gt;3M</p><ul><li><p>规定每个区块1M，增加交易的延迟，增加吞吐量，一个交易差不多250字节</p></li><li><p>可以允许有两条链，各带一个chainid</p></li></ul></li></ul></li><li><p>soft fork: </p><ul><li>新协议，旧节点也认新协议，但是新节点不认旧协议</li><li>block size limit: 1M—&gt;0.5M</li><li>Coinbase: 铸币交易<ul><li>前8 bytes: 可以调节里面的extra nonce:</li><li>里面的某些域：可以作为UTXO的hash值存进去</li></ul></li></ul></li></ul></li></ul><h2 id="比特币：匿名性"><a href="#比特币：匿名性" class="headerlink" title="比特币：匿名性"></a>比特币：匿名性</h2><blockquote><p>匿名性是笔名，网名，不是跟现金一样完全无关</p></blockquote><p>1、如果银行用匿名，隐私性是否比比特币要好？</p><p>是的，比特币的账本是公开的,  且不可篡改</p><p>2、比特币什么时候可以破坏匿名性</p><ul><li>一个人多个账户，什么操作将不同的账户关联？（这些账户是一个人的）<ul><li>网上买东西：<ul><li>inputs：addr1，addr2；</li><li>output：addr3，addr4</li><li>addr1与addr2就有联系</li></ul></li></ul></li><li>跟真实世界联系<ul><li>买入比特币，卖出比特币</li></ul></li></ul><p>3、实现匿名性：</p><ul><li>application layer：<ul><li>把很多人的比特币混在一起（coin mixing）</li></ul></li><li>network layer：<ul><li>洋葱路由（Tor）</li></ul></li></ul><p>4、零知识证明：一方向另一方证明一个陈述是正确的，而无需透露该陈述是正确的以外的任何信息</p><ul><li>证明这个私钥是我的，我签名你用公钥验证（有争议）</li></ul><p>5、同态隐藏：</p><ul><li>x 不等于 y，则E(x) 不等于E(y)—hash碰撞</li><li>E(x) 很难推出 x — hiding property</li><li>同态运算：<ul><li>同态加法：E(x) 和 E(y) –&gt;可以算出 E(x+y)</li><li>同态乘法：E(x) 和 E(y) –&gt;可以算出 E(xy)</li><li>扩展到多项式</li></ul></li></ul><p>5、零币和零钞：完全匿名</p><h2 id="比特币：思考"><a href="#比特币：思考" class="headerlink" title="比特币：思考"></a>比特币：思考</h2><p>1、区块链中hash指针的传播：所谓的hash指针只是形象的说法，只有hash，没有指针。全节点存储（key，value）数据库，在levelDB查找value就可以查找出来，hash指针的性质保证了整个区块链不可被篡改</p><p>2、区块恋：单个账户的私钥被切分成两份, 不提倡。提倡使用多重签名，每个私钥都是独立产生，可以要求N个人中任意M个</p><p>3、分布式共识：分布式系统理论上不可能取得共识，很多理论上的不可能结论只是在特定上的条件下，在实际的时候改模型可行</p><p>4、稀缺的东西不适合用来做货币：比特币不适合，总量一定</p><p>5、量子计算：可以破解各种各样的密码</p><p>6、收钱：只需要提供公钥的hash，取钱：提供公钥与私钥的签名</p>]]></content>
    
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>以太坊基本知识</title>
    <link href="/2020/02/22/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/02/22/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h2><p>1、改进：</p><ul><li><p>ETH</p></li><li><p>以太坊出块时间：十几秒；比特币：10分钟</p></li><li><p>mining puzzle: 对内存要求高，限制ASIC芯片的使用</p></li><li><p>proof of work(工作量证明)—&gt; proof of state(股份投票)</p></li><li><p>Smart contract(智能合约): 去中心化的合约</p></li></ul><p>2、去中心化的货币好处：跨国转账</p><p>3、智能合约：跨国合约，用技术手段保证合同不违约</p><p>4、创始人：Vitalik</p><p>5、比特币中Merkle tree不能证明某个交易不存在，sorted 之后才可以</p><p>6、没有规定定期减半</p><p>7、区块奖励 + gas fee + uncle reward</p><p>8、发布一个交易所有全节点都要执行这个交易</p><p>9、挖矿是<strong>无记忆</strong>的</p><p>10、区块链的安全性是每个全节点验证区块链上的准确性</p><h2 id="以太坊：账户"><a href="#以太坊：账户" class="headerlink" title="以太坊：账户"></a>以太坊：账户</h2><p>1、转账区别：</p><ul><li>比特币：比特币花钱的时候要说明币的来源, 而且得将剩余的钱转给自己，A-&gt;B(10 BTC); B-&gt;C(3 BTC), B-&gt;B’(7 BTC)，否则7个就成了交易费了</li><li>以太坊：不用说明币的来源，直接看账户余额 ，对double spending attack有天然的防御作用</li></ul><p>2、account-based ledger(以太坊基于账户)缺点：</p><ul><li><p>reply attack：重放攻击，收钱的人不诚实，希望收两次</p></li><li><p>防范：加计数器，每个账户有花钱的次数</p><p><img src="https://user-images.githubusercontent.com/17808702/75045435-42f4fe80-54fe-11ea-8560-c273a85573b3.png" alt="image"></p></li></ul><p>3、账户类别：</p><ul><li>外部账户：公私钥对控制<ul><li>账户余额</li><li>nonce-花钱次数</li></ul></li><li>合约账户：不能主动发起交易<ul><li>balance</li><li>nonce</li><li>code</li><li>storage：状态</li></ul></li></ul><h2 id="以太坊：状态树"><a href="#以太坊：状态树" class="headerlink" title="以太坊：状态树"></a>以太坊：状态树</h2><p>1、以太坊中账户地址：160bit    40个16进制</p><p>2、比特币区块大约4000个：1M/250字节</p><p>3、账户存储：</p><ul><li>(addr，state)组织成Merkle tree, 这样每次增加都要重新构建，数量级很大，而且所有全节点都要更新</li><li>排序的Merkle Tree: 每个账户作为叶子结点，插入困难</li></ul><p>4、 trie数据结构:</p><p><img src="https://user-images.githubusercontent.com/17808702/75084740-2805a700-555d-11ea-97c6-51f8e531649f.png" alt="image"></p><p>特点：只画key</p><ul><li>trie分支数目取决于key值的单词数目，例子中为英文单词，加结束符一共27个所以一个节点的分叉最多为27；以太坊中为16进制+1=17个</li><li>trie的查找效率取决于key的长度(书的深度)，在以太坊中key的长度40个16进制的数</li><li>trie不会出现碰撞</li><li>merkle tree插入的时候得排序，trie插入顺序不同，组成的树相同</li><li>trie更新的局部性好</li></ul><p>缺点：</p><ul><li>存储浪费：一脉单传</li></ul><p>5、Patricia tree(Patricia trie): 经过路径压缩之后的trie</p><p><img src="https://user-images.githubusercontent.com/17808702/75084891-7ff0dd80-555e-11ea-9cae-733f5b3e17bd.png" alt="image"></p><ul><li>新插单词这个树会扩展开</li><li>键值比较稀疏的时候好</li></ul><p>6、modified MPT(Merkle Patric tree)</p><ul><li>merkle proof 能证明账户中有多少钱</li><li>Branch node 7 地方的这个值存的是下面的extension node的hash值</li><li>每有一个新的区块，有新的区块的状态树，大部分节点是共享的，保留旧的MPT，历史记录，这是为了roll back</li></ul><p><img src="https://user-images.githubusercontent.com/17808702/75085155-45d50b00-5561-11ea-96dc-05570c08dd3e.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/17808702/75085377-6c944100-5563-11ea-83bd-d937eb9f459e.png" alt="image"></p><p>7、block header</p><p><img src="https://user-images.githubusercontent.com/17808702/75085388-8f265a00-5563-11ea-88d1-2c9369252730.png" alt="image"></p><p>8、状态树存储的是(key,value)</p><ul><li>value 做序列化之后存储<ul><li>RLP(序列化的库)</li><li>protobuff</li></ul></li></ul><h2 id="以太坊：交易树与收据树"><a href="#以太坊：交易树与收据树" class="headerlink" title="以太坊：交易树与收据树"></a>以太坊：交易树与收据树</h2><blockquote><p>交易树与收据书只包含当前区块的交易，状态树则全包含，在当前交易增加一个分支</p></blockquote><p>1、作用：</p><ul><li>提供merkle proof</li><li>提供更加复杂的查询操作</li></ul><p>2、bloom filter：</p><ul><li><p>快速证明集合中是否存在某个元素，将集合中的元素取hash映射到hash表中，新元素取hash在hash表中对照</p></li><li><p>存在误报(false positive), 不存在漏报(false nagitive)</p></li><li><p>不支持删除操作，如果只是0-1，删除元素，没法操作</p></li></ul><p>3、bloom filter作用</p><ul><li><p>每个交易完成后形成收据，收据中有bloom filter</p></li><li><p>发布的区块，开头中有总的bloom filer，这个区块的bloom filter的并集</p></li><li><p>查找的时候找块头的bloom filter，找到就往下找交易</p></li></ul><h2 id="以太坊：GHOST协议"><a href="#以太坊：GHOST协议" class="headerlink" title="以太坊：GHOST协议"></a>以太坊：GHOST协议</h2><p><img src="https://user-images.githubusercontent.com/17808702/75088753-88600d00-558c-11ea-8178-1fce7ed76a06.png" alt="image"></p><ul><li>比特币中orphan block：孤儿块，没有成为最长合法链的分叉块；以太坊中叫uncle block</li><li>给uncle block 7/8 个区块奖励</li><li>最长合法链上最多有两个uncle block，下一个区块可以包含爷爷的uncle block</li></ul><p>问题：</p><ul><li>新区块出来之后才知道uncle block</li><li>新区块故意不加uncle block</li></ul><p>解决：</p><ul><li>爷爷，曾祖父也可以为uncle block，但是最多7代以内最多的区块</li><li>对于新区块包含不管那个辈份的都是奖励1/32个区块奖励(block reward)</li><li>新区块要查叔父区块的合法性，但是不执行叔父中的交易</li><li>只有分叉之后的第一个区块给block reward</li></ul><p><img src="https://user-images.githubusercontent.com/17808702/75088675-a6793d80-558b-11ea-92e4-e70a9c323351.png" alt="image"></p><h2 id="以太坊：挖矿算法"><a href="#以太坊：挖矿算法" class="headerlink" title="以太坊：挖矿算法"></a>以太坊：挖矿算法</h2><p>1、名称: ethash</p><p>2、ASIC resistance：增加对内存的mining puzzle</p><p>3、、以太坊：</p><ul><li>16M cache, 用于轻节点验证</li><li>1G dataset, DAG</li><li>伪随机：seed–&gt;h(seed)–&gt;h(h(seed))….数组</li></ul><p>4、代码：</p><ul><li>生成16M的cache：seed–&gt;h(seed)–&gt;h(h(seed))….数组</li><li>从cache生成1G的大数据集：读取cache中256个数据，然后取hash得到一个元素</li><li>根据当前的nonce，读取64个相邻位置的hash组成128个，最后返回hash跟target比较</li></ul><p>5、proof of work –&gt; proof of stake</p><p>6、算法的设计是为了让通用设备挖矿，参与的人越多越安全</p><p>7、有人不这么认为：专用挖矿机的攻击成本会高</p><h2 id="以太坊：PoS"><a href="#以太坊：PoS" class="headerlink" title="以太坊：PoS"></a>以太坊：PoS</h2><p>1、proof of work-比特币耗电量：</p><ul><li><p>一年挖矿耗电量：70tWh      1tWh = 10^12Wh      1kWh = 10^3Wh</p></li><li><p>一笔交易耗费1000度电</p></li></ul><p>2、proof of work-以太坊耗电量：</p><ul><li>一年挖矿耗电量：20tWh</li><li>一笔交易耗电67度</li></ul><p>3、proof of stake</p><ul><li>给开发人员一部分币奖励</li><li>给投资人员一部分币奖励</li><li>根据币的多少投票</li><li>根据币的权益降低挖矿难度</li><li>维护安全的资源是个闭环</li><li>决定新块的方式</li></ul><p>4、如何获得最长合法链？</p><ul><li>Casper the Friendly Finality Gadget（FFG）</li><li>Validatir: 投入保证金投票，权重取决于保证金的数量大小<ul><li>不能两边投票</li></ul></li><li>混用下：<ul><li>epoch：每100（优化后50）个出一个</li><li>Two-phase commit<ul><li>Prepare message    2/3</li><li>Commit message    2/3</li></ul></li><li>前一个的commit messgae作为下一个的prepare message</li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/17808702/75094386-7b134480-55c5-11ea-8f02-22c3491f3836.png" alt="image"></p><h2 id="以太坊：智能合约"><a href="#以太坊：智能合约" class="headerlink" title="以太坊：智能合约"></a>以太坊：智能合约</h2><p>1、什么是智能合约？</p><ul><li>智能合约时运行在区块链上的一段代码，代码逻辑定义了合约的内容</li><li>智能合约的账户保存了合约的当前运行状态<ul><li>balance</li><li>nonce</li><li>code</li><li>storage：是一个MPT树</li></ul></li><li>Solidity是智能合约常用的语言</li></ul><p>2、如何调用智能合约？</p><ul><li>外部账户创建一个交易，接收地址为要调用的那个智能合约的地址</li><li>合约调用另一个合约</li><li>凡是要接收外部转账的智能合约要定义为payable</li><li>合约A调用合约B，要在转账交易的data域表明合约B的哪个函数</li><li>合约账户，A—&gt;B缺省函数, 默认调用B的fallback()函数</li></ul><p>3、gas fee:</p><ul><li>执行合约中的指令要收取gas fee, 发起交易的人支付</li></ul><p>4、交易有原子性：要么执行完，要么不执行</p><ul><li>执行到一半，gas fee不退回</li><li>A–&gt;B, B失败，根据调用方式决定A是否会滚</li></ul><p>5、block header 中的 gas limit: 可以通过上一个的基础上进行上调或下调     1/1024</p><p>6、汽油费如何扣除？</p><ul><li>全节点维护3棵树，收取汽油费的时候只是在本地状态树中的账户余额扣除</li><li>只有在本地修改完了，发布到区块链上才能变成共识</li><li>先执行完区块中的全部交易更新三棵树，更新blocke header，再发布，获得汽油费</li><li>执行交易，智能合约的全节点但是没有发布的，没有补偿，还要根据链上新区块更新自己的三棵树</li><li>执行智能合约出错的也要发布，扣汽油费</li></ul><p>7、Solidity不支持多线程原因：</p><p>多核对内存调用顺序不同结果使不同的，但是区块链是一个交易驱动的状态机，同样的输入必须同样的输出</p><p>8、转账：</p><ul><li>tranfer() 会导致连锁回滚</li><li>send() 不会连锁回滚</li><li>call().value() 不建议</li></ul><p>9、简单例子：拍卖</p><ul><li>拍卖出价向智能合约中存以太币，且不允许取出</li></ul><p>10、code is law—-代码发布上去就不可更改，发布之前要测试测试测试</p><h2 id="以太坊：The-DAO"><a href="#以太坊：The-DAO" class="headerlink" title="以太坊：The DAO"></a>以太坊：The DAO</h2><blockquote><p>Decentralized Autonom Organization 去中心化的自治组织</p></blockquote><p>1、什么是The Dao？</p><p>是Dao的一个组织：众筹投资组织，使用以太币换取投资权</p><p>2、split DAO：</p><ul><li>成立子基金，使得投资者取回投资的唯一途径(自己投资自己)</li><li>先把账户清零再转账</li><li>被黑了1/3以太币，但是有28天的锁定期</li></ul><p>3、普通回滚，即分叉攻击没有用</p><p>4、措施</p><ul><li>升级，凡是跟the DAO相关账号的相关的交易等于非法<ul><li>软分叉</li><li>升级之后，要判断是不是跟the DAO相关，要不要收gas fee？<ul><li>没有收gas fee</li><li>结果升级之后不停的收到这个gas fee的攻击</li></ul></li></ul></li><li>升级，the Dao账户的资金强行到新的智能合约<ul><li>硬分叉</li><li>投票，升级之后<ul><li>新链 ETH(被强制执行了)</li><li>旧链 ETC</li></ul></li><li>增加chainID分开</li></ul></li></ul><h2 id="以太坊：反思"><a href="#以太坊：反思" class="headerlink" title="以太坊：反思"></a>以太坊：反思</h2><p>1、智能合约真的智能吗？</p><p>Smart contract is anything but smart</p><p>2、不可篡改性是个双刃剑</p><ul><li>账户私钥公开之后怎么办？<ul><li>将钱转走</li></ul></li></ul><p>3、没有什么是不可篡改的</p><ul><li>美国宪法修正案<ul><li>不能喝酒</li></ul></li></ul><p>4、Solidity 是正确的编程语言吗？</p><ul><li>从语言设计的角度，Solidity够呛</li><li>Solidity是图灵完备的语言</li><li>使用模板写合同</li></ul><p>5、Many eyeball fallacy(misbelief)</p><ul><li>虽然开源，但是不一定安全，有多少人看，又有多少人懂</li></ul><p>6、去中心化意味着什么？</p><ul><li>去中心化对规则的修改也要用去中心化的手段去解决</li><li>分叉恰恰是去中心化的体现</li></ul><p>7、去中心化系统不等于分布式</p><ul><li>去中心化系统是分布式的</li><li>分布式的系统不一定是去中心化的</li><li>在互不信任的网络中建立共识</li></ul><h2 id="以太坊：美链"><a href="#以太坊：美链" class="headerlink" title="以太坊：美链"></a>以太坊：美链</h2><blockquote><p>Beauty Chain</p></blockquote><p>1、ICO：Initial Coin Offering</p><ul><li>以太坊的代币，通过智能合约函数完成</li><li>ERC 20(Ethereum Request fot comments)是以太坊发行代币的一个标准</li></ul><p>2、bug：从总账户中扣代币，给其他每个账户分发</p><ul><li>amount = receivers.length * value</li><li>扣钱(amount)，循环发钱（value）<ul><li>amount 可能溢出，成为一个很小的数值</li></ul></li></ul><p>3、被回滚了</p><p>4、判断合法运算：</p><ul><li>c = a*b(a,b 为256位的整数)</li><li>assert(c / a, b)</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向考试的数据仓库整理</title>
    <link href="/2020/01/10/%E9%9D%A2%E5%90%91%E8%80%83%E8%AF%95%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B4%E7%90%86/"/>
    <url>/2020/01/10/%E9%9D%A2%E5%90%91%E8%80%83%E8%AF%95%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>这里只有一张机票</p><p><a href="https://blog.csdn.net/weixin_44424668/article/details/103227144">https://blog.csdn.net/weixin_44424668/article/details/103227144</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Unimanual Pen+Touch Input Using Variations of Precision Grip Postures</title>
    <link href="/2020/01/03/Unimanual-Pen-Touch-Input-Using-Variations-of-Precision-Grip-Postures/"/>
    <url>/2020/01/03/Unimanual-Pen-Touch-Input-Using-Variations-of-Precision-Grip-Postures/</url>
    
    <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>我们引入了一个新的笔输入空间，通过形成姿势的同一手也握笔，而写作，绘画，或选择。姿势与笔周围的多点触控表面接触，无需特殊传感器即可检测。一项形成性研究调查了33种候选姿势在受控任务中的有效性、准确性和舒适度。结果表明姿势是有用的子集。利用采集到的电容传感器原始数据，训练卷积神经网络对10个姿态进行实时识别。此识别器用于创建基于笔的文档注释和矢量绘图的应用程序演示。一个小型的可用性研究表明该方法是可行的。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>笔交互使绘画和写作自然和精确,但当前的应用程序仍然需要频繁使用的图形用户界面(GUI)按钮,菜单,和小部件等操作开关直接操作工具(例如选择、签署、或突出显示),设置属性(例如中风色彩或厚度),并发出指令(例如使用上下文菜单或笔手势)。但是，GUI菜单和工具栏会占用空间，而且很容易出错，因此增加钢笔输入空间以减少GUI的使用是一个重要的目标。</p><p>研究人员提出并评估了许多笔输入技术，包括特殊的笔划形状、笔筒按钮和以可检测的方式操作笔。当一支笔与多点触控(通常称为“笔+触控”)相结合时，非惯用手的触控被用来做手势、姿势，或者表示物体的上下文，改变另一只手握笔的模式。我们的工作将笔输入和多点触摸以不同的方式结合起来:我们使用平板触摸传感器来检测用户可控制的手的姿势，而同样的手握笔来书写、绘制或操作图形对象。</p><p>我们的想法源于对人们如何持有书写工具的深入了解。大多数成年人使用一种动态的三脚架握把，拇指和食指相对，第三个手指(通常是中指)提供额外的稳定。这是一种精密握笔器，它平衡了握笔的要求和独立操作的能力。理想的书写姿势是手或手指的一部分放在书写面上，但人们可以用手控制笔，尤其是在不太精确的笔输入任务中。在使用数码笔时，对手部姿势的详细检查也显示了握法的多样性。这些观察结果表明，人们可以根据手指或手接触表面的方式来调整自己的手部姿势，同时仍然可以用食指和拇指保持精确的握力。然而，在使用钢笔时，是否可以用同一只手进行有意的触摸，以及如何有效地使用这些触摸进行输入，这是一个有待解决的问题。</p><p>我们提出的uimanual pen+touch输入空间是通过检测用户何时有意识地调整他们的手姿势接触表面，同时保持精确的笔触来创建的。手掌可以用侧面、脚后跟接触，或者只是漂浮;食指和拇指可以向下滑动，触摸笔尖旁边的表面，中指、无名指和小指可以接触手掌内外的表面。这些组合建议324个理论姿势，但大多数是不切实际的。我们确定了一组候选的33个姿势来评估。</p><p>我们使用一组有15人参与的有代表性的受控任务，从笔控和主观偏好两方面对这些姿势进行了评估。我们的结果表明，有一个很大的子集的实用姿势。在评估过程中，我们还记录了所有的触摸输入数据，包括捕捉原始电容信号的帧图像。我们用这个训练一个深度神经网络来实时识别10个姿势，平均识别率为91.4%(最佳情况96%)。利用该识别器，我们演示了如何将姿态应用于文档注释和矢量绘图，这是两种常见的具有频繁模式切换的钢笔应用。我们的原型被设计成一个在后台运行的系统服务，通过将姿态的可配置映射到快捷键和其他操作或小部件，将命令注入到实际的应用程序中。这使得该技术能够触发工具、进行属性选择和调用命令。最后的研究使用这些应用程序来评估交互空间的可用性和有用性以及交互识别器的性能。</p><p>我们的贡献是一个新的笔输入空间验证的基本可用性，实用性和可行性。由于我们的单手技术不涉及非惯用手，所以它们与双手笔+触摸技术兼容，并且具有一定的局限性，也适用于仅使用钢笔模式切换方法，如使用橡皮擦按钮或按压。此外，与双手操作相比，单笔+触摸可能需要更少的屏幕空间，因此更适合小型平板电脑，甚至智能手机。其目的不是要取代现有的模式转换技术，而是要提出一个笔输入空间，以补充和扩展以前的方法。我们的设计空间探索和识别方法证明了单笔+触摸的概念是可行的，为未来的比较研究奠定了基础。</p><p><img src="https://user-images.githubusercontent.com/17808702/71722880-8e2b5300-2e65-11ea-9a1b-84014dc66976.png" alt="image"></p><h2 id="RELATED-WORK"><a href="#RELATED-WORK" class="headerlink" title="RELATED WORK"></a>RELATED WORK</h2><p>模式切换和命令激活是交互操作的关键，针对这些任务已经提出了许多笔输入技术。然而，使用不同的姿势执行，同时保持和使用标准的三脚架精密握笔姿势还没有被探索过。</p><h3 id="Pen-Input-Techniques"><a href="#Pen-Input-Techniques" class="headerlink" title="Pen Input Techniques"></a>Pen Input Techniques</h3><p>考虑到模式切换的重要性，研究人员对[18]进行了详细的研究，并提出了使模式切换和笔输入更强大的技术和方法，这并不奇怪。有一种技术可以被认为是把工具栏更靠近笔。其中包括跟踪菜单、Springboard和跟踪小部件。这些仍然需要屏幕空间，但减少了移动时间。另一类技术使用手势隐藏或消除工具栏，如标记菜单、悬停小部件或Scriboli分隔符。有些是快的，有些是慢的，由于手势是由动作定义的，所以很难将其与直接操作的动作区分开来。考虑到这些技术家族可能存在的问题，我们的方法与它们是兼容的。例如，一个弹簧板，跟踪菜单，或标记菜单只能在使用特定的手姿势时显示，因为大多数手势是独立于用来握笔的手姿势的</p><p>第三类技术利用其他笔输入渠道，如压力，滚动笔筒，倾斜。第四个系列的技术会根据操作笔的方式改变模式。这很简单，只需将笔倒置，使用“橡皮擦”末端或按下笔筒按钮，弯曲笔杆，创建一个具有26种独特方式接触绘图表面的新笔状设备。我们的技术可能与这些技术不太兼容，因为它们需要非标准的笔操作。</p><p>与最后一组相关的是Song等人的grip探测笔。通过将电容式传感器缠绕在笔筒上并添加运动传感器，笔筒可以检测到握笔的方式(如握力)或操作方式(如摇晃、削尖)。我们的输入空间是不同的:我们感觉不到笔是如何握着的，我们寻找方法来改变一个标准的精确握着的手的姿势;我们只在笔被用作笔时才修改行为;我们的技术不需要特殊的硬件。</p><h3 id="Combining-Pen-and-Touch"><a href="#Combining-Pen-and-Touch" class="headerlink" title="Combining Pen and Touch"></a>Combining Pen and Touch</h3><p>随着多点触控输入的兴起，人们提出了多种笔触结合的方式。Yee和Brandl等人的早期实验表明，双手写笔和触摸可以作为两个独立的输入源。Wu等人利用非优势手在表面的形状来设置非优势手写输入模式。Matulic等人将这一想法扩展到使用非惯用手触摸手势来设置钢笔模式，并对其有效性[20]进行了进一步的研究。</p><p>Hinckley等人的Pen+Touch互动词汇将非惯用手的触摸与惯用手的笔以一种更加综合和上下文敏感的方式结合起来。他们的原则是“笔写，触摸操作，笔+触摸的组合产生新的工具”。笔和触摸的组合动作根据图形对象的上下文触发模式切换。例如，将钢笔从另一只手拿着的照片上拖下来会触发复制模式。Pfeuffer等人的[26]演示了如何将pen+touch的概念应用到只有非惯用拇指的小屏幕移动平板电脑上。由于我们的技术只使用一只手，它是兼容的双手写笔+触摸技术。</p><p>我们意识到唯一真正单手笔+触摸技术是Conté 的两个示范，它是一种非传统的像笔一样的装置。在一个例子中，将笔状的设备平放在表面上，可以通过同手触摸输入来实现“点击”，从而实现鼠标模式。另一个例子是当同一只手将设备放在表面时，用拇指触摸来控制指针的放置。Conté不是传统的笔,和这两个技术探讨了相同的手触摸模式在拿笔的精密控制。我们的工作结合了笔输入和多点触摸，不同于以往的笔+触摸研究:我们使用平板触摸传感器来检测用户可控制的手的姿势，而同一只手抓住笔，执行输入操作，如写作，绘画，或对象操作。这可能会创建一个非常大的输入空间，我们将在接下来详细讨论它。</p><h2 id="UNIMANUAL-PEN-TOUCH-INPUT-SPACE"><a href="#UNIMANUAL-PEN-TOUCH-INPUT-SPACE" class="headerlink" title="UNIMANUAL PEN+TOUCH INPUT SPACE"></a>UNIMANUAL PEN+TOUCH INPUT SPACE</h2><p>我们的重点是当标准笔输入与同时用同一只握笔的手进行的触摸输入相结合时所创建的交互空间。这种笔+触摸的同时操作，不同于用同一只手交替使用笔和触摸输入，比如在触摸表面时将笔放在手掌中(称为“手掌操作”)。最后，我们关注的互动，其中笔是操纵与一个精确的抓地力。这与设备放置在表面时使用附近的触摸不同。</p><p>为了使实现切实可行，我们将姿态限制在那些由表面接触创建的模式可识别的范围内，这是一种演示了仅用于触摸输入的方法。虽然额外的握笔姿势可以用一支特制的笔来识别，或者用相机在表面上捕捉手的动作，但是我们定义了在当前的触敏设备上可以检测到的握笔姿势。我们定义了当前触摸可检测到的姿势敏感设备。考虑这种方法的一种方法是使用手掌拒绝(原先在平板上写字得抬起手掌来，手掌可以放松放在平板上写字)而丢弃的触摸数据：在运行手掌拒绝管道之前，检查是否识别出单手姿势。如果是，请使用姿势作为输入，然后拒绝所有关联的接触。否则，只需使用标准的手掌拒绝管道进行处理</p><h3 id="Input-Degrees-of-Freedom-and-Notation"><a href="#Input-Degrees-of-Freedom-and-Notation" class="headerlink" title="Input Degrees of Freedom and Notation"></a>Input Degrees of Freedom and Notation</h3><p>虽然精度笔握经常使用的部分中指三分之一稳定控制的一部分(形成一个“三脚架”),并不是所有的成年人都使用第三个手指,我们发现可以维护一个精确控制只有食指和拇指用食指端稳定。我们在随后的对照研究中对其有效性进行了测试。</p><p>为了描述和推理可能的手姿势作为变化的三脚架抓地力，我们认为六自由度定义为触摸接触类型的手掌和五个手指:</p><ul><li>手掌接触(边、跟、浮):写字时，手掌可以接触到侧面的表面，靠近手腕(跟)，或浮在没有接触的地方。这创建了3个变量。</li><li>握笔指接触(拇指、食指)×(接触、不接触):两个主三脚架握笔指，食指和拇指，可分别滑下笔筒，直接接触笔尖旁边的表面。两个手指与两个独立的国家创造4个变化。</li><li>无握指接触(中指、无名指、小指)×(进、出、不接触):其余三根手指伸出手外或向内弯曲时可独立接触表面，或完全不接触表面。三根手指和三种状态创造了27种变化。</li></ul><p>理论上，这允许324个可能的姿势(3×4×27)至少有一个基本水平的精度，因为三脚架的抓地力保持最低限度的改变。为了使参考姿势在文本、图形和表格中更简洁，我们引入了标准符号。在书面文本中，姿势被命名为一组复合词:手掌接触类型总是给定的(浮动、侧、跟);如果握住的手指被命名为(食指，拇指)，那么它是接触的;非握力手指的名称在触摸时带有后缀In或Out(如MiddleIn, MiddleOut，…)。例如:side-index-pinky-out表示手掌在侧面接触，指的是指尖旁边的接触，而小指指的是在主手接触之外的接触。除了这个长形式，我们还使用缩写的首字母表示法：S、H或F表示手掌状态；T和I表示握指接触；M、R或P表示非握指接触手掌内部。如果手指没有接触，则使用破折号。例如，边索引PinkyOut的压缩形式是（S-I–P）。图2提供了更多的长符号和短符号示例。</p><p><img src="https://user-images.githubusercontent.com/17808702/71727228-8cb55700-2e74-11ea-8814-b98740b24a34.png" alt="image"></p><h3 id="Reduced-Set-of-Candidate-Postures"><a href="#Reduced-Set-of-Candidate-Postures" class="headerlink" title="Reduced Set of Candidate Postures"></a>Reduced Set of Candidate Postures</h3><p>虽然这一大组姿势可能是物理上可实现的，但由于个人灵活性、灵巧性和手部解剖，许多明显地不舒服或难以执行。一名3人飞行员使用下一节中描述的简化版实验协议测试了所有手掌状态下的所有手指状态。这就产生了一套规则：（1）一般情况下，握指和非握指状态不应合并。如果食指或拇指接触，则中间、戒指和小指不得接触，反之亦然。（2） 无名指应与小指或中指一起移动，因为独立的无名指移动是困难的。（3） 在大多数情况下，应避免将非握紧的手指位置分开。根据这些规则，我们将324种可能的姿势减少到33种，以供进一步研究。</p><p>前30个候选是通过将10个特定的握力和非握力手指状态（表1顶部）与所有三个手掌状态组合而成的。其余3名候选人是特殊姿势，包括特定的手掌状态（表1底部）。中指外展：中指和无名指外展一般不舒服，但不太难与手掌漂浮状态。Float-MiddleOut- RingOut:我们发现在使用浮动手掌时很舒服，但在使用其他手势时就很困难了。侧拇指指数-中位-环出-指出-指出:这是一种将握力手指和非握力手指结合起来的方法。</p><p><img src="https://user-images.githubusercontent.com/17808702/71764615-ef662b80-2f24-11ea-8907-8ee88e0f2022.png" alt="image"></p><h2 id="EXPERIMENT-POSTURE-SUITABILITY"><a href="#EXPERIMENT-POSTURE-SUITABILITY" class="headerlink" title="EXPERIMENT: POSTURE SUITABILITY"></a>EXPERIMENT: POSTURE SUITABILITY</h2><p>本实验的主要目的是在主观偏好和笔控两方面来评估姿势的可调整性。我们要求参与者完成一组合成的，但有代表性的笔输入任务，使用每个姿势，在此期间，我们测量相对于目标刺激和运动时间的准确性。然后我们要求一个考虑舒适度和控制力的姿势偏好评分。这些结果被用于为特定交互类型的应用程序中的单手笔+触摸姿势创建设计指南。本实验的另一个目标是收集数据，利用机器学习训练姿态识别器。</p><h3 id="Participants"><a href="#Participants" class="headerlink" title="Participants"></a>Participants</h3><p>我们招募了12名惯用右手的参与者，年龄在20到36岁之间，其中5名是女性。右撇子的要求减少了偏手性造成的差异(我们还运行了3个左撇子参与者，我们稍后会讨论)。参与者通过校园传单和口口相传的方式招募，成功完成研究的人将获得20美元</p><h3 id="Apparatus"><a href="#Apparatus" class="headerlink" title="Apparatus"></a>Apparatus</h3><p>Wacom Cintiq 22HD触控笔板(1920×1080像素，47.5×26.7 cm, 4.04 px-per-mm)连接到Intel NUC (Windows 10, Core i7 3.50 GHz 8GB RAM)以运行c# (. net)应用程序。我们非常小心，所以计算和日志不会带来任何明显的延迟</p><p>Wintab API提供笔尖坐标、笔尖悬停距离、笔尖压力和笔尖方向(140 Hz)的日志记录。Wacom FeelTM多点触控API提供了122×70像素灰度位图的原始电容性数据，以及100hz下的“手指”输入eventsasanarrayof(max10)touche llipsoids。当只有手掌接触屏幕时，Wacom API不会发送原始电容性数据。作为一种变通方法，我们在左上角放置了一个电容式显示器来模拟手指</p><h3 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h3><p>我们设计了一组通用的笔输入任务，这些任务间接地派生自Buxton[4]最初提出的那些任务。根据完成任务时钢笔移动的受限制程度，将任务分为受限制和不受限制两类。附带的视频还提供了任务演示。</p><h4 id="Constrained"><a href="#Constrained" class="headerlink" title="Constrained"></a>Constrained</h4><p>受约束的任务(图3)模拟了钢笔交互的不同原子模式，目的是获得关于准确性的定量数据。每个任务都以灰色“点”(点击任务)或黑色背景上呈现的“路径”(跟踪任务)模式呈现。所有点的直径都是4mm，所有路径都是4mm厚。绿色圆点表示下一个要点击的圆点或下一个笔画的开始。“路径”也有一个红色的“帽子”，表示笔画的结束。</p><p>由于其中一个目标是测量如何准确的敲击或打击是比较视觉目标，4mm大小的功能只是作为一个刺激，而不是一个严格的边界。宽松的接受阈值确保参与者在预期目标上轻敲或轻敲，任何距离当前点边缘不到10mm的轻敲都被接受。对于线条，任何从开始到结束的距离在10mm以内，到结束的距离在15mm以内，长度在线条长度的33%以内的笔画都是可以接受的</p><p><img src="https://user-images.githubusercontent.com/17808702/71764802-816f3380-2f27-11ea-96fc-81aab29ec8de.png" alt="image"></p><p>七个受约束的任务是：</p><ul><li>线性敲击：在沿19厘米水平线均匀分布的4个点上从左向右攻丝。代表一些简短的任务，例如轻击按钮之间的较大移动。</li><li>簇状敲击：敲击两个间隔15cm的4个点的簇。表示按菜单或工具面板上的一系列按钮。</li><li>水平线：在两个方向上抚摸两条19厘米的水平线。表示需要大手移动的长笔触，例如在屏幕上拖动对象</li><li>垂直线：沿着两个8厘米的垂直直线在两个方向上抚摸。与上述类似，代表需要较大手部动作的长笔触</li><li>循环：从左到右跟踪4个循环的路径，每个循环的高度为3cm，总路径为19cm宽。代表长时间的非线性运动，例如绘画或书写</li><li>大十字架：追踪两条对角线路径形成一个十字架，两条路径都装在一个直径6厘米的圆中，相隔7厘米。左上方的笔画首先完成。用少量的手掌运动代表较大的离轴笔运动，例如基于笔划的大菜单或操纵对象（例如缩放或平移）</li><li>小十字：如上所述，但是两个对角十字适合于直径为2cm的圆中，且相距15cm。代表笔尖没有手掌移动的小动作，例如手势或精细的对象操作。</li><li>矩形：描绘两个矩形路径，该路径适合于相距15厘米，直径2厘米的圆中。方向是从左上角开始的顺时针方向。与小十字类似，但要求笔尖方向发生急剧变化</li></ul><h3 id="Unconstrained"><a href="#Unconstrained" class="headerlink" title="Unconstrained"></a>Unconstrained</h3><p>不受约束的任务（图4）代表更常见的集成笔运动。当用户按下“完成”按钮时，这些任务被视为完成</p><p>绘图：将显示屏左侧显示的笑脸复制到73×73 mm的正方形中。实验人员监视参与者，以确保他们画出了所有部位（头部，眼睛，嘴巴，鼻子，耳朵）。在所有姿势下都使用相同的图像进行直接比较</p><p>写作：在24厘米基线上写“重要”字。该单词被选为常见的9个字母的单词，具有多种字母和印刷多样性。</p><p><img src="https://user-images.githubusercontent.com/17808702/71764834-035f5c80-2f28-11ea-9711-4b38f2c926af.png" alt="image"></p><h3 id="Postures"><a href="#Postures" class="headerlink" title="Postures"></a>Postures</h3><p>我们评估35种姿势；表1中的所有33种候选姿势（3种手掌接触状态各10种手指状态）加上3种其他特定姿势。此外，我们使用两种姿势作为上下基线，来规范参与者的主观评分范围。我们选择正常（但参与者自然握笔）作为上限，选择Side-Thumb-Index-MiddleIn-PinkyIn作为下限，因为在所有参与者都能完成的姿势中，它在飞行员测试中得到的评分最低</p><h3 id="Design-and-Protocol"><a href="#Design-and-Protocol" class="headerlink" title="Design and Protocol"></a>Design and Protocol</h3><p>主要的自变量是姿势，33个分类水平代表每个姿势进行测试。为了使实验更容易进行，我们将每个手掌接触的所有姿势分为三组：10个跟、11个侧面和12个漂浮。三组的顺序是用平衡拉丁方来确定的。在每组中，姿势的顺序是随机的。两个部分之间至少需要30秒的休息时间，参与者可以在任何任务之间停下来放松或伸出手。两种底线姿势在实验开始时进行。</p><p>对于每一个姿势，参与者首先被呈现一个通常持续20到140秒的训练部分，这是从实验者描述和演示参与者在一个空的绘画画布上练习的姿势开始的。接下来是受约束任务的子集。</p><p>8个有约束的任务首先以随机顺序呈现，其次是2个无约束的任务，也以随机顺序呈现。水平线和垂直线的方向也被随机分配给每个参与者（即一些先从左到右绘制，一些先从右到左绘制）。每个参与者在所有任务和姿势中使用相同的随机顺序，以使序列可预测，并减少不必要的心理努力。所有任务完成后，要求参与者考虑任务姿势的舒适性和控制，并提供1到7的单一偏好分数（步长0.5）。我们考虑要求对疲劳和复杂性等指标进行单独评级，但我们的飞行员认为这项研究已经太久了。整个实验用了不到两个小时。</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p>考虑到大量的姿态条件，我们基于对6个关键指标图中明显趋势的视觉检查来解释结果（图5）</p><h3 id="Preference"><a href="#Preference" class="headerlink" title="Preference"></a>Preference</h3><p>对于每个姿势，参与者将姿势的舒适度和控制度评定为1到7分（最喜欢）的单一主观偏好分数，步长为0.5。注意，这不是Likert类型的量表，而是一个连续的间隔度量。如上所述，两种姿势作为上下基线，有助于使主观评分标准化（N和STIm-p）</p><p>通过姿势检查偏好模式（图5a），我们可以看到对侧掌（S–）和漂浮掌（F–）的明显偏好，分数接近上基线正常姿势。对于侧掌，小指向外（S—P）、小指向内（S—P）或环外和小指向外（S—RP）的姿势有高于中性的偏好。同样的手指组合在“漂浮手掌”的“中性”以上，但也增加了“中间”、“环”和“小指向外”（F–MRP）以及“中间”和“环向外”（S–MR-）。单纯的跟-手掌姿势（S–）高于4分，但脚跟和手指组合低于中性。使用握指状态的姿势不太受欢迎，但食指与浮动手掌（F-I—）或侧手掌（S-I—）接触都是边缘中性的。</p><p>需要注意的是，较低基线姿势（STIm-p）的平均偏好为1，但所有其他姿势的平均偏好为3或更多，这表明没有一种候选姿势是非常不受欢迎的</p><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>我们计算了两类约束任务的误差度量，类似于Matulic和Norrie的笔和触摸跟踪实验[20]：启动误差适用于攻丝和跟踪任务。它是从笔的第一个接触点到点或线开始的距离（以像素为单位）。跟踪错误仅适用于行跟踪任务。它是从每个笔笔划位置到目标线的最小距离的平均值（以像素为单位）。</p><p>检查错误模式（图5b，c），普通侧掌（S–）和无握指组合的侧掌通常具有较低的错误，特别是对于起始错误。漂浮姿势和脚跟姿势通常有较大的误差，但有趣的是如何放下一个戒指或小指（如F—p和F—rp）提供漂浮手掌的稳定性，以减少误差。</p><p>双握指接触侧掌和非握指伸出侧掌（STIMRP）的起始误差最大，环指和小指向内的跟掌（H-rp）的起始误差最大。这些错误率超过了基线姿势的错误率</p><h3 id="Duration-and-Speed"><a href="#Duration-and-Speed" class="headerlink" title="Duration and Speed"></a>Duration and Speed</h3><p>完成任务的时间和速度表明了整体的信任和表达能力。我们计算了两个持续时间指标：无约束绘图和书写任务的总行程时间（图5d中的持续时间UC）和完成所有约束攻丝和跟踪任务的总时间（图5e中的持续时间C）。平原侧，脚跟和浮动手掌都显示低持续时间。双握指和所有非握指伸出的侧掌（STIMRP）明显缓慢，与低基线姿势相当。</p><p>我们还检查了追踪任务期间的平均行程速度（图5f）。漂浮的手掌姿态是一种快速姿态，可以解释更高的误差。其他姿势跨越上下基线姿势的速度，少数姿势，如侧掌和跟掌，稍微超过上基线</p><p><img src="https://user-images.githubusercontent.com/17808702/71765250-29d3c680-2f2d-11ea-892c-d5ffbd4d0220.png" alt="image"></p><h2 id="DISCUSSION-AND-DESIGN-IMPLICATIONS"><a href="#DISCUSSION-AND-DESIGN-IMPLICATIONS" class="headerlink" title="DISCUSSION AND DESIGN IMPLICATIONS"></a>DISCUSSION AND DESIGN IMPLICATIONS</h2><p>偏好模式和其他指标表明，大多数姿势都是合理使用的。对于错误和时间度量，高等级姿势的表现存在一些差异。</p><p>例如，首选的漂浮手掌姿势显示出更高的误差，但较低的持续时间和更快的运动。为了更仔细地考虑这一点，并将我们的发现总结为推荐或避免的姿势组，我们使用度量组合对实验数据进行聚类</p><h3 id="Recommendations-Based-on-Clustering"><a href="#Recommendations-Based-on-Clustering" class="headerlink" title="Recommendations Based on Clustering"></a>Recommendations Based on Clustering</h3><p>K-means用于将姿势分为五组，以表示从首选姿势到可能避免或用于不经常动作的姿势。由于在考虑误差和时间相关度量时存在一些分歧，我们基于两个特征向量创建了两组簇姿态。第一组集中在3个维度上的错误：首选项、开始错误和跟踪错误。第二组关注4个维度的时间相关度量：偏好、持续时间UC、持续时间C和绘制速度。在这两种情况下，考虑到偏好维度的重要性，将其包含在内，并使用平均簇偏好来建立相对的群排序</p><p><img src="https://user-images.githubusercontent.com/17808702/71765289-96e75c00-2f2d-11ea-8297-9595094f31fe.png" alt="image"></p><p>聚类结果如图6所示。正如所料，上下基线姿势出现在最高和最低组。前两组分别为平侧、后跟和漂浮手掌。对于与时间相关的测量，笔指姿势和脚跟非笔尖姿势之间存在一些聚类分离，这表明前者使用起来更加自信。无名指和小指的侧掌在有序组之间的移动最大，但所有其他姿势的移动不超过一个相邻组</p><h3 id="Left-Handed-Participant-Pilot"><a href="#Left-Handed-Participant-Pilot" class="headerlink" title="Left-Handed Participant Pilot"></a>Left-Handed Participant Pilot</h3><p>我们还对三个左撇子参与者进行了完整的研究，他们在量表和模式上发现了与上述相似的结果。值得注意的例外包括更喜欢平实的跟姿势，更不喜欢平实的漂浮姿势，以及强烈不喜欢跟上有无名指和小指。在错误方面，任何握指接触的脚跟姿势都会显示出更明显的错误增加，而且在高的绘制速度下，漂浮手掌的分离更加清晰。尽管存在一些差异，但总体模式是相似的，我们相信交互技术和姿势建议也适用于左撇子用户。</p><h3 id="Design-Implications"><a href="#Design-Implications" class="headerlink" title="Design Implications"></a>Design Implications</h3><p>总的来说，我们的研究结果表明，设计师应该偏爱侧摆和浮掌姿势，而不是使用脚跟，除了普通脚跟（H–）和脚跟小指（H–P）姿势。最好是手指不握的姿势，在这一组中，只使用小指（P或*–P）或匹配的戒指和小指组合（RP或*–RP）的姿势是不错的选择。用一个浮动的手掌（F–MRP）将所有非握紧的手指放出来也是一个合理的选择。虽然用手指触摸的姿势没有排名高，聚类练习表明，他们可能是不太精确的快速动作的好候选人。</p><p>这些结果并没有考虑到不同的姿态如何可靠地被识别，这一方面将对实际实现和现实世界的可用性产生影响。我们将在下一节对此进行研究</p><h2 id="RECOGNITION"><a href="#RECOGNITION" class="headerlink" title="RECOGNITION"></a>RECOGNITION</h2><p>我们的手部姿势检测利用的是屏幕表面的全手接触模式，而不仅仅是指端。先前的工作还研究了扩展的触摸输入空间，识别器可以在原始触摸数据可用时使用手部轮廓、接触椭圆或仅使用触摸点。在大多数情况下，这些技术使用基于简单特征和启发式的分类器，这些分类器可能只适用于少数非常不同的接触模式。最近应用于灰色触摸图像本身的深度学习方法有可能产生更高的识别性能。因此，为了识别不同的姿势，我们使用一个基于深度神经网络的分类器，该分类器是根据上述实验中记录的笔触数据进行训练的。该识别器针对为稍后描述的应用程序演示选择的10个姿势集（见表2）进行训练。在实践中，同样的方法可以用来训练任何一组姿势</p><h3 id="Training-Data-and-Recognition-Context"><a href="#Training-Data-and-Recognition-Context" class="headerlink" title="Training Data and Recognition Context"></a>Training Data and Recognition Context</h3><p>识别器可以在下笔或下笔周围触发，以确定整个画笔操作的模式，在输入期间连续更改模式，或调用诸如菜单之类的就地小部件。许多设备，如Wacom平板电脑，支持悬停检测，当笔靠近表面时，悬停检测提供笔坐标。在笔接触表面之前悬停输入帧的数量取决于传感硬件和手的运动速度。使用我们的系统和数据，分类器中平均可以使用5.7个初始笔悬停帧（sd=2.0）</p><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><p>原始的电容触摸图像可以很好地利用神经网络进行自然图像分类，如CNNs，因此我们采用了类似的方法。因为除了原始的触摸输入之外，我们还有笔的数据，所以我们增加了每个触摸帧的单通道图像，增加了两个额外的通道来捕捉笔的位置和接触状态。具体地说，如果鼠标悬停，我们在第二通道以笔尖坐标为中心画圆点;如果触摸，我们在第三通道以笔尖坐标为中心画圆点。图7显示了该数据合并操作产生的三通道图像的示例。</p><p>姿势分类使用基于VGG16模型的深层神经网络，卷积层在ImageNet上预先训练。这种对自然图像的预训练允许网络在与其他图像一起进行分类时，仅在几个时期后收敛。此外，VGG是众所周知的，因此可重复，并可与其他工作进行比较。</p><p>在最后卷积之后的最大池操作之后提取网络的特征，然后通过1024个单元的完全连接层馈送，最后通过输出大小等于类数的另一个完全连接层馈送。第一个线性层使用ReLU激活和以0.4的比率退出。该网络使用Adam优化器进行训练，学习率为0.001，批量大小为128，权重衰减设置为0.001。我们的神经网络架构是使用Chainer框架在Python中实现的</p><p><img src="https://user-images.githubusercontent.com/17808702/71768464-0f134900-2f51-11ea-81e5-4c02c9c1ed78.png" alt="image"></p><h3 id="Training-and-Validation"><a href="#Training-and-Validation" class="headerlink" title="Training and Validation"></a>Training and Validation</h3><p>为了训练我们的VGG网络，我们使用了以下笔为中心的200ms窗口中包含的笔和触摸组合数据的三个通道图像，因为此时将做出大多数姿势分类决策。只使用了带有实际笔数据的图像，这意味着笔在悬停或接触表面的可检测范围内。我们将参与者数据分成15个训练和3个验证集（12个实验参与者，3个左手参与者，3个其他参与者）。左撇子参与者的数据是镜像的。我们不包括用于分类的纯浮动手掌位置，因为它没有触摸数据，因此易于区分。每个姿势的帧数大约为训练集的9000到12000，测试集的1300到2500。我们通过应用随机平移、光照缩放和旋转变换，通过数据增强人工地将这些样本加倍。这些操作增加了数据的多样性，并填充了实验任务未充分覆盖的屏幕区域。</p><p>我们对我们的两个姿势集进行了30次重复随机子采样，并使用了leave-3-out方案。对于每一次运行，我们记录了5个epoch内的最大总体精度和最小损失(softmax交叉熵)，并计算了在30次运行中获得的平均和最大精度和损失。我们还保存了与每次运行的最大精度和最小损失相关联的神经网络模型，以进行详细分析。</p><h3 id="Results-1"><a href="#Results-1" class="headerlink" title="Results"></a>Results</h3><p>在34个姿势中，我们得到了平均整体交流率为62.2%，相关损失为1.82，其中表现最好的模型准确度为70%，损失为1.63。每次运行中最佳模型的平均精度的混淆矩阵如图8所示。</p><p>从矩阵中可以看出，正常的手掌姿势和侧掌姿势经常混淆，这是人们在正常书写时，手靠在掌心上休息时所能预料到的。侧掌姿势与食指或拇指触摸周围的笔尖也显示出较差的识别精度，可能是因为他们太近，他们的触摸打印不够清晰。一般来说，侧边和脚后跟的姿势之间似乎有些模糊，这也并不奇怪，因为当手指定位和拖动手掌表面时，手掌底部不可避免地会滚动。基于手掌的漂浮姿势不会出现这种混乱，因此通常得分更高。<br>对于10姿态集，总体平均准确率为91.4%，损失0.50，表现最好的模型准确率为96%，损失0.20。这些结果表明，理论上，我们选择的姿势可以在真实的应用程序上下文中可靠地检测到。我们使用最佳模型作为第二项研究中应用程序的识别基础</p><p><img src="https://user-images.githubusercontent.com/17808702/71768522-abd5e680-2f51-11ea-8bb6-9e36f74c7e01.png" alt="image"></p><h2 id="APPLICATION-DEMONSTRATIONS"><a href="#APPLICATION-DEMONSTRATIONS" class="headerlink" title="APPLICATION DEMONSTRATIONS"></a>APPLICATION DEMONSTRATIONS</h2><p>为了演示如何在实际应用程序上下文中应用unimanual pen+touch input，我们为两种典型的任务类型创建了一个基于姿势的接口:文档注释(使用Foxit Reader)和矢量绘图(使用Inkscape)。前者是一个更简单、更直观的应用程序，因为它与现实世界类似。后者更复杂，需要密集的工具集才能有效地使用。我们使用桌面应用程序进行快速原型设计，但是一般的概念一般适用于专门构建的平板应用程序。</p><p>我们创建了三个专门为普通笔输入设计的小部件:径向菜单、手势输入和用于文本输入的手写识别(图9)。手势输入使用六种标准的微软应用手势:左半圆和右半圆用于撤销和重做;上下翻页进行复制和粘贴;还有一个“划掉”之字形的“删除”。</p><p><img src="https://user-images.githubusercontent.com/17808702/71768576-171fb880-2f52-11ea-83f7-1cf5fa0ea567.png" alt="image"></p><h3 id="Posture-Mapping-and-Interfaces"><a href="#Posture-Mapping-and-Interfaces" class="headerlink" title="Posture Mapping and Interfaces"></a>Posture Mapping and Interfaces</h3><p>我们使用一组10个姿势，设计了映射和接口，以优化语义接近性和姿势动作适宜性(表2)。在选择姿势集和将姿势映射到应用程序命令时，考虑了适宜性实验的结果。视频提供了完整的应用演示。</p><p><img src="https://user-images.githubusercontent.com/17808702/71768587-433b3980-2f52-11ea-927c-cd31c6f3b135.png" alt="image"></p><p>语义接近:这是通过将相似的动作映射到相关的姿势来实现的。在这两个应用程序中，侧掌姿势与创建相关:绘图、代位、创建形状等，而浮动掌姿势与更多的“宏观”交互相关:在矢量编辑器中选择、转换和样式;在文档注释器中导航和搜索。</p><p>姿势动作的适宜性:这是通过将常见的动作映射到更喜欢、限制更少的姿势来实现的。在这两个应用程序中，最常见、最要求精度的工具被映射到Side，而下一个最常见的工具被映射到Side- pinkyout。这两种姿势都有较高的偏好评分和准确性结果。菜单由允许笔尖运动但限制手的运动的姿势触发，例如使用RingOut-PinkyOut。在文档an- notation中，另一个同样简单的姿势Heel被用于高亮显示的常见动作。需要较少精度的动作，如手势，被分配到精度较低的结果，漂浮指数</p><h3 id="Technical-Implementation"><a href="#Technical-Implementation" class="headerlink" title="Technical Implementation"></a>Technical Implementation</h3><p>我们的实现作为全局服务运行，该服务在后台运行识别器并将命令注入当前应用程序。通过定义一个YAML配置文件，可以根据前景窗口的标题自动激活该应用程序，从而为任何应用程序提供单一的Pen + Touch界面。全局服务（C＃、. NET，WPF）使用套接字将原始的触摸和笔输入数据转发到识别器（Python）。为了提高性能，该服务每150ms触发一次识别请求，该请求由最新的8帧输入组成。一切都是异步完成的，因此不会引入软件滞后，并且不会增加笔或触摸事件的延迟。从发生姿势变化到系统识别到它的最大可能延迟时间是200ms。但是，由于姿势需要一些时间才能形成，因此这种延迟在实践中并不明显。然后，基于识别的姿势，该服务通过发送键盘快捷键，按键或鼠标事件（使用Window的SendKeys和inputsimulator），显示笔本地化的径向菜单（使用自定义WPF窗口）来触发对前台应用程序的操作。通过收集笔势进行手势或文本识别（使用Microsoft的InkCanvas API）。</p><h2 id="STUDY-USABILITY-IN-PRACTICE"><a href="#STUDY-USABILITY-IN-PRACTICE" class="headerlink" title="STUDY: USABILITY IN PRACTICE"></a>STUDY: USABILITY IN PRACTICE</h2><p>这项研究的目的是在更现实的环境中测试单笔+触摸输入的一般可用性。 使用演示应用程序，我们检查了人们是否可以使用该技术完成现实的任务，他们是否可以记住姿势到命令的映射以及是否对原地识别器的准确性有所了解。</p><h3 id="Participants-and-Apparatus"><a href="#Participants-and-Apparatus" class="headerlink" title="Participants and Apparatus"></a>Participants and Apparatus</h3><p>我们招募了5位右撇子参与者，年龄22至30，其中2位是女性。 招聘工作是口口相传，每位参与者成功完成90分钟的学习后可获得10美元。 最好使用笔在平板电脑上的经验，因为可以更好地理解笔模式切换的问题：其中有4位参与者有这种经验。</p><p>使用了相同的Wacom平板电脑，但由于其GPU（GeForce GT 740M）可以提高识别速度，因此配备了HP Envy（Windows 10，Core i5 2.60 GHz，8GB RAM）。</p><h3 id="Design-and-Protocol-1"><a href="#Design-and-Protocol-1" class="headerlink" title="Design and Protocol"></a>Design and Protocol</h3><p>训练开始于大约10分钟的姿势训练。这要求参与者使用演示应用程序使用的所有10个姿势来完成研究1中的简化任务集。与研究1不同，显示了识别的姿势，因此参与者知道识别器是否成功识别出执行的姿势。姿势训练后，参与者完成了一组用于文档注释的训练和测试任务，然后完成了一组用于矢量绘图的训练和测试任务。在此培训课程中，文档被加载到应用程序中，该文件包含执行某些任务的指令以及使用姿势。在试验过程中，虽然只允许他们询问实验者是否忘记了相应的姿势，但只给了他们书面说明。每个应用程序的任务都被选择为非专家，相对通用并代表可能的姿势。完成所有申请任务后，进行了研究后访谈。</p><p>文档注释任务是作为要在PDF文档上执行的操作的列表而提供的，例如“以黄色突出显示“爱丽丝”一词”和“搜索“聚会”一词”。完整的文档注释任务包括：圈出单词或使用铅笔工具书写文本；用橡皮擦工具擦除；突出显示文字；改变铅笔或荧光笔的颜色；进行手势；搜索文档。</p><p>矢量绘图任务要求参与者绘制一组形状以匹配给定的绘图。选择这些形状需要多个工具模式切换。完整的矢量绘图任务包括：使用多边形工具绘制多边形；使用其他创建工具（铅笔，矩形，椭圆形）；节点编辑；转换对象；造型对象；进行手势；输入文字。结果所有参与者均在90分钟内成功完成了实验。由于日程安排问题，一位参与者（P1）在2天内分2部分进行了研究。四名参与者表示，如果识别器更加准确，他们将在个人工作中至少使用一些姿势。第五位参与者具有间接手写板的经验，以及用于模式切换的首选键盘快捷键。在“测试”部分中尝试回忆相应的姿势动作时，参与者经常尝试执行姿势，并观察光标图标以确定他们是否处于正确模式。参与者对文档注释器的颜色菜单的困扰最大。 Side-RingOut-PinkyOut将调出铅笔工具或较亮工具的颜色菜单，具体取决于先前使用的工具。尽管参与者发现此语义非常有用：“无论手掌如何，我都会放下2个手指”（P3），但他们发现很难从Side过渡到它，而在过渡过程中无法识别出其他姿势。三名参与者说，姿势太多了：“我宁愿只拥有一种核心姿势，而另一种则让我改变其工具”（P4）。这可能是由于该技术的新颖性。</p><p>三名与会人员对RingOut- PinkyOut的不适感进行了评论，但一些评论者说，稍加调整可解决“这最初很困难，但有些改动对我们有积极的影响”（P1）。短时间的研究阻止所有参与者找到最适合自己手部的舒适姿势。两名参与者确实对Float-Index持正面评价。鼓励参与者进行各种姿势的尝试，并使用不同的手指进行试验，例如笔尖附近的中指或无名指，而不是食指。</p><p>识别器工作良好，但某些参与者对某些错误分类的表现更为明显。对于某些参与者，Side经常被错误地分类为Heel或Side-PinkyIn。尽管增加了数据，但在第一个实验未涵盖的区域中，识别器的表现也较差，从而导致我们口头提示用户执行更靠近屏幕中心的姿势。</p><h2 id="DISCUSSION"><a href="#DISCUSSION" class="headerlink" title="DISCUSSION"></a>DISCUSSION</h2><p>第一项研究的结果表明，在保持笔控制的同时，可以相对舒适地执行多种单笔+触摸姿势。所有5位参与者在完成第二项研究中的任务后，进一步给予了支持。</p><p>尽管深度学习识别器在受控的实验数据中显示出很高的准确性，但第二项研究的细微差别表明，实际应用环境需要改进。需要更多数据来确定识别错误是由于固有的姿势相似性还是由于训练数据不足。通过至少部分地在每个目标用户上训练网络，或者通过使用一组减少的，例如4到5个健壮的姿势，可以提高准确性。<br>这些演示表明，可以扩展先前存在的应用程序，以创建简单或复杂的单笔触控体验。笔芯，荧光笔和橡皮擦的切换得到了肯定的好评，手势和文本输入小部件也得到了好评。基于姿势的菜单交互的积极性较差，这可能是因为颜色菜单可能难以触发，并且由于软件问题而显得有些不稳定。</p><p> 其他可以利用单笔+触摸姿势的应用程序是绘画应用程序，可以映射到不同的画笔和颜色，还可以使用电子表格编辑器，可以在数据输入（使用手写识别）与选择或数据操作之间进行基于姿势的切换。此外，我们的文本输入小部件可以提示一般的键盘输入，甚至可以使用姿势触发键盘快捷键。例如，使用Float-PinkyOut编写字母C可能会触发CTRL-C。将其缩放为具有多个修饰符的快捷方式将是一个挑战，但可能会将桌面快捷方式引入纯笔环境。</p><h3 id="Limitations-and-Opportunities"><a href="#Limitations-and-Opportunities" class="headerlink" title="Limitations and Opportunities"></a>Limitations and Opportunities</h3><p>适用于手部控制减少的用户-老年人，儿童，行动不便的人和手部受伤（例如手指缺失）的人可能无法充分利用我们的技术。我们正在提议一种加速现有GUI操作的方法，因此可能存在多余的输入法。可以利用手部控制中的个体差异来创建用户特定的姿势，尤其是在存在非精确的抓地力或不规则的手部生理状况时。</p><p>与其他笔输入法的兼容性-某些输入法，例如按一下笔筒按钮或同时精细控制笔压，可能很难在保持某些单手姿势的同时执行。但是我们相信许多技术都可以兼容，例如使用笔的橡皮擦端，倾斜和旋转。由于我们的输入空间包括正常姿势，因此所有笔输入技术均与该握把保持兼容，但也许并非我们建议的各种姿势。单人姿势也与标记菜单和相关命令手势兼容，我们的姿势为“墨水与命令”问题提供了解决方案。</p><p>可发现性-不可否认，这些姿势对用户而言并不直观，必须加以教,，但是为期两天的第二次研究的参与者对第二天的改进发表了评论，表明学习曲线并不陡峭。第二项研究还建议，一旦用户知道可能的姿势，光标反馈对于用户发现姿势动作必不可少。我们简洁的姿势命名格式（F — RP或Float-RingOut-PinkyOut）可以与菜单项和工具提示一起显示，类似于某些应用程序中键盘快捷键的显示方式。使用屏幕上的手势指导进行训练[10]是另一种方法。</p><p>认知学习-像任何大的输入空间一样，记住姿势和动作之间的映射需要付出一些努力。未来的工作可以直接检查学习情况，并研究基于排练的界面或前馈技术如何帮助从新手过渡到专家表现。身体学习-此外，由于笔握是一项很好的运动技能，因此，为期两天的研究参与者也再次提出建议，暴露时间多或暴露后的一夜睡眠可能会影响舒适度和控制力，他们也承认经历的时间较少第二天感到不适。</p><p>识别问题-观察到一些系统的识别问题。参与者提到在Side到Side-RingOut-PinkyOut或Side-PinkyOut之间转换时遇到的困难。在过渡过程中，手接触会错误地触发这三个姿势中的任何一个。尽管如果姿势动作是非破坏性的，这不是问题，但这些姿势会触发菜单，这在不期望的情况下会产生震动。一种可能的解决方案是在相似姿势之间转换时具有强制保持时间。通常，尽管我们发现Heel通常被错误分类为Side，但误报最少。在第一项研究中，我们确实观察到了多种跟姿姿势，这可能会影响识别器。对该姿势进行更严格的定义可以减少错误分类。</p><p>硬件-我们的识别器需要原始电容输入，这是所有触摸设备都支持的，但是如果没有一些底层系统工作，供应商通常不会公开它。其他更简单，更综合的触摸数据（例如接触椭圆甚至触摸点）可能足以识别一些非常独特的姿势。</p><h2 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h2><p>我们介绍了一种新颖的单笔触控输入空间。我们对33种姿势的首次评估结果表明，在主观舒适度和客观控制度方面，许多都是合理的。利用研究数据，我们使用预先训练的VGG架构训练了卷积神经网络，以高精度识别姿势。使用10姿势界面的两个应用程序演示显示了该技术在实践中的工作方式，并且一项小型的可用性研究获得了积极的反馈。我们惊讶地发现了这么多可行的姿势，我们的演示应用程序显示10种姿势是可行的。但是，在一个简单的笔记应用程序中，即使是具有2或3个姿势的更受限制的系统对于在频繁模式（例如墨水，高亮和橡皮擦）之间快速切换也很有价值。</p><p>合理的下一步是使用标准模式切换实验协议来正式测试不同姿势之间切换的性能[18，35]。而且，与标记菜单等技术的直接比较将建立相对于流行基准的性能基准。我们假设单笔触摸手势的姿势与命令激活与直接操作之间的联系更加紧密，但是与标记菜单不同，没有明显的方法可以支持新手到专家的学习。</p><p>未来的其他方向包括探索用于移动平板电脑或其他非三脚架握持姿势（例如电动握持器）的一小部分姿势，这些姿势只能使用触摸表面上的电容模式来感知。我们的希望是，我们的工作有助于使笔输入更具表现力，这意味着输入空间会增加并且更加细微。我们仍然对人的手有多么出色以及在获得适当的数字支持后的能力感到敬畏。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Technology-Mediated Social Participation: The Next 25 Years of HCI Challenges</title>
    <link href="/2019/12/18/Technology-Mediated-Social-Participation-The-Next-25-Years-of-HCI-Challenges/"/>
    <url>/2019/12/18/Technology-Mediated-Social-Participation-The-Next-25-Years-of-HCI-Challenges/</url>
    
    <content type="html"><![CDATA[<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>Facebook、Twitter、YouTube、博客和传统讨论组等社交媒体的巨大成功，使个人能够活跃于当地和全球社区。一些热心者认为，通过适度的重新设计，这些技术可以被用来支持国家的优先事项，如医疗保健/健康、灾难应对、社区安全、能源可持续性等。然而，要实现这些雄心勃勃的目标，需要长期的研究，以发展有效的科学理论和可靠、安全、可扩展的技术战略。如何激发参与、增加社会信任和促进合作等长期存在的问题仍然是重大挑战，尽管技术正在迅速发展。本次讲座邀请了跨多个学科的研究人员参与到人机交互(HCI)学科的重新定义中来，沿着更多的社会路线来回答重要的研究问题，同时创建鼓舞人心的原型，进行创新的评估，并开发可靠的技术。通过更加重视社交媒体，HCI社区可以建设性地影响这些历史性的变化。</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>一代又一代的哲学家、心理学家、社会学家和其他社会科学家都在苦苦思索，究竟是什么促使人们做出有益或有害的行为。他们还考虑了如何鼓励个人、组织和国家解决冲突，以及如何激励学生、公民或员工更有创造性地参与其中。其他重要的问题围绕着信任如何增长，尊重如何出现，责任如何被接受，同理心如何被鼓励。当代研究人员提出的问题包括:什么构成了对隐私的适当尊重?什么时候网络玩笑变成了欺凌?这些研究人员还希望为越来越多的社区管理人员和社会企业家服务，他们正在寻求设计指导方针、衡量成功的标准和刺激社会参与的战略。<br>获得有效的指导变得越来越重要，因为社交媒体使更多的人能够更频繁地进行社会接触、贡献和协作，涵盖更广泛的社会情况。支持者认为这一历史时刻是一个乌托邦式的机会，可以恢复衰退的经济，加速商业创新，加速公民参与政府。与此同时，批评人士抱怨说，这些以技术为媒介的关系必然是肤浅的，因为它们缺乏面对面接触的丰丰性，而且分散在更多的人身上。这些批评家们担心人际关系的恶化，团体产生变革性社会运动的能力下降，有争议的公共话语的可能性增加，国际化的科学团体等等。尽管商业协调、公民参与和国际合作可能会得到促进，但也存在企业忠诚度降低、压制性政府监控公民通信以及破坏性网络战的风险。</p><h3 id="Defining-Technology-Mediated-Social-Participation-TMSP"><a href="#Defining-Technology-Mediated-Social-Participation-TMSP" class="headerlink" title="Defining Technology-Mediated Social Participation (TMSP)"></a>Defining Technology-Mediated Social Participation (TMSP)</h3><p>社交媒体的使用越来越多地采用了新的形式，从个人博客到稳定的140字的推文，这些推文既有共同兴趣爱好的人阅读的深思熟虑的、往往充满激情的评论，也有向数百名不同的关注者发布、甚至可能被转发到数千人的推文。积极参与社交网络可以促进意识、回应，有时还可以在“朋友”之间进行严肃的讨论，而精心制作的YouTube视频可以通过电子邮件、推特、博客或国家电视台提到的网址迅速传播开来。协同工具的显著能力鼓励了大规模的协同努力，如维基百科或有益的集体智慧项目，如电影推荐系统、产品评论网站，或政府知识共享，如美国国务院的Diplopedia。用户生成的内容站点还包括照片共享，如Flickr、音乐共享、诗歌、政治文章、操作方法、问答、开源软件等等。</p><p>关于这些用户生成内容策略所带来的好处和危害程度的争论非常激烈。乌托邦式的远见者们预见了赋权于创造力的个人、改善的家庭沟通、蓬勃发展的弹性社区、大量的商业创新、公民参与政策决策以及国际冲突的解决。忧心忡忡的批评家们抱怨注意力不集中、家庭价值观的瓦解以及数字化的毛泽东主义，这些都需要无偿的劳动，从而破坏了工作。他们担心日益激烈的公众言论、有害文化规范的不受控制的传播，以及不受欢迎的经济政策强加给实力较弱的国际参与者。</p><p>一些批评家贬低这些社会联系是轻量级的，不能产生对社会变革必要的承诺参与。他们认为，社交媒体只能产生微弱的联系，而强有力的联系是转变激进主义所必需的。这些说法可能是对的，但许多受访者认为，大量的弱关系是在更小范围的活动人士中发展更强关系的有益和必要的前兆，而这些活动人士最终会产生强有力的变化。</p><p>当然，朱迪·威廉姆斯的故事是有启发性和鼓舞人心的。她创建了全球电子邮件和讨论小组社区，以建立强有力的联系，从而导致了一场禁止地雷的成功运动，为此她获得了诺贝尔和平奖。另一个有益的例子是社交媒体对2009年12月海地地震的大量反应。救援组织不仅通过社交媒体进行协调，数百万人还通过短信向红十字会捐款10美元，以支持紧急救援。以前从来没有这么快就筹集到这么多钱。另一种社会反应形式是迅速形成危机营软件马拉松，以生成有助于在没有详细街道地图的地区绘制灾难地图的软件，并生成从海地方言翻译而来的软件，这些方言没有现有的工具。</p><p>一般社交媒体的好处和坏处引起了广泛的兴趣，并将促使公司和电子商务研究人员进行广泛的研究，另外还会产生重视这些有趣和随意的技术的娱乐和社会分析师。与此同时，当这些社交媒体被应用于国家优先事项和生命攸关的活动，如灾难应对、社区安全、健康/保健、能源可持续性和环境保护时，也存在一些重要的问题。这些应用程序和上下文应该成为技术中介社会参与(TMSP)研究议程的重点。</p><p>当许多国家的开放政府运动成为研究议程的一部分时，就包括了更大范围的应用。在美国，奥巴马总统的开放政府指令涵盖了透明度、协作和参与。数据共享在美国政府网站等网站和recovery.gov已经改变了机构实践和公众说——在许多领域,但更大的变化将会参与征集竞赛,挑战,志愿者邀请、专家审查提出了边条-条款,和国家,州和地方服务项目。</p><h3 id="Setting-a-Research-Agenda"><a href="#Setting-a-Research-Agenda" class="headerlink" title="Setting a Research Agenda"></a>Setting a Research Agenda</h3><p>对于社区、企业和国家领导人来说，解决关于TMSP的好处或坏处的不同印象不仅仅是一个重要的挑战。它还引导人机交互研究人员处理有关个人行为、协作策略、社区参与和国际合作的深奥科学问题。通过迎接这些挑战，我们可以更广泛地重新定义HCI，甚至可能标志着“人-社区互动”甚至“人-社会互动”(HSI)等新名称的变化。</p><p>这些转变和名字的改变将会给我们的研究社区带来新的挑战，这些挑战将会把我们引向更深刻的问题。通过拥抱雄心勃勃的界面设计目标，并整合新的社会科学研究问题，我们将有机会影响仍在展开的社交媒体技术及其应用的设计。这些机会带来数以万亿美元计的商业机会和社会转型潜力，将塑造几个世纪的文明。企业家将会奔向这些可能性，而来自许多学科的科研人员将会有一个非凡的历史性机会来发展关于个人、家庭、群体、组织和国家行为的基础方面的深刻理论。</p><p>这些问题已经被研究了几个世纪，但独特的可能性是，历史上第一次可以很容易地获得大量关于人类实际活动的数据进行分析。这种信息丰富的环境能够对代表实际行为的数十亿数据点进行统计分析，而不是对有偏见的感知、构建的态度或过滤的关于记忆活动的报告进行小样本调查。</p><p>丰富数据的可用性是一个好消息，但是统计、数据挖掘和机器学习方法、可视化工具和可视化分析方法的算法还有待开发，以便研究这些引人注目的和深入的科学问题。一些研究团体已经发现了这个机会，最引人注目的是web科学的推动者。其他来源包括近一个世纪前的社交网络分析的早期成果，但直到现在，软件工具才开始用于进行复杂分析，并产生有意义的可视化结果，显示重要的模式、集群、关系、异常和异常值。一个世纪的研究需要开发新的数学方法和有效的算法来处理这些新的挑战，当数据集包括数百万和数十亿的顶点和边。</p><p>高效的算法是必不可少的，但它们可能不足以提供促进探索的快速结果。正如需要专门的计算机芯片(称为图形处理单元(gpu))来实现对以三角形网格为代表的三维环境的快速操作，并通过视觉上引人注目的纹理映射进行丰富一样，专门的计算机芯片(我们称之为社会处理单元(spu))可能也需要用来处理网络分析计算。计算网络度量(如介数中心性、PageRank或特征向量中心性)的算法很难在标准的并行计算架构上实现，因为大多数图不支持干净的数据划分。类似地，随着网络的增长和连接变得更加紧密，识别紧密连接的社区的聚类算法集合的增长需要大量的计算能力。最后，需要更强大的计算能力来运行简化图形的聚合方法，以便通过用户从不断增长的布局策略家族中提取不同的见解来可视化它们。物理学家和数学家的早期研究产生了引人注目的结果，这些结果描述了由诸如优先连接等原则产生的无尺度和小世界网络。然后，新一代的计算机科学家进一步整合社会科学问题，产生更适用的视野，如强关系与弱关系、情感预测和参与程度。随着计算社会科学家在大量数据集中促进研究，研究人员的社区急剧增长，国防机构、国家科学机构、国家卫生资助者和一系列企业赞助商的资助也在增加。</p><p>由于根深蒂固的学科巧妙地游说支持他们的研究议程，这些新课题仍然受到抵制。他们不会轻易让步，因此HCI社区和其他认识到这一历史性转变的人将必须有效地合作，以制定一个深思熟虑的、有说服力的研究议程，并具有现实的短期和诱人的长期目标。如果我们与许多学科合作，发展深入的科学理论，描述极端的技术挑战，所有这些都与社会利益有着充分的联系，那么我们对大规模资金转移的要求将是最有效的。</p><p>为了促进对研究议程的讨论，我们(我自己、Jennifer Preece和Peter Pirolli)获得了美国国家科学基金会的资助，在领先的学者、行业研究人员、政府工作人员和年轻的研究生中举办了两场30人的研讨会(<a href="http://www.tmsp.umd.edu).第一个研讨会于2009年12月10日至11日在加州帕洛阿尔托举行,以吸引西海岸的研究人员和行业研究人员.第二个研讨会于2010年4月22日至23日在弗吉尼亚州阿灵顿举行,以促进东海岸学者、国家科学基金会工作人员和其他政府工作人员的参与./">www.tmsp.umd.edu)。第一个研讨会于2009年12月10日至11日在加州帕洛阿尔托举行，以吸引西海岸的研究人员和行业研究人员。第二个研讨会于2010年4月22日至23日在弗吉尼亚州阿灵顿举行，以促进东海岸学者、国家科学基金会工作人员和其他政府工作人员的参与。</a></p><p>研讨会的参与者确定了几个主题，并组成了讨论组，历时6-9个月，撰写了6篇共同撰写的文章，这些文章发表在2010年11月的《IEEE计算机》杂志上，作为封面特写，同时介绍了研讨会的三位组织者。这些文章的主题是科学基础，界面设计问题，研究基础设施需求，健康/健康的可能性，开放的政府政策，以及从K-12到终身学习的教育需求。</p><p>除了健康/健康和开放政府应用,这些详细的TMSP研究计划在救灾强调应用,能源、教育、文化和多样性,环境和气候,公民科学,经济健康,水珠——实现与发展,政治参与,当地公民参与和公共安全(表1)。本文在科学基础概述了理论、新方向给人一种科学研究机会与实际问题交织在一起的感觉。</p><p><img src="https://user-images.githubusercontent.com/17808702/71069991-d46d8a80-21b4-11ea-8109-cf84d757d1a3.png" alt="image"></p><h3 id="New-Theories-and-Innovative-Research-Methods"><a href="#New-Theories-and-Innovative-Research-Methods" class="headerlink" title="New Theories and Innovative Research Methods"></a>New Theories and Innovative Research Methods</h3><p>所需要的TMSP理论的范围是惊人的，从由清理和聚合的数据组织成有意义的见解的描述性理论到呈现因果模式的解释性理论。这些理论为规范性理论奠定了基础，为界面设计人员、社区管理人员和政策制定者提供了指导方针和最佳实践。在某些情况下，预测理论将足够精确，可以预测社会网络的演变和集体行动项目的结果。偶尔，更深层次的见解会导致生成理论，提出新的社交媒体策略、限制恶意行为的新方法，以及集体行动和国际合作的新目标。这五种理论只是一个起点，其他形式的理论也可能出现，以适应这一广阔的研究前沿的广度和深度。</p><p>理想情况下，新鲜的理论导致创新的研究问题，需要新颖的重新搜索方法。社交媒体的研究方法可能会带来最大的变化。在过去的400年里，物理和化学领域的传统科学研究一直受到还原主义方法和可复制的实验室控制实验的信仰的支配。科学家会改变一小部分自变量，如温度或压力，控制其他变量，如电场或磁场，并测量对因变量的影响，如电阻或膨胀。简化方法也影响了植物学、地质学或天文学的观察方法，在这些方法中，数据被收集和分析，以发现变量之间的关系，这些关系可以被独立的研究人员验证。</p><p>在以技术为中介的社会参与世界中，这些还原论和可复制性的传统假设可能会有新的延伸。TMSP中有趣的变量包括信任、同理心、责任和隐私，这些仍然难以定义和衡量。即使是经常被讨论的变量，如动机、说服、自我效能、技术接受度和普遍可用性，也很难用主观尺度以外的简单衡量方法来衡量，主观尺度会产生不稳定和微妙的反应。转向对实际行为的测量将有助于提高有效性，但用户之间紧密交织的反应意味着语境、熟悉度是中心，六个月后，当用户或多或少地信任时，结果可能会非常不同。隐私政策变化对自由裁量的娱乐服务(如电影评级社区)信任的影响，可能与对生命至关重要的系统(如灾难响应或描述癌症治疗经验的健康讨论组)非常不同。</p><p>如果还原论和可复制性需要重新定义或替换，期刊审稿人将如何修改他们对严谨研究的定义?案例研究能否超越假设生成，成为可接受的策略，以收集支持假设检验的证据?也许医学和商业研究者的例子是有用的，因为他们已经为严谨的案例研究制定了标准，当重复的时候可以帮助收集证据来支持假设。诸如多维度长期深入案例研究(MILCs)等策略已经被应用到探索性和发现工具中，例如信息可视化。基于新数学的新理论形式可能会出现，就像20世纪初的量子物理和统计力学那样。奇怪的纠缠，也许不同于量子的纠缠，在人类的经验中是普遍存在的，统计方法可以很好地解释聚集的人类行为，即使一个人的行为是不可预测的。</p><p>在社交媒体时代，提高人类动机这一经久不衰的问题已呈现出新的影响力。维基百科是一个伟大的成功故事，因为它采用了创新的策略来激励用户贡献他们的知识，并与他人合作。但即使在这个成功的故事中，每1000个读者中也只有一个是注册贡献者，更少的人会成为定期合作者，一起工作数周甚至数月。类似地，尽管YouTube拥有数十亿的观众，但贡献内容的人却很少。激励或说服是一个古老的人类概念，但在全球范围内研究它的能力才刚刚成为现实。从受控的实验室实验到在工作系统中进行干预的转变正在发生，因为设计师和研究人员已经能够以前所未有的规模捕获使用模式。</p><p>从读者到领导者的框架（图1）为讨论激励策略和开展研究提供了一种有序的方式。它建议用户通过朋友推荐、新闻媒体报道、网络搜索和其他上百种技术来获得读者。然后读者可以看到其他人的贡献，并注册以编辑现有信息或添加新内容、评论或评级。偶尔的贡献者可能演变为频繁的贡献者，或者进入下一步，与他人合作计划新内容。一些贡献者对项目越来越投入，并且可以与其他贡献者建立良好的关系。然后一些贡献者开始参与治理、制定策略、处理问题或指导新人。在每个阶段，创新的企业家和研究人员都开发了界面设计和激励策略，如显示视频的观看次数、对贡献进行评级、表彰更丰富的合作，以及赋予领导者权力。</p><p>许多其他的理论和框架被提出作为商业，政府和学术研究人员迅速扩大他们的努力。传统的社会科学理论被用来理解、预测和指导那些试图在网络世界中增加信任、同理心、责任和隐私的设计师。类似地，网络分析的数学理论也在不断增强，以适应在线社会系统中明显的人类动态。从基于统计分析和数据挖掘的描述性和解释性理论向为社区管理人员提供指导的预测性和规范性理论的转变正在迅速发生，但仍有许多工作要做。</p><p><img src="https://user-images.githubusercontent.com/17808702/71072354-46e06980-21b9-11ea-8c3b-db7336343491.png" alt="image"></p><p><em>Fig.1 从读者到领导者的框架表明，社交媒体参与的典型路径是从阅读在线内容转向贡献内容，最初是小编辑，但逐渐发展为更实质性的贡献。用户生成的内容可以编辑到wiki、讨论组中的评论、电影、照片、音乐、动画或视频的评级。同事们在几周或几个月的时间里一起工作，做出更有意义的发明，领导们采取行动制定政策，处理问题，指导新用户使用。</em></p><h3 id="Pursuing-Reliable-Secure-and-Scalable-Technology"><a href="#Pursuing-Reliable-Secure-and-Scalable-Technology" class="headerlink" title="Pursuing Reliable, Secure, and Scalable Technology"></a>Pursuing Reliable, Secure, and Scalable Technology</h3><p>过去40年的计算技术取得了显著的进步。强大的信用归于芯片开发人员，他们取得了快速和持续的进步，以摩尔定律为特征——芯片密度、速度和容量每18个月翻一番。同样值得赞扬的是用户界面设计师，他们通过创建基于精心设计的菜单、有效的图形界面、方便的输入设备和可压缩的视觉演示的直接操作界面，为数十亿用户打开了大门。</p><p>当前的议程正在迅速转向大型社交媒体社区，比如Facebook的5亿用户和手机的40亿用户。Twitter等较新的服务已经获得了1亿多用户，每月的交易额达数十亿美元，但这只是开始。当个人、组织、公司和政府增加他们的使用时，活动的数量和速度将会增加，为许多用户带来好处，但是服务中断、侵犯隐私和恶意攻击的影响也会增加。</p><p>开发人员现在认识到用户界面在决定结果方面的首要作用，因此增加了研究、培训和探索性设计。与此同时，社区管理人员用于跟踪、分析和交互社交媒体网络的工具也在增长，以促进更积极的结果。这些工具对研究人员也很有用，因为它们可以开发网络演化的预测模型，检测区域或增长或下降的活动，并形成激励参与的理论。</p><p>免费开源的NodeXL项目(Excel中发现和探索的网络概览)就是这样一个例子，它得到了微软研究院(<a href="http://www.codeplex.com/nodexl)%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E5%B7%A5%E5%85%B7%E5%8F%AF%E4%BB%A5%E5%B0%86Outlook%E3%80%81Twitter%E3%80%81YouTube%E3%80%81Flickr%E3%80%81WWW%E7%AD%89%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E7%BD%91%E7%BB%9C%E5%AF%BC%E5%85%A5Excel">www.codeplex.com/nodexl)的支持。该工具可以将Outlook、Twitter、YouTube、Flickr、WWW等社交媒体网络导入Excel</a> 2007/2010，为用户提供强大的分析工具和丰富的可视化支持(图2)。</p><p>NodeXL的设计目的是为了提高已经使用Excel的精通社交媒体的社区人士和商业专业人士，以及正在学习社交网络分析的本科生和研究生的学习速度。NodeXL提供了从重要的社交媒体工具轻松导入数据，大大扩展了用户的社区，他们可以进行分析，导致可操作的业务在视线和研究。NodeXL提供了一套丰富的可视化控件来选择颜色、大小、不透明度以及顶点和边的其他属性。各种布局算法和动态查询过滤器允许用户根据需要调整显示。不同的有向图和无向图的中心性指标，以及不断增长的聚类算法，支持探索和发现。NodeXL是一个正在进行的项目，将通过新兴的社会媒体再搜索基金会(<a href="http://www.smrfoundation.org)提供支持./">www.smrfoundation.org)提供支持。</a></p><p><img src="https://user-images.githubusercontent.com/17808702/71072743-13520f00-21ba-11ea-9787-5ef23ec21422.png" alt="image"></p><p><em>Fig.2。这个网络显示了2011年1月8日被询问时提到#GOP的Twitter用户之间的联系，节点大小与关注者的数量成比例。集群是由图中作者之间的连接模式(跟随、回复和提及)创建的。这些集群基于Newman-Moore算法分析，其中红色的集群由共和党支持者组成，而蓝色的集群包含共和党的批评者和反对者，从每个集群的推文内容可以看出。其他颜色或形状的节点与任何一个主集群都没有很强的关联。(由Marc A. Smith使用NodeXL <a href="http://www.codeplex.com/nodexl%E5%88%9B%E5%BB%BA)%E3%80%82">http://www.codeplex.com/nodexl创建)。</a></em></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>这些新的TMSP研究方向扩展了HCI研究的范围，将重点从心理问题转移到社会学问题，同时与算法开发人员、与庞大数据集打交道的统计数据分析人员、隐私保护研究人员和新领域(特别是电子政府)的应用专家进行合作。TMSP还将HCI研究人员更积极地引入移动、泛在和普及技术领域，同时增加了关注普遍可用性和国际开发的影响力。突破性的科学和转化应用的可能性似乎很高，因此有一组快速增长的会议和期刊来服务这些新兴的主题。虽然对TMSP的热情和乐观是有理由的，但也应该关注隐私侵犯、误导性信息、恶意攻击、缺乏普遍可用性以及在高峰负载(如灾难期间)出现故障的危险。由于罪犯、恐怖分子、种族仇恨团体和暴虐的政府使用这种强大的技术也有危险，我们的社区将不得不制定道德标准并努力促进积极的社会价值观。</p><p>致谢-多亏了美国国家科学基金会的社区研讨会参与者(<a href="http://www.tmsp.umd.edu)支持格兰特iis/">www.tmsp.umd.edu)支持格兰特iis</a> - 0956571, NSF的社会计算系统授予iis - 0968521,微软支持的NodeXL团队(<a href="http://www.codeplex.com/nodexl)%E5%A4%96%E9%83%A8%E7%A0%94%E7%A9%B6,%E5%92%8C%E9%A9%AC%E9%87%8C%E5%85%B0%E5%A4%A7%E5%AD%A6%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E5%AE%9E%E9%AA%8C%E5%AE%A4%E3%80%82%E6%88%91%E5%BE%88%E6%AC%A3%E8%B5%8F%E8%AF%84%E8%AE%BA%E4%BB%8E%E5%90%9B%E5%A3%AB%E5%9D%A6%E4%B8%81Stephanidis%E8%8D%89%E6%A1%88,Gavriel">www.codeplex.com/nodexl)外部研究,和马里兰大学人机交互实验室。我很欣赏评论从君士坦丁Stephanidis草案,Gavriel</a> Salvendy,和詹妮弗泼里斯。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式总结</title>
    <link href="/2019/12/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2019/12/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式总结"><a href="#设计模式总结" class="headerlink" title="设计模式总结"></a>设计模式总结</h1><h2 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h2><p>活字印刷</p><h3 id="可扩展"><a href="#可扩展" class="headerlink" title="可扩展"></a>可扩展</h3><p>要改，只需更改要改之字</p><h3 id="可复用"><a href="#可复用" class="headerlink" title="可复用"></a>可复用</h3><p>这些字并非用完这次就无用，完全可以在后来的印刷中重复使用</p><h3 id="可维护"><a href="#可维护" class="headerlink" title="可维护"></a>可维护</h3><p>此诗若要加字，只需另刻字加入即可</p><h3 id="灵活性好"><a href="#灵活性好" class="headerlink" title="灵活性好"></a>灵活性好</h3><p>字的排列其实可能是竖排可能是横排，此时只需将活字移动就可做到满足排列需求</p><p>面对客户的需求变化感到痛苦，原因就是因为我们原先所写的程序，不容易维护，灵活性差，不容易扩展，更谈不上复用，因此面对需求变化，加班加点。</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>封装、继承、多态</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><h3 id="关联-vs-依赖"><a href="#关联-vs-依赖" class="headerlink" title="关联 vs 依赖"></a>关联 vs 依赖</h3><p>关联association：</p><p>企鹅需要“知道”气候的变化，需要“了解”气候规律，当一个类“知道”另一个类时，可以用关联</p><img src="[data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8' standalone='no'%3f%3e%3csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' contentScriptType='application/ecmascript' contentStyleType='text/css' height='150px' preserveAspectRatio='none' style='width:71px%3bheight:150px%3b' version='1.1' viewBox='0 0 71 150' width='71px' zoomAndPan='magnify'%3e%3cdefs%3e%3cfilter height='300%25' id='f1ebdafaysque' width='300%25' x='-1' y='-1'%3e%3cfeGaussianBlur result='blurOut' stdDeviation='2.0'/%3e%3cfeColorMatrix in='blurOut' result='blurOut2' type='matrix' values='0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0'/%3e%3cfeOffset dx='4.0' dy='4.0' in='blurOut2' result='blurOut3'/%3e%3cfeBlend in='SourceGraphic' in2='blurOut3' mode='normal'/%3e%3c/filter%3e%3c/defs%3e%3cg%3e%3crect fill='%23FEFECE' filter='url(%23f1ebdafaysque)' height='37.6094' style='stroke: %23A80036%3b stroke-width: 1.5%3b' width='54' x='6' y='8'/%3e%3ctext fill='black' font-family='sans-serif' font-size='12' lengthAdjust='spacingAndGlyphs' textLength='24' x='21' y='21.1387'%3e%e4%bc%81%e9%b9%85%3c/text%3e%3cline style='stroke: %23A80036%3b stroke-width: 1.5%3b' x1='7' x2='59' y1='25.9688' y2='25.9688'/%3e%3cellipse cx='17' cy='36.9688' fill='none' rx='3' ry='3' style='stroke: %23038048%3b stroke-width: 1.0%3b'/%3e%3ctext fill='black' font-family='sans-serif' font-size='10' lengthAdjust='spacingAndGlyphs' textLength='28' x='26' y='39.251'%3e%e4%b8%8b%e8%9b%8b()%3c/text%3e%3crect fill='%23FEFECE' filter='url(%23f1ebdafaysque)' height='33.9688' style='stroke: %23A80036%3b stroke-width: 1.5%3b' width='38' x='14' y='106'/%3e%3ctext fill='black' font-family='sans-serif' font-size='12' lengthAdjust='spacingAndGlyphs' textLength='24' x='21' y='119.1387'%3e%e6%b0%94%e5%80%99%3c/text%3e%3cline style='stroke: %23A80036%3b stroke-width: 1.5%3b' x1='15' x2='51' y1='123.9688' y2='123.9688'/%3e%3cpath d='M33%2c46.427 C33%2c62.0802 33%2c84.1072 33%2c100.5207 ' fill='none' id='%e4%bc%81%e9%b9%85-%26gt%3b%e6%b0%94%e5%80%99' style='stroke: %23A80036%3b stroke-width: 1.0%3b'/%3e%3cpolygon fill='%23A80036' points='33%2c105.8544%2c37%2c96.8544%2c33%2c100.8544%2c29%2c96.8544%2c33%2c105.8544' style='stroke: %23A80036%3b stroke-width: 1.0%3b'/%3e%3c/g%3e%3c/svg%3e](data:image/svg+xml,<%3fxml version='1.0' encoding='UTF-8' standalone='no'%3f>企鹅下蛋()气候)"><p>依赖dependency：</p><p>动物依赖于氧气和水，他们之间是依赖关系</p><p><img src="https://www.yuque.com/docs/share/adc69e1f-554f-4539-a21c-291aae6707c7?inner=EgamV" alt="http://www.yuque.com/docs/share/adc69e1f-554f-4539-a21c-291aae6707c7?inner=kYHCG"></p><h3 id="组合-vs聚合"><a href="#组合-vs聚合" class="headerlink" title="组合 vs聚合"></a>组合 vs聚合</h3><p>组合composition：</p><p>是一种强的“拥有”关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。</p><p><img src="https://www.yuque.com/docs/share/adc69e1f-554f-4539-a21c-291aae6707c7?inner=Xzw4X"></p><p>聚合aggregation：</p><p>聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。</p><p><img src="https://www.yuque.com/docs/share/adc69e1f-554f-4539-a21c-291aae6707c7?inner=kYHCG"></p><h3 id="继承-vs-接口实现"><a href="#继承-vs-接口实现" class="headerlink" title="继承 vs 接口实现"></a>继承 vs 接口实现</h3><p>继承：空心三角形 + 实线</p><p>实现接口：空心三角 + 虚线</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><blockquote><p>设计模式并不重要，重要的是设计原则</p></blockquote><ul><li>单一职责</li><li>里氏替换</li><li>依赖倒置</li><li>接口隔离</li><li>迪米特法则</li><li>开闭原则</li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><ol><li>定义</li></ol><blockquote><p>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p></blockquote><h3 id="设计原则-1"><a href="#设计原则-1" class="headerlink" title="设计原则"></a>设计原则</h3><ul><li><p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p></li><li><ul><li>鸭子的行为在子类里不断改变，并且让所有的子类都有这些行为是不恰当的。</li><li>把鸭子的行为从Duck类中取出</li></ul></li><li><p>针对接口编程，而不是针对实现编程</p></li><li><ul><li>在运行时动态地改变鸭子的飞行行为</li></ul></li><li><p>多用组合，少用继承</p></li><li><ul><li>鸭子的行为通过和适当的行为对象组合而来</li><li>使用组合具有很大的弹性，不仅可将算法封装成类，更可以在运行时动态地改变行为。</li></ul></li></ul><h3 id="设计模式和类库的区别："><a href="#设计模式和类库的区别：" class="headerlink" title="设计模式和类库的区别："></a>设计模式和类库的区别：</h3><ol><li>库与框架无法帮助我们将应用组织成容易了解、容易维护、具有弹性的架构，所以需要设计模式</li><li>设计模式比库的等级更高，设计模式告诉我们如何组织类和对象以解决某种问题，是针对设计问题的通用解决方案</li><li>库和框架提供了特定的实现，但这并不算是设计模式。有时候，库和框架本身会用到设计模式</li></ol><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>1、定义</p><blockquote><p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会受到通知并自动更新。</p></blockquote><p>2、类图</p><p><img src="https://www.yuque.com/docs/share/adc69e1f-554f-4539-a21c-291aae6707c7?inner=UCAjg"></p><h3 id="设计原则-2"><a href="#设计原则-2" class="headerlink" title="设计原则"></a>设计原则</h3><blockquote><p>为了交互对象之间的松耦合设计而努力。</p></blockquote><ol><li>观察者对设计原则的应用</li></ol><ul><li><p>找出程序中会变化的方面，然后将其固定不变的方面相分离</p></li><li><ul><li>在观察者模式中，会改变的是主题的状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题。</li></ul></li><li><p>针对接口编程，不针对实现编程</p></li><li><ul><li>主题与观察者都使用接口：观察者利用主题的接口向主题注册，而主题利用观察者接口通知观察者。这样可以让两者之间运作正常，又同时具有松耦合的优点。</li></ul></li><li><p>多用组合，少用继承</p></li><li><ul><li>观察者模式利用“组合”将许多观察者组合进主题中，对象之间的这种关系不是通过继承产生的，而是在运行时利用组合的方式而产生。</li></ul></li></ul><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><ol><li>定义</li></ol><blockquote><p>装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。          </p></blockquote><ol><li>装饰者和被装饰对象有相同的超类型。</li><li>你可以用一个或多个装饰者包装一个对象。</li><li>装饰者可以在所委托被装饰者的行为之前与/或之后，加上自己的行为，以达到特定的目的。</li><li>利用继承达到类型匹配。继承，是为了有正确的类型，而不是继承它的行为。行为来自装饰者和基础组件，或与其他装饰者之间的组合关系。     </li><li>装饰者会导致程序设计中出现许多小对象，如果过度使用，会让程序变得很复杂。                                                               </li></ol><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ol><li><p>利用单件模式，我们可以在需要时才创建对象。延迟实例化的方式，这种做法对资源敏感的对象特别重要。</p></li><li><p>定义</p><blockquote><p>单件模式确保一个类只有一个实例，并提供一个全局访问点</p></blockquote></li><li><p>抽象单例</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">https://blog.csdn.net/zhmt/article/details/50804215</span><br><span class="line"> * 线程安全的抽象单例</span><br><span class="line"> * </span><br><span class="line"> * @author zhmt</span><br><span class="line"> * @createdate 2016年3月4日 下午4:39:50</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">public abstract class AbstractSingleton&lt;T&gt; &#123;</span><br><span class="line">    private final AtomicReference&lt;T&gt; ref = new AtomicReference&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    public T get() &#123;</span><br><span class="line">        T ret = ref.get();</span><br><span class="line">        if (ret == null) &#123;</span><br><span class="line">            synchronized (this) &#123;</span><br><span class="line">                if (ref.get() == null) &#123;</span><br><span class="line">                    ret = newObj();</span><br><span class="line">                    ref.set(ret);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    ret = ref.get();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract T newObj();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public static final AbstractSingleton&lt;A&gt; objHolder = new AbstractSingleton&lt;A&gt;() &#123;</span><br><span class="line">        protected A newObj() &#123;</span><br><span class="line">            return new A();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    private A() &#123;</span><br><span class="line">        A.objHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p><img src="https://www.yuque.com/docs/share/adc69e1f-554f-4539-a21c-291aae6707c7?inner=4ANuA"></p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>1、定义</p><blockquote><p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p></blockquote><p>2、简单工厂和工厂方法之间的区别</p><p>工厂方法的子类看起来很像简单工厂。简单工厂把全部的事情，在一个地方都处理完了，然而工厂方法却是创建一个框架，让子类决定要如何实现。简单工厂的做法，可以将对象的创建封装起来，但是简单工厂不具备工厂方法的弹性，因为简单工厂不能变更正在创建的产品。</p><p>3、依赖倒置原则</p><blockquote><p>要依赖抽象，不要依赖具体类。</p></blockquote><p>低层组件依赖高层的抽象，高层组件也依赖相同的抽象。</p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>1、定义</p><blockquote><p>抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p></blockquote><p>2、抽象工厂和工厂方法的联系</p><p>抽象工厂的每个方法实际上看起来都像是工厂方法。每个方法都被声明成抽象，而子类的方法覆盖这些方法来创建某些对象。</p><p>抽象工厂的任务是定义一个负责创建一组产品的接口。这个接口内的每个方法都负责创建一个具体产品，同时我们利用实现抽象工厂的子类来提供这些具体的做法，</p><p>抽象工厂和工厂方法都是负责创建对象。抽象工厂使用的是对象，通过对象的组合；工厂方法使用的类，通过继承。</p><p>需要创建产品家族和想让制造的相关产品集合起来时，可以使用抽象工厂。工厂方法可以把客户代码从需要实例化的具体类中解耦，或者如果目前还不知道将来需要实例化哪些具体类时，也可以用工厂方法。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>1、命令模式可将“动作的请求者”从“动作的执行者”对象中解耦。在被解耦的两者之间是通过命令对象进行沟通的。命令对象封装了接收者的一个或一组动作。</p><p>2、定义</p><blockquote><p>命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销操作。</p></blockquote><p>3、实现撤销</p><ul><li>在Invoker中存一个uncommand</li><li>在Command中存储prevState</li></ul><p>4、实现多层次撤销</p><ul><li>不要只是记录最后一个被执行的命令，使用一个堆栈记录过程中的每一个命令</li></ul><p>5、MacroCommand：一次执行一组命令</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>1、适配器实现了目标接口，并持有被适配者的实例</p><p>2、定义</p><blockquote><p>适配器模式将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p></blockquote><p>3、客户和接口绑定，不是和实现绑定。我们可以使用多个适配器。</p><p>4、对象适配器和类适配器</p><ul><li><p>对象适配器：适配器使用组合来适配被适配者</p></li><li><ul><li>优点：不仅可以适配某个类，也可以适配该类的任何子类</li></ul></li><li><p>类适配器：适配器继承被适配者和目标类</p></li><li><ul><li>优点：采用某个特定的被适配类，不需要重新实现我的整个被适配者，必要的时候可以覆盖被适配者的行为；</li></ul></li></ul><p>5、装饰者模式和适配器模式的对比</p><ul><li>装饰者模式不改变接口，扩展包装的对象的行为或责任，</li><li>适配器模式转换接口，允许客户使用新的库和子集合</li></ul><p>6、外观模式和适配器模式的对比</p><ul><li>外观模式的意图：简化接口</li><li>适配器模式的意图：将接口转换成不同接口</li></ul><p>7、双向适配器</p><p>Iterator: hasNext() next() remove()</p><p>Enumeration: hasMoreElements() nextElement()</p><ul><li>将Enumeration适配成Iterator</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class EnumerationIterator implements Iterator &#123;</span><br><span class="line">    Enumeration enumeration;</span><br><span class="line">  </span><br><span class="line">  public EnumerationIterator(Enumeration enumeration) &#123;</span><br><span class="line">    this.enumeration = enumeration;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public boolean hasNext() &#123;</span><br><span class="line">    return enumeration.hasNextElement();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public Object nextElement() &#123;</span><br><span class="line">    return enumeration.nextElement();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void remove() &#123;</span><br><span class="line">    throws new UnsupportedOperationException();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将Iterator适配成Enumeration</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class IteratorEnumeration implements Enumeration &#123;</span><br><span class="line">    Iterator iterator;</span><br><span class="line">  </span><br><span class="line">  public IteratorEnumeration(Iterator iterator) &#123;</span><br><span class="line">    this.iterator = iterator;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public boolean hasMoreElements()&#123;</span><br><span class="line">    return iterator.hasNext();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public Object nextElement() &#123;</span><br><span class="line">    return iteraror.next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>定义：</p><blockquote><p>外观模式提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p></blockquote><h4 id="设计原则-3"><a href="#设计原则-3" class="headerlink" title="设计原则"></a>设计原则</h4><p>最少知识原则：只和你的密友谈话</p><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>1、模板方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现。 需要由子类提供的方法，必须在超类中声明为抽象</p><p>2、定义</p><blockquote><p>模板方法模式在一个方法中定义了一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p></blockquote><p>3、模板就是一个方法，更具体地说，这个方法将算法定义成一组步骤，其中的任何步骤都可以是抽象的，由子类负责实现。</p><p>4、我们也可以有“默认不做事的方法”，我们称这种方法为‘hook’。子类可以视情况决定要不要覆盖它们。钩子是一种被声明在抽象类中的方法，但只有空的或者默认的实现。</p><p>5、当你的子类必须提供算法中的某个方法或步骤的实现时，就使用抽象方法。如果算法的这个部分是可选的，就用钩子。</p><p>6、钩子的几种用法：</p><ul><li>钩子可以让子类实现算法中可选的部分或者在钩子对子类的实现并不重要的时候，子类可以对钩子置之不理。</li><li>让子类能够有机会对模板方法中某些即将发生（或刚刚发生）的步骤作出反应</li><li>钩子也可以让子类有能力为其抽象类作一些决定</li></ul><p>7、模板方法应用：排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void sort(Object[] a) &#123;</span><br><span class="line">    Object aux[] = (Object[]) a.clone();</span><br><span class="line">  mergeSort(aux, a, 0, a.length, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void mergeSort(Object[] src, Object[] dest, int low, int high, int off)&#123;</span><br><span class="line">    for(int i = low; i &lt; high, i++) &#123;</span><br><span class="line">    for (int j = i; j &gt; low &amp;&amp;</span><br><span class="line">         ((Comparable) dest[j-1]).compareTo((Comparable) dest[j] &gt; 0); j--) &#123;</span><br><span class="line">        swap(dest, j, j-1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序鸭子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Duck implements Comparable &#123;</span><br><span class="line">    String name;</span><br><span class="line">  int weight;</span><br><span class="line">  </span><br><span class="line">  public Duck(String name, int weight) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.weight = weight;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String toString() &#123;</span><br><span class="line">    return name + &#x27; weights &#x27; + weight; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public int compareTo(Object object) &#123;</span><br><span class="line">    Duck otherDuck = (Duck) object;</span><br><span class="line">    if(this.weight &lt; otherDuck.weight) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125; else if(this.weight == otherDuck.weight) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计原则-4"><a href="#设计原则-4" class="headerlink" title="设计原则"></a>设计原则</h3><blockquote><p>别调用我们，我们会调用你。</p></blockquote><p>允许底层组件将自己挂钩到系统上，但是高层组件会决定什么时候和怎样使用这些低层组件。</p><ol><li>模板方法和策略的比较</li></ol><p>模板方法模式必须依赖超类中的方法的实现，因为这是算法的一部分。而策略模式不依赖任何人。</p><p>模板方法中会被重复使用的代码都被放进了超类中，好让所有子类共享。策略模式使用组合，运行时改变算法。</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><ol><li>定义</li></ol><blockquote><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p></blockquote><ol><li>迭代器模式把在元素之间游走的责任交给迭代器，而不是聚合对象。这不仅让聚合的接口和实现变得简洁，也可以让聚合更专注在它所应该专注的事情上面。</li></ol><h3 id="设计原则-5"><a href="#设计原则-5" class="headerlink" title="设计原则"></a>设计原则</h3><blockquote><p>一个类应该只有一个引起变化的原因。</p></blockquote><p>当我们允许一个类不但要完成自己的事情（管理某种聚合），还同时要担负更多的责任（例如遍历）时，我们就给了这个类两个变化的原因。</p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ol><li>定义</li></ol><blockquote><p>允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。                     </p></blockquote><ol><li>composite包含component。component有两种元素：leaf和composite。</li><li>组合模式以单一责任设计原则换取透明性。透明性是指通过让组件的接口同时包含一些管理子节点和叶节点的操作，客户就可以将组合和叶节点一视同仁。也就是说，一个元素究竟是组合还是叶节点，对客户是透明的。</li><li>当你有数个对象的集合，它们彼此之间有“整体/部分”关系，并且你想用一直的方式对待这些对象时，你就需要我。</li><li>为了保持透明性，组合内的所有对象都必须实现相同的接口，否则客户就必须操心哪个对象是用哪个接口。</li><li>客户不再需要操心面对的是组合对象还是叶节点对象了，所以就不需要写一大堆的if语句来保证它们对正确的对象调用了正确的接口。</li><li>组合模式和迭代器模式</li></ol><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><ol><li>策略模式和状态模式是双胞胎。策略模式是围绕可以互换的算法来创建成功业务的。状态则是通过改变对象的内部状态来帮助对象控制自己的行为，是条件判断的替代方案。</li><li>定义</li></ol><blockquote><p>状态模式允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。</p></blockquote><p>这个模式将状态封装成独立的类，并将动作委托到代表当前状态的对象，我们知道行为会随着内部状态而改变。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ol><li>代理，就是代表某个真实的对象。代理就像是糖果机对象，但其实幕后是它利用网络和一个远程的真正糖果机沟通。</li><li>远程代理就好比“远程对象的本地代表”</li><li>你的客户对象所做的就像是在做远程方法调用，但其实只是调用本地堆中的“代理”对象上的方法，再由代理处理所有网络通信的底层细节</li><li>客户对象–&gt;客户辅助对象–&gt;服务辅助对象–&gt;服务对象</li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public interface MyRemote extends Remote &#123;</span><br><span class="line">    public String sayHello() throws RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public MyRemoteImpl extends UnicastRemoteObject implements MyRemote &#123;</span><br><span class="line">    public String sayHello() &#123;</span><br><span class="line">    return &quot;Server says, Hey&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public MyRemoteImpl throws RemoteException &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        MyRemote service = new MyRemoteImpl();</span><br><span class="line">      Naming.rebind(&quot;RemoteHello&quot;, service);</span><br><span class="line">    &#125; catch(Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//客户端</span><br><span class="line">public class MyRemoteClient &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    new MyRemoteClient().go();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void go() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        MyRemote service = (MyRemote) Naming.lookup(&quot;rmi://127.0.0.1/RemoteHello&quot;);</span><br><span class="line">      </span><br><span class="line">      String s = service.sayHello();</span><br><span class="line">    &#125; catch(Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义</p><blockquote><p>代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问</p></blockquote><p>分类</p><ul><li>远程代理：控制访问远程对象</li></ul><p>调用代理的方法，会被代理利用网络转发到远程执行，并且结果会通过网络返回给代理，再由代理将结果转给客户。</p><ul><li>虚拟代理：控制访问创建开销大的资源</li></ul><p>虚拟代理经常直到我们真正需要一个对象的时候才创建它。当对象在创建前和创建中时，由虚拟代理来扮演对象的替身。对象创建后，代理就会将请求直接委托给对象。</p><ul><li>保护代理：基于权限控制对资源的访问</li></ul><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>定义</p><blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p></blockquote><p>主要作用：</p><p>隔离了客户与生产过程、负责控制产品的生产过程</p><ol><li>建造者模式和抽象工厂模式的区别</li></ol><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h2 id="复习课"><a href="#复习课" class="headerlink" title="复习课"></a>复习课</h2><ol><li>简答（对pattern的理解为主）和综合应用 每个pattern都会考到 应用题：单个或多个模式联合应用 所有考试内容都是PPT讲过的</li><li>英文试卷，答题可以中文</li><li>重点的先讲了</li><li>第一阵列：工厂方法模式  Java反射机制 （桥接模式引入抽象后难以理解，因为它将一个概念拆分成了两个部分）</li></ol><ul><li>✅抽象工厂和工厂动机有什么不同，这导致了实现有什么不同？ 产品（继承）和产品族（组合方式） 一个抽象工厂关联所有类型的产品</li><li>✅单例模式 可以进行扩展 增加抽象层 重点</li></ul><p>结构型模式：</p><ul><li>✅适配器模式 Adapter 透明性【要考】（策略模式和状态模式） 对象适配器更灵活 将多个对象的接口构成一个大的对象  默认适配器不考  双向适配器在考试范围内  掌握对象适配器和类适配器以及一个模式扩展双向适配器</li><li>✅组合模式 模式结构图比较像的，装饰者模式 两个模式的component的差别？ 类图的区别，装饰者还有一层抽象，组合对象只有一层  观察者模式和组合模式（都是容器）可以很容易到一起 组合模式最容易和其他模式结合 组合模式是一个重要考点（考察模式联用） 组合模式也很容易和命令模式结合 </li><li>✅装饰者模式 看到红字比较重要 responsibility dynamically 扩展功能可以联想装饰者 extending functionality（dynamically通常都是组合） 符合开闭原则的一般缺乏约束 挺重要的模式，但正常掌握就可以了</li></ul><p>建造者模式 普通掌握型（意图、定义、类图等）</p><ul><li><p>✅原型模式 在Java中的实现，最重要的：深克隆、浅克隆 区别？邮件复制深克隆复制哪些 浅克隆复制哪些</p></li><li><p>✅桥接模式 重点是变化的维度如何确定 识别抽象部分和实现部分 抽象化是实体的本身 实现化是针对抽象化的具体实现 对于单一职责原则支持非常好 策略模式、状态模式对单一职责体现明显，体现在哪里？ 适配器和桥接联用 （要考 抽象、实现、模式联用）</p></li><li><p>✅外观模式 概念（还有很多其他和接口相关的模式 和其他模式的区分）有几条原则在外观模式中体现的特别明显 为什么要设计外观模式？ 单一职责、迪米特、对开闭原则哪里支持不好（在不引人抽象外观类的情况下，增加新的子系统可能需要修改外观类）</p></li><li><p>✅享元Flyweight模式 定义 元：状态（分为内部状态、外部状态）外部状态和内部状态不一定要通过组合构成对象，可以通过任意方式进行联合使用 构造注入，参数注入都可以 享元和工厂联用 共享网络设备类图，就是通过参数注入的外部状态 关键就是区别出内部状态和外部状态</p></li><li><p>✅代理模式 掌握的点很多 代理和真实对象一起工作，继承相同的抽象类 三种代理：远程代理（讲的重点 RMI 牵涉到复杂的流程，RMI中谁是代理，有相同的接口 接口从哪里来 根据真实对象来，如何获取远程代理，如何注册服务…等）、虚拟代理、保护代理 重点是三种代理，代理的应用细节，具体应用中谁是代理，代理的接口是哪一个</p></li><li><p>✅命令模式：命令的发送者和命令的实现者解耦 各角色职责，命令模式和其他模式的联用  任务中还有子任务，这个时候如何和其他模式组合 几种角色：invoker，receiver等 undo和redo怎么做 宏命令，是命令模式和组合模式联用的产物 命令模式不使用宏的方式和直接调用有什么差别？（书上有）</p></li><li><p>✅ 观察者模式 MVC中观察者是如何体现的 MVC之间到底是如何交互的，交互的细节是如何通过模式实现的 Java中的Observable的notify是如何实现的？pull push  外部观察者和内部观察者的差别？ 内部观察隐含了this，外部观察没有信息，需要多一个参数  广播通信 通知哪些对象并不总是同一组对象 可以有多个观察队列 观察、通知是一个迭代的过程，通知部分的时候可以使用组合、迭代联合的方式  深入考察 Java观察者选择的是推还是拉，内部还是外部观察，优缺点？还受限于语言本身 保留对主题的引用，为什么？有一个拉数据的作用 外部观察是一种很好的实现方式，但是有一个致命的缺点</p></li><li><p>✅状态模式 和策略模式类图相同 透明性的问题 由于意图不同，所以对客户的要求不同 策略不能对客户透明，状态对客户透明 转换、状态类是否复用 由动作引发的，在状态类中实现是最直观的 但如果通过判定状态属性来决定是否状态迁移，主要看数据在哪边  复用动作vs数据，生成新的状态  考点：场景、状态模式在具体实现的时候需要注意的点</p></li><li><p>✅策略模式 策略模式体现了哪几个设计原则 和状态模式的差异</p></li><li><p>✅模板方法模式 工厂是模板方法的一个刻画 方便地和其他模式联用 联用过程中另外那个方法的代码要根据模板方法实现 final方法 abstract方法</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux考试重点</title>
    <link href="/2019/11/25/linux%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9/"/>
    <url>/2019/11/25/linux%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>实验+课后作业+ppt</p></blockquote><h3 id="试卷题型"><a href="#试卷题型" class="headerlink" title="试卷题型"></a>试卷题型</h3><ul><li><p>20选择：40分</p></li><li><p>10空：10分</p></li><li><p>8简答：40分</p><ul><li>6个课后</li><li>2个实验</li></ul></li><li><p>1shell：10分</p></li></ul><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p><strong>课后习题</strong></p><ul><li><p>第一章概念，排除一句话的简答题，考一个</p></li><li><p>第二章安装</p><ul><li>分区的命名方案</li><li>磁盘分区的规划</li></ul></li><li><p>第三章：</p><ul><li>系统控制台</li><li>重启、关机</li><li>shell使用的技巧，选择题</li><li>vi的几种模式、转换方式、复制删除</li></ul></li><li><p>第四章：</p><ul><li>文件</li><li>目录是干嘛的 etc、dev、home</li><li>cd、ls、touch常用的命令</li><li>链接：符号链接、硬链接</li></ul></li><li><p>第五章：</p><ul><li>命令知道是干啥的—选择题</li></ul></li><li><p>第六章：</p><ul><li>shell只有最后一题</li><li>书上的例子 20行的</li><li>变量定义、使用</li><li>条件语句、分支语句</li><li>语法</li></ul></li><li><p>第七章：</p><ul><li>用户、组</li><li>4个文件中的东西能看明白<ul><li>password、shadow</li></ul></li><li>命令：<ul><li>添加删除用户</li><li>修改密码</li></ul></li><li><strong>su、sudo</strong></li></ul></li><li><p>第八章：</p><ul><li>从空的磁盘到分区挂载的操作步骤  8-5</li><li><strong>fstable</strong><ul><li>自动挂载 6个段</li></ul></li></ul></li><li><p>第九章：</p><ul><li>三个命令<ul><li><strong>rpm</strong><ul><li>常用的几个选项：安装、删除、查询</li></ul></li><li>yum<ul><li>安装、卸载、查询  参数</li></ul></li><li><strong>tar</strong><ul><li>-xzvf</li><li>还有一个忘了</li></ul></li></ul></li></ul></li><li><p>第十章：</p><ul><li><p>权限：</p><ul><li>字符、数字</li></ul></li><li><p>chmod</p><ul><li>特殊权限</li></ul></li></ul></li><li><p>第十一章：</p><ul><li>ps 信息查看</li><li>添加的时间段，定时任务  考察时间，什么时间去执行</li><li>grub，不会考</li></ul></li><li><p>第十二章：</p><ul><li>网卡的配置文件保存在哪儿<ul><li>Centos、ubuntu</li><li>网卡的配置文件里面 -选择<ul><li>静态、动态</li><li>ip地址设定项</li></ul></li></ul></li><li><strong>Systemctl</strong>不是选择题<ul><li>​    start、status、restart、enable</li></ul></li></ul></li><li><p>第十三章</p><ul><li>sh<ul><li>登陆<ul><li>证书</li></ul></li><li>拷贝    scopy语法</li><li>vnc<ul><li>vnc-server</li></ul></li></ul></li><li>配置文件</li><li>逻辑卷<ul><li>三个概念到三个命令</li></ul></li><li>selinux<ul><li>配置文件</li><li>三种模式</li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k8s node 节点 kubectl 运行报错</title>
    <link href="/2019/11/18/k8s-node-%E8%8A%82%E7%82%B9-kubectl-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99/"/>
    <url>/2019/11/18/k8s-node-%E8%8A%82%E7%82%B9-kubectl-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>###背景描述：</p><p>使用kubeadm搭建的集群环境，node节点 使用 kubectl查询资源报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1、 出现这个问题的原因是kubectl命令需要使用kubernetes-admin来运行，解决方法如下，将master节点中的**/etc/kubernetes/admin.conf**文件拷贝到从节点相同目录下，然后配置环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><p>2、使其生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python3的OJ输入</title>
    <link href="/2019/10/13/python3%E7%9A%84OJ%E8%BE%93%E5%85%A5/"/>
    <url>/2019/10/13/python3%E7%9A%84OJ%E8%BE%93%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>1、输入整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case = <span class="built_in">int</span>(<span class="built_in">input</span>().strip())</span><br><span class="line"><span class="keyword">while</span> case:</span><br><span class="line">case -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>2、 输入浮点数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="built_in">float</span>(<span class="built_in">input</span>().strip())</span><br></pre></td></tr></table></figure><p>3、字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="built_in">input</span>().strip()</span><br></pre></td></tr></table></figure><p>4、 输入  1    2    3    4    5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().strip().split()))</span><br></pre></td></tr></table></figure><p>5、输入   1.0    2.0    3.0    4.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().strip().split()))</span><br></pre></td></tr></table></figure><p>6、输入    a    b    c    d   e</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="built_in">list</span>(<span class="built_in">input</span>().strip().split())</span><br></pre></td></tr></table></figure><p>7、创建二维数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test = [[0 for i in range(col)] for j in range(row)]</span><br></pre></td></tr></table></figure><p>8、未知多少输入行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = sys.stdin.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    nums = []</span><br><span class="line">    i = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> str_x <span class="keyword">in</span> line.strip().split(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            len_nuns = <span class="built_in">int</span>(str_x)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        nums.append(<span class="built_in">int</span>(str_x))</span><br></pre></td></tr></table></figure><p>9、满足条件一的情况下对条件二排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">a.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">1</span>], -x[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python3全排列</title>
    <link href="/2019/10/13/python3%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <url>/2019/10/13/python3%E5%85%A8%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><blockquote><p>itertools.permutations(list, num) </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">num1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">num2 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">num = num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> itertools.permutations(num):</span><br><span class="line"><span class="built_in">print</span>(item) //<span class="built_in">tuple</span> </span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>(item))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>分治思想：就是当指针指向第一个元素a时，它可以是其本身a(即和自己进行交换)，还可以和b，c进行交换，故有3种可能，当第一个元素a确定以后，指针移向第二位置，第二个位置可以和其本身b及其后的元素c进行交换，又可以形成两种排列，当指针指向第三个元素c的时候，这个时候其后没有元素了，此时，则确定了一组排列，输出。但是每次输出后要把数组恢复为原来的样子。</p><p>简单来说，它的思想即为，确定第1位，对n-1位进行全排列，确定第二位，对n-2位进行全排列。。。显然，这是一种递归的思想。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span>(<span class="params">arr, position, end</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> position == end:</span><br><span class="line">        <span class="built_in">print</span>(arr)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(position, end):</span><br><span class="line"> </span><br><span class="line">            arr[index], arr[position] = arr[position], arr[index]</span><br><span class="line">            permutations(arr, position+<span class="number">1</span>, end)</span><br><span class="line">            arr[index], arr[position] = arr[position], arr[index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line">permutations(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr))</span><br></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>深度搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">visit = [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line">temp = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">position</span>):</span></span><br><span class="line">    <span class="keyword">if</span> position == <span class="built_in">len</span>(arr):</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">if</span> visit[index] == <span class="literal">True</span>:</span><br><span class="line">            temp[position] = arr[index]</span><br><span class="line">            visit[index] = <span class="literal">False</span></span><br><span class="line">            dfs(position + <span class="number">1</span>)</span><br><span class="line">            visit[index] = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line">dfs(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>美团点评监控体系</title>
    <link href="/2019/10/12/%E7%BE%8E%E5%9B%A2%E7%82%B9%E8%AF%84%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/"/>
    <url>/2019/10/12/%E7%BE%8E%E5%9B%A2%E7%82%B9%E8%AF%84%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>监控平台：有故障发现，隐患故障发现</p></blockquote><h3 id="监控分层"><a href="#监控分层" class="headerlink" title="监控分层"></a>监控分层</h3><ul><li>移动端监控</li><li>业务监控</li><li>应用层监控：url、service、sql…</li><li>系统层监控</li><li>基础设施监控</li></ul><h3 id="监控系统挑战"><a href="#监控系统挑战" class="headerlink" title="监控系统挑战"></a>监控系统挑战</h3><ul><li>数据量大</li><li>实时性高</li><li>覆盖面广，对接全部技术体系</li></ul><h3 id="移动端监控"><a href="#移动端监控" class="headerlink" title="移动端监控"></a>移动端监控</h3><p>用户操作日志</p><h3 id="服务器端监控"><a href="#服务器端监控" class="headerlink" title="服务器端监控"></a>服务器端监控</h3><p><strong>埋点</strong>？外围监控？</p><p>​    配置、通用组件</p><p>监控是为了修复</p><p>​    回滚</p><p>监控指标的阈值</p><p>​    手动、根据业务情况</p><p>误报问题？</p><p>​    结构化的解决方式没有</p><ul><li><p>监控API接口访问量，耗时时间</p></li><li><p>监控所有数据库访问量，耗时时间</p></li><li><p>监控自身代码的性能相关</p><ul><li>执行慢</li><li>执行出错</li></ul></li><li><p>全链路压测</p></li><li><p>业务维度？</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Everything Fails</li><li><strong>异常定位监测</strong></li><li>发现问题、定位问题、解决问题</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker运行mysql镜像并用navicat链接</title>
    <link href="/2019/10/10/docker%E8%BF%90%E8%A1%8Cmysql%E9%95%9C%E5%83%8F%E5%B9%B6%E7%94%A8navicat%E9%93%BE%E6%8E%A5/"/>
    <url>/2019/10/10/docker%E8%BF%90%E8%A1%8Cmysql%E9%95%9C%E5%83%8F%E5%B9%B6%E7%94%A8navicat%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>1、运行下载mysql镜像，同时挂载数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --name mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -v ~/docker/mysql/data:/var/lib/mysql -d mysql</span><br></pre></td></tr></table></figure><p>2、查看已运行的容器，确保mysql镜像运行成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a |grep mysql</span><br></pre></td></tr></table></figure><p>3、进入mysql镜像修改远程链接权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line">root@a42f31094df5:/# </span><br><span class="line">root@a42f31094df5:/# mysql -uroot -p</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span>  </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><p>4、可以测试远程访问啦</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Navicat Premium for Mac12.0破解</title>
    <link href="/2019/10/08/Navicat-Premium-for-Mac12-0%E7%A0%B4%E8%A7%A3/"/>
    <url>/2019/10/08/Navicat-Premium-for-Mac12-0%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Navicat系列的数据库客户端非常好用，相信大家很多人用过。Navicat premium更是，让很多款主流数据库一种操作体验，是非常非常棒的。but，navicat的产品并不便宜。最新的Navicat premium12非商业版的都要<code>2799.3</code>元，当然我们要支持正版购买使用。本文所探讨的<code>免费激活</code>方法只是技术探讨用请勿用作商业行为。</p></blockquote><h2 id="第一步：明白这是mac版的激活方法"><a href="#第一步：明白这是mac版的激活方法" class="headerlink" title="第一步：明白这是mac版的激活方法"></a>第一步：明白这是mac版的激活方法</h2><p>因为Navicat preminum是基于密钥的方式来激活的。所以第一步当然是要有公钥/私钥对了。可以使用OpenSSL工具来生成，在mac中生成当然非常方便的，如果你并不了解公钥私钥，那么没有关系，我为大家准备了一个公钥/私钥对供大家直接使用。也可以打开该网页在线生成自己的公钥私钥对，这样比较安全。<a href="http://sikujiaoyu.com/tools/rsagenerate%60%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89%60">http://sikujiaoyu.com/tools/rsagenerate`（推荐）`</a><br><strong>看到评论区很多人替换rpk文件后还是无法弹出手动激活窗口的问题现在特更新了下本文的公钥私钥对。同时如果大家还存在这个问题可以自行生成公钥私钥对来使用</strong></p><h4 id="公钥为"><a href="#公钥为" class="headerlink" title="公钥为"></a>公钥为</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApWyHZBc4gF3bZL+01/dh</span><br><span class="line">W337sAewsIsealFiAczKVJebs/u6JkauqfGCsPJT3QJKadKlbW1DbqH3FMpr2LZz</span><br><span class="line">wW9uaWZImOsSRTJpEP2HsUdoDAxgVC/BcWwdp/kzDVlT4RGiMehkEhXeM7b8GjSU</span><br><span class="line">zG4LxjOOfyoC/YPUrhM9YzJyOgWydkIN6WIs8jbe9DOHLmLShjzycKcnXM3/B9iz</span><br><span class="line">+G+UieOoiAJaeDNQu30s8cJYGlIktDj3VPpDlgJHC8QAcLAiyo+erwp728dI/MC/</span><br><span class="line">N+LmwxFRmVksQyesVnuOgBKR2W3cMklllJ18FfpDoopjvd0rn9dXYzMsO5dqOtUa</span><br><span class="line">8QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure><h4 id="私钥为"><a href="#私钥为" class="headerlink" title="私钥为"></a>私钥为</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQClbIdkFziAXdtk</span><br><span class="line">v7TX92FbffuwB7Cwix5qUWIBzMpUl5uz+7omRq6p8YKw8lPdAkpp0qVtbUNuofcU</span><br><span class="line">ymvYtnPBb25pZkiY6xJFMmkQ/YexR2gMDGBUL8FxbB2n+TMNWVPhEaIx6GQSFd4z</span><br><span class="line">tvwaNJTMbgvGM45/KgL9g9SuEz1jMnI6BbJ2Qg3pYizyNt70M4cuYtKGPPJwpydc</span><br><span class="line">zf8H2LP4b5SJ46iIAlp4M1C7fSzxwlgaUiS0OPdU+kOWAkcLxABwsCLKj56vCnvb</span><br><span class="line">x0j8wL834ubDEVGZWSxDJ6xWe46AEpHZbdwySWWUnXwV+kOiimO93Suf11djMyw7</span><br><span class="line">l2o61RrxAgMBAAECggEBAJ9i31ywBu+f/yimka9YmoSV8XBdKIAhuu+DdGP5lqVE</span><br><span class="line">4m/bRjNk/RufKGYnRmh2sY4euOejVEp/Ydq1Yo4O1Z92JzMEq0Qzkon7lUIalahY</span><br><span class="line">/cZGEnZrAP6wxi43LFpbTDdaTyW5HNpUGaFIWMVDDm+eRFf3CwA5UWJEqCIFRauR</span><br><span class="line">vdZYwPCanTrGtMjSc53oEDEaoyMgnoGXr65OruqYr+uY+rEosZ3M2giY0kt4Ik+E</span><br><span class="line">hquIqT2T+X0sVyacpbQFjlVSSw0HHj76zcdVFX5jOlH96WnzwjSDSm6mnK8Q2cZu</span><br><span class="line">qv9bzKnr0szbuqcK0R+hP1BRNmTBOlJRKLPh/92edgECgYEA0nyxSMlirQG5eG2L</span><br><span class="line">Ry91SWBJWsjwT18eMLzU20qcUirW8TeouitAWOUiuXLlJoqapAq/Ab14+9hqU2Rq</span><br><span class="line">1bhCeeVS2Cmh4zu+4ZLCHG8v/Zs4fmQnm/cM93HRhKfgVy+/VgtMBZXtDdeXybOc</span><br><span class="line">B+yB+KieLM7Wv9Kx6+qK2H4TZZECgYEAyTFo/p6h0iHKuKnbr4IcOHT7Sqh7c621</span><br><span class="line">aHUo56KX8XP6uzUwTVAWMQS8aB/X/xtb8cwf1DwyY/lPOn2PK8ELVlQpEYAJWy4L</span><br><span class="line">xmLG39vHipaH4HOVmvTc2t5IA0LCaIWjvUlxwgZe+ZofNBokLU8SaHECh1tMpMyR</span><br><span class="line">w4VwLEV2L2ECgYEAlsSoPCm8G45TqpZUoD23NkLY6EVsFH5eYqyvjxAnXpe+9HNY</span><br><span class="line">0Vkvsz0VnV5WE0BOulfUL0vngAWpS2hvOfzM6QFBUQKpKdnexTbZAYMHDhID6kyV</span><br><span class="line">LptMV2XYnLue7vSNifV3k7yrWzHlUJ3tkqNvCYzGF/RkUGx78y9CGwZboHECgYBq</span><br><span class="line">XQPL8GNOauz4WVw52gg/VKDxJEc3rbMFCUNZyhyX2p/ITuM9TESfH4jXZ1ZSmM0v</span><br><span class="line">9KEzG6vsLIZVPsHs+L6cohugE9dea+ZvuBK5kEBapSAqahDCfgcwcmkRyD5s8ZHR</span><br><span class="line">5T0NvT6CqJcsfVF43p+1tWEH3B2V1kyNWEMoNIS5oQKBgHQF5UlTzTVp3CY4YNmh</span><br><span class="line">589AbKN6sbj+rjKGSUWtdfbIj00nx6WAm+KVdEoaPJDGQjyN1kTgdMufL3aQkcQO</span><br><span class="line">HW2z19Qe1Z6PM+fOmADL6acsIMsN4Aurh27Rw2yGapZYbEfoTy4HYx6CGh31Pskf</span><br><span class="line">2L8MQ1us28VdkytDAAPZnWuW</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><h2 id="第二步：下载安装程序，按照自己的需要选择版本"><a href="#第二步：下载安装程序，按照自己的需要选择版本" class="headerlink" title="第二步：下载安装程序，按照自己的需要选择版本"></a>第二步：下载安装程序，按照自己的需要选择版本</h2><p>当前有两个版本的。分别为：</p><p><a href="https://pan.baidu.com/s/1GaV5pbvHLoOjulNCsGexoA">64位中文版：https://pan.baidu.com/s/1GaV5pbvHLoOjulNCsGexoA 密码:ads2</a></p><p><a href="https://pan.baidu.com/s/1zK3BLogC-Ey_PqWHSqN-Dg">64位英文版：https://pan.baidu.com/s/1zK3BLogC-Ey_PqWHSqN-Dg 密码:a5l4</a></p><h2 id="第三步：安装程序"><a href="#第三步：安装程序" class="headerlink" title="第三步：安装程序"></a>第三步：安装程序</h2><p>安装比较简单，直接打开.dmg文件然后选择同意，最后将程序拖到Application中如下操作<br><img src="https://img-blog.csdn.net/20180403193111348?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hheWl4aWE2MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="同意使用协议"><br><code>必须选择Agree不然就没有下文了哦</code></p><p><img src="https://img-blog.csdn.net/20180403193230241?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hheWl4aWE2MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="按照提示拖动到Applications"><br><code>这个过程其实就是mac下常用的安装了没什么可说的</code></p><h4 id="说明下：安装完后别急着打开软件"><a href="#说明下：安装完后别急着打开软件" class="headerlink" title="说明下：安装完后别急着打开软件"></a><code>说明下：安装完后别急着打开软件</code></h4><h2 id="第四步：替换公钥，之前的公钥开始要用了"><a href="#第四步：替换公钥，之前的公钥开始要用了" class="headerlink" title="第四步：替换公钥，之前的公钥开始要用了"></a>第四步：替换公钥，之前的公钥开始要用了</h2><p><img src="https://img-blog.csdn.net/20180403193724228?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hheWl4aWE2MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>找到电脑的-&gt;应用程序。在Navicat premium上右键，选择“显示包内容”。<br><img src="https://img-blog.csdn.net/20180403194109858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hheWl4aWE2MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>然后找到如下路径”/Applications/Navicat Premium.app/Contents/Resources”在其中有一名为<code>rpk</code>的文件。用你本地的编辑工具打开。用你刚刚生成的或者我在第一步中提供的公钥替换rpk中的公钥。</p><h2 id="第五步：断网-非常重要"><a href="#第五步：断网-非常重要" class="headerlink" title="第五步：断网!!!!非常重要"></a><code>第五步：断网!!!!非常重要</code></h2><h2 id="第六步：打开软件，手动激活获取请求码"><a href="#第六步：打开软件，手动激活获取请求码" class="headerlink" title="第六步：打开软件，手动激活获取请求码"></a>第六步：打开软件，手动激活获取请求码</h2><p>打开软件并选择“注册”会有一个输入序列号激活的界面<br><img src="https://img-blog.csdn.net/20180403194528612?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hheWl4aWE2MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>输入序列号。序列号为：</p><p><code>中文版64位密钥序列号： NAVH-T4PX-WT8W-QBL5</code><br><code>英文版64位密钥序列号： NAVG-UJ8Z-EVAP-JAUW</code><br>输入后点击“激活”因为我们之前断了网所以会有一个手动激活的提示。<br><img src="https://img-blog.csdn.net/20180403194719598?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hheWl4aWE2MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>点击手动激活会出现如下的界面：<br><img src="https://img-blog.csdn.net/20180403194758735?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hheWl4aWE2MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>在这儿激活码是需要我们填写的。</p><h2 id="第七步：获取激活码之解密请求码"><a href="#第七步：获取激活码之解密请求码" class="headerlink" title="第七步：获取激活码之解密请求码"></a>第七步：获取激活码之解密请求码</h2><p>解密请求码需要我们上边所提到的私钥。<a href="http://sikujiaoyu.com/tools/rsaprivatedecrypt">解密的地址为：http://sikujiaoyu.com/tools/rsaprivatedecrypt</a>使用该工具出现任何问题<a href="http://sikujiaoyu.com/tools/sendmail">请点击去反馈，通常很快会有回复。http://sikujiaoyu.com/tools/sendmail</a><br><img src="https://img-blog.csdnimg.cn/20190523001452736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9tYXJzd2lsbC5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt="http://sikujiaoyu.com/tools/rsaprivatedecrypt"><br><strong>如果解密后内容为空请注意密钥和请求码是否复制正确，注意不要手动更改请求码和密钥的格式。（最好是用我提供的地址自己生成公钥密钥对 ）</strong></p><p>解密后的内容为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;K&quot; : &quot;NAVHT4PXWT8WQBL5&quot;,</span><br><span class="line">  &quot;P&quot; : &quot;Mac 10.13&quot;,</span><br><span class="line">  &quot;DI&quot; : &quot;ODQ2Yjg2ZDBjMTEzMjhh&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将你的私钥和软件界面的请求码分别复制后填写到相应的位置并且点击”RAS私钥解密“就会得到如下的请求码的明文。</p><h2 id="第八步：获取激活码之自己加密激活码"><a href="#第八步：获取激活码之自己加密激活码" class="headerlink" title="第八步：获取激活码之自己加密激活码"></a>第八步：获取激活码之自己加密激活码</h2><p>通过第七步已经获取了请求码的明文，然后需要自己加密一个激活码。也就是使用私钥将激活码的明文加密成密文。<a href="http://sikujiaoyu.com/tools/rsaencryptbyprivatekey">在线加密地址为：http://sikujiaoyu.com/tools/rsaencryptbyprivatekey</a><br><img src="https://img-blog.csdnimg.cn/20190523001640167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9tYXJzd2lsbC5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt="http://sikujiaoyu.com/tools/rsaencryptbyprivatekey"></p><p><code>关于要加密的明文这儿坑很多</code>,首先明文的格式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;K&quot;:&quot;NAVHT4PXWT8WQBL5&quot;, &quot;N&quot;:&quot;marswill&quot;, &quot;O&quot;:&quot;weiyongqiang.com&quot;, &quot;DI&quot;:&quot;ODQ2Yjg2ZDBjMTEzMjhh&quot;, &quot;T&quot;:1516939200&#125;</span><br><span class="line">其中的K DI为我们第七步解密的内容，而N和O可以自己随便填。但是特别注意的一点是T，T时一个Linux时间戳，必须小于第六步提醒的请在xxxx年xx月xx日之前激活中的这个时间点。例如提醒你必须在2018年04月20日前激活那么你生成的T就不能是4月20日之后的时间戳。不然或激活失败。</span><br></pre></td></tr></table></figure><h2 id="第九步：界面欣赏"><a href="#第九步：界面欣赏" class="headerlink" title="第九步：界面欣赏"></a>第九步：界面欣赏</h2><p>经历了以上的八步后相信按照我的步骤的同学大部分已经激活了那让我们看看他的界面。<br><img src="https://img-blog.csdn.net/20180403200153825?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hheWl4aWE2MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>可以看出12比11漂亮多了，重点是有了很多易用而且实用的功能。</p><p><strong>为了防止丢失，这里作为保存，转载于<a href="https://blog.csdn.net/marswill/article/details/79808416">https://blog.csdn.net/marswill/article/details/79808416</a></strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2019.09.26算法课堂练习</title>
    <link href="/2019/09/30/2019-09-26%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0/"/>
    <url>/2019/09/30/2019-09-26%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-按数值个数排序"><a href="#1-按数值个数排序" class="headerlink" title="1.按数值个数排序"></a>1.按数值个数排序</h3><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>给定整数数组，请根据元素的频率对数组进行排序。 例如，如果输入数组是{2，3，2，4，5，12，12，2，3，3，3，12}，则将该数组修改为{3，3，3，3，2，2， 2，12，12，4，5}。 如果两个元素的频率相同，则以升序打印。</p><h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><p>按出现频次排序，那么我们只需要统计每个数字出现的次数，以数字出现的次数为key进行排序，最后从头到尾输出排序后的数字个数。</p><p><strong>时间复杂度 O(nlogn)</strong></p><p><strong>空间复杂度O(n)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Python</span><br><span class="line"></span><br><span class="line">import collections</span><br><span class="line"># 对数列按照出现频次排序</span><br><span class="line">def frecuncySort(nums):</span><br><span class="line">    count = collections.Counter(nums)</span><br><span class="line">    # 以数字出现频次为key进行排序</span><br><span class="line">    vals = [(-count[k], k) for k in count]</span><br><span class="line">    vals.sort()</span><br><span class="line">    # 出现次数从多到少，输出对应数字个数</span><br><span class="line">    res = []</span><br><span class="line">    for val, k in vals:</span><br><span class="line">        res += [k] * (-val)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"># IO输入输出</span><br><span class="line">N = int(input())</span><br><span class="line">for i in range(N):</span><br><span class="line">    l = input()</span><br><span class="line">    nums = list(map(int, input().split()))</span><br><span class="line">    nums = map(str, frecuncySort(nums))</span><br><span class="line">    out = &#x27; &#x27;.join(nums)</span><br><span class="line">    print(out)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Java</span><br><span class="line"></span><br><span class="line"> public static List&lt;Long&gt; frecuncySort(List&lt;Long&gt; nums)&#123;</span><br><span class="line">        // 计算频次，获取频次与数字对应的pairs</span><br><span class="line">        Map&lt;Long, Long&gt; count = nums.stream().collect(Collectors.groupingBy(i -&gt; i, Collectors.counting()));</span><br><span class="line">        List&lt;Pair&gt; pairs = count.keySet().stream().map(key -&gt; new Pair(key, count.get(key))).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        // 按照频次对数字排序</span><br><span class="line">        Collections.sort(pairs, (p1, p2) -&gt; &#123;</span><br><span class="line">            // 频次相同按照数字大小排序</span><br><span class="line">            if (p1.cnt == p2.cnt)</span><br><span class="line">                return p1.value &gt; p2.value ? 1:-1;</span><br><span class="line">            return p1.cnt &lt; p2.cnt ? 1:-1;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 输出</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            nums.set(i, pairs.get(0).value);</span><br><span class="line">            pairs.get(0).cnt--;</span><br><span class="line">            if (pairs.get(0).cnt == 0)</span><br><span class="line">                pairs.remove(0);</span><br><span class="line">        &#125;</span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Pair&#123;</span><br><span class="line">        long value, cnt;</span><br><span class="line"></span><br><span class="line">        Pair(long value, long cnt) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.cnt = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-最小交换次数"><a href="#2-最小交换次数" class="headerlink" title="2. 最小交换次数"></a>2. 最小交换次数</h3><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p>给定一个由N个不同的elements组成的数组，找到对数组进行排序所需的最小交换次数。您需要完成该函数，该函数返回一个表示对数组进行排序所需的最小交换次数的整数。</p><h5 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h5><p>方法一：</p><p>遍历数组，判断当前元素是否在最终位置，否则把它交换到它的最终位置，（即每次交换至少让其中一个元素被放到其最终位置），统计总交换次数。</p><p>怎么判断当前元素是否在最终位置呢？</p><p>可以先对数组排序，得到每个数字对应最终位置的map。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">def min_swaps(nums):</span><br><span class="line">    # mp记录排序后数值应在的正确位置</span><br><span class="line">    mp = &#123;&#125;</span><br><span class="line">    sort_nums = sorted(nums)</span><br><span class="line">    for i in range(len(sort_nums)):</span><br><span class="line">        mp[sort_nums[i]] = i</span><br><span class="line"></span><br><span class="line">    # 循环节个数</span><br><span class="line">    lops = 0</span><br><span class="line">    # 该位置的数是否被访问过</span><br><span class="line">    flags = []</span><br><span class="line">    for i in range(len(nums)):</span><br><span class="line">        flags.append(False)</span><br><span class="line">    for i in range(len(nums)):</span><br><span class="line">        if not flags[i]:</span><br><span class="line">            j = i</span><br><span class="line">            while not flags[j]:</span><br><span class="line">                flags[j] = True</span><br><span class="line">                # j是当前值应在的正确位置</span><br><span class="line">                j = mp[nums[j]]</span><br><span class="line">            lops += 1</span><br><span class="line">    return len(nums) - lops</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case = int(input().strip())</span><br><span class="line">while case:</span><br><span class="line">    size = int(input().strip())</span><br><span class="line">    nums = list(map(int, input().strip().split()))</span><br><span class="line">    print(min_swaps(nums))</span><br><span class="line">    case -= 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line">public int minswap(List&lt;Integer&gt; nums)&#123;</span><br><span class="line">    List&lt;Integer&gt; snums = new ArrayList&lt;&gt;();</span><br><span class="line">    snums.addAll(nums);</span><br><span class="line">    Collections.sort(snums);</span><br><span class="line"></span><br><span class="line">    // 位置数组</span><br><span class="line">    Map&lt;Integer, Integer&gt; inums = new HashMap&lt;&gt;();</span><br><span class="line">    for (int i = 0; i&lt;snums.size(); i++)</span><br><span class="line">        inums.put(snums.get(i), i);</span><br><span class="line"></span><br><span class="line">    int count = 0;</span><br><span class="line">    for (int i = 0; i &lt; nums.size(); i++)&#123;</span><br><span class="line">        // 最终位置</span><br><span class="line">        int target_i = inums.get(nums.get(i));</span><br><span class="line">        while (target_i != i)&#123;</span><br><span class="line">            int temp = nums.get(i);</span><br><span class="line">            nums.set(i, nums.get(target_i));</span><br><span class="line">            nums.set(target_i, temp);</span><br><span class="line">            count++;</span><br><span class="line">            target_i = inums.get(nums.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><p>在原数组中，每个元素添加一个出边指向它最终的位置，这样画完出边后，最少会成一个环，最多n个环。 每一个环对应的交换次数等于元素数量-1，因此不需要交换的次数等于环数。交换次数 = n - 环数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">def minswap(nums):</span><br><span class="line">    # 排序</span><br><span class="line">    snums = sorted(nums)</span><br><span class="line">    # 位置数组</span><br><span class="line">    inums = &#123;snums[i]: i for i in range(len(snums))&#125;</span><br><span class="line">    count = 0</span><br><span class="line">    visited = [False] * len(nums)</span><br><span class="line">    # 计算环数</span><br><span class="line">    for i in range(len(nums)):</span><br><span class="line">        if visited[i]: continue</span><br><span class="line">        j = i</span><br><span class="line">        while not visited[j]:</span><br><span class="line">            visited[j] = True</span><br><span class="line">            j = inums[nums[j]]</span><br><span class="line">        count += 1</span><br><span class="line">    return len(nums) - count</span><br></pre></td></tr></table></figure><h3 id="3-倒置个数"><a href="#3-倒置个数" class="headerlink" title="3. 倒置个数"></a>3. 倒置个数</h3><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><p>有一个由N个实数构成的数组，如果一对元素A[i]和A[j]是倒序的，即i&lt;j但是A[i]&gt;A[j]则称它们是一个倒置，设计一个计算该数组中所有倒置数量的算法。要求算法复杂度为O(nlogn)</p><h5 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h5><p>我们来回忆一下合并排序，合并排序的思路是首先对左半部分递归排序，再对右半部分递归排序，左右两部分有序后，合并这两部分，递归结束的条件是数组长度小于2，这时候不需要排序了。</p><p>合并的过程如下：</p><p>左半部分：L1 &gt; L2 &gt; L3 &gt; L4</p><p>右半部分：R1 &gt; R2 &gt; R3 &gt; R4 &gt; R5</p><p>比较L1和R1的大小，如果L1 &lt; R1, L1排为第一个，再比较R1和L2的大小….</p><p>在这个过程中，如果R1 &lt; L1，那么R1与 L1…L4就组成了倒置对，因此我们可以在合并排序中统计这些倒置对。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">def mergeSort(nums):</span><br><span class="line">    if len(nums) &lt; 2:</span><br><span class="line">        return 0, nums</span><br><span class="line">    count = 0</span><br><span class="line">    mid = len(nums) // 2</span><br><span class="line">    cl, l = mergeSort(nums[:mid])</span><br><span class="line">    cr, r = mergeSort(nums[mid:])</span><br><span class="line">    for i in range(len(nums)):</span><br><span class="line">        if not r or l and l[0] &lt; r[0]:</span><br><span class="line">            nums[i] = l.pop(0)</span><br><span class="line">        else:</span><br><span class="line">            nums[i] = r.pop(0)</span><br><span class="line">            count += len(l)</span><br><span class="line">    return count + cl + cr, nums</span><br><span class="line"></span><br><span class="line">def count(nums):</span><br><span class="line">    return mergeSort(nums)[0]</span><br></pre></td></tr></table></figure><h3 id="4-按照给定数组排序"><a href="#4-按照给定数组排序" class="headerlink" title="4. 按照给定数组排序"></a>4. 按照给定数组排序</h3><h5 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h5><p>给定两个数组A1和A2，对A1进行排序，以使元素之间的相对顺序与A2中的相对顺序相同。 对于A2中不存在的元素。 最后按排序顺序附加它们。 还假定A2 中的元素数小于或等于A1 中的元素数，并且A2具有所有不同的元素。</p><h5 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h5><p>统计A1数字出现的频次，遍历A2，按照统计频次输出对应数量的数，对于余下的数再排序后输出。</p><p><strong>时间复杂度O(nlogn)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">case = int(input().strip())</span><br><span class="line">while case:</span><br><span class="line">    size1, size2 = list(map(int, input().strip().split()))</span><br><span class="line"></span><br><span class="line">    num1 = list(map(int, input().strip().split()))</span><br><span class="line">    num2 = list(map(int, input().strip().split()))</span><br><span class="line">    result = []</span><br><span class="line">    for i in range(len(num2)):</span><br><span class="line">        if num2[i] in num1:</span><br><span class="line">            count = num1.count(num2[i])</span><br><span class="line">            for j in range(0, count):</span><br><span class="line">                print(num2[i], end=&quot; &quot;)</span><br><span class="line">                num1.remove(num2[i])</span><br><span class="line">    num1.sort()</span><br><span class="line">    for i in range(len(num1)):</span><br><span class="line">        if i == len(num1) -1:</span><br><span class="line">            print(num1[i])</span><br><span class="line">        else:</span><br><span class="line">            print(num1[i], end= &quot; &quot;)</span><br><span class="line">    case -= 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line">public List&lt;Long&gt; mysort(List&lt;Long&gt; A1, List&lt;Long&gt; A2)&#123;</span><br><span class="line">    Map&lt;Long, Long&gt; count = A1.stream().collect(Collectors.groupingBy(i -&gt; i, Collectors.counting()));</span><br><span class="line">    List&lt;Long&gt; res = A1.stream().filter(num -&gt; !A2.contains(num)).collect(Collectors.toList());</span><br><span class="line">    Collections.sort(res);</span><br><span class="line">    int j = 0;</span><br><span class="line">    for (Long num: A2)&#123;</span><br><span class="line">        for (int i = 0; i&lt;count.get(num); i++) &#123;</span><br><span class="line">            res.add(j, num);</span><br><span class="line">            j += 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/2019/09/22/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2019/09/22/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><h6 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h6><p><a href="https://www.jianshu.com/p/fc9175065d87">直观理解深度学习卷积部分</a></p><h5 id="2、过程"><a href="#2、过程" class="headerlink" title="2、过程"></a>2、过程</h5><ul><li><p>卷积能处理平移不变性，但是不能处理旋转不变性，平移结果对卷积之后的结果不产生影响，卷积-非线性-池化<br><img src="https://user-images.githubusercontent.com/17808702/65149356-854c7800-da54-11e9-80f7-4a6a7941acb8.png" alt="TIM截图20190918203946"></p></li><li><p>提取边缘–横向纵向<img src="https://user-images.githubusercontent.com/17808702/65149580-eecc8680-da54-11e9-92c4-f03606257683.png" alt="TIM截图20190918204257"><br><img src="https://user-images.githubusercontent.com/17808702/65149964-b24d5a80-da55-11e9-9fe7-08d7dbe15415.png" alt="TIM截图20190918204519"></p></li><li><p>特征的特征<br><img src="https://user-images.githubusercontent.com/17808702/65149966-b24d5a80-da55-11e9-985d-4f82293c043a.png" alt="TIM截图20190918204702"></p></li><li><p>激活函数，所有的卷积都是线性的，无论进行多少次卷积都相当于只进行了一次卷积，中间进行一次非线性的转化才能实现质的飞跃<br><img src="https://user-images.githubusercontent.com/17808702/65150275-65b64f00-da56-11e9-8219-c62ed7517f38.png" alt="TIM截图20190918205112"></p></li><li><p>池化，存在大量冗余的信息，将多余信息删掉，取一个最大的其余的去掉，抓大放小<br><img src="https://user-images.githubusercontent.com/17808702/65150477-cf365d80-da56-11e9-8b44-c2644dd3bafa.png" alt="TIM截图20190918205616"></p></li><li><p>卷积核的大小一般为3*3(最小的)</p></li><li><p>感受视野的扩张，从局部到全局<br><img src="https://user-images.githubusercontent.com/17808702/65150933-a5316b00-da57-11e9-805a-6277bf4b962c.png" alt="TIM截图20190918210144"></p></li><li><p>全连接  出来的是概念，要分类的东西，然后统计概率<br><img src="https://user-images.githubusercontent.com/17808702/65151289-60f29a80-da58-11e9-845e-1192307007c1.png" alt="TIM截图20190918210716"><br><img src="https://user-images.githubusercontent.com/17808702/65151418-a616cc80-da58-11e9-9eef-3b1307baec7c.png" alt="TIM截图20190918210927"></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>人月神话读书笔记</title>
    <link href="/2019/09/21/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/09/21/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>《人月神话》被誉为软件工程的圣书，在我本科阶段的时候就曾经在老师的建议下读过，当初是用吃饭、睡觉前等碎片化的时间进行阅读，好多东西都是囫囵吞枣，不明所以。现如今对于里面的很多知识几乎都已经忘记了，在《软件工程管理》这门课的过程中，老师提起这本书，提起“沟通”的重要性，提起“没有银弹”，在脑海中似乎有印象，但是具体讲了些什么呢？自己又说不出来。软件工程本就是对前人工作的总结，如今再次拿起这本圣书，看到里面对于软件项目管理的过程中一些精华，加上本科阶段软件开发的理解，对于这本书讲的内容不妄想在短时间内全部理解，全部吃透，暂且先来做一份笔记，加上我自己一点点的小见解。许多章节的内容可以相互渗透互相理解，本文虽然是以章节的名字作为小标题但是，并不是严格按照章节来划分。</p><h4 id="焦油坑"><a href="#焦油坑" class="headerlink" title="焦油坑"></a>焦油坑</h4><p>过去几十年的大型系统开发就犹如这样一个焦油坑，许多大型和强壮的动物在其中剧烈的挣扎。想一想这是多么壮观的场面，在入坑之前，无论是觉得自己多么强壮，无论是觉得自己能力多强，在焦油坑中还是会一点一点的越陷越深。大型的软件开发就如同这焦油坑一般，一点点的吞噬软件的开发人员、测试人员、管理人员、投资者、各种各样的团队，正是因为他们呢没有很好的满足目标、时间进度和预算的要求。看起来系统中的单个问题非常好解决，但是当他们错综复杂的交错在一起的时候，随着时间的推移慢慢积累没有很好的解决的时候，团队成员会慢慢的陷入绝望，导致项目的最终失败。编程系统产品开发是供个人程序构建的9倍，现在许多同学们自己做的demo(程序)，与真正能供用户使用的编程系统产品还差了很多很多。当然本章中也分析了作为软件开发人员的职业乐趣与职业苦恼，任何事情、任何职业、任何观点都是有乐趣与苦恼的我们要学会辩证的看待。</p><h4 id="人月神话"><a href="#人月神话" class="headerlink" title="人月神话"></a>人月神话</h4><p>本书的书名也是人月神话，将本章的名字命名为书名，意义非凡。本章中首先阐述了，每个软件开发人员的职业病是乐观主义，我觉得这个说的非常在理，软件开发人员是创造者，对自己脑海中的描绘的事务创造程序的创造者，自己想的往往是片面的，程序运行结果符合自己的想法，就会有一种成就感，存在这种成就感就很难想着去发散自己的思维，这形成了一种“良性循环”，一种自我安慰而来的乐观主义。这就是为什么软件开发人员与测试人员是天生的天敌的原因，开发人员会天生乐观的想“我这个程序怎么可能会有Bug”，而测试人员则是“这段程序怎么又有Bug”。存在这种乐观主义，必然会导致程序的返工，项目周期时间的延期，这时候很多项目经理的第一反应是，在deadline之前加人，但是这种盲目加人的思想没有想到沟通带来的成本(为什么巴比伦塔会失败)、新人熟悉项目所带来的时间成本等，所以说盲目的增加人手往往会达到相反的目的，用人手交换时间，人和月的互换就是一个神话。本章中对任务进度安排给了一些建议：1/3计划、1/6编码、1/4构建测试和早期的系统测试、1/4系统测试，所有构建完成。很多人会产生疑问，为什么编码的时间这么少？因为往往编码的时间估算是可控，对于测试的结果往往是未知的，所以要多给测试时间。要做到未雨绸缪我们在实现功能时往往有很多思路，但是哪种思路能行得通并且最适合情况就需要我们进行试验性开发。试验性开发确实会造成精力的消耗，或许大量的测试方案最终还会被舍弃，但是我们必须这样做。实际上如果不进行方案的实验，正式的开发反而可能遭遇返工和混乱的拆补，会严重分散重新开发人员的精力和信心，甚至影响用户对产品的信任。这世界上唯一不变的就是变化本身，我们必须有未雨绸缪的能力，对未来可能产生的变化做出提前的设计，甚至对组织架构也需要进行提前的计划来规避变化造成的风险。除了开发，运营维护也需要适应变化，这就需要我们提高代码的质量和可读性，完善测试过程，保证系统在调整的过程中能够尽量少地引入更多问题。前人的智慧告诉我们，缺陷是永远存在的，我们需要通过质量管理放缓系统混乱度的提高，总而言之一句话，遇到问题不要盲目加人，任何环节都要做到未雨绸缪。</p><h4 id="外科手术队伍"><a href="#外科手术队伍" class="headerlink" title="外科手术队伍"></a>外科手术队伍</h4><p>效率高和效率低的实施者之间的具体差别非常大，经常达到了数量级的水平。软件项目经理往往喜欢由头等人才组成的小型、精干的队伍，而不是几百个平庸程序员组成的大型团队，因为需要协作的人员数量影响着开发成本。通常情况下小型强有力的团队不超过十人，组成这种小而强力的10精英团队往往时很难的，这个时候外科手术队伍的团队方式就可以值得借鉴。书中的对应是一名首席程序员相当于外科医生，一个经验相对较少的人员充当副手，一个管理员负责行政事务的决策，一个编辑用于生成文档，两个文秘使得文件与项目协作一致，一个程序职员用于维护技术记录，一个工具维护人员，一个测试人员，以及一个语言专家。这样的开发团队人员平等但是各司其职，保证了团队的有序运行。对于大型的项目，就需要在人员安排上使用分解的思路，由架构师负责整体设计，系统实现则由各个小团队协作完成。</p><h4 id="贵族专制、民主政治和系统设计"><a href="#贵族专制、民主政治和系统设计" class="headerlink" title="贵族专制、民主政治和系统设计"></a>贵族专制、民主政治和系统设计</h4><p>概念的完整性是系统设计中最重要的考虑因素。在日常生活中，每个人的想法都不一样，软件的开发不能完全按照每个人的想法进行开发创造，这样开发出来的产品就是一个四不像。所以，必须有一个人(架构师)或者具有共识的小型团队来收集团队中成员的愿景(民主)，最终综合产出具有概念一致性的软件产品，来反映唯一的设计理念，在一些重要决断的时候必须由架构师或者小型具有共识的架构团队来强制性执行(贵族专制)，这样开发出来的产品才会有一个共同的目标，为不是背向而驰。虽然有一个一致的完整的概念，如何做到概念的完整性？如何贯彻执行上层领导的决策？书中提出了几个方法来实现整个团队保持系统的概念完整性。文档化的规格说明，文字是信息的载体，当产生分歧不一致的情况出现的时候，文档就可以拿来作为下一步决策的标准，这足以证明文档对于维持概念完整性的重要性，当然对于文档的编写也需要形式化的定义保证概念的清晰和确定。但是书中存在一种观点，对于软件项目的开发人员都要完整的了解软件开发的细节，也就是说每次上班之前都要读文档，读各种各样的项目文档，以便了解项目开发的进度。我对此表示并不是很赞同，这种做法对于小型的团队，小型的开发而言，浪费在文档阅读，文档制定的时间可能不是很多，但是对于大型的项目而言，开发人员每天花费大量的时间去阅读与自己负责单元、模块、服务无关的文档，而且这些文档就像女人的裹脚布一样又臭又长，这非常浪费时间与经历，这些文档是否增加了开发人员的负担？我所提倡的是必要的设计与决策进行书面表达是可以的，并且这种文档存在形式是单一的，文档存在的意义就在于沟通，这些文档可以作为一种标准。在软件开发的过程中，你不想听见别人告诉你一堆废话，还有一堆与自己开发工作无关的话。开发人员仅仅需要了解的是整个项目的宏观设计与关键步骤的决策，以及重点关注自己所负责的部分。</p><h4 id="画蛇添足"><a href="#画蛇添足" class="headerlink" title="画蛇添足"></a>画蛇添足</h4><p>当我们小心翼翼开发完第一款产品准备开发第二款类似的产品的时候，对于第一款产品的思路已经清澈熟路，对于第一款产品的缺陷与不足我们也能够了然于胸，所以往往会对第二款产品进行许许多多冗余的设计，这是每个人的通病，我们总想将事情设计的完美无缺，但是当我们回看的时候想一想，这些设计是那么重要的嘛？每个人都不能跨过第二个系统直接调到第三个系统，第二个系统就在那里，无法逾越，但是我们怎么去避免会出现一些无关紧要的冗余的浪费时间金钱人力物力的设计呢？虽然我们有意识的去避免这些无关紧要的边缘的设计，避免一些功能上的修饰，保持对特殊诱惑的警觉，但是自己是无法完全避免的，所以必须坚持至少用于两个系统以上开发经验结构师来决定。</p><h4 id="祸起萧墙"><a href="#祸起萧墙" class="headerlink" title="祸起萧墙"></a>祸起萧墙</h4><p>项目是怎样延迟了整整一年的时间？是一步步的一点一点的。一天一天的进度落后是难以识别、不容易防范和难以弥补的。昨天，某个关键人员生病了，无法召开某个会议。今天，由于雷击打坏了公司的供电变压器，所有机器无法启动。明天，因为工厂磁盘供货延迟了一周，磁盘例程的测试无法进行。下雪、应急任务、私人问题、同顾客的紧急会议、管理人员检查——这个列表可以不断地延长。每件事都只会将某项活动延迟半天或者一天，但是整个进度开始落后了，尽管每次只有一点点。对于这种逐渐延迟的进度，Brooks提议简历项目里程碑，并且持续的修订项目计划，这样无论最后的情况变得多么糟糕，它都不会有太大的变化。里程碑是指百分之百的事件，必须有明显的边界和没有歧义。这样就很好有人可以在里程碑进展上弄虚作假。我们要学会利用工具好的工具，在软件的开发离不开工具，从需求的分析，到系统的设计，到程序的编码，到构建、测试、发布和维护，我们要善于利用工具来提高我们工作的效率和质量，善于利用工具进行时间进度的把控。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>19.09.17星环讲座</title>
    <link href="/2019/09/17/19-09-17%E6%98%9F%E7%8E%AF%E8%AE%B2%E5%BA%A7/"/>
    <url>/2019/09/17/19-09-17%E6%98%9F%E7%8E%AF%E8%AE%B2%E5%BA%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="星环分布式闪存数据库-Transwarp-ArgoDB"><a href="#星环分布式闪存数据库-Transwarp-ArgoDB" class="headerlink" title="星环分布式闪存数据库(Transwarp ArgoDB)"></a>星环分布式闪存数据库(Transwarp ArgoDB)</h3><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>1、 数据量大TB级别(分析、检索、在线、离线)<br>2、 结构化与非结构化数据<br>3、 事务的需求  传统关系型数据库事务的迁移</p><h5 id="ArgoDB"><a href="#ArgoDB" class="headerlink" title="ArgoDB"></a>ArgoDB</h5><p>DB2与hadoop的tradeoff</p><h5 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h5><ul><li>1、 兼容性： 支持oracle/db2语法</li><li>2、 水平扩展的分布式框架</li><li>3、 执行计划–&gt;最优</li><li>4、 存储和计算<ul><li>计算算子： Hive、Shark、SparkSQL、Impala等</li><li>存储：RC/ORC、Parquet、Canbondata、Clickhouse、LevelDB、Kudu等</li></ul></li></ul><h5 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h5><ul><li>SigMod</li></ul><h3 id="AI平台-Sophon"><a href="#AI平台-Sophon" class="headerlink" title="AI平台(Sophon)"></a>AI平台(Sophon)</h3><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li>1、 机器学习实战  星环</li><li>2、 技术分享<ul><li>transwarp-alg.github.io</li><li>github.com/hibayesian/awesome-automl-papers</li></ul></li><li>3、 图计算</li><li>4、 分布式机器学习算法</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TarsGo windows系统下的踩坑</title>
    <link href="/2019/07/12/tarsgo%E8%B8%A9%E5%9D%91/"/>
    <url>/2019/07/12/tarsgo%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="TarsGo-windows系统下的踩坑"><a href="#TarsGo-windows系统下的踩坑" class="headerlink" title="TarsGo windows系统下的踩坑"></a>TarsGo windows系统下的踩坑</h1><h3 id="安装Go语言"><a href="#安装Go语言" class="headerlink" title="安装Go语言"></a>安装Go语言</h3><p>下载安装Go(<a href="%5Bhttps://golang.org/dl/%5D(https://golang.org/dl/)">go安装包位置</a>)，并在环境变量中设置两个关键路径如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GOROOT = Go的系统安装目录</span><br><span class="line">GOPATH = Go的工作路径</span><br></pre></td></tr></table></figure><p>Go语言推荐目录结构:  <a href="https://github.com/golang-standards/project-layout">project-layout</a><br>TarsGo会生成一个默认的目录结构</p><h3 id="Go的编译环境JetBrains-GoLand"><a href="#Go的编译环境JetBrains-GoLand" class="headerlink" title="Go的编译环境JetBrains GoLand"></a>Go的编译环境JetBrains GoLand</h3><p>下载安装<a href="https://www.jetbrains.com/go/">JetBrains GoLand</a><br>安装完成后需要在Settings内设置GOROOT、Global GOPATH、Project GOPATH目录</p><h3 id="使windows支持linux命令"><a href="#使windows支持linux命令" class="headerlink" title="使windows支持linux命令"></a>使windows支持linux命令</h3><ul><li>git bash，使用<a href="%5Bhttps://chocolatey.org%5D(https://chocolatey.org/)">chocolaey</a>安装git</li><li>mingw64， <a href="https://stackoverflow.com/questions/32127524/how-to-install-and-use-make-in-windows">https://stackoverflow.com/questions/32127524/how-to-install-and-use-make-in-windows</a></li><li>make，使用<a href="%5Bhttps://chocolatey.org%5D(https://chocolatey.org/)">chocolaey</a>安装make</li></ul><h3 id="TarsGo"><a href="#TarsGo" class="headerlink" title="TarsGo"></a>TarsGo</h3><ul><li>通过<a href="https://github.com/TarsCloud/TarsGo/blob/master/docs/tars_go_quickstart.md">TarsGo快速指南</a>拉取TarsGo项目并编译Tars协议转Golang工具</li><li><strong>如下所示修改create_tars_server.sh</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=$(echo $GOPATH | cut -f1 -d &#x27;:&#x27;)</span><br><span class="line">if [ &quot;$GOPATH&quot; == &quot;&quot; ]; then</span><br><span class="line">echo &quot;GOPATH must be set&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">for RENAMEFILE in `ls `     //该句会报没有rename命令的错误无关紧要, 但手动修改文件名</span><br><span class="line">do</span><br><span class="line">rename &quot;Server&quot; &quot;$SERVER&quot; $RENAMEFILE</span><br><span class="line">rename &quot;Servant&quot; &quot;$SERVANT&quot; $RENAMEFILE</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=$(echo $GOPATH)</span><br><span class="line">if [ &quot;$GOPATH&quot; == &quot;&quot; ]; then</span><br><span class="line">    echo &quot;GOPATH must be set&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>运行create_tars_server.sh创建服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh $GOPATH/src/github.com/TarsCloud/TarsGo/tars/tools/create_tars_server.sh [App] [Server] [Servant]</span><br><span class="line">例如： </span><br><span class="line">sh $GOPATH/src/github.com/TarsCloud/TarsGo/tars/tools/create_tars_server.sh TestApp HelloGo SayHello</span><br></pre></td></tr></table></figure></li><li>该脚本会在$(GOPATH)/src/生成项目[App]，暂时未到git bash 支持<strong>rename</strong>的方法，暂且手动修改$(GOPATH)/src/[App]/[Server]下生成的文件名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Servant.tars----&gt;[Servant].tars  </span><br><span class="line">ServantImp.go----&gt;[Servant]Imp.go</span><br><span class="line">Server.conf----&gt;[Server].conf</span><br><span class="line">Server.go----&gt;[Server].go</span><br></pre></td></tr></table></figure></li><li>若根据<a href="https://github.com/TarsCloud/TarsGo/blob/master/docs/tars_go_quickstart.md">TarsGo快速指南</a>的提示编写代码，<strong>main包下的func main()调用同一包但是不同文件下的SayHelloImp会出现引用不到的问题,故将SayHelloImp放入package imp包下</strong></li><li>编写完成服务端代码<a href="https://github.com/TarsCloud/TarsGo/blob/master/docs/tars_go_quickstart.md">TarsGo快速指南</a>会提示运行make, 在此之前对**$(GOPATH)/src/github.com/TarsCloud/TarsGo/tars/makefile.tars**进行修改<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GO = $&#123;GOROOT&#125;/bin/go</span><br><span class="line">libpath=$&#123;subst :, ,$(GOPATH)&#125;</span><br><span class="line">TARS2GO := $(firstword $(subst :, , $(shell go env GOPATH)))/bin/tars2go</span><br><span class="line">J2GO_FLAG := -outdir=vendor $&#123;J2GO_FLAG&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GO = $(shell go env GOROOT)/bin/go</span><br><span class="line">libpath=$&#123;subst :, ,$(GOPATH)&#125;</span><br><span class="line">TARS2GO     := $(firstword $(shell go env GOPATH))/bin/tars2go</span><br><span class="line">J2GO_FLAG   := -outdir=vendor $&#123;J2GO_FLAG&#125; </span><br></pre></td></tr></table></figure></li><li>运行make &amp;&amp; make tar会生成[Server]的文件</li><li><strong>启动运行./[Server] –config = [Server].config</strong></li><li>在$(GOPATH)/src/[App]/[Server]/client下编写客户端代码测试, 注意要与[Server].config的端口一致</li></ul>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongo shell 显示更多数量的结果</title>
    <link href="/2019/04/01/mongo-shell-%E6%98%BE%E7%A4%BA%E6%9B%B4%E5%A4%9A%E6%95%B0%E9%87%8F%E7%9A%84%E7%BB%93%E6%9E%9C/"/>
    <url>/2019/04/01/mongo-shell-%E6%98%BE%E7%A4%BA%E6%9B%B4%E5%A4%9A%E6%95%B0%E9%87%8F%E7%9A%84%E7%BB%93%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h6 id="DBQuery-shellBatchSize-300"><a href="#DBQuery-shellBatchSize-300" class="headerlink" title="DBQuery.shellBatchSize = 300"></a>DBQuery.shellBatchSize = 300</h6>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>XQuery环境开发</title>
    <link href="/2019/03/29/XQuery%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91/"/>
    <url>/2019/03/29/XQuery%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="Xquery的环境配置"><a href="#Xquery的环境配置" class="headerlink" title="Xquery的环境配置"></a>Xquery的环境配置</h6><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h4><h6 id="idea新建maven项目，将jar包下载下来并添加入Libraries"><a href="#idea新建maven项目，将jar包下载下来并添加入Libraries" class="headerlink" title="idea新建maven项目，将jar包下载下来并添加入Libraries"></a>idea新建maven项目，将jar包下载下来并添加入Libraries</h6><p><a href="https://sourceforge.net/projects/saxon/">https://sourceforge.net/projects/saxon/</a> </p><h4 id="xqy"><a href="#xqy" class="headerlink" title="xqy"></a>xqy</h4><h6 id="在项目根目录新建book-xqy文件"><a href="#在项目根目录新建book-xqy文件" class="headerlink" title="在项目根目录新建book.xqy文件"></a>在项目根目录新建book.xqy文件</h6><pre><code>for $x in doc(&quot;books.xml&quot;)/books/bookwhere $x/price&gt;30return $x/title</code></pre><h4 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h4><h6 id="在项目根目录新建book-xml文件"><a href="#在项目根目录新建book-xml文件" class="headerlink" title="在项目根目录新建book.xml文件"></a>在项目根目录新建book.xml文件</h6><pre><code>&lt;books&gt;   &lt;book category=&quot;JAVA&quot;&gt;      &lt;title lang=&quot;en&quot;&gt;15天搞定Java&lt;/title&gt;      &lt;author&gt;Maxsu&lt;/author&gt;      &lt;year&gt;2015&lt;/year&gt;      &lt;price&gt;30.00&lt;/price&gt;   &lt;/book&gt;   &lt;book category=&quot;DOTNET&quot;&gt;      &lt;title lang=&quot;en&quot;&gt;15天搞定.Net&lt;/title&gt;      &lt;author&gt;Susen&lt;/author&gt;      &lt;year&gt;2018&lt;/year&gt;      &lt;price&gt;40.50&lt;/price&gt;   &lt;/book&gt;   &lt;book category=&quot;XML&quot;&gt;      &lt;title lang=&quot;en&quot;&gt;3天搞定XQuery&lt;/title&gt;      &lt;author&gt;Yizhi&lt;/author&gt;      &lt;author&gt;Maxsu&lt;/author&gt;       &lt;year&gt;2016&lt;/year&gt;      &lt;price&gt;50.00&lt;/price&gt;   &lt;/book&gt;   &lt;book category=&quot;XML&quot;&gt;      &lt;title lang=&quot;en&quot;&gt;24小时搞定XPath&lt;/title&gt;      &lt;author&gt;Jazz Bee&lt;/author&gt;      &lt;year&gt;2019&lt;/year&gt;      &lt;price&gt;16.50&lt;/price&gt;   &lt;/book&gt;&lt;/books&gt;</code></pre><h4 id="XQueryTester-java"><a href="#XQueryTester-java" class="headerlink" title="XQueryTester.java"></a>XQueryTester.java</h4><h6 id="新建-XQueryTester-java并导入相应的包"><a href="#新建-XQueryTester-java并导入相应的包" class="headerlink" title="新建, XQueryTester.java并导入相应的包"></a>新建, XQueryTester.java并导入相应的包</h6><pre><code>public class XQueryTester &#123;   public static void main(String[] args)&#123;      try &#123;         execute();      &#125;      catch (FileNotFoundException e) &#123;         e.printStackTrace();      &#125;      catch (XQException e) &#123;         e.printStackTrace();      &#125;   &#125;   private static void execute() throws FileNotFoundException, XQException&#123;      InputStream inputStream = new FileInputStream(new File(&quot;books.xqy&quot;));      XQDataSource ds = new SaxonXQDataSource();      XQConnection conn = ds.getConnection();      XQPreparedExpression exp = conn.prepareExpression(inputStream);      XQResultSequence result = exp.executeQuery();      while (result.next()) &#123;         System.out.println(result.getItemAsString(null));      &#125;   &#125;    &#125;</code></pre><h6 id="点击运行即可"><a href="#点击运行即可" class="headerlink" title="点击运行即可"></a>点击运行即可</h6>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18.11.2周会</title>
    <link href="/2018/12/27/18-11-2%E5%91%A8%E4%BC%9A/"/>
    <url>/2018/12/27/18-11-2%E5%91%A8%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><h6 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;&gt;"></a>&lt;<writing science>&gt;</h6><h6 id="lt-gt-1"><a href="#lt-gt-1" class="headerlink" title="&lt;&gt;"></a>&lt;<academic writing A handbook for...>&gt;</h6><h3 id="introduction-10"><a href="#introduction-10" class="headerlink" title="introduction 10%"></a>introduction 10%</h3><h6 id="1、-定义"><a href="#1、-定义" class="headerlink" title="1、 定义"></a>1、 定义</h6><h6 id="2、-背景"><a href="#2、-背景" class="headerlink" title="2、 背景"></a>2、 背景</h6><h6 id="3、-前人工作的review"><a href="#3、-前人工作的review" class="headerlink" title="3、 前人工作的review"></a>3、 前人工作的review</h6><h6 id="4、-目的"><a href="#4、-目的" class="headerlink" title="4、 目的"></a>4、 目的</h6><h6 id="5、-简单介绍方法、结论"><a href="#5、-简单介绍方法、结论" class="headerlink" title="5、 简单介绍方法、结论"></a>5、 简单介绍方法、结论</h6><h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3><h6 id="1、-重新强调总结"><a href="#1、-重新强调总结" class="headerlink" title="1、 重新强调总结"></a>1、 重新强调总结</h6><h6 id="2、-简短的review"><a href="#2、-简短的review" class="headerlink" title="2、 简短的review"></a>2、 简短的review</h6><h6 id="3、-展望未来"><a href="#3、-展望未来" class="headerlink" title="3、 展望未来"></a>3、 展望未来</h6><h6 id="4、-辩证的看待自己的工作"><a href="#4、-辩证的看待自己的工作" class="headerlink" title="4、 辩证的看待自己的工作"></a>4、 辩证的看待自己的工作</h6><h3 id="re-writing"><a href="#re-writing" class="headerlink" title="re-writing"></a>re-writing</h3><h6 id="1、-篇幅均衡"><a href="#1、-篇幅均衡" class="headerlink" title="1、 篇幅均衡"></a>1、 篇幅均衡</h6><h6 id="2、-回答所有RQ"><a href="#2、-回答所有RQ" class="headerlink" title="2、 回答所有RQ"></a>2、 回答所有RQ</h6><h6 id="3、-思考缩短篇幅、提升"><a href="#3、-思考缩短篇幅、提升" class="headerlink" title="3、 思考缩短篇幅、提升"></a>3、 思考缩短篇幅、提升</h6><h3 id="proof-reading-校对"><a href="#proof-reading-校对" class="headerlink" title="proof-reading(校对)"></a>proof-reading(校对)</h3><h6 id="1、-句子不要太长难以理解"><a href="#1、-句子不要太长难以理解" class="headerlink" title="1、 句子不要太长难以理解"></a>1、 句子不要太长难以理解</h6><h6 id="2、-拼写错误"><a href="#2、-拼写错误" class="headerlink" title="2、 拼写错误"></a>2、 拼写错误</h6><h6 id="3、-语法错误"><a href="#3、-语法错误" class="headerlink" title="3、 语法错误"></a>3、 语法错误</h6><h3 id="问卷："><a href="#问卷：" class="headerlink" title="问卷："></a>问卷：</h3><h4 id="卷首"><a href="#卷首" class="headerlink" title="卷首"></a>卷首</h4><h6 id="1、-调查目的"><a href="#1、-调查目的" class="headerlink" title="1、 调查目的"></a>1、 调查目的</h6><h6 id="2、-保密声明"><a href="#2、-保密声明" class="headerlink" title="2、 保密声明"></a>2、 保密声明</h6><h6 id="3、-目标对象"><a href="#3、-目标对象" class="headerlink" title="3、 目标对象"></a>3、 目标对象</h6><h6 id="4、-答题耗时"><a href="#4、-答题耗时" class="headerlink" title="4、 答题耗时"></a>4、 答题耗时</h6><h6 id="5、-激励措施：-下方填写邮箱，-报告完成后将通过邮件发送给您"><a href="#5、-激励措施：-下方填写邮箱，-报告完成后将通过邮件发送给您" class="headerlink" title="5、 激励措施： 下方填写邮箱， 报告完成后将通过邮件发送给您"></a>5、 激励措施： 下方填写邮箱， 报告完成后将通过邮件发送给您</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react-router-dom使用@withRouter</title>
    <link href="/2018/12/20/react-router-dom%E4%BD%BF%E7%94%A8-withRouter/"/>
    <url>/2018/12/20/react-router-dom%E4%BD%BF%E7%94%A8-withRouter/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="在React路由中-有这样一种写法-withRouter-效果就是把路由相关的方法通过props传给它包裹的组件的props上"><a href="#在React路由中-有这样一种写法-withRouter-效果就是把路由相关的方法通过props传给它包裹的组件的props上" class="headerlink" title="在React路由中, 有这样一种写法, @withRouter, 效果就是把路由相关的方法通过props传给它包裹的组件的props上;"></a>在React路由中, 有这样一种写法, @withRouter, 效果就是把路由相关的方法通过props传给它包裹的组件的props上;</h6><h6 id="跟withRouter-component-是一个效果"><a href="#跟withRouter-component-是一个效果" class="headerlink" title="跟withRouter(component)是一个效果;"></a>跟withRouter(component)是一个效果;</h6><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h6 id="安装-babel-plugin-transform-decorators-legacy"><a href="#安装-babel-plugin-transform-decorators-legacy" class="headerlink" title="安装 babel-plugin-transform-decorators-legacy"></a>安装 babel-plugin-transform-decorators-legacy</h6><pre><code>npm install babel-plugin-transform-decorators-legacy --save-dev</code></pre><h6 id="在-node-modules-babel-preset-react-app-create-js中加入装饰器支持"><a href="#在-node-modules-babel-preset-react-app-create-js中加入装饰器支持" class="headerlink" title="在\node_modules\babel-preset-react-app\create.js中加入装饰器支持"></a>在<code>\node_modules\babel-preset-react-app\create.js</code>中加入装饰器支持</h6><pre><code>require.resolve(&#39;babel-plugin-transform-decorators-legacy&#39;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序自动登录问题</title>
    <link href="/2018/10/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/"/>
    <url>/2018/10/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h3><h6 id="小程序登录改了又改-改了又改-感觉有的对于前端人员很不友好。-比如当用户进入小程序时-想要自动获取用户信息-不点击获取用户信息的按钮"><a href="#小程序登录改了又改-改了又改-感觉有的对于前端人员很不友好。-比如当用户进入小程序时-想要自动获取用户信息-不点击获取用户信息的按钮" class="headerlink" title="小程序登录改了又改, 改了又改, 感觉有的对于前端人员很不友好。 比如当用户进入小程序时, 想要自动获取用户信息, 不点击获取用户信息的按钮"></a>小程序登录改了又改, 改了又改, 感觉有的对于前端人员很不友好。 比如当用户进入小程序时, 想要自动获取用户信息, 不点击获取用户信息的按钮</h6><h6 id="然而不能像h5一样-当页面加载采用模拟点击隐形按钮的方法-看一下文档-呵呵了"><a href="#然而不能像h5一样-当页面加载采用模拟点击隐形按钮的方法-看一下文档-呵呵了" class="headerlink" title="然而不能像h5一样, 当页面加载采用模拟点击隐形按钮的方法, 看一下文档, 呵呵了"></a>然而不能像h5一样, 当页面加载采用模拟点击隐形按钮的方法, 看一下文档, 呵呵了</h6><h3 id="折中方法"><a href="#折中方法" class="headerlink" title="折中方法"></a>折中方法</h3><h6 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h6><pre><code>&lt;button class=&quot;login&quot;  wx:if=&quot;&#123;&#123;!hasUserInfo && canIUse&#125;&#125;&quot; open-type=&quot;getUserInfo&quot;         bindgetuserinfo=&quot;getUserInfo&quot;&gt;  &lt;/button&gt; </code></pre><h6 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h6><pre><code>page&#123;  height: 100%;  position: relative;&#125;.login&#123;  display: flex;  width: 100%;  height: 100%;  position: absolute;  left: 0;  top: 0;  z-index: 100 !important;  background: blue;  opacity:0;&#125;</code></pre><h6 id="将button置于顶层透明度为0-用户点击时会跳出"><a href="#将button置于顶层透明度为0-用户点击时会跳出" class="headerlink" title="将button置于顶层透明度为0, 用户点击时会跳出"></a>将button置于顶层透明度为0, 用户点击时会跳出</h6>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018小学期--hadoop</title>
    <link href="/2018/08/13/2018%E5%B0%8F%E5%AD%A6%E6%9C%9F-hadoop/"/>
    <url>/2018/08/13/2018%E5%B0%8F%E5%AD%A6%E6%9C%9F-hadoop/</url>
    
    <content type="html"><![CDATA[<h3 id="spark-由scala完成"><a href="#spark-由scala完成" class="headerlink" title="spark 由scala完成"></a>spark 由scala完成</h3><h4 id="1、scala-三种方式编写"><a href="#1、scala-三种方式编写" class="headerlink" title="1、scala 三种方式编写"></a>1、scala 三种方式编写</h4><h6 id="1-交互式-cmd-scala-gt-paste"><a href="#1-交互式-cmd-scala-gt-paste" class="headerlink" title="(1) 交互式  cmd   scala-&gt;              :paste"></a>(1) 交互式  cmd   scala-&gt;              :paste</h6><h6 id="2-脚本式-hello-scala-scala-hello-scala"><a href="#2-脚本式-hello-scala-scala-hello-scala" class="headerlink" title="(2) 脚本式  hello.scala    scala hello.scala"></a>(2) 脚本式  hello.scala    scala hello.scala</h6><h6 id="3-ide-scalac-hello-scala-含有main函数-gt-scala-hello"><a href="#3-ide-scalac-hello-scala-含有main函数-gt-scala-hello" class="headerlink" title="(3) ide scalac hello.scala(含有main函数)-&gt; scala hello"></a>(3) ide scalac hello.scala(含有main函数)-&gt; scala hello</h6><h4 id="2、定义变量"><a href="#2、定义变量" class="headerlink" title="2、定义变量"></a>2、定义变量</h4><h6 id="val-a-Int-3-常量-变量名-数据类型-可以不加-val-a-3"><a href="#val-a-Int-3-常量-变量名-数据类型-可以不加-val-a-3" class="headerlink" title="val a:Int = 3    //常量     变量名:数据类型  可以不加   val a = 3"></a>val a:Int = 3    //常量     变量名:数据类型  可以不加   val a = 3</h6><h6 id="var-a-Int-12-变量-var-a-12"><a href="#var-a-Int-12-变量-var-a-12" class="headerlink" title="var a:Int = 12   //变量     var a = 12"></a>var a:Int = 12   //变量     var a = 12</h6><h4 id="3、其他数据类型"><a href="#3、其他数据类型" class="headerlink" title="3、其他数据类型"></a>3、其他数据类型</h4><p>######Unit、Null、AnyRef、Any</p><pre><code>def hello():Unit = &#123; //无返回值    &#125;</code></pre><h3 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h3><h6 id="1、创建RDD-内存中分布式数据集"><a href="#1、创建RDD-内存中分布式数据集" class="headerlink" title="1、创建RDD  内存中分布式数据集"></a>1、创建RDD  内存中分布式数据集</h6><h6 id="2、集群模式启动-spark-shell-–master-spark-192-168-1990-137-7077"><a href="#2、集群模式启动-spark-shell-–master-spark-192-168-1990-137-7077" class="headerlink" title="2、集群模式启动     spark-shell –master spark://192.168.1990.137:7077"></a>2、集群模式启动     spark-shell –master spark://192.168.1990.137:7077</h6><pre><code>var rdd = sc.textFile(&quot;路径&quot;)rdd.collecct.foreach(println)rdd.map(line =&gt; line.split(&quot; &quot;))  //转换</code></pre><h6 id="3、从内存中构造集合"><a href="#3、从内存中构造集合" class="headerlink" title="3、从内存中构造集合"></a>3、从内存中构造集合</h6><pre><code>var rdd = sc.parallelize(List(1,2,3,4,5,6,7,8,9,10))</code></pre><h6 id="4、判断是否含有某单词的行数"><a href="#4、判断是否含有某单词的行数" class="headerlink" title="4、判断是否含有某单词的行数"></a>4、判断是否含有某单词的行数</h6><pre><code>rdd2 = rdd.fliter(line =&gt; line.contains(&quot;hello&quot;))rdd2.count    //遇到count才真正计算</code></pre><h6 id="5、val-conf-new-SparkConf-setAppName-“Word-Count”"><a href="#5、val-conf-new-SparkConf-setAppName-“Word-Count”" class="headerlink" title="5、val conf = new SparkConf().setAppName(“Word Count”)"></a>5、val conf = new SparkConf().setAppName(“Word Count”)</h6>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker push</title>
    <link href="/2018/07/18/docker-push/"/>
    <url>/2018/07/18/docker-push/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h6 id="本次主要介绍如何推送本地image到dockerhub"><a href="#本次主要介绍如何推送本地image到dockerhub" class="headerlink" title="本次主要介绍如何推送本地image到dockerhub"></a>本次主要介绍如何推送本地image到dockerhub</h6><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h6 id="首先从公共仓库中pull一个镜像"><a href="#首先从公共仓库中pull一个镜像" class="headerlink" title="首先从公共仓库中pull一个镜像"></a>首先从公共仓库中pull一个镜像</h6><pre><code>docker pull centos</code></pre><h6 id="进入镜像进行修改"><a href="#进入镜像进行修改" class="headerlink" title="进入镜像进行修改"></a>进入镜像进行修改</h6><pre><code>docker run -itd centos /bin/bashdocerk attach containerID修改ctrl+P+Q 退出</code></pre><h6 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h6><pre><code>docker commit containerID testdocerk tag test zhangfuli/test:latest   //修改名称, 上一步可以直接命为这个  </code></pre><h6 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h6><pre><code>docker push zhangfuli/test:latest //一定为docker name/仓库 name</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营总结</title>
    <link href="/2018/07/16/%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2018/07/16/%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="这次夏令营陆陆续续从今年3月份开始到今天正式参加完毕。3月底，那段时间确实心里由于某件事情心情很糟糕，有些人走着走着就散了，那段时间生活失去了目标，想想生活还要继续，而且很重要的保研的工作也要来了。保研复习这段时间，无欲无求了吧"><a href="#这次夏令营陆陆续续从今年3月份开始到今天正式参加完毕。3月底，那段时间确实心里由于某件事情心情很糟糕，有些人走着走着就散了，那段时间生活失去了目标，想想生活还要继续，而且很重要的保研的工作也要来了。保研复习这段时间，无欲无求了吧" class="headerlink" title="这次夏令营陆陆续续从今年3月份开始到今天正式参加完毕。3月底，那段时间确实心里由于某件事情心情很糟糕，有些人走着走着就散了，那段时间生活失去了目标，想想生活还要继续，而且很重要的保研的工作也要来了。保研复习这段时间，无欲无求了吧"></a>这次夏令营陆陆续续从今年3月份开始到今天正式参加完毕。3月底，那段时间确实心里由于某件事情心情很糟糕，有些人走着走着就散了，那段时间生活失去了目标，想想生活还要继续，而且很重要的保研的工作也要来了。保研复习这段时间，无欲无求了吧</h6><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><h6 id="在一开始给自己准备的目标是C9-清北浙南复交哈西中-中游保底的院校选择了一些。今年人工智能炒的火热，计算机专业特别爆炸，这往往就造成了28的局面，20-的人拿到了80-的入营-由于自己本科实力不是很强-而且选择软件报计算机所以-所以很多时候入营都成了困难。"><a href="#在一开始给自己准备的目标是C9-清北浙南复交哈西中-中游保底的院校选择了一些。今年人工智能炒的火热，计算机专业特别爆炸，这往往就造成了28的局面，20-的人拿到了80-的入营-由于自己本科实力不是很强-而且选择软件报计算机所以-所以很多时候入营都成了困难。" class="headerlink" title="在一开始给自己准备的目标是C9(清北浙南复交哈西中), 中游保底的院校选择了一些。今年人工智能炒的火热，计算机专业特别爆炸，这往往就造成了28的局面，20%的人拿到了80%的入营. 由于自己本科实力不是很强, 而且选择软件报计算机所以, 所以很多时候入营都成了困难。"></a>在一开始给自己准备的目标是C9(清北浙南复交哈西中), 中游保底的院校选择了一些。今年人工智能炒的火热，计算机专业特别爆炸，这往往就造成了28的局面，20%的人拿到了80%的入营. 由于自己本科实力不是很强, 而且选择软件报计算机所以, 所以很多时候入营都成了困难。</h6><h3 id="入营情况"><a href="#入营情况" class="headerlink" title="入营情况"></a>入营情况</h3><h6 id="南大、南开、天大-冲突-、北理-冲突-、北交"><a href="#南大、南开、天大-冲突-、北理-冲突-、北交" class="headerlink" title="南大、南开、天大(冲突)、北理(冲突)、北交"></a>南大、南开、天大(冲突)、北理(冲突)、北交</h6><h3 id="真诚相待"><a href="#真诚相待" class="headerlink" title="真诚相待"></a>真诚相待</h3><h6 id="很多同学为了拿更多的offer-在回答“我要是给你offer-你回来嘛”之类的问题的时候-会表示我一定会去-就我本人而言-我做不到这样-老师手里的offer是有限的他给了你-而你答应了缺放老师的鸽子-这不是一个学生应该有的态度-我往往会直接回答我现在的夏令营规划是什么-现在联系了几个老师有几个offer-我真诚的跟老师讲这件事情-老师也会理解学生的苦衷-如果对方老师还是执意要问我-那我会直接拒绝掉这个老师-首先老师抛出这个问题说明老师有想录的你想法-这证明了你很优秀-那你就自不用担心最终拿不到offer-通俗的讲我优秀-我对老师谦逊-老师这样会显得没有经验-跟我脾气不符合-那在他手底下念研究生也不会感到开心-这次我也被问到了这样的问题-而且对方还是我目标高校的一位老师-但是我还是给拒掉了-营都没入。"><a href="#很多同学为了拿更多的offer-在回答“我要是给你offer-你回来嘛”之类的问题的时候-会表示我一定会去-就我本人而言-我做不到这样-老师手里的offer是有限的他给了你-而你答应了缺放老师的鸽子-这不是一个学生应该有的态度-我往往会直接回答我现在的夏令营规划是什么-现在联系了几个老师有几个offer-我真诚的跟老师讲这件事情-老师也会理解学生的苦衷-如果对方老师还是执意要问我-那我会直接拒绝掉这个老师-首先老师抛出这个问题说明老师有想录的你想法-这证明了你很优秀-那你就自不用担心最终拿不到offer-通俗的讲我优秀-我对老师谦逊-老师这样会显得没有经验-跟我脾气不符合-那在他手底下念研究生也不会感到开心-这次我也被问到了这样的问题-而且对方还是我目标高校的一位老师-但是我还是给拒掉了-营都没入。" class="headerlink" title="很多同学为了拿更多的offer, 在回答“我要是给你offer, 你回来嘛”之类的问题的时候, 会表示我一定会去. 就我本人而言, 我做不到这样, 老师手里的offer是有限的他给了你, 而你答应了缺放老师的鸽子, 这不是一个学生应该有的态度. 我往往会直接回答我现在的夏令营规划是什么, 现在联系了几个老师有几个offer, 我真诚的跟老师讲这件事情, 老师也会理解学生的苦衷, 如果对方老师还是执意要问我, 那我会直接拒绝掉这个老师, 首先老师抛出这个问题说明老师有想录的你想法, 这证明了你很优秀, 那你就自不用担心最终拿不到offer, 通俗的讲我优秀, 我对老师谦逊, 老师这样会显得没有经验, 跟我脾气不符合, 那在他手底下念研究生也不会感到开心.这次我也被问到了这样的问题, 而且对方还是我目标高校的一位老师, 但是我还是给拒掉了, 营都没入。"></a>很多同学为了拿更多的offer, 在回答“我要是给你offer, 你回来嘛”之类的问题的时候, 会表示我一定会去. 就我本人而言, 我做不到这样, 老师手里的offer是有限的他给了你, 而你答应了缺放老师的鸽子, 这不是一个学生应该有的态度. 我往往会直接回答我现在的夏令营规划是什么, 现在联系了几个老师有几个offer, 我真诚的跟老师讲这件事情, 老师也会理解学生的苦衷, 如果对方老师还是执意要问我, 那我会直接拒绝掉这个老师, 首先老师抛出这个问题说明老师有想录的你想法, 这证明了你很优秀, 那你就自不用担心最终拿不到offer, 通俗的讲我优秀, 我对老师谦逊, 老师这样会显得没有经验, 跟我脾气不符合, 那在他手底下念研究生也不会感到开心.这次我也被问到了这样的问题, 而且对方还是我目标高校的一位老师, 但是我还是给拒掉了, 营都没入。</h6><h6 id="跟老师真诚相待很重要-我这次特别特别感谢南开的王老师-北交的张老师-南大的张老师-缘分…我们都姓张-。-这些老师们我都给他们讲我实际的情况-老师们也理解-有些老师也愿意给我留offer到一定的时间-等全部夏令营结果出来然我自己选择。"><a href="#跟老师真诚相待很重要-我这次特别特别感谢南开的王老师-北交的张老师-南大的张老师-缘分…我们都姓张-。-这些老师们我都给他们讲我实际的情况-老师们也理解-有些老师也愿意给我留offer到一定的时间-等全部夏令营结果出来然我自己选择。" class="headerlink" title="跟老师真诚相待很重要, 我这次特别特别感谢南开的王老师, 北交的张老师, 南大的张老师(缘分…我们都姓张)。 这些老师们我都给他们讲我实际的情况, 老师们也理解, 有些老师也愿意给我留offer到一定的时间, 等全部夏令营结果出来然我自己选择。"></a>跟老师真诚相待很重要, 我这次特别特别感谢南开的王老师, 北交的张老师, 南大的张老师(缘分…我们都姓张)。 这些老师们我都给他们讲我实际的情况, 老师们也理解, 有些老师也愿意给我留offer到一定的时间, 等全部夏令营结果出来然我自己选择。</h6><h3 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h3><h6 id="南开-我报名的是南开大学青岛站的面试-这一周的时间内有4场考试1场见面会1场面试-有些入营但是6级没过的会让你做一套英语题…当然我并不需要-进去面试的有计算机学院的5位老师-面试的内容包括自我介绍-问项目，随机一套英文题-这里要特别感谢一下我的舍友-我被问到的题是你最最喜欢的课程-我本来准备的是math…我舍友说还不如准备software-architecture-正好第二天有软件体系结构的考试还能复习一下-这瞬间让这个问题的回答高大上了呀-第二天就被问到了-回去之后第二天参加了体系结构考试再过了一天去到南京大学跟张老师面谈了一下我的情况"><a href="#南开-我报名的是南开大学青岛站的面试-这一周的时间内有4场考试1场见面会1场面试-有些入营但是6级没过的会让你做一套英语题…当然我并不需要-进去面试的有计算机学院的5位老师-面试的内容包括自我介绍-问项目，随机一套英文题-这里要特别感谢一下我的舍友-我被问到的题是你最最喜欢的课程-我本来准备的是math…我舍友说还不如准备software-architecture-正好第二天有软件体系结构的考试还能复习一下-这瞬间让这个问题的回答高大上了呀-第二天就被问到了-回去之后第二天参加了体系结构考试再过了一天去到南京大学跟张老师面谈了一下我的情况" class="headerlink" title="南开:我报名的是南开大学青岛站的面试, 这一周的时间内有4场考试1场见面会1场面试.有些入营但是6级没过的会让你做一套英语题…当然我并不需要.进去面试的有计算机学院的5位老师,面试的内容包括自我介绍,问项目，随机一套英文题, 这里要特别感谢一下我的舍友, 我被问到的题是你最最喜欢的课程, 我本来准备的是math…我舍友说还不如准备software architecture, 正好第二天有软件体系结构的考试还能复习一下.这瞬间让这个问题的回答高大上了呀..第二天就被问到了. 回去之后第二天参加了体系结构考试再过了一天去到南京大学跟张老师面谈了一下我的情况"></a>南开:我报名的是南开大学青岛站的面试, 这一周的时间内有4场考试1场见面会1场面试.有些入营但是6级没过的会让你做一套英语题…当然我并不需要.进去面试的有计算机学院的5位老师,面试的内容包括自我介绍,问项目，随机一套英文题, 这里要特别感谢一下我的舍友, 我被问到的题是你最最喜欢的课程, 我本来准备的是math…我舍友说还不如准备software architecture, 正好第二天有软件体系结构的考试还能复习一下.这瞬间让这个问题的回答高大上了呀..第二天就被问到了. 回去之后第二天参加了体系结构考试再过了一天去到南京大学跟张老师面谈了一下我的情况</h6><h6 id="南开初试过了之后会给你一张初试通过表-你只有联系那边老师-那边来老师愿意要你在表上签字你才算能去南开读研-有些导师让读论文出报告之类的-由于我跟我联系的老师讲好了-他会给我留offer到7月底-所以我的初试通过表现在还没发"><a href="#南开初试过了之后会给你一张初试通过表-你只有联系那边老师-那边来老师愿意要你在表上签字你才算能去南开读研-有些导师让读论文出报告之类的-由于我跟我联系的老师讲好了-他会给我留offer到7月底-所以我的初试通过表现在还没发" class="headerlink" title="南开初试过了之后会给你一张初试通过表, 你只有联系那边老师, 那边来老师愿意要你在表上签字你才算能去南开读研.有些导师让读论文出报告之类的.由于我跟我联系的老师讲好了, 他会给我留offer到7月底, 所以我的初试通过表现在还没发"></a>南开初试过了之后会给你一张初试通过表, 你只有联系那边老师, 那边来老师愿意要你在表上签字你才算能去南开读研.有些导师让读论文出报告之类的.由于我跟我联系的老师讲好了, 他会给我留offer到7月底, 所以我的初试通过表现在还没发</h6><h6 id="北交-北交是在从南大张老师那边回来之后一个星期后的事情-这一个星期又考了3门试-还好成绩都不错除了编译原理都95-嘿嘿嘿-北交我认为相对而言就比较简单了-我去北交的唯一一个目的就是去跟那边的张老师讲清楚我夏令营的所有情况-张老师是我编译原理老师的一位师弟-之前表示把offer留给我-所以我这次去的目的是跟老师当面讲清楚我具体的情况-我不想让老师的名额浪费掉-期间还跟张老师吃了个饭-帮我分析研究生的规划-很客观的分析一些老师等等-面试一共问了3个问题：一段特别特别特别简单的英文一句话翻译；夏令营还报了哪；项目问题-北交的老师都对同学们非常热情-都特别喜欢招推免的学生"><a href="#北交-北交是在从南大张老师那边回来之后一个星期后的事情-这一个星期又考了3门试-还好成绩都不错除了编译原理都95-嘿嘿嘿-北交我认为相对而言就比较简单了-我去北交的唯一一个目的就是去跟那边的张老师讲清楚我夏令营的所有情况-张老师是我编译原理老师的一位师弟-之前表示把offer留给我-所以我这次去的目的是跟老师当面讲清楚我具体的情况-我不想让老师的名额浪费掉-期间还跟张老师吃了个饭-帮我分析研究生的规划-很客观的分析一些老师等等-面试一共问了3个问题：一段特别特别特别简单的英文一句话翻译；夏令营还报了哪；项目问题-北交的老师都对同学们非常热情-都特别喜欢招推免的学生" class="headerlink" title="北交:北交是在从南大张老师那边回来之后一个星期后的事情, 这一个星期又考了3门试.还好成绩都不错除了编译原理都95+,嘿嘿嘿.北交我认为相对而言就比较简单了.我去北交的唯一一个目的就是去跟那边的张老师讲清楚我夏令营的所有情况.张老师是我编译原理老师的一位师弟, 之前表示把offer留给我, 所以我这次去的目的是跟老师当面讲清楚我具体的情况, 我不想让老师的名额浪费掉.期间还跟张老师吃了个饭,帮我分析研究生的规划, 很客观的分析一些老师等等.面试一共问了3个问题：一段特别特别特别简单的英文一句话翻译；夏令营还报了哪；项目问题.北交的老师都对同学们非常热情,都特别喜欢招推免的学生"></a>北交:北交是在从南大张老师那边回来之后一个星期后的事情, 这一个星期又考了3门试.还好成绩都不错除了编译原理都95+,嘿嘿嘿.北交我认为相对而言就比较简单了.我去北交的唯一一个目的就是去跟那边的张老师讲清楚我夏令营的所有情况.张老师是我编译原理老师的一位师弟, 之前表示把offer留给我, 所以我这次去的目的是跟老师当面讲清楚我具体的情况, 我不想让老师的名额浪费掉.期间还跟张老师吃了个饭,帮我分析研究生的规划, 很客观的分析一些老师等等.面试一共问了3个问题：一段特别特别特别简单的英文一句话翻译；夏令营还报了哪；项目问题.北交的老师都对同学们非常热情,都特别喜欢招推免的学生</h6><h6 id="南大软-不得不说南大软院是真的有钱-去了住5星级酒店-而且负责招生的老师也是特别负责-从入营到参加夏令营一些事项来往了不下十几封邮件-去面试之前又跟张老师简单的聊了一下-感觉我认识联系的老师都特别不错-真心真诚对待老师是没有错的。"><a href="#南大软-不得不说南大软院是真的有钱-去了住5星级酒店-而且负责招生的老师也是特别负责-从入营到参加夏令营一些事项来往了不下十几封邮件-去面试之前又跟张老师简单的聊了一下-感觉我认识联系的老师都特别不错-真心真诚对待老师是没有错的。" class="headerlink" title="南大软:不得不说南大软院是真的有钱, 去了住5星级酒店.而且负责招生的老师也是特别负责,从入营到参加夏令营一些事项来往了不下十几封邮件.去面试之前又跟张老师简单的聊了一下.感觉我认识联系的老师都特别不错, 真心真诚对待老师是没有错的。"></a>南大软:不得不说南大软院是真的有钱, 去了住5星级酒店.而且负责招生的老师也是特别负责,从入营到参加夏令营一些事项来往了不下十几封邮件.去面试之前又跟张老师简单的聊了一下.感觉我认识联系的老师都特别不错, 真心真诚对待老师是没有错的。</h6><p>面试我认为很简单软院注重项目经历一分钟英文自己我介绍, 然后老师问项目,我项目比较多还可以应付自如. 最最坑的是机试,一开始让选择C++ or java, 然后分别给了不同的例题, 说机试题不会超过给的例题的数据机构和算法(例题是:背包、线段树、贪心), 然后就使劲看ACM, 看这种类型的题. 结果C++ 第一题来个了OO…,第二题不需要什么思想, 开数组就行…然而我C++做OO都忘了呀, 那还是大一下的事情, 一直都用Java做….还是反映出能力欠佳呀</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><h6 id="3周内，3次大面试-1次机试-1次宣讲-6门考试-1次专业课课程大项目结题-然后得了病毒性角膜炎…结果还没出来-静待结果选择去什么地方吧"><a href="#3周内，3次大面试-1次机试-1次宣讲-6门考试-1次专业课课程大项目结题-然后得了病毒性角膜炎…结果还没出来-静待结果选择去什么地方吧" class="headerlink" title="3周内，3次大面试+1次机试+1次宣讲+6门考试+1次专业课课程大项目结题, 然后得了病毒性角膜炎…结果还没出来,静待结果选择去什么地方吧"></a>3周内，3次大面试+1次机试+1次宣讲+6门考试+1次专业课课程大项目结题, 然后得了病毒性角膜炎…结果还没出来,静待结果选择去什么地方吧</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客版权声明</title>
    <link href="/2018/06/04/%E5%8D%9A%E5%AE%A2%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E/"/>
    <url>/2018/06/04/%E5%8D%9A%E5%AE%A2%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><h6 id="当你复制粘贴别人写的博文的时候你会发现有版权声明的信息-效果如下"><a href="#当你复制粘贴别人写的博文的时候你会发现有版权声明的信息-效果如下" class="headerlink" title="当你复制粘贴别人写的博文的时候你会发现有版权声明的信息, 效果如下"></a>当你复制粘贴别人写的博文的时候你会发现有版权声明的信息, 效果如下</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E.png"><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h6 id="找到next主题下的next-layout-layout-swig-在-lt-body-gt-后添加如下代码"><a href="#找到next主题下的next-layout-layout-swig-在-lt-body-gt-后添加如下代码" class="headerlink" title="找到next主题下的next\layout\_layout.swig, 在&lt;body/&gt;后添加如下代码"></a>找到next主题下的next\layout\_layout.swig, 在&lt;body/&gt;后添加如下代码</h6><pre><code>&lt;script type=&#39;text/javascript&#39;&gt;function addLink() &#123;    var body_element = document.getElementsByTagName(&#39;body&#39;)[0];    var selection;    if(window.getSelection)&#123;//DOM,FF,Webkit,Chrome,IE10      selection = window.getSelection();    &#125;else if(document.getSelection)&#123;//IE10      selection= document.getSelection();    &#125;else if(document.selection)&#123;//IE6+10-      selection= document.selection.createRange().text;    &#125;else&#123;      selection= &quot;&quot;;    &#125;    var pagelink = &quot;&lt;br /&gt;&lt;br/ &gt;&lt;br /&gt;&quot; +      &quot;著作权归作者所有&lt;br /&gt;&quot; +      &quot;商业转载请联系作者获得授权,非商业转载请注明出处 &lt;br /&gt;&quot; +      &quot;作者:zfl &lt;br /&gt;&quot; +      &quot;链接:https://zhangfuli.github.io/&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&quot;;     var copy_text = selection + pagelink;    var new_div = document.createElement(&#39;div&#39;);    new_div.style.left=&#39;-99999px&#39;;    new_div.style.position=&#39;absolute&#39;;    body_element.appendChild(new_div);    new_div.innerHTML = copy_text ;    selection.selectAllChildren(new_div);    window.setTimeout(function() &#123;        body_element.removeChild(new_div);    &#125;,0);&#125;document.body.oncopy = addLink;&lt;/script&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPS数据格式转化</title>
    <link href="/2018/06/04/GPS%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E5%8C%96/"/>
    <url>/2018/06/04/GPS%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><h6 id="最近在做一个博创杯跟赛佰特的一个硬件的项目-准备采用节点采集温度湿度气体信息并通过ZigBee传送给协调器-然后协调器通过串口将信息传送到PC端"><a href="#最近在做一个博创杯跟赛佰特的一个硬件的项目-准备采用节点采集温度湿度气体信息并通过ZigBee传送给协调器-然后协调器通过串口将信息传送到PC端" class="headerlink" title="最近在做一个博创杯跟赛佰特的一个硬件的项目, 准备采用节点采集温度湿度气体信息并通过ZigBee传送给协调器, 然后协调器通过串口将信息传送到PC端"></a>最近在做一个博创杯跟赛佰特的一个硬件的项目, 准备采用节点采集温度湿度气体信息并通过ZigBee传送给协调器, 然后协调器通过串口将信息传送到PC端</h6><h6 id="同时协调器端采集GPS信号并利用RFID进行读卡"><a href="#同时协调器端采集GPS信号并利用RFID进行读卡" class="headerlink" title="同时协调器端采集GPS信号并利用RFID进行读卡"></a>同时协调器端采集GPS信号并利用RFID进行读卡</h6><h3 id="GPS数据格式转化"><a href="#GPS数据格式转化" class="headerlink" title="GPS数据格式转化"></a>GPS数据格式转化</h3><h6 id="GPS采用的是北斗双定位模块S1216-店家给的资料是STM32单片机-但是我们用的安联德的CC2530只能自己整合数据-其实说起来原理还是蛮简单的-就是通过第二个串口接收该模块发送过来的数据-再用串口一发送给PC"><a href="#GPS采用的是北斗双定位模块S1216-店家给的资料是STM32单片机-但是我们用的安联德的CC2530只能自己整合数据-其实说起来原理还是蛮简单的-就是通过第二个串口接收该模块发送过来的数据-再用串口一发送给PC" class="headerlink" title="GPS采用的是北斗双定位模块S1216, 店家给的资料是STM32单片机, 但是我们用的安联德的CC2530只能自己整合数据, 其实说起来原理还是蛮简单的, 就是通过第二个串口接收该模块发送过来的数据, 再用串口一发送给PC"></a>GPS采用的是北斗双定位模块S1216, 店家给的资料是STM32单片机, 但是我们用的安联德的CC2530只能自己整合数据, 其实说起来原理还是蛮简单的, 就是通过第二个串口接收该模块发送过来的数据, 再用串口一发送给PC</h6><h6 id="采集的数据格式如下"><a href="#采集的数据格式如下" class="headerlink" title="采集的数据格式如下"></a>采集的数据格式如下</h6><pre><code>$GNRMC,113415.000,A,3556.6506,N,12010.1705,E,000.0,177.6,270518,,,A*7C</code></pre><h6 id="它的格式是ddmm-mmmm需要转化为dd-dddd度才能在常用的地图上进行定位显示-转化过程如下"><a href="#它的格式是ddmm-mmmm需要转化为dd-dddd度才能在常用的地图上进行定位显示-转化过程如下" class="headerlink" title="它的格式是ddmm.mmmm需要转化为dd.dddd度才能在常用的地图上进行定位显示, 转化过程如下"></a>它的格式是ddmm.mmmm需要转化为dd.dddd度才能在常用的地图上进行定位显示, 转化过程如下</h6><pre><code>3556.650656.6506/60 = 0.944176666735 + 0.9441766667 = 35.0.9441766667度</code></pre><h6 id="转化就是这样-项目还未完成暂时记个笔记"><a href="#转化就是这样-项目还未完成暂时记个笔记" class="headerlink" title="转化就是这样, 项目还未完成暂时记个笔记"></a>转化就是这样, 项目还未完成暂时记个笔记</h6>]]></content>
    
    
    <categories>
      
      <category>硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker从入门到实战</title>
    <link href="/2018/05/12/docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/"/>
    <url>/2018/05/12/docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h6 id="这次博文主要记录《Docker从入门到实战》这本书的笔记"><a href="#这次博文主要记录《Docker从入门到实战》这本书的笔记" class="headerlink" title="这次博文主要记录《Docker从入门到实战》这本书的笔记"></a>这次博文主要记录《Docker从入门到实战》这本书的笔记</h6><h4 id="Docker基本命令"><a href="#Docker基本命令" class="headerlink" title="Docker基本命令"></a>Docker基本命令</h4><h6 id="所有命令都可以用–help来查看详情"><a href="#所有命令都可以用–help来查看详情" class="headerlink" title="所有命令都可以用–help来查看详情"></a>所有命令都可以用–help来查看详情</h6><h6 id="进入某个镜像"><a href="#进入某个镜像" class="headerlink" title="进入某个镜像"></a>进入某个镜像</h6><pre><code>docker attach | docker exec docker exec -it ubuntu /bin/bash</code></pre><h6 id="列出所有在运行的镜像"><a href="#列出所有在运行的镜像" class="headerlink" title="列出所有在运行的镜像"></a>列出所有在运行的镜像</h6><pre><code>docker ps docker ps -a</code></pre><h6 id="提交容器"><a href="#提交容器" class="headerlink" title="提交容器"></a>提交容器</h6><pre><code>docker commit</code></pre><h6 id="从容器复制文件到宿主机"><a href="#从容器复制文件到宿主机" class="headerlink" title="从容器复制文件到宿主机"></a>从容器复制文件到宿主机</h6><pre><code>docker cp </code></pre><h6 id="创建容器-通过docker-start-containerID-docker-stop-containerID来停止"><a href="#创建容器-通过docker-start-containerID-docker-stop-containerID来停止" class="headerlink" title="创建容器, 通过docker start containerID, docker     stop containerID来停止"></a>创建容器, 通过docker start containerID, docker     stop containerID来停止</h6><pre><code>docker create</code></pre><h6 id="查看容器内部的变化"><a href="#查看容器内部的变化" class="headerlink" title="查看容器内部的变化"></a>查看容器内部的变化</h6><pre><code>docker diff</code></pre><h6 id="杀死某容器"><a href="#杀死某容器" class="headerlink" title="杀死某容器"></a>杀死某容器</h6><pre><code>docker kill</code></pre><h6 id="退出某容器"><a href="#退出某容器" class="headerlink" title="退出某容器"></a>退出某容器</h6><pre><code>ctrl + P + Q</code></pre><h6 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h6><pre><code>docker build</code></pre><h6 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h6><pre><code>docker images</code></pre><h6 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h6><pre><code>docker rmi</code></pre><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h6 id="1-Docker-for-Windows-error-pulling-image-configuration-i-o-timeout"><a href="#1-Docker-for-Windows-error-pulling-image-configuration-i-o-timeout" class="headerlink" title="1.Docker for Windows: error pulling image configuration: i/o timeout"></a>1.Docker for Windows: error pulling image configuration: i/o timeout</h6><h6 id="解决方案-首先查看docker用的是哪个网络-我的用的是VirtualBox-Host-only-3"><a href="#解决方案-首先查看docker用的是哪个网络-我的用的是VirtualBox-Host-only-3" class="headerlink" title="解决方案: 首先查看docker用的是哪个网络, 我的用的是VirtualBox Host-only #3"></a>解决方案: 首先查看docker用的是哪个网络, 我的用的是VirtualBox Host-only #3</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%981.png"><h6 id="然后找到这个网络并将其DNS的地址改为8-8-8-8"><a href="#然后找到这个网络并将其DNS的地址改为8-8-8-8" class="headerlink" title="然后找到这个网络并将其DNS的地址改为8.8.8.8"></a>然后找到这个网络并将其DNS的地址改为8.8.8.8</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%982.png">]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows子系统ubuntu</title>
    <link href="/2018/05/01/windows%E5%AD%90%E7%B3%BB%E7%BB%9Fubuntu/"/>
    <url>/2018/05/01/windows%E5%AD%90%E7%B3%BB%E7%BB%9Fubuntu/</url>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><h6 id="用了很长时间linux都是在VM里面跑的-有时候用起来不是特别顺手-经linux大佬推荐-我决定先弄个先试一下"><a href="#用了很长时间linux都是在VM里面跑的-有时候用起来不是特别顺手-经linux大佬推荐-我决定先弄个先试一下" class="headerlink" title="用了很长时间linux都是在VM里面跑的, 有时候用起来不是特别顺手, 经linux大佬推荐, 我决定先弄个先试一下"></a>用了很长时间linux都是在VM里面跑的, 有时候用起来不是特别顺手, 经linux大佬推荐, 我决定先弄个先试一下</h6><h4 id="操办起来"><a href="#操办起来" class="headerlink" title="操办起来"></a>操办起来</h4><h6 id="1-windows下开发人员模式"><a href="#1-windows下开发人员模式" class="headerlink" title="1.windows下开发人员模式"></a>1.windows下开发人员模式</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/win-ubuntu.png"><h6 id="2-开启linux子系统功能"><a href="#2-开启linux子系统功能" class="headerlink" title="2.开启linux子系统功能"></a>2.开启linux子系统功能</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/win-ubuntu2.png"><h6 id="3-在windows商店下载ubuntu"><a href="#3-在windows商店下载ubuntu" class="headerlink" title="3.在windows商店下载ubuntu"></a>3.在windows商店下载ubuntu</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/win-ubuntu3.png"><h6 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/win-ubuntu4.png"><h6 id="5-windows下找到ubuntu系统的文件"><a href="#5-windows下找到ubuntu系统的文件" class="headerlink" title="5.windows下找到ubuntu系统的文件"></a>5.windows下找到ubuntu系统的文件</h6><h6 id="路径-C-Users-AppData-Local-Packages-CanonicalGroupLimited-UbuntuonWindows-79rhkp1fndgsc-LocalState"><a href="#路径-C-Users-AppData-Local-Packages-CanonicalGroupLimited-UbuntuonWindows-79rhkp1fndgsc-LocalState" class="headerlink" title="路径:C:\Users\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState"></a>路径:C:\Users\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState</h6><h6 id="是相同的路径-意味着你在这个路径下加文件-ubuntu下也会有"><a href="#是相同的路径-意味着你在这个路径下加文件-ubuntu下也会有" class="headerlink" title="是相同的路径, 意味着你在这个路径下加文件, ubuntu下也会有"></a>是相同的路径, 意味着你在这个路径下加文件, ubuntu下也会有</h6><h4 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h4><h6 id="不说了-先搞一会docker"><a href="#不说了-先搞一会docker" class="headerlink" title="不说了, 先搞一会docker"></a>不说了, 先搞一会docker</h6>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>letax中文问题</title>
    <link href="/2018/04/20/letax%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/"/>
    <url>/2018/04/20/letax%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><h6 id="最近一直在忙着申请实习生、申请夏令营，简历肯定是必不可少的，latex做pdf简历还是很不错的，"><a href="#最近一直在忙着申请实习生、申请夏令营，简历肯定是必不可少的，latex做pdf简历还是很不错的，" class="headerlink" title="最近一直在忙着申请实习生、申请夏令营，简历肯定是必不可少的，latex做pdf简历还是很不错的，"></a>最近一直在忙着申请实习生、申请夏令营，简历肯定是必不可少的，latex做pdf简历还是很不错的，</h6><p><a href="https://www.sharelatex.com/project">sharelatex</a></p><h6 id="反正是觉得比在word里写好然后生成pdf高大上一点，毕竟还是喜欢敲代码…"><a href="#反正是觉得比在word里写好然后生成pdf高大上一点，毕竟还是喜欢敲代码…" class="headerlink" title="反正是觉得比在word里写好然后生成pdf高大上一点，毕竟还是喜欢敲代码…"></a>反正是觉得比在word里写好然后生成pdf高大上一点，毕竟还是喜欢敲代码…</h6><h6 id="但是存在着输入中文无法识别的问题，英文大佬走开…下面是解决方案"><a href="#但是存在着输入中文无法识别的问题，英文大佬走开…下面是解决方案" class="headerlink" title="但是存在着输入中文无法识别的问题，英文大佬走开…下面是解决方案"></a>但是存在着输入中文无法识别的问题，英文大佬走开…下面是解决方案</h6><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><pre><code>\usepackage&#123;CJKutf8&#125;\begin&#123;document&#125;\begin&#123;CJK*&#125;&#123;UTF8&#125;&#123;gbsn&#125;............\end&#123;CJK*&#125;\end&#123;document&#125;</code></pre><h6 id="这不就是导入个包嘛？对这就是导入个包完美解决"><a href="#这不就是导入个包嘛？对这就是导入个包完美解决" class="headerlink" title="这不就是导入个包嘛？对这就是导入个包完美解决"></a>这不就是导入个包嘛？对这就是导入个包完美解决</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置https证书</title>
    <link href="/2018/03/21/%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/"/>
    <url>/2018/03/21/%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h6 id="买了个域名，这两天在备案解析域名，有服务器已经有两三年了，但是这个域名我是第一次配置"><a href="#买了个域名，这两天在备案解析域名，有服务器已经有两三年了，但是这个域名我是第一次配置" class="headerlink" title="买了个域名，这两天在备案解析域名，有服务器已经有两三年了，但是这个域名我是第一次配置"></a>买了个域名，这两天在备案解析域名，有服务器已经有两三年了，但是这个域名我是第一次配置</h6><h6 id="不过也挺简单的"><a href="#不过也挺简单的" class="headerlink" title="不过也挺简单的"></a>不过也挺简单的</h6><h4 id="开撸"><a href="#开撸" class="headerlink" title="开撸"></a>开撸</h4><h6 id="下载腾讯云证书"><a href="#下载腾讯云证书" class="headerlink" title="下载腾讯云证书"></a>下载腾讯云证书</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/https-1.png"><h6 id="我的是lnmp搭建的nginx服务器，将nginx文件夹里面的两个文件全部存入服务器-usr-local-nginx-下"><a href="#我的是lnmp搭建的nginx服务器，将nginx文件夹里面的两个文件全部存入服务器-usr-local-nginx-下" class="headerlink" title="我的是lnmp搭建的nginx服务器，将nginx文件夹里面的两个文件全部存入服务器/usr/local/nginx/下"></a>我的是lnmp搭建的nginx服务器，将nginx文件夹里面的两个文件全部存入服务器/usr/local/nginx/下</h6><h6 id="修改-usr-local-nginx-nginx-conf"><a href="#修改-usr-local-nginx-nginx-conf" class="headerlink" title="修改/usr/local/nginx/nginx.conf"></a>修改/usr/local/nginx/nginx.conf</h6><h6 id="还好实习的时候一个实习前辈让我修改文档前先把原文档的内容复制出来，要不就gg了"><a href="#还好实习的时候一个实习前辈让我修改文档前先把原文档的内容复制出来，要不就gg了" class="headerlink" title="还好实习的时候一个实习前辈让我修改文档前先把原文档的内容复制出来，要不就gg了"></a>还好实习的时候一个实习前辈让我修改文档前先把原文档的内容复制出来，要不就gg了</h6><h6 id="改了几遍结果如下-只需修改server内容即可"><a href="#改了几遍结果如下-只需修改server内容即可" class="headerlink" title="改了几遍结果如下(只需修改server内容即可)"></a>改了几遍结果如下(只需修改server内容即可)</h6><pre><code>server&#123;    listen 80 default_server;    #listen [::]:80 default_server ipv6only=on;    ######################外加######################    error_page 497  https://www.域名;             #访问http时强制其访问https    ssl on;    listen 443 ssl;    ssl_certificate 1_域名_bundle.crt;         #两个复制的文件    ssl_certificate_key 2_域名.key;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置    ssl_prefer_server_ciphers on;    ssl_session_timeout 5m;    server_name www.域名;                      #域名          #################################################    index index.html index.htm index.php;    root  /home/wwwroot/default;    #error_page   404   /404.html;    include enable-php.conf;    location /nginx_status    &#123;        stub_status on;        access_log   off;    &#125;    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$    &#123;        expires      30d;    &#125;    location ~ .*\.(js|css)?$    &#123;        expires      12h;    &#125;    location ~ /\.    &#123;        deny all;    &#125;    access_log  /home/wwwlogs/access.log  access;&#125;</code></pre><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><h6 id="检查是否成功"><a href="#检查是否成功" class="headerlink" title="检查是否成功"></a>检查是否成功</h6><pre><code>/bin/nginx -t</code></pre><h6 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h6><pre><code>/etc/init.d/nginx restart</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>++[[]][+[]]+[[]][+[]]+[+[]]==10</title>
    <link href="/2018/03/09/++%5B%5B%5D%5D%5B+%5B%5D%5D+%5B%5B%5D%5D%5B+%5B%5D%5D+%5B+%5B%5D%5D==10/"/>
    <url>/2018/03/09/++%5B%5B%5D%5D%5B+%5B%5D%5D+%5B%5B%5D%5D%5B+%5B%5D%5D+%5B+%5B%5D%5D==10/</url>
    
    <content type="html"><![CDATA[<h4 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h4><h6 id="最近在准备面试-突然发现群里的老学长发来这么一句"><a href="#最近在准备面试-突然发现群里的老学长发来这么一句" class="headerlink" title="最近在准备面试, 突然发现群里的老学长发来这么一句"></a>最近在准备面试, 突然发现群里的老学长发来这么一句</h6><pre><code>++[[]][+[]]+[[]][+[]]+[+[]] == 10</code></pre><h6 id="一开始心里想的是我这老学长从来不按套路出牌，大概这个东西返回的是true吧，到chorme控制台打印一下还真的是true"><a href="#一开始心里想的是我这老学长从来不按套路出牌，大概这个东西返回的是true吧，到chorme控制台打印一下还真的是true" class="headerlink" title="一开始心里想的是我这老学长从来不按套路出牌，大概这个东西返回的是true吧，到chorme控制台打印一下还真的是true"></a>一开始心里想的是我这老学长从来不按套路出牌，大概这个东西返回的是true吧，到chorme控制台打印一下还真的是true</h6><h6 id="这到底怎么回事呢？正好也累了，换换脑子，就开始了下面这一套…"><a href="#这到底怎么回事呢？正好也累了，换换脑子，就开始了下面这一套…" class="headerlink" title="这到底怎么回事呢？正好也累了，换换脑子，就开始了下面这一套….."></a>这到底怎么回事呢？正好也累了，换换脑子，就开始了下面这一套…..</h6><h4 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h4><h5 id="Q1-虽然表面上看起来天差地别，难道说是ascii码转化之后是相同的？？"><a href="#Q1-虽然表面上看起来天差地别，难道说是ascii码转化之后是相同的？？" class="headerlink" title="Q1: 虽然表面上看起来天差地别，难道说是ascii码转化之后是相同的？？"></a>Q1: 虽然表面上看起来天差地别，难道说是ascii码转化之后是相同的？？</h5><h6 id="带着这个疑问我进行了下面的试验"><a href="#带着这个疑问我进行了下面的试验" class="headerlink" title="带着这个疑问我进行了下面的试验"></a>带着这个疑问我进行了下面的试验</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/==10-1.png"><img src="http://p4j7qpj9e.bkt.clouddn.com/==10-2.png"><img src="http://p4j7qpj9e.bkt.clouddn.com/==10-3.png"><h6 id="不对啊-这明明都是返回的第一个字符的ascii码呀-方向错了"><a href="#不对啊-这明明都是返回的第一个字符的ascii码呀-方向错了" class="headerlink" title="不对啊,这明明都是返回的第一个字符的ascii码呀..方向错了"></a>不对啊,这明明都是返回的第一个字符的ascii码呀..方向错了</h6><h5 id="Q2-这里面能不能分块解释一下？"><a href="#Q2-这里面能不能分块解释一下？" class="headerlink" title="Q2: 这里面能不能分块解释一下？"></a>Q2: 这里面能不能分块解释一下？</h5><h6 id="看来还得仔细的分析分析，不能硬着头皮试了"><a href="#看来还得仔细的分析分析，不能硬着头皮试了" class="headerlink" title="看来还得仔细的分析分析，不能硬着头皮试了"></a>看来还得仔细的分析分析，不能硬着头皮试了</h6><h6 id="尝试着把上面的表达式变成"><a href="#尝试着把上面的表达式变成" class="headerlink" title="尝试着把上面的表达式变成"></a>尝试着把上面的表达式变成</h6><pre><code>++[[]][+[]] + [[]][+[]] + [+[]]</code></pre><h6 id="然后把他们在控制台上分别打印一下"><a href="#然后把他们在控制台上分别打印一下" class="headerlink" title="然后把他们在控制台上分别打印一下.."></a>然后把他们在控制台上分别打印一下..</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/==10-4.png"><h6 id="2333-好像发现了点什么东西"><a href="#2333-好像发现了点什么东西" class="headerlink" title="2333,好像发现了点什么东西"></a>2333,好像发现了点什么东西</h6><h6 id="是-0-啊-那就是-变成了0-运算符在-之前把-变成了””空字符串然后-””-0"><a href="#是-0-啊-那就是-变成了0-运算符在-之前把-变成了””空字符串然后-””-0" class="headerlink" title="[+[]]是[0]啊,那就是+[] 变成了0, +运算符在+之前把[]变成了””空字符串然后+”” === 0"></a>[+[]]是[0]啊,那就是+[] 变成了0, +运算符在+之前把[]变成了””空字符串然后+”” === 0</h6><h6 id="接着下面的就好解释了-就变成了-0-就是-呗-但是如果你直接执行-还是会报错的-但是这样便于理解-0-会报错-1-所以第一项-就变成了1-number"><a href="#接着下面的就好解释了-就变成了-0-就是-呗-但是如果你直接执行-还是会报错的-但是这样便于理解-0-会报错-1-所以第一项-就变成了1-number" class="headerlink" title="接着下面的就好解释了, [[]][+[]]就变成了[[]][0],就是[]呗,但是如果你直接执行++[]还是会报错的,但是这样便于理解++0(会报错) == 1, 所以第一项++[[]][+[]]就变成了1(number)"></a>接着下面的就好解释了, [[]][+[]]就变成了[[]][0],就是[]呗,但是如果你直接执行++[]还是会报错的,但是这样便于理解++0(会报错) == 1, 所以第一项++[[]][+[]]就变成了1(number)</h6><h6 id="自然而然第二项-1-就变成了-1-””-“1”"><a href="#自然而然第二项-1-就变成了-1-””-“1”" class="headerlink" title="自然而然第二项 1 + [[]][+[]] 就变成了 1+”” === “1”"></a>自然而然第二项 1 + [[]][+[]] 就变成了 1+”” === “1”</h6><h6 id="然后再加上最后一项-“1”-0-“10”"><a href="#然后再加上最后一项-“1”-0-“10”" class="headerlink" title="然后再加上最后一项 “1” + 0 === “10”"></a>然后再加上最后一项 “1” + 0 === “10”</h6><h6 id="自然而然-“10”-10"><a href="#自然而然-“10”-10" class="headerlink" title="自然而然 “10” == 10"></a>自然而然 “10” == 10</h6><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><h6 id="转化来转化去还是考察的对运算符的理解-看来我理解还是不够深…一开始路线错误"><a href="#转化来转化去还是考察的对运算符的理解-看来我理解还是不够深…一开始路线错误" class="headerlink" title="转化来转化去还是考察的对运算符的理解,看来我理解还是不够深…一开始路线错误"></a>转化来转化去还是考察的对运算符的理解,看来我理解还是不够深…一开始路线错误</h6>]]></content>
    
    
    <categories>
      
      <category>探究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>探究</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>promise实现原理</title>
    <link href="/2018/02/27/promise%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2018/02/27/promise%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h6 id="若没有链式then-then函数就不用return-new-Promise递归"><a href="#若没有链式then-then函数就不用return-new-Promise递归" class="headerlink" title="若没有链式then,then函数就不用return new Promise递归"></a>若没有链式then,then函数就不用return new Promise递归</h6><pre><code>function Promise(fn) &#123;    var state = &quot;pending&quot;    var value = null,        callbacks = [];  //callbacks为数组，因为可能同时有很多个回调    this.then = function (onFulfilled, onRejected) &#123;        return new Promise(function(resolve, reject)&#123;            handle(&#123;                onFulfilled: onFulfilled || null,                resolve: resolve,                onRejected: onRejected || null,                reject: reject,            &#125;)        &#125;)    &#125;;    function handle(callback)&#123;        if(state === &quot;pending&quot;)&#123;            callbacks.push(callback);            return;        &#125;        let cb = state === &#39;fulfilled&#39;? callback.onFulfilled: callback.onRejected,        ret;        if(cb === null)&#123;            cb = state == &#39;fulfilled&#39;? callback.resolve: callback.reject;            cb(value)            return;        &#125;        try&#123;            ret = cb(value);            callback.resolve(ret);        &#125;catch(e)&#123;            callback.reject(e)        &#125;    &#125;    function resolve(newValue) &#123;        if(newValue &amp;&amp; (typeof newValue === &#39;object&#39; || typeof newValue === &#39;function&#39;))&#123;            let then = newValue.then            if(typeof then === &#39;function&#39;)&#123;                then.call(newValue, resolve, reject);                return;            &#125;        &#125;        value = newValue        state = &quot;fulfilled&quot;        execute()        &#125;    function reject(reason)&#123;        state = &#39;rejected&#39;        value = reason        execute()    &#125;    //用于操作resolve和reject    function execute()&#123;        setTimeout(function()&#123;            callbacks.forEach(function (callback) &#123;                handle(callback)            &#125;);        &#125;,0)      &#125;    fn(resolve, reject);&#125;function getUserId() &#123;    return new Promise(function (resolve) &#123;        resolve(&quot;success&quot;)        console.log(&#39;success&#39;)        // reject(&quot;reason&quot;)    &#125;)&#125;function getUserJobById(id)&#123;    return new Promise(function (resolve)&#123;        resolve(&quot;UserJob&quot;)    &#125;)&#125;getUserId().then(getUserJobById).then(function(id) &#123;    console.log(id)&#125;)function testError()&#123;    return new Promise(function(resolve, reject)&#123;        reject(&quot;reason&quot;)    &#125;)&#125;testError().then(function()&#123;&#125;,function(error)&#123;    console.log(&quot;error:&quot; + error)&#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卡死电脑代码</title>
    <link href="/2018/02/22/%E5%8D%A1%E6%AD%BB%E7%94%B5%E8%84%91%E4%BB%A3%E7%A0%81/"/>
    <url>/2018/02/22/%E5%8D%A1%E6%AD%BB%E7%94%B5%E8%84%91%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h6 id="下面两段代码吃内存，造成浏览器卡死"><a href="#下面两段代码吃内存，造成浏览器卡死" class="headerlink" title="下面两段代码吃内存，造成浏览器卡死"></a>下面两段代码吃内存，造成浏览器卡死</h6><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><pre><code>var total=&quot;&quot;;for (var i=0;i&lt;1000000;i++)&#123;    total= total+i.toString ();    history.pushState (0,0,total);&#125;</code></pre><h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><pre><code>while(true) &#123;     document.body.appendChild(document.createElement(&quot;div&quot;)); &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>探究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>探究</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片懒加载</title>
    <link href="/2018/02/22/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <url>/2018/02/22/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h6 id="实现图片懒加载的代码"><a href="#实现图片懒加载的代码" class="headerlink" title="实现图片懒加载的代码"></a>实现图片懒加载的代码</h6><h6 id="思路：每一个image都有一个data-src用于存放将要加载的图片的地址，当这个图片的区域显示到屏幕上时，再将src-data-src"><a href="#思路：每一个image都有一个data-src用于存放将要加载的图片的地址，当这个图片的区域显示到屏幕上时，再将src-data-src" class="headerlink" title="思路：每一个image都有一个data-src用于存放将要加载的图片的地址，当这个图片的区域显示到屏幕上时，再将src = data-src"></a>思路：每一个image都有一个data-src用于存放将要加载的图片的地址，当这个图片的区域显示到屏幕上时，再将src = data-src</h6><h6 id="图片的offsetTop-lt-可见高度-scrollTop"><a href="#图片的offsetTop-lt-可见高度-scrollTop" class="headerlink" title="图片的offsetTop &lt; 可见高度 + scrollTop"></a>图片的offsetTop &lt; 可见高度 + scrollTop</h6><script async src="//jsfiddle.net/zfl0813/sk36v9c9/1/embed/js,html,css,result/dark/"></script>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>transform</title>
    <link href="/2018/02/15/transform/"/>
    <url>/2018/02/15/transform/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h6 id="在CSS3中transform主要包括以下几种：旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix-不改变原先的文档流"><a href="#在CSS3中transform主要包括以下几种：旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix-不改变原先的文档流" class="headerlink" title="在CSS3中transform主要包括以下几种：旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix,不改变原先的文档流"></a>在CSS3中transform主要包括以下几种：旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix,不改变原先的文档流</h6><h6 id="原文"><a href="#原文" class="headerlink" title="原文:"></a>原文:</h6><p><a href="https://www.w3cplus.com/content/css3-transform">https://www.w3cplus.com/content/css3-transform</a></p><h4 id="1-改变元素基点transform-origin"><a href="#1-改变元素基点transform-origin" class="headerlink" title="1.改变元素基点transform-origin"></a>1.改变元素基点transform-origin</h4><pre><code>transform-origin:100% 50% 左右、上下transform-origin:right;</code></pre><img src="http://p4j7qpj9e.bkt.clouddn.com/transform-2.png"><pre><code>transform-origin:0% 0% 左右、上下transform-origin:top left;</code></pre><img src="http://p4j7qpj9e.bkt.clouddn.com/transform-1.png"><pre><code>transform-origin:25% 75% 左右、上下</code></pre><img src="http://p4j7qpj9e.bkt.clouddn.com/transform-3.png"><h4 id="2-旋转rotate"><a href="#2-旋转rotate" class="headerlink" title="2.旋转rotate"></a>2.旋转rotate</h4><pre><code>transform:rotate(30deg) 以中心点为基点顺时针旋转30°</code></pre><script async src="//jsfiddle.net/Nb7rG/5/embed/js,html,css,result/dark/"></script><h4 id="3-平移"><a href="#3-平移" class="headerlink" title="3.平移"></a>3.平移</h4><pre><code>transform: translate(100px, 100px); 以中心点为右移100px,下移100px</code></pre><script async src="//jsfiddle.net/Nb7rG/6/embed/js,html,css,result/dark/"></script><h4 id="4-缩放"><a href="#4-缩放" class="headerlink" title="4.缩放"></a>4.缩放</h4><pre><code>transform: scale(0.5, 2); 缩放（x, y）左右、上下缩放倍数</code></pre><script async src="//jsfiddle.net/Nb7rG/7/embed/js,html,css,result/dark/"></script><h4 id="5-扭曲"><a href="#5-扭曲" class="headerlink" title="5.扭曲"></a>5.扭曲</h4><pre><code>transform: skew(30deg,10deg); 扭曲（x, y）扭曲的角度 正表示顺时针</code></pre><img src="http://p4j7qpj9e.bkt.clouddn.com/transform-4.png"><script async src="//jsfiddle.net/Nb7rG/8/embed/js,html,css,result/dark/"></script><h4 id="6-matrix"><a href="#6-matrix" class="headerlink" title="6.matrix(, , , , , )"></a>6.matrix(, , , , , )</h4><h6 id="以一个含六值的-a-b-c-d-e-f-变换矩阵的形式指定一个2D变换，相当于直接应用一个-a-b-c-d-e-f-变换矩阵。"><a href="#以一个含六值的-a-b-c-d-e-f-变换矩阵的形式指定一个2D变换，相当于直接应用一个-a-b-c-d-e-f-变换矩阵。" class="headerlink" title="以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。"></a>以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。</h6>]]></content>
    
    
    <categories>
      
      <category>HTML CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue多json弹窗修改相同属性解决方案</title>
    <link href="/2018/01/11/vue%E5%A4%9Ajson%E5%BC%B9%E7%AA%97%E4%BF%AE%E6%94%B9%E7%9B%B8%E5%90%8C%E5%B1%9E%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/01/11/vue%E5%A4%9Ajson%E5%BC%B9%E7%AA%97%E4%BF%AE%E6%94%B9%E7%9B%B8%E5%90%8C%E5%B1%9E%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><h6 id="项目中有时候会遇到这样一种情况-v-for渲染出一个列表-想加入弹出框修改某属性"><a href="#项目中有时候会遇到这样一种情况-v-for渲染出一个列表-想加入弹出框修改某属性" class="headerlink" title="项目中有时候会遇到这样一种情况,v-for渲染出一个列表,想加入弹出框修改某属性"></a>项目中有时候会遇到这样一种情况,v-for渲染出一个列表,想加入弹出框修改某属性</h6><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><h6 id="下面的代码是一种解决方案"><a href="#下面的代码是一种解决方案" class="headerlink" title="下面的代码是一种解决方案"></a>下面的代码是一种解决方案</h6><p><a href="https://gitee.com/UPCmvc/front_student/blob/master/src/components/ScienceCheck.vue">点击</a></p><h6 id="通过动态绑定属性进行点击的列表给弹出框传值-然后再返回-如上述代码中29行-获取到data-id然后传值给checkId-该值位于弹出框-然后再修改"><a href="#通过动态绑定属性进行点击的列表给弹出框传值-然后再返回-如上述代码中29行-获取到data-id然后传值给checkId-该值位于弹出框-然后再修改" class="headerlink" title="通过动态绑定属性进行点击的列表给弹出框传值,然后再返回,如上述代码中29行,获取到data-id然后传值给checkId(该值位于弹出框),然后再修改"></a>通过动态绑定属性进行点击的列表给弹出框传值,然后再返回,如上述代码中29行,获取到data-id然后传值给checkId(该值位于弹出框),然后再修改</h6><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><h6 id="万一要是不同的json数组-相同的属性要修改怎么办呢？"><a href="#万一要是不同的json数组-相同的属性要修改怎么办呢？" class="headerlink" title="万一要是不同的json数组,相同的属性要修改怎么办呢？"></a>万一要是不同的json数组,相同的属性要修改怎么办呢？</h6><h6 id="html"><a href="#html" class="headerlink" title="html"></a>html</h6><pre><code>&lt;div class=&quot;hello&quot;&gt;    &lt;div v-for=&quot;(list1,index) in lists1&quot;&gt;      &lt;span&gt;&#123;&#123;list1.sex&#125;&#125;&lt;/span&gt;      &lt;button type=&quot;button&quot; @click=&quot;change($event, list1.id, lists1, &#39;sex&#39;)&quot;&gt;点击&lt;/button&gt;    &lt;/div&gt;    &lt;br&gt;    &lt;div v-for=&quot;list2 in lists2&quot;&gt;      &lt;span&gt;&#123;&#123;list2.wrap.sex&#125;&#125;&lt;/span&gt;      &lt;button type=&quot;button&quot; @click=&quot;change($event, list2.id, lists2, &#39;wrap.sex&#39;)&quot;&gt;点击&lt;/button&gt;    &lt;/div&gt;    &lt;br&gt;    &lt;div v-for=&quot;list3 in lists3&quot;&gt;      &lt;span&gt;&#123;&#123;list3.sex&#125;&#125;&lt;/span&gt;      &lt;button type=&quot;button&quot; @click=&quot;change($event, list3.id, lists3, &#39;sex&#39;)&quot;&gt;点击&lt;/button&gt;    &lt;/div&gt;    &lt;input type=&quot;text&quot; v-model=&quot;text&quot;&gt;&lt;/div&gt;</code></pre><h6 id="js"><a href="#js" class="headerlink" title="js"></a>js</h6><pre><code>import objectPath from &#39;object-path&#39;export default &#123;  name: &#39;HelloWorld&#39;,  data () &#123;    return &#123;      msg: &#39;Welcome to Your Vue.js App&#39;,      text:&#39;&#39;,      path:&#39;&#39;,      lists1:[&#123;        &quot;id&quot;:1,        &quot;sex&quot;:1      &#125;,&#123;        &quot;id&quot;:2,        &quot;sex&quot;:1      &#125;],      lists2:[&#123;        &quot;id&quot;:1,        &quot;wrap&quot;:&#123;          &quot;sex&quot;:1        &#125;      &#125;,&#123;        &quot;id&quot;:2,        &quot;wrap&quot;:&#123;          &quot;sex&quot;:1        &#125;      &#125;],      lists3:[&#123;        &quot;id&quot;:1,        &quot;sex&quot;:1      &#125;,&#123;        &quot;id&quot;:2,        &quot;sex&quot;:1      &#125;],    &#125;  &#125;,  methods:&#123;    change: function(event, id, array, attr)&#123;      objectPath.set(array[id-1], attr, this.text)    &#125;  &#125;&#125;</code></pre><h6 id="主要传入的参数有json数组和路径-然后用objectPath-set进行修改"><a href="#主要传入的参数有json数组和路径-然后用objectPath-set进行修改" class="headerlink" title="主要传入的参数有json数组和路径,然后用objectPath.set进行修改"></a>主要传入的参数有json数组和路径,然后用objectPath.set进行修改</h6><pre><code>npm install object-path --save</code></pre><p><a href="https://www.npmjs.com/package/object-path">objectPath具体详见</a></p><h6 id="其实vue提供了set方法跟这个效果也是一样的Vue-set"><a href="#其实vue提供了set方法跟这个效果也是一样的Vue-set" class="headerlink" title="其实vue提供了set方法跟这个效果也是一样的Vue.set()"></a>其实vue提供了set方法跟这个效果也是一样的Vue.set()</h6>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript高级程序设计20-23</title>
    <link href="/2017/12/19/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A120-23/"/>
    <url>/2017/12/19/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A120-23/</url>
    
    <content type="html"><![CDATA[<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h6 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h6><pre><code>&#123;    name: &quot;test&quot;&#125;</code></pre><h6 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h6><pre><code>&#123;    &quot;name&quot;: &quot;test&quot;&#125;</code></pre><h5 id="JSON对象方法"><a href="#JSON对象方法" class="headerlink" title="JSON对象方法"></a>JSON对象方法</h5><h6 id="JSON-stringify-将json对象转化为数据结构"><a href="#JSON-stringify-将json对象转化为数据结构" class="headerlink" title="JSON.stringify() //将json对象转化为数据结构"></a>JSON.stringify() //将json对象转化为数据结构</h6><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><pre><code>let obj = &#123;    name: &quot;test&quot;,    sex: [&#39;male&#39;, &#39;female&#39;]&#125;JSON.stringify(obj)  JSON.stringify(obj, name)  //只保留nameJSON.stringify(obj,name,4) //字符缩进4个空格</code></pre><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><h5 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h5><h6 id="cookie构成：名称、值、域、路径、失效时间、安全标志"><a href="#cookie构成：名称、值、域、路径、失效时间、安全标志" class="headerlink" title="cookie构成：名称、值、域、路径、失效时间、安全标志"></a>cookie构成：名称、值、域、路径、失效时间、安全标志</h6><pre><code>Set-Cookie: name=value; domain=.wrox.com; expires= Mon, 22-Jan-07; securedocument.cookie = &quot;name=value; .....&quot;</code></pre><h6 id="cookie-确实非常小，它的大小限制为4KB左右，是网景公司的前雇员-Lou-Montulli-在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在-Cookie-中存入一段辨别用户身份的数据来实现的"><a href="#cookie-确实非常小，它的大小限制为4KB左右，是网景公司的前雇员-Lou-Montulli-在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在-Cookie-中存入一段辨别用户身份的数据来实现的" class="headerlink" title="cookie 确实非常小，它的大小限制为4KB左右，是网景公司的前雇员 Lou Montulli 在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的"></a>cookie 确实非常小，它的大小限制为4KB左右，是网景公司的前雇员 Lou Montulli 在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的</h6><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><pre><code>localStorage.setItem()localStorage.getItem()</code></pre><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><h6 id="用法同上"><a href="#用法同上" class="headerlink" title="用法同上"></a>用法同上</h6><h4 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h4><p><a href="https://segmentfault.com/a/1190000006741200">浏览器缓存</a></p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成npm包--vue</title>
    <link href="/2017/12/19/%E7%94%9F%E6%88%90npm%E5%8C%85--vue/"/>
    <url>/2017/12/19/%E7%94%9F%E6%88%90npm%E5%8C%85--vue/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><h6 id="用vue-cli打包生成vue组件并且上传到npm上"><a href="#用vue-cli打包生成vue组件并且上传到npm上" class="headerlink" title="用vue-cli打包生成vue组件并且上传到npm上"></a>用vue-cli打包生成vue组件并且上传到npm上</h6><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><pre><code>vue-clinpm账号webpack</code></pre><h6 id="首先，用vue-cli生成vue项目，并修改如下所示"><a href="#首先，用vue-cli生成vue项目，并修改如下所示" class="headerlink" title="首先，用vue-cli生成vue项目，并修改如下所示"></a>首先，用vue-cli生成vue项目，并修改如下所示</h6><pre><code>&#123;  &quot;name&quot;: &quot;picture-upload&quot;,  &quot;version&quot;: &quot;1.0.9&quot;,  &quot;description&quot;: &quot;This is a component for picture uploaded by base64&quot;,  &quot;author&quot;: &quot;zfl &lt;1171067930@qq.com&gt;&quot;,  &quot;main&quot;: &quot;dist/picture-upload.min.js&quot;,  &quot;license&quot;: &quot;MIT&quot;,  &quot;private&quot;: false,  &quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,    &quot;start&quot;: &quot;node build/dev-server.js&quot;,    &quot;build&quot;: &quot;node build/build.js&quot;  &#125;,  &quot;dependencies&quot;: &#123;    &quot;vue&quot;: &quot;^2.3.3&quot;,    &quot;vue-router&quot;: &quot;^2.6.0&quot;  &#125;  ...&#125;</code></pre><h6 id="“private”-false-把这个包改成公用的"><a href="#“private”-false-把这个包改成公用的" class="headerlink" title="“private”: false 把这个包改成公用的"></a>“private”: false 把这个包改成公用的</h6><h6 id="“main”-“dist-picture-upload-min-js”-这里的配置意思是，别人用这个包-import-PictureUpload-from-‘picture-upload’-时，引入的文件。可以看出，这个picture-upload最终需要打包出一个js文件，所以我们需要修改webpack-prod-config-js文件"><a href="#“main”-“dist-picture-upload-min-js”-这里的配置意思是，别人用这个包-import-PictureUpload-from-‘picture-upload’-时，引入的文件。可以看出，这个picture-upload最终需要打包出一个js文件，所以我们需要修改webpack-prod-config-js文件" class="headerlink" title="“main”: “dist/picture-upload.min.js”, 这里的配置意思是，别人用这个包 import PictureUpload from ‘picture-upload’; 时，引入的文件。可以看出，这个picture-upload最终需要打包出一个js文件，所以我们需要修改webpack.prod.config.js文件"></a>“main”: “dist/picture-upload.min.js”, 这里的配置意思是，别人用这个包 import PictureUpload from ‘picture-upload’; 时，引入的文件。可以看出，这个picture-upload最终需要打包出一个js文件，所以我们需要修改webpack.prod.config.js文件</h6><pre><code>var webpackConfig = merge(baseWebpackConfig, &#123;  module: &#123;    rules: utils.styleLoaders(&#123;      sourceMap: config.build.productionSourceMap,      extract: true    &#125;)  &#125;,  devtool: config.build.productionSourceMap ? &#39;#source-map&#39; : false,  // output: &#123;  //   path: config.build.assetsRoot,  //   filename: utils.assetsPath(&#39;js/[name].[chunkhash].js&#39;),  //   chunkFilename: utils.assetsPath(&#39;js/[id].[chunkhash].js&#39;)  // &#125;,   output: &#123;    path: config.bundle.assetsRoot,    publicPath: config.bundle.assetsPublicPath,    filename: &#39;picture-upload.min.js&#39;,    library: &#39;PictureUpload&#39;,    libraryTarget: &#39;umd&#39;  &#125;,  plugins: [    new webpack.DefinePlugin(&#123;      &#39;process.env&#39;: env    &#125;),    new webpack.optimize.UglifyJsPlugin(&#123;      compress: &#123;        warnings: false      &#125;,      sourceMap: true    &#125;),    // extract css into its own file    new ExtractTextPlugin(&#123;      // filename: utils.assetsPath(&#39;css/[name].[contenthash].css&#39;)       filename: &#39;picture-upload.min.css&#39;    &#125;),    new OptimizeCSSPlugin()  ]&#125;)module.exports = webpackConfig</code></pre><h6 id="主要是修改两个地方output里面的filename-就是打包生成的js文件的名字-library是引入时的模块名-extracttextpligin里的filename改成picture-upload-min-css-然后很多不需要的模块都注解掉了"><a href="#主要是修改两个地方output里面的filename-就是打包生成的js文件的名字-library是引入时的模块名-extracttextpligin里的filename改成picture-upload-min-css-然后很多不需要的模块都注解掉了" class="headerlink" title="主要是修改两个地方output里面的filename,就是打包生成的js文件的名字;library是引入时的模块名;extracttextpligin里的filename改成picture-upload.min.css;然后很多不需要的模块都注解掉了"></a>主要是修改两个地方output里面的filename,就是打包生成的js文件的名字;library是引入时的模块名;extracttextpligin里的filename改成picture-upload.min.css;然后很多不需要的模块都注解掉了</h6><h6 id="下面是config-index-js"><a href="#下面是config-index-js" class="headerlink" title="下面是config/index.js"></a>下面是config/index.js</h6><pre><code>bundle: &#123;    env: require(&#39;./prod.env&#39;),    assetsRoot: path.resolve(__dirname, &#39;../dist&#39;),    assetsPublicPath: &#39;/&#39;,    assetsSubDirectory: &#39;/&#39;,    productionSourceMap: true,    productionGzip: false,    productionGzipExtensions: [&#39;js&#39;, &#39;css&#39;],    bundleAnalyzerReport: process.env.npm_config_report&#125;</code></pre><h6 id="在build的下面加上这段代码-上面webpack-prod-config-js里面output里面配置的都是bundle"><a href="#在build的下面加上这段代码-上面webpack-prod-config-js里面output里面配置的都是bundle" class="headerlink" title="在build的下面加上这段代码,上面webpack.prod.config.js里面output里面配置的都是bundle"></a>在build的下面加上这段代码,上面webpack.prod.config.js里面output里面配置的都是bundle</h6><h6 id="编写组件-组件编写完成后-在main-js里面加上-其他的注释掉与不注释掉都可以"><a href="#编写组件-组件编写完成后-在main-js里面加上-其他的注释掉与不注释掉都可以" class="headerlink" title="编写组件,组件编写完成后,在main.js里面加上,其他的注释掉与不注释掉都可以"></a>编写组件,组件编写完成后,在main.js里面加上,其他的注释掉与不注释掉都可以</h6><pre><code>import PictureUpload from &#39;./components/PictureUpload.vue&#39;export default PictureUpload</code></pre><h6 id="最后执行npm-run-build"><a href="#最后执行npm-run-build" class="headerlink" title="最后执行npm run build"></a>最后执行npm run build</h6><h6 id="发布到npm上"><a href="#发布到npm上" class="headerlink" title="发布到npm上"></a>发布到npm上</h6><pre><code>npm loginnpm addusernpm publish</code></pre><h6 id="使用在下面项目链接的readme里面有"><a href="#使用在下面项目链接的readme里面有" class="headerlink" title="使用在下面项目链接的readme里面有"></a>使用在下面项目链接的readme里面有</h6><p><a href="https://github.com/zhangfuli/picture-upload">点击这里</a></p><h6 id="注意-由于webpack最近的升级webpack组件用2-0写的在最新vue-cli生成的webpack3-0的项目中貌似不能用"><a href="#注意-由于webpack最近的升级webpack组件用2-0写的在最新vue-cli生成的webpack3-0的项目中貌似不能用" class="headerlink" title="注意:由于webpack最近的升级webpack组件用2.0写的在最新vue-cli生成的webpack3.0的项目中貌似不能用"></a>注意:由于webpack最近的升级webpack组件用2.0写的在最新vue-cli生成的webpack3.0的项目中貌似不能用</h6>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript高级程序设计11-13</title>
    <link href="/2017/12/10/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A115-16/"/>
    <url>/2017/12/10/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A115-16/</url>
    
    <content type="html"><![CDATA[<h4 id="使用canvas画图"><a href="#使用canvas画图" class="headerlink" title="使用canvas画图"></a>使用canvas画图</h4><pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;let canvas = document.querySelector(&quot;#canvas&quot;);  let context = canvas.getContext(&quot;2d&quot;);  let image = new Image(160,160);  image.src = &quot;http://p0fuclq6b.bkt.clouddn.com/P2-1507020329.JPG&quot;;  document.body.append(image);  //绘制图形  context.fillStyle = &quot;#ff0000&quot;  context.fillRect(10,10,500,50)  //(起点x,起点y,宽度,高度)  context.fillStyle = &quot;rgba(0,0,255,0.5)&quot;  //半透明蓝色context.fillRect(30,30,50,50)context.clearRect(40,40,10,10)   //清除一块矩形区域  //绘制image  context.drawImage(image,50,50,50,50)</code></pre><h4 id="canvas压缩图片"><a href="#canvas压缩图片" class="headerlink" title="canvas压缩图片"></a>canvas压缩图片</h4><p><a href="http://leonshi.com/2015/10/31/html5-canvas-image-compress-crop/">链接</a></p><h6 id="这里有一个canvas-toDataURL-‘image-jpeg’-quality-跨域未解决？？？"><a href="#这里有一个canvas-toDataURL-‘image-jpeg’-quality-跨域未解决？？？" class="headerlink" title="这里有一个canvas.toDataURL(‘image/jpeg’, quality); //跨域未解决？？？"></a>这里有一个canvas.toDataURL(‘image/jpeg’, quality); //跨域未解决？？？</h6><p><a href="https://github.com/think2011/localResizeIMG">压缩图片</a></p><h4 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h4><h6 id="拖动某元素时，依次触发下列事件"><a href="#拖动某元素时，依次触发下列事件" class="headerlink" title="拖动某元素时，依次触发下列事件"></a>拖动某元素时，依次触发下列事件</h6><pre><code>dragstartdragdragend</code></pre><h6 id="当元素被拖动到一个有效的目标上时，依次触发"><a href="#当元素被拖动到一个有效的目标上时，依次触发" class="headerlink" title="当元素被拖动到一个有效的目标上时，依次触发"></a>当元素被拖动到一个有效的目标上时，依次触发</h6><pre><code>dragenterdragoverdragleave 或 drop</code></pre><h5 id="dataTransfer对象"><a href="#dataTransfer对象" class="headerlink" title="dataTransfer对象"></a>dataTransfer对象</h5><h6 id="主要用于拖放前，设定参数，拖放后取得参数"><a href="#主要用于拖放前，设定参数，拖放后取得参数" class="headerlink" title="主要用于拖放前，设定参数，拖放后取得参数"></a>主要用于拖放前，设定参数，拖放后取得参数</h6><pre><code>e.dataTransfer.setData(&quot;text&quot;,&quot;&quot;);  //键值对e.dataTransfer.getData(&quot;text&quot;);</code></pre><h5 id="设置元素可拖动"><a href="#设置元素可拖动" class="headerlink" title="设置元素可拖动"></a>设置元素可拖动</h5><pre><code>&lt;div draggable=&quot;true&quot;&gt;&lt;/div&gt;</code></pre><h6 id="拖动img时不会有拖动的痕迹"><a href="#拖动img时不会有拖动的痕迹" class="headerlink" title="拖动img时不会有拖动的痕迹"></a>拖动img时不会有拖动的痕迹</h6><script async src="//jsfiddle.net/2ok0Ldsn/embed/js,html,css,result/dark/"></script><h4 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h4><h6 id="嵌入视频"><a href="#嵌入视频" class="headerlink" title="嵌入视频"></a>嵌入视频</h6><pre><code>&lt;video&gt;    &lt;source src=&quot;&quot; type=&quot;&quot;&gt;&lt;/source&gt;    &lt;source src=&quot;&quot; type=&quot;&quot;&gt;&lt;/source&gt;&lt;/video&gt;</code></pre><h6 id="嵌入音频"><a href="#嵌入音频" class="headerlink" title="嵌入音频"></a>嵌入音频</h6><pre><code>&lt;audio&gt;    &lt;source src=&quot;&quot; type=&quot;&quot;&gt;&lt;/source&gt;    &lt;source src=&quot;&quot; type=&quot;&quot;&gt;&lt;/source&gt;&lt;/audio&gt;</code></pre><h4 id="MIME-类型"><a href="#MIME-类型" class="headerlink" title="MIME 类型"></a>MIME 类型</h4><h6 id="MIME-Multipurpose-Internet-Mail-Extensions-是描述消息内容类型的因特网标准。"><a href="#MIME-Multipurpose-Internet-Mail-Extensions-是描述消息内容类型的因特网标准。" class="headerlink" title="MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。"></a>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。</h6><h6 id="MIME-消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。"><a href="#MIME-消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。" class="headerlink" title="MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。"></a>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</h6>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单反镜片与摄影</title>
    <link href="/2017/11/18/%E5%8D%95%E5%8F%8D%E9%95%9C%E7%89%87%E4%B8%8E%E6%91%84%E5%BD%B1/"/>
    <url>/2017/11/18/%E5%8D%95%E5%8F%8D%E9%95%9C%E7%89%87%E4%B8%8E%E6%91%84%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<h4 id="镜片"><a href="#镜片" class="headerlink" title="镜片"></a>镜片</h4><h6 id="灰镜—-消除动态的人–长时间曝光"><a href="#灰镜—-消除动态的人–长时间曝光" class="headerlink" title="灰镜—-消除动态的人–长时间曝光"></a>灰镜—-消除动态的人–长时间曝光</h6><h6 id="黑白滤镜、UV镜"><a href="#黑白滤镜、UV镜" class="headerlink" title="黑白滤镜、UV镜"></a>黑白滤镜、UV镜</h6><h6 id="滤光镜"><a href="#滤光镜" class="headerlink" title="滤光镜"></a>滤光镜</h6><h6 id="凤凰品牌的镜片"><a href="#凤凰品牌的镜片" class="headerlink" title="凤凰品牌的镜片"></a>凤凰品牌的镜片</h6><h4 id="摄影技巧"><a href="#摄影技巧" class="headerlink" title="摄影技巧"></a>摄影技巧</h4><h6 id="虚化（前景虚化、背景虚化）、三分法"><a href="#虚化（前景虚化、背景虚化）、三分法" class="headerlink" title="虚化（前景虚化、背景虚化）、三分法"></a>虚化（前景虚化、背景虚化）、三分法</h6><img src="http://p0fuclq6b.bkt.clouddn.com/P2-1507020329.JPG"><h6 id="线条、色调、质感（隐形线条）"><a href="#线条、色调、质感（隐形线条）" class="headerlink" title="线条、色调、质感（隐形线条）"></a>线条、色调、质感（隐形线条）</h6><h6 id="平衡：对称、均衡、呼应"><a href="#平衡：对称、均衡、呼应" class="headerlink" title="平衡：对称、均衡、呼应"></a>平衡：对称、均衡、呼应</h6><img src="http://p0fuclq6b.bkt.clouddn.com/p3-1507020329.jpg"><h6 id="对比与和谐、排列与节奏、封闭与开放"><a href="#对比与和谐、排列与节奏、封闭与开放" class="headerlink" title="对比与和谐、排列与节奏、封闭与开放"></a>对比与和谐、排列与节奏、封闭与开放</h6><h4 id="用光技巧"><a href="#用光技巧" class="headerlink" title="用光技巧"></a>用光技巧</h4><h6 id="逆光、侧逆光–点测光对准画面最亮的地方"><a href="#逆光、侧逆光–点测光对准画面最亮的地方" class="headerlink" title="逆光、侧逆光–点测光对准画面最亮的地方"></a>逆光、侧逆光–点测光对准画面最亮的地方</h6><h6 id="顶光不单独拍人"><a href="#顶光不单独拍人" class="headerlink" title="顶光不单独拍人"></a>顶光不单独拍人</h6><h6 id="脚光拍摄透明物品"><a href="#脚光拍摄透明物品" class="headerlink" title="脚光拍摄透明物品"></a>脚光拍摄透明物品</h6><h6 id="侧逆光用于描绘人物轮廓，发质金黄"><a href="#侧逆光用于描绘人物轮廓，发质金黄" class="headerlink" title="侧逆光用于描绘人物轮廓，发质金黄"></a>侧逆光用于描绘人物轮廓，发质金黄</h6><h6 id="HDR拍摄：曝光补偿0、-2、2三张合成一张，要求画面不能动"><a href="#HDR拍摄：曝光补偿0、-2、2三张合成一张，要求画面不能动" class="headerlink" title="HDR拍摄：曝光补偿0、-2、2三张合成一张，要求画面不能动"></a>HDR拍摄：曝光补偿0、-2、2三张合成一张，要求画面不能动</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拟态计算与蜜罐-石乐义</title>
    <link href="/2017/11/17/%E6%8B%9F%E6%80%81%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%9C%9C%E7%BD%90-%E7%9F%B3%E4%B9%90%E4%B9%89/"/>
    <url>/2017/11/17/%E6%8B%9F%E6%80%81%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%9C%9C%E7%BD%90-%E7%9F%B3%E4%B9%90%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h4 id="应用决定结构，结构决定性能"><a href="#应用决定结构，结构决定性能" class="headerlink" title="应用决定结构，结构决定性能"></a>应用决定结构，结构决定性能</h4><h4 id="拟态计算与拟态安全"><a href="#拟态计算与拟态安全" class="headerlink" title="拟态计算与拟态安全"></a>拟态计算与拟态安全</h4><h4 id="锁相环–用于跳频通信-500次-s"><a href="#锁相环–用于跳频通信-500次-s" class="headerlink" title="锁相环–用于跳频通信(500次/s)"></a>锁相环–用于跳频通信(500次/s)</h4><h6 id="作用是将电路输出的时钟与其外部的参考时钟保持同步。当参考时钟的频率或相位发生改变时，锁相环会检测到这种变化，并且通过其内部的反馈系统来调节输出频率，直到两者重新同步。"><a href="#作用是将电路输出的时钟与其外部的参考时钟保持同步。当参考时钟的频率或相位发生改变时，锁相环会检测到这种变化，并且通过其内部的反馈系统来调节输出频率，直到两者重新同步。" class="headerlink" title="作用是将电路输出的时钟与其外部的参考时钟保持同步。当参考时钟的频率或相位发生改变时，锁相环会检测到这种变化，并且通过其内部的反馈系统来调节输出频率，直到两者重新同步。"></a>作用是将电路输出的时钟与其外部的参考时钟保持同步。当参考时钟的频率或相位发生改变时，锁相环会检测到这种变化，并且通过其内部的反馈系统来调节输出频率，直到两者重新同步。</h6><h4 id="A1—A2通信频率在变，B无法监听"><a href="#A1—A2通信频率在变，B无法监听" class="headerlink" title="A1—A2通信频率在变，B无法监听"></a>A1—A2通信频率在变，B无法监听</h4><h4 id="端信息跳变–ip变化，导致攻击者无法攻击"><a href="#端信息跳变–ip变化，导致攻击者无法攻击" class="headerlink" title="端信息跳变–ip变化，导致攻击者无法攻击"></a>端信息跳变–ip变化，导致攻击者无法攻击</h4><h4 id="模拟蜜罐–告诉攻击者，我是蜜罐，在真实ip与蜜罐之间来回切换"><a href="#模拟蜜罐–告诉攻击者，我是蜜罐，在真实ip与蜜罐之间来回切换" class="headerlink" title="模拟蜜罐–告诉攻击者，我是蜜罐，在真实ip与蜜罐之间来回切换"></a>模拟蜜罐–告诉攻击者，我是蜜罐，在真实ip与蜜罐之间来回切换</h4>]]></content>
    
    
    
    <tags>
      
      <tag>探究</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络安全-石乐义</title>
    <link href="/2017/11/16/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-%E7%9F%B3%E4%B9%90%E4%B9%89/"/>
    <url>/2017/11/16/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-%E7%9F%B3%E4%B9%90%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h4 id="L-Dos：拥塞控制"><a href="#L-Dos：拥塞控制" class="headerlink" title="L-Dos：拥塞控制"></a>L-Dos：拥塞控制</h4><h6 id="人为造成拥塞假象"><a href="#人为造成拥塞假象" class="headerlink" title="人为造成拥塞假象"></a>人为造成拥塞假象</h6><h4 id="botnet：僵尸网络"><a href="#botnet：僵尸网络" class="headerlink" title="botnet：僵尸网络"></a>botnet：僵尸网络</h4><h4 id="sniffer-c"><a href="#sniffer-c" class="headerlink" title="sniffer.c"></a>sniffer.c</h4><h4 id="以太网广播的方式"><a href="#以太网广播的方式" class="headerlink" title="以太网广播的方式"></a>以太网广播的方式</h4><h6 id="混杂模式–-gt-收到所有信息"><a href="#混杂模式–-gt-收到所有信息" class="headerlink" title="混杂模式–&gt;收到所有信息"></a>混杂模式–&gt;收到所有信息</h6><h6 id="分析包-n-lt-42-14-帧-20-ip报头-2-2-udp-8"><a href="#分析包-n-lt-42-14-帧-20-ip报头-2-2-udp-8" class="headerlink" title="分析包 n&lt;=42 14(帧)+20(ip报头)+2+2(udp)+8"></a>分析包 n&lt;=42 14(帧)+20(ip报头)+2+2(udp)+8</h6><h4 id="nslookup-域名，查询域名的ip"><a href="#nslookup-域名，查询域名的ip" class="headerlink" title="nslookup + 域名，查询域名的ip"></a>nslookup + 域名，查询域名的ip</h4><h4 id="ARP攻击："><a href="#ARP攻击：" class="headerlink" title="ARP攻击："></a>ARP攻击：</h4><h6 id="冒充网关-网关ip-自己的mac"><a href="#冒充网关-网关ip-自己的mac" class="headerlink" title="冒充网关(网关ip+自己的mac)"></a>冒充网关(网关ip+自己的mac)</h6><h6 id="ping所有主机-事后要承担气网关的责任，不能让其他主机断网"><a href="#ping所有主机-事后要承担气网关的责任，不能让其他主机断网" class="headerlink" title="ping所有主机(事后要承担气网关的责任，不能让其他主机断网)"></a>ping所有主机(事后要承担气网关的责任，不能让其他主机断网)</h6><h4 id="ARPspoof-向网关ping"><a href="#ARPspoof-向网关ping" class="headerlink" title="ARPspoof(向网关ping)"></a>ARPspoof(向网关ping)</h4><h6 id="不停的换ip去屏网关，使网关的ARP表乱掉–-gt-刷新–-gt-启动广播–-gt-监听广播"><a href="#不停的换ip去屏网关，使网关的ARP表乱掉–-gt-刷新–-gt-启动广播–-gt-监听广播" class="headerlink" title="不停的换ip去屏网关，使网关的ARP表乱掉–&gt;刷新–&gt;启动广播–&gt;监听广播"></a>不停的换ip去屏网关，使网关的ARP表乱掉–&gt;刷新–&gt;启动广播–&gt;监听广播</h6><h4 id="无解攻击–SYNFlood-泛洪"><a href="#无解攻击–SYNFlood-泛洪" class="headerlink" title="无解攻击–SYNFlood(泛洪)"></a>无解攻击–SYNFlood(泛洪)</h4><h6 id="用多个假ip尝试与某服务器建立链接，使其忙于建立而瘫痪"><a href="#用多个假ip尝试与某服务器建立链接，使其忙于建立而瘫痪" class="headerlink" title="用多个假ip尝试与某服务器建立链接，使其忙于建立而瘫痪"></a>用多个假ip尝试与某服务器建立链接，使其忙于建立而瘫痪</h6><h4 id="无解攻击–垃圾邮件"><a href="#无解攻击–垃圾邮件" class="headerlink" title="无解攻击–垃圾邮件"></a>无解攻击–垃圾邮件</h4><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h6 id="wareshark、nmap"><a href="#wareshark、nmap" class="headerlink" title="wareshark、nmap"></a>wareshark、nmap</h6>]]></content>
    
    
    
    <tags>
      
      <tag>探究</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组按行遍历按列遍历速度问题</title>
    <link href="/2017/11/15/%E6%95%B0%E7%BB%84%E6%8C%89%E8%A1%8C%E9%81%8D%E5%8E%86%E6%8C%89%E5%88%97%E9%81%8D%E5%8E%86%E9%80%9F%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <url>/2017/11/15/%E6%95%B0%E7%BB%84%E6%8C%89%E8%A1%8C%E9%81%8D%E5%8E%86%E6%8C%89%E5%88%97%E9%81%8D%E5%8E%86%E9%80%9F%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h6 id="废话不对说直接上代码"><a href="#废话不对说直接上代码" class="headerlink" title="废话不对说直接上代码"></a>废话不对说直接上代码</h6><pre><code>let length = 5000; let a = new Array(length);for (let i=0;i&lt;length;i++)&#123;    a[i] = new Array(length);&#125;let start = new Date().getTime(); // 开始时间  for(let i=0;i&lt;length;i++)&#123;    for(let j=0;j&lt;length;j++)&#123;        a[i][j] = i+j;    &#125;&#125;let end = new Date().getTime(); console.log(end - start);let start2 = new Date().getTime(); // 开始时间 for (let i=0;i&lt;length;i++)&#123;    for (let j = 0;j&lt;length;j++)&#123;        a[j][i] = i+j;      &#125;           &#125;let end2 = new Date().getTime(); console.log(end2 - start2);</code></pre><h6 id="结果：按行遍历–64-按列遍历–720-很明显按行遍历的时间要短"><a href="#结果：按行遍历–64-按列遍历–720-很明显按行遍历的时间要短" class="headerlink" title="结果：按行遍历–64; 按列遍历–720,很明显按行遍历的时间要短"></a>结果：按行遍历–64; 按列遍历–720,很明显按行遍历的时间要短</h6>]]></content>
    
    
    <categories>
      
      <category>探究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>探究</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript高级程序设计11-13</title>
    <link href="/2017/10/31/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A111-13/"/>
    <url>/2017/10/31/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A111-13/</url>
    
    <content type="html"><![CDATA[<h3 id="SelectorsAPI"><a href="#SelectorsAPI" class="headerlink" title="SelectorsAPI"></a>SelectorsAPI</h3><h6 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a>querySelector()</h6><pre><code>var body = document.querySelector(&quot;body&quot;);var myDiv = document.querySelector(&quot;#myDiv&quot;);var img = document.querySelector(&quot;img.button&quot;);  //img  .button</code></pre><h6 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h6><h6 id="该方法返回的是NodeList"><a href="#该方法返回的是NodeList" class="headerlink" title="该方法返回的是NodeList"></a>该方法返回的是NodeList</h6><h6 id="classList–用户CRUD某节点的css"><a href="#classList–用户CRUD某节点的css" class="headerlink" title="classList–用户CRUD某节点的css"></a>classList–用户CRUD某节点的css</h6><pre><code>&lt;div class =&quot;bd user disabled&quot;&gt;&lt;/div&gt;div.classList.add(&quot;currect&quot;)   div.classList.remove(&quot;currect&quot;)div.classList.toggle(&quot;currect&quot;)div.classList.contains(&quot;currect&quot;)  //有就返回true</code></pre><h6 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h6><h6 id="元素获得焦点的方式有页面加载、用户输入、focus"><a href="#元素获得焦点的方式有页面加载、用户输入、focus" class="headerlink" title="元素获得焦点的方式有页面加载、用户输入、focus"></a>元素获得焦点的方式有页面加载、用户输入、focus</h6><h3 id="自定义数据属性"><a href="#自定义数据属性" class="headerlink" title="自定义数据属性"></a>自定义数据属性</h3><h6 id="h5规定可以为元素添加非标准属性，但要添加data-目的是为元素提供与渲染无关的信息。或者是提供语义"><a href="#h5规定可以为元素添加非标准属性，但要添加data-目的是为元素提供与渲染无关的信息。或者是提供语义" class="headerlink" title="h5规定可以为元素添加非标准属性，但要添加data-,目的是为元素提供与渲染无关的信息。或者是提供语义\"></a>h5规定可以为元素添加非标准属性，但要添加data-,目的是为元素提供与渲染无关的信息。或者是提供语义\</h6><pre><code>&lt;div id=&quot;myDiv&quot; data-appId=&quot;123&quot;&gt;&lt;/div&gt;    var div = document.getElementById(&quot;myDiv&quot;);console.log(myDiv.getAttribute(&quot;data-appId&quot;));</code></pre><h3 id="DOM0级事件"><a href="#DOM0级事件" class="headerlink" title="DOM0级事件"></a>DOM0级事件</h3><script async src="//jsfiddle.net/3g6ypdz0/embed/js,html,css,result/dark/"></script><h3 id="DOM2"><a href="#DOM2" class="headerlink" title="DOM2"></a>DOM2</h3><h6 id="通过addEventListener绑定事件，IE–attachEvent绑定"><a href="#通过addEventListener绑定事件，IE–attachEvent绑定" class="headerlink" title="通过addEventListener绑定事件，IE–attachEvent绑定"></a>通过addEventListener绑定事件，IE–attachEvent绑定</h6><h6 id="DOM2级的事件规定了事件流包含三个阶段包括：-1：事件捕获，-2：处于目标阶段，-3：事件冒泡阶段"><a href="#DOM2级的事件规定了事件流包含三个阶段包括：-1：事件捕获，-2：处于目标阶段，-3：事件冒泡阶段" class="headerlink" title="DOM2级的事件规定了事件流包含三个阶段包括： 1：事件捕获， 2：处于目标阶段， 3：事件冒泡阶段"></a>DOM2级的事件规定了事件流包含三个阶段包括： 1：事件捕获， 2：处于目标阶段， 3：事件冒泡阶段</h6><h6 id="addEventListener事件可以显示的指定是使用事件捕获还是事件冒泡。"><a href="#addEventListener事件可以显示的指定是使用事件捕获还是事件冒泡。" class="headerlink" title="addEventListener事件可以显示的指定是使用事件捕获还是事件冒泡。"></a>addEventListener事件可以显示的指定是使用事件捕获还是事件冒泡。</h6><pre><code>addEventListener(&#39;click&#39;,doSomething2,true);true--事件捕获   false--事件冒泡</code></pre><h6 id="无论在DOM0还是DOM2还是DOM3中都会在事件函数中传入事件对象"><a href="#无论在DOM0还是DOM2还是DOM3中都会在事件函数中传入事件对象" class="headerlink" title="无论在DOM0还是DOM2还是DOM3中都会在事件函数中传入事件对象"></a>无论在DOM0还是DOM2还是DOM3中都会在事件函数中传入事件对象</h6><pre><code>let test = document.getElementsByClassName(&quot;test&quot;);   //返回的是数组对象test[0].addEventListener(&#39;click&#39;, function()&#123;    console.log(arguments[0]);&#125;,false)</code></pre><h3 id="Event对象的常见应用"><a href="#Event对象的常见应用" class="headerlink" title="Event对象的常见应用"></a>Event对象的常见应用</h3><h6 id="event-preventDefault-阻止默认事件"><a href="#event-preventDefault-阻止默认事件" class="headerlink" title="event.preventDefault() //阻止默认事件"></a>event.preventDefault() //阻止默认事件</h6><h6 id="event-stopPropagation-阻止冒泡"><a href="#event-stopPropagation-阻止冒泡" class="headerlink" title="event.stopPropagation() //阻止冒泡"></a>event.stopPropagation() //阻止冒泡</h6><pre><code>test[0].addEventListener(&#39;click&#39;, function(e)&#123;    alert(e.clientX);&#125;,false)test[1].addEventListener(&#39;keyup&#39;, function(e)&#123;    alert(e.keyCode);&#125;,false)</code></pre><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><script async src="//jsfiddle.net/maLkhpzq/6/embed/js,html,css,result/dark/"></script>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国的网安事态--吕述望教授</title>
    <link href="/2017/10/24/%E4%B8%AD%E5%9B%BD%E7%9A%84%E7%BD%91%E5%AE%89%E4%BA%8B%E6%80%81--%E5%90%95%E8%BF%B0%E6%9C%9B%E6%95%99%E6%8E%88/"/>
    <url>/2017/10/24/%E4%B8%AD%E5%9B%BD%E7%9A%84%E7%BD%91%E5%AE%89%E4%BA%8B%E6%80%81--%E5%90%95%E8%BF%B0%E6%9C%9B%E6%95%99%E6%8E%88/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="昨天晚上，听说石教授邀请他的导师吕述望教授给我们讲座，就搜索了一下吕教授，他是中科院博士生导师，北京知识安全工程中心主任……我就知道，真正的大佬来了"><a href="#昨天晚上，听说石教授邀请他的导师吕述望教授给我们讲座，就搜索了一下吕教授，他是中科院博士生导师，北京知识安全工程中心主任……我就知道，真正的大佬来了" class="headerlink" title="昨天晚上，听说石教授邀请他的导师吕述望教授给我们讲座，就搜索了一下吕教授，他是中科院博士生导师，北京知识安全工程中心主任……我就知道，真正的大佬来了"></a>昨天晚上，听说石教授邀请他的导师吕述望教授给我们讲座，就搜索了一下吕教授，他是中科院博士生导师，北京知识安全工程中心主任……我就知道，真正的大佬来了</h6><h6 id="今天下了UML课程，早早的跑去了上网络原理的教室，进门的时候发现，一个白发苍苍的老者，脸上还有着些许的老年斑。这是对吕教授的第一印象。"><a href="#今天下了UML课程，早早的跑去了上网络原理的教室，进门的时候发现，一个白发苍苍的老者，脸上还有着些许的老年斑。这是对吕教授的第一印象。" class="headerlink" title="今天下了UML课程，早早的跑去了上网络原理的教室，进门的时候发现，一个白发苍苍的老者，脸上还有着些许的老年斑。这是对吕教授的第一印象。"></a>今天下了UML课程，早早的跑去了上网络原理的教室，进门的时候发现，一个白发苍苍的老者，脸上还有着些许的老年斑。这是对吕教授的第一印象。</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/lv1.png"><h6 id="这次课程的主题是中国的网安事态，上来吕老就讲了近平原则，其实我对政治的这些事情不是很感冒，就感觉说的使一些令人很难理解的官话。这不是讲的是网络安全吗？怎么上升到了政治层面？心里一阵的嘀咕可是后来的话题就让我对这个老者产生了深深的敬畏。"><a href="#这次课程的主题是中国的网安事态，上来吕老就讲了近平原则，其实我对政治的这些事情不是很感冒，就感觉说的使一些令人很难理解的官话。这不是讲的是网络安全吗？怎么上升到了政治层面？心里一阵的嘀咕可是后来的话题就让我对这个老者产生了深深的敬畏。" class="headerlink" title="这次课程的主题是中国的网安事态，上来吕老就讲了近平原则，其实我对政治的这些事情不是很感冒，就感觉说的使一些令人很难理解的官话。这不是讲的是网络安全吗？怎么上升到了政治层面？心里一阵的嘀咕可是后来的话题就让我对这个老者产生了深深的敬畏。"></a>这次课程的主题是中国的网安事态，上来吕老就讲了近平原则，其实我对政治的这些事情不是很感冒，就感觉说的使一些令人很难理解的官话。这不是讲的是网络安全吗？怎么上升到了政治层面？心里一阵的嘀咕可是后来的话题就让我对这个老者产生了深深的敬畏。</h6><h3 id="网络疆域问题"><a href="#网络疆域问题" class="headerlink" title="网络疆域问题"></a>网络疆域问题</h3><h6 id="上来吕老就提问了我们一个问题，什么是计算机信息系统？其实作为计算机类专业的人，我对这个概念确实不是很了解，让吕老这么一问，确实觉得有点惭愧，就偷偷的拿出手机来查了一下"><a href="#上来吕老就提问了我们一个问题，什么是计算机信息系统？其实作为计算机类专业的人，我对这个概念确实不是很了解，让吕老这么一问，确实觉得有点惭愧，就偷偷的拿出手机来查了一下" class="headerlink" title="上来吕老就提问了我们一个问题，什么是计算机信息系统？其实作为计算机类专业的人，我对这个概念确实不是很了解，让吕老这么一问，确实觉得有点惭愧，就偷偷的拿出手机来查了一下"></a>上来吕老就提问了我们一个问题，什么是计算机信息系统？其实作为计算机类专业的人，我对这个概念确实不是很了解，让吕老这么一问，确实觉得有点惭愧，就偷偷的拿出手机来查了一下</h6><h6 id="计算机信息系统，是指由计算机及其相关的和配套的设备、设施（含网络）构成的，按照一定的应用目标和规则对信息进行采集、加工、存储、传输、检索等处理的人机系统。这个是百度百科上的原话。计算机信息系统包括人，是人就应该有自己的国家，那么网络有没有疆域呢？现在网络已经到了人们生活的方方面面，我就觉得网络怎么会有疆域呢？接下来的探讨，让我意识到了我们国家网络的严峻性。"><a href="#计算机信息系统，是指由计算机及其相关的和配套的设备、设施（含网络）构成的，按照一定的应用目标和规则对信息进行采集、加工、存储、传输、检索等处理的人机系统。这个是百度百科上的原话。计算机信息系统包括人，是人就应该有自己的国家，那么网络有没有疆域呢？现在网络已经到了人们生活的方方面面，我就觉得网络怎么会有疆域呢？接下来的探讨，让我意识到了我们国家网络的严峻性。" class="headerlink" title="计算机信息系统，是指由计算机及其相关的和配套的设备、设施（含网络）构成的，按照一定的应用目标和规则对信息进行采集、加工、存储、传输、检索等处理的人机系统。这个是百度百科上的原话。计算机信息系统包括人，是人就应该有自己的国家，那么网络有没有疆域呢？现在网络已经到了人们生活的方方面面，我就觉得网络怎么会有疆域呢？接下来的探讨，让我意识到了我们国家网络的严峻性。"></a>计算机信息系统，是指由计算机及其相关的和配套的设备、设施（含网络）构成的，按照一定的应用目标和规则对信息进行采集、加工、存储、传输、检索等处理的人机系统。这个是百度百科上的原话。计算机信息系统包括人，是人就应该有自己的国家，那么网络有没有疆域呢？现在网络已经到了人们生活的方方面面，我就觉得网络怎么会有疆域呢？接下来的探讨，让我意识到了我们国家网络的严峻性。</h6><h3 id="中国没有互联网"><a href="#中国没有互联网" class="headerlink" title="中国没有互联网"></a>中国没有互联网</h3><h6 id="有的同学对此提出了诧异，其实我也这个看法表示怀疑。首先，吕老给我们分析了两个名词，互联网和因特网，因特网是美国的网络，这个大家都是知道的，互联网意味着什么？互联互通，你有网我有网，大家相互通信才叫互联互通，大家都是平等的。可是实际上，我们国家1994年计算机信息系统全功能接入美国Internet，这意味着什么？美国作为网络的服务方，他可以在任何时候切断中国的网络，中国是没有自己的网络的。吕老给我们讲了一个例子，”AB两个是非常要好的朋友，好到能穿一条裤子，AB各有一个院子仅仅挨着，A天天到B家打水，每次都要走门，A觉得太不方便了，商量着B看能不能把两家的篱笆拆掉”，吕老问我们能还是不能，有的同学表示能有的表示不能，反正持有不一样的意见嘛。吕老接着又说，”作为男人是要传承勇敢和责任的，今天A能拆掉B的篱笆，万一明天A又看上了B的媳妇了呢？自己的主权还是要捍卫的，就算AB现在十分要好，AB的儿子呢？AB的孙子呢？总有一天会打起来”，这个比喻十分形象，就跟中国与美国一样，就算现在的美国给中国提供了网络的服务，但是中国是被服务的一方，我们这一代觉得网络非常号，不需要建设自己的网络，可是我们的儿孙后代呢？美国不会提供服务一辈子的，”服务总有不服务的时候”，所以我们要建立自己的网络，中国现在是没有网络的。"><a href="#有的同学对此提出了诧异，其实我也这个看法表示怀疑。首先，吕老给我们分析了两个名词，互联网和因特网，因特网是美国的网络，这个大家都是知道的，互联网意味着什么？互联互通，你有网我有网，大家相互通信才叫互联互通，大家都是平等的。可是实际上，我们国家1994年计算机信息系统全功能接入美国Internet，这意味着什么？美国作为网络的服务方，他可以在任何时候切断中国的网络，中国是没有自己的网络的。吕老给我们讲了一个例子，”AB两个是非常要好的朋友，好到能穿一条裤子，AB各有一个院子仅仅挨着，A天天到B家打水，每次都要走门，A觉得太不方便了，商量着B看能不能把两家的篱笆拆掉”，吕老问我们能还是不能，有的同学表示能有的表示不能，反正持有不一样的意见嘛。吕老接着又说，”作为男人是要传承勇敢和责任的，今天A能拆掉B的篱笆，万一明天A又看上了B的媳妇了呢？自己的主权还是要捍卫的，就算AB现在十分要好，AB的儿子呢？AB的孙子呢？总有一天会打起来”，这个比喻十分形象，就跟中国与美国一样，就算现在的美国给中国提供了网络的服务，但是中国是被服务的一方，我们这一代觉得网络非常号，不需要建设自己的网络，可是我们的儿孙后代呢？美国不会提供服务一辈子的，”服务总有不服务的时候”，所以我们要建立自己的网络，中国现在是没有网络的。" class="headerlink" title="有的同学对此提出了诧异，其实我也这个看法表示怀疑。首先，吕老给我们分析了两个名词，互联网和因特网，因特网是美国的网络，这个大家都是知道的，互联网意味着什么？互联互通，你有网我有网，大家相互通信才叫互联互通，大家都是平等的。可是实际上，我们国家1994年计算机信息系统全功能接入美国Internet，这意味着什么？美国作为网络的服务方，他可以在任何时候切断中国的网络，中国是没有自己的网络的。吕老给我们讲了一个例子，”AB两个是非常要好的朋友，好到能穿一条裤子，AB各有一个院子仅仅挨着，A天天到B家打水，每次都要走门，A觉得太不方便了，商量着B看能不能把两家的篱笆拆掉”，吕老问我们能还是不能，有的同学表示能有的表示不能，反正持有不一样的意见嘛。吕老接着又说，”作为男人是要传承勇敢和责任的，今天A能拆掉B的篱笆，万一明天A又看上了B的媳妇了呢？自己的主权还是要捍卫的，就算AB现在十分要好，AB的儿子呢？AB的孙子呢？总有一天会打起来”，这个比喻十分形象，就跟中国与美国一样，就算现在的美国给中国提供了网络的服务，但是中国是被服务的一方，我们这一代觉得网络非常号，不需要建设自己的网络，可是我们的儿孙后代呢？美国不会提供服务一辈子的，”服务总有不服务的时候”，所以我们要建立自己的网络，中国现在是没有网络的。"></a>有的同学对此提出了诧异，其实我也这个看法表示怀疑。首先，吕老给我们分析了两个名词，互联网和因特网，因特网是美国的网络，这个大家都是知道的，互联网意味着什么？互联互通，你有网我有网，大家相互通信才叫互联互通，大家都是平等的。可是实际上，我们国家1994年计算机信息系统全功能接入美国Internet，这意味着什么？美国作为网络的服务方，他可以在任何时候切断中国的网络，中国是没有自己的网络的。吕老给我们讲了一个例子，”AB两个是非常要好的朋友，好到能穿一条裤子，AB各有一个院子仅仅挨着，A天天到B家打水，每次都要走门，A觉得太不方便了，商量着B看能不能把两家的篱笆拆掉”，吕老问我们能还是不能，有的同学表示能有的表示不能，反正持有不一样的意见嘛。吕老接着又说，”作为男人是要传承勇敢和责任的，今天A能拆掉B的篱笆，万一明天A又看上了B的媳妇了呢？自己的主权还是要捍卫的，就算AB现在十分要好，AB的儿子呢？AB的孙子呢？总有一天会打起来”，这个比喻十分形象，就跟中国与美国一样，就算现在的美国给中国提供了网络的服务，但是中国是被服务的一方，我们这一代觉得网络非常号，不需要建设自己的网络，可是我们的儿孙后代呢？美国不会提供服务一辈子的，”服务总有不服务的时候”，所以我们要建立自己的网络，中国现在是没有网络的。</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/lv2.png"><h3 id="中国网空主权被肢解"><a href="#中国网空主权被肢解" class="headerlink" title="中国网空主权被肢解"></a>中国网空主权被肢解</h3><h6 id="有的人会问了，中国的网空主权怎么会肢解了呢？中国的域名是-cn。但是-cn的域名解析根本就不是中国解析的而是美国。中国的ip也是美国分配给你的，可以说自己什么东西都没有。下面吕教授给我们讲了什么民族史与家族史，你不记得你爷爷的名字是你爸爸的锅，就算你觉得你的父亲再不行，但是你能够为你的家族而奋斗你父亲就是成功的。就民族史而言，吕教授说只有两个时代那就是原始文明时代与帝国文明时代，这个我确实是没有搞懂这个帝国时代真正的含义。但是，文明造就了帝国，帝国就会产生战争。我们现在就处于战争之中，这个战争也是会死人的。"><a href="#有的人会问了，中国的网空主权怎么会肢解了呢？中国的域名是-cn。但是-cn的域名解析根本就不是中国解析的而是美国。中国的ip也是美国分配给你的，可以说自己什么东西都没有。下面吕教授给我们讲了什么民族史与家族史，你不记得你爷爷的名字是你爸爸的锅，就算你觉得你的父亲再不行，但是你能够为你的家族而奋斗你父亲就是成功的。就民族史而言，吕教授说只有两个时代那就是原始文明时代与帝国文明时代，这个我确实是没有搞懂这个帝国时代真正的含义。但是，文明造就了帝国，帝国就会产生战争。我们现在就处于战争之中，这个战争也是会死人的。" class="headerlink" title="有的人会问了，中国的网空主权怎么会肢解了呢？中国的域名是.cn。但是.cn的域名解析根本就不是中国解析的而是美国。中国的ip也是美国分配给你的，可以说自己什么东西都没有。下面吕教授给我们讲了什么民族史与家族史，你不记得你爷爷的名字是你爸爸的锅，就算你觉得你的父亲再不行，但是你能够为你的家族而奋斗你父亲就是成功的。就民族史而言，吕教授说只有两个时代那就是原始文明时代与帝国文明时代，这个我确实是没有搞懂这个帝国时代真正的含义。但是，文明造就了帝国，帝国就会产生战争。我们现在就处于战争之中，这个战争也是会死人的。"></a>有的人会问了，中国的网空主权怎么会肢解了呢？中国的域名是.cn。但是.cn的域名解析根本就不是中国解析的而是美国。中国的ip也是美国分配给你的，可以说自己什么东西都没有。下面吕教授给我们讲了什么民族史与家族史，你不记得你爷爷的名字是你爸爸的锅，就算你觉得你的父亲再不行，但是你能够为你的家族而奋斗你父亲就是成功的。就民族史而言，吕教授说只有两个时代那就是原始文明时代与帝国文明时代，这个我确实是没有搞懂这个帝国时代真正的含义。但是，文明造就了帝国，帝国就会产生战争。我们现在就处于战争之中，这个战争也是会死人的。</h6><img src="http://p4j7qpj9e.bkt.clouddn.com/==10-1.png">### Across the Great Wall We Can reach every corner in China —希拉里###### 穿过中国古老的长城，穿过中国的的防火墙，我们就能到达中国的任何一个地方，这是希拉里一个要竞选美国总统的人说的话，可想而知中国的网空已经沦陷到什么地步。虽然我们有主权，但是我们要受制于美国，就跟当初的香港一样，受制于英国。##### 吕老给我们讲了近两个小时，一个年逾古稀的老人，站着给我们讲了连个小时，我们不谈吕老的立场是什么样的，单纯就吕老的爱国感，我就已经折服于吕老。为了中国的下一代，吕老还在四处奔波相告，呼吁中国要建立自己的网络，使我们不再受制于美国]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript高级程序设计7-8</title>
    <link href="/2017/10/18/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A17-8/"/>
    <url>/2017/10/18/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A17-8/</url>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h6 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h6><h6 id="function-name-这个存在变量提升-而var-name-function-不存在变量提升"><a href="#function-name-这个存在变量提升-而var-name-function-不存在变量提升" class="headerlink" title="function name(){},这个存在变量提升,而var name = function(){}不存在变量提升"></a>function name(){},这个存在变量提升,而var name = function(){}不存在变量提升</h6><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><pre><code>function factorial(num)&#123;    if(num&lt;=1)&#123;        return 1    &#125;else&#123;        return num*arguments.callee(num-1) //arguments.callee === factorical    &#125;&#125;</code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h6 id="闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见的方式就是在函数内部创建另一个函数"><a href="#闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见的方式就是在函数内部创建另一个函数" class="headerlink" title="闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见的方式就是在函数内部创建另一个函数"></a>闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见的方式就是在函数内部创建另一个函数</h6><p>######当函数返回了一个闭包时。这个函数的作用域将会一直在内存中保存到闭包不存在为止</p><h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><h6 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h6><pre><code>var name = &quot;The Window&quot;;var object = &#123;　　name : “My Object”,　　getNameFunc : function()&#123;　　　　return function()&#123;　　　　　　return this.name;　　　　&#125;;　　&#125;&#125;;alert(object.getNameFunc()()); //The Window</code></pre><h6 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h6><script async src="//jsfiddle.net/ffd10c2h/embed/"></script><h6 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h6><h6 id="下面的例子中"><a href="#下面的例子中" class="headerlink" title="下面的例子中"></a>下面的例子中</h6><pre><code>result[i] = function()&#123;    return i&#125;</code></pre><h6 id="每一个都是返回i-这个i的作用域在f-内-而自此时f-中的i-3-所以每个都返回3"><a href="#每一个都是返回i-这个i的作用域在f-内-而自此时f-中的i-3-所以每个都返回3" class="headerlink" title="每一个都是返回i,这个i的作用域在f()内,而自此时f()中的i=3,所以每个都返回3"></a>每一个都是返回i,这个i的作用域在f()内,而自此时f()中的i=3,所以每个都返回3</h6><h6 id="而当用for–in时返回的是0-1-2-这是为什么呢？继续探究"><a href="#而当用for–in时返回的是0-1-2-这是为什么呢？继续探究" class="headerlink" title="而当用for–in时返回的是0,1,2,这是为什么呢？继续探究"></a>而当用for–in时返回的是0,1,2,这是为什么呢？继续探究</h6><h6 id="修改代码如下"><a href="#修改代码如下" class="headerlink" title="修改代码如下"></a>修改代码如下</h6><pre><code>function f()&#123;    var result = new Array()    for(var i = 0;i&lt;3;i++)&#123;        result[i] = function()&#123;            console.log(&quot;内:&quot;+this)            return i;        &#125;    &#125;    return result&#125;var result = f()console.log(result)  //Array(3)</code></pre><h6 id="3个f-这里的f-不是上面的f函数"><a href="#3个f-这里的f-不是上面的f函数" class="headerlink" title="3个f(),这里的f()不是上面的f函数"></a>3个f(),这里的f()不是上面的f函数</h6><pre><code>console.log(result[0]())/** 内:function ()&#123;*            console.log(&quot;内:&quot;+this)*            return i;*        &#125;,function ()&#123;*            console.log(&quot;内:&quot;+this)*            return i;*        &#125;,function ()&#123;*            console.log(&quot;内:&quot;+this)*            return i;*        &#125;* */console.log(result[0])/*ƒ ()&#123;*            console.log(&quot;内:&quot;+this)*            return i;*        &#125;*/</code></pre><h6 id="结果如上-console-log-result0-与console-log-result-0-可以合理的解释为什么全是3"><a href="#结果如上-console-log-result0-与console-log-result-0-可以合理的解释为什么全是3" class="headerlink" title="结果如上,console.log(result0)与console.log(result[0])可以合理的解释为什么全是3"></a>结果如上,console.log(result0)与console.log(result[0])可以合理的解释为什么全是3</h6><h6 id="而且内this指向的是result数组所以会有三个function"><a href="#而且内this指向的是result数组所以会有三个function" class="headerlink" title="而且内this指向的是result数组所以会有三个function(){}"></a>而且内this指向的是result数组所以会有三个function(){}</h6><h6 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h6><h6 id="为什么console-log-“内：”-this-会出来3个function"><a href="#为什么console-log-“内：”-this-会出来3个function" class="headerlink" title="为什么console.log(“内：”+this)会出来3个function(){}"></a>为什么console.log(“内：”+this)会出来3个function(){}</h6><h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><pre><code>function f()&#123;    let result = new Array()    for(let i = 0;i&lt;3;i++)&#123;        result[i] = function()&#123;            return i;        &#125;    &#125;    return result&#125;let result = f()for(let i=0;i&lt;3;i++)&#123;    console.log(result[i]())&#125;</code></pre><h6 id="结果是0-1-2"><a href="#结果是0-1-2" class="headerlink" title="结果是0,1,2"></a>结果是0,1,2</h6><h6 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h6><pre><code>(function()&#123;    //这里是块级作用域&#125;)()</code></pre><h5 id="作用-块级作用域是一个独立的作用域，多人协作时每个人有每个人的块级作用域可以互不影响-防止命名冲突"><a href="#作用-块级作用域是一个独立的作用域，多人协作时每个人有每个人的块级作用域可以互不影响-防止命名冲突" class="headerlink" title="作用:块级作用域是一个独立的作用域，多人协作时每个人有每个人的块级作用域可以互不影响,防止命名冲突"></a>作用:块级作用域是一个独立的作用域，多人协作时每个人有每个人的块级作用域可以互不影响,防止命名冲突</h5><script async src="//jsfiddle.net/j10nwnvt/1/embed/js,html,css,result/dark/"></script><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><h6 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h6><h6 id="window对象是指浏览器打开的窗口"><a href="#window对象是指浏览器打开的窗口" class="headerlink" title="window对象是指浏览器打开的窗口"></a>window对象是指浏览器打开的窗口</h6><h6 id="window-名称-全局对象"><a href="#window-名称-全局对象" class="headerlink" title="window.名称   //全局对象"></a>window.名称   //全局对象</h6><h6 id="window-frame-‘name’"><a href="#window-frame-‘name’" class="headerlink" title="window.frame[‘name’]"></a>window.frame[‘name’]</h6><h6 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h6><h6 id="chrome-opera-safari—-screenTop-screenLeft"><a href="#chrome-opera-safari—-screenTop-screenLeft" class="headerlink" title="chrome\opera\safari—-screenTop|screenLeft"></a>chrome\opera\safari—-screenTop|screenLeft</h6><h6 id="firefox—-screenX-screenY"><a href="#firefox—-screenX-screenY" class="headerlink" title="firefox—-screenX|screenY"></a>firefox—-screenX|screenY</h6><pre><code>var leftPos = (typeof window.screenLeft == &#39;number&#39;)?window.screenLeft:window.screenX;var rightPos = (typeof window.screenTop == &#39;number&#39;)?window.screenRight:window.screenY;window.moveTo(0,0);    //移动到0，0window.moveBy(0,100);  //向下移动100像素</code></pre><h6 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h6><pre><code>outerWidth、outerHeight----返回浏览器窗口本身的大小innerWidth、innerHeight----返回容器中试图区的大小resizeTo()、resizeBy()----可以调整浏览器窗口的大小</code></pre><h6 id="导航和打开窗口"><a href="#导航和打开窗口" class="headerlink" title="导航和打开窗口"></a>导航和打开窗口</h6><pre><code>window.open()----打开新的浏览器窗口参数:URL、窗口目标、特性字符串、boolean(新页面是否取代浏览器历史纪录中当前加载页面)</code></pre><h6 id="第二参数可以是-self、-parent、-top、-blank"><a href="#第二参数可以是-self、-parent、-top、-blank" class="headerlink" title="第二参数可以是:_self、_parent、_top、_blank"></a>第二参数可以是:_self、_parent、_top、_blank</h6><pre><code>opener属性:保存着打开他的原始窗口对象</code></pre><h6 id="延时间歇延时"><a href="#延时间歇延时" class="headerlink" title="延时间歇延时"></a>延时间歇延时</h6><pre><code>setTimeout()、setTnterval()、clearTimeout()</code></pre><h6 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h6><pre><code>alert()、confirm()、prompt()</code></pre><h6 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h6><h6 id="即是window的对象属性，也是document的对象属性"><a href="#即是window的对象属性，也是document的对象属性" class="headerlink" title="即是window的对象属性，也是document的对象属性"></a>即是window的对象属性，也是document的对象属性</h6><h6 id="console-log-window-location-查看属性"><a href="#console-log-window-location-查看属性" class="headerlink" title="console.log(window.location)   //查看属性"></a>console.log(window.location)   //查看属性</h6><h6 id="查询字符串参数"><a href="#查询字符串参数" class="headerlink" title="查询字符串参数"></a>查询字符串参数</h6><pre><code>/* 解析查询字符串 返回包含所有参数的一个对象 */  function getQueryStringArgs()&#123;     //取得查询字符串并去掉开头的问号     var qs = (location.search.length &gt; 0 ?       location.search.substring(1) : &#39;&#39;);     //保存数据的对象     args = &#123;&#125;;     //取得每一项     var items = qs.length ? qs.split(&#39;&amp;&#39;) : [],    item = null,    name = null,    //在for循环中使用    i = 0, len = items.length;     //逐个将每一项添加到args对象中     for(i = 0 ; i &lt; len; i++)&#123;        item = items[i].split(&#39;=&#39;);        name = decodeURIComponent(item[0]);        value = decodeURIComponent(item[1]);        if(name.length)&#123;           args[name] = value;        &#125;     &#125;     return args;  &#125;  </code></pre>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsfiddle使用</title>
    <link href="/2017/10/18/jsfiddle%E4%BD%BF%E7%94%A8/"/>
    <url>/2017/10/18/jsfiddle%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h6 id="这个也是在查找js闭包的时候，无意中发现别人的博客为什么可以嵌入js在线编辑比如想下边的链接"><a href="#这个也是在查找js闭包的时候，无意中发现别人的博客为什么可以嵌入js在线编辑比如想下边的链接" class="headerlink" title="这个也是在查找js闭包的时候，无意中发现别人的博客为什么可以嵌入js在线编辑比如想下边的链接"></a>这个也是在查找js闭包的时候，无意中发现别人的博客为什么可以嵌入js在线编辑比如想下边的链接</h6><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">MDN Web Docs–闭包</a></p><h3 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h3><h5 id="查找的都是只是给了干巴巴的语法，这令我这个小白很苦恼"><a href="#查找的都是只是给了干巴巴的语法，这令我这个小白很苦恼" class="headerlink" title="查找的都是只是给了干巴巴的语法，这令我这个小白很苦恼"></a>查找的都是只是给了干巴巴的语法，这令我这个小白很苦恼</h5><pre><code>&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</code></pre><h6 id="这边看了下源码，是用iframe引用了jsfiddle-也就是上面的代码的作用"><a href="#这边看了下源码，是用iframe引用了jsfiddle-也就是上面的代码的作用" class="headerlink" title="这边看了下源码，是用iframe引用了jsfiddle,也就是上面的代码的作用"></a>这边看了下源码，是用iframe引用了jsfiddle,也就是上面的代码的作用</h6><h6 id="首先-你要先把你的代码在jsfiddle的网站中里写一下-然后点击Embed-它就会把你的代码生成script标签"><a href="#首先-你要先把你的代码在jsfiddle的网站中里写一下-然后点击Embed-它就会把你的代码生成script标签" class="headerlink" title="首先,你要先把你的代码在jsfiddle的网站中里写一下,然后点击Embed,它就会把你的代码生成script标签"></a>首先,你要先把你的代码在jsfiddle的网站中里写一下,然后点击Embed,它就会把你的代码生成script标签</h6><pre><code>&lt;script async src=&quot;//jsfiddle.net/xAFs9/3/embed/js,html,css,result/dark/&quot;&gt;&lt;/script&gt;</code></pre><h6 id="你可以直接CV这个script标签进你的markdown-你也可以按照语法-替换结果如下-当然长度和宽度自选-不填的话是自适应"><a href="#你可以直接CV这个script标签进你的markdown-你也可以按照语法-替换结果如下-当然长度和宽度自选-不填的话是自适应" class="headerlink" title="你可以直接CV这个script标签进你的markdown,你也可以按照语法,替换结果如下,当然长度和宽度自选,不填的话是自适应"></a>你可以直接CV这个script标签进你的markdown,你也可以按照语法,替换结果如下,当然长度和宽度自选,不填的话是自适应</h6><pre><code>&#123;% jsfiddle xAFs9/3 js,html,css,result dark %&#125;</code></pre><p>结果</p><script async src="//jsfiddle.net/xAFs9/3/embed/js,html,css,result/dark/"></script>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模国赛被整蛊</title>
    <link href="/2017/10/16/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E8%A2%AB%E6%95%B4%E8%9B%8A/"/>
    <url>/2017/10/16/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E8%A2%AB%E6%95%B4%E8%9B%8A/</url>
    
    <content type="html"><![CDATA[<h6 id="国赛已经过去好长时间了，今天翻文件无意中看见”国赛A题论文-vbs”-想想在那三天的紧张的时间，看见这个是个什么心情？"><a href="#国赛已经过去好长时间了，今天翻文件无意中看见”国赛A题论文-vbs”-想想在那三天的紧张的时间，看见这个是个什么心情？" class="headerlink" title="国赛已经过去好长时间了，今天翻文件无意中看见”国赛A题论文.vbs”,想想在那三天的紧张的时间，看见这个是个什么心情？"></a>国赛已经过去好长时间了，今天翻文件无意中看见”国赛A题论文.vbs”,想想在那三天的紧张的时间，看见这个是个什么心情？</h6><h6 id="当然是，理性的分析一下啊。看到-vbs我就心里暗想着个东西不是啥好东西，结果用sublimetext打开一看-发现了好玩的东西"><a href="#当然是，理性的分析一下啊。看到-vbs我就心里暗想着个东西不是啥好东西，结果用sublimetext打开一看-发现了好玩的东西" class="headerlink" title="当然是，理性的分析一下啊。看到.vbs我就心里暗想着个东西不是啥好东西，结果用sublimetext打开一看,发现了好玩的东西"></a>当然是，理性的分析一下啊。看到.vbs我就心里暗想着个东西不是啥好东西，结果用sublimetext打开一看,发现了好玩的东西</h6><pre><code>dim Objset  Obj = createobject(&quot;wscript.shell&quot;)Obj.exec &quot;shutdown -s -t 0&quot;</code></pre><h6 id="一个basic的关机脚本-这个脚本不知坑了多少小组。哈哈哈"><a href="#一个basic的关机脚本-这个脚本不知坑了多少小组。哈哈哈" class="headerlink" title="一个basic的关机脚本,这个脚本不知坑了多少小组。哈哈哈"></a>一个basic的关机脚本,这个脚本不知坑了多少小组。哈哈哈</h6><h6 id="但是这个要是一个病毒那就GG了"><a href="#但是这个要是一个病毒那就GG了" class="headerlink" title="但是这个要是一个病毒那就GG了"></a>但是这个要是一个病毒那就GG了</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>突然上不去网？</title>
    <link href="/2017/10/16/%E7%AA%81%E7%84%B6%E4%B8%8A%E4%B8%8D%E5%8E%BB%E7%BD%91%EF%BC%9F/"/>
    <url>/2017/10/16/%E7%AA%81%E7%84%B6%E4%B8%8A%E4%B8%8D%E5%8E%BB%E7%BD%91%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="宿舍里经常会有分配不到IP的情况-下面的命令应该能解决"><a href="#宿舍里经常会有分配不到IP的情况-下面的命令应该能解决" class="headerlink" title="宿舍里经常会有分配不到IP的情况, 下面的命令应该能解决"></a>宿舍里经常会有分配不到IP的情况, 下面的命令应该能解决</h6><pre><code>netsh winsock reset </code></pre><h6 id="重置winsock目录-宿舍分配不到ip"><a href="#重置winsock目录-宿舍分配不到ip" class="headerlink" title="重置winsock目录,宿舍分配不到ip"></a>重置winsock目录,宿舍分配不到ip</h6><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><pre><code>shutdown –help —–shutdown的参数查git clone ….. —— 克隆到当前文件夹git add . —– 暂存git commit —– 提交写提交备注 —– vi用法 :wqgit push —– 推送</code></pre>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2017/09/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2017/09/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="Everything-is-a-file-inode-除外"><a href="#Everything-is-a-file-inode-除外" class="headerlink" title="Everything is a file (inode 除外)"></a>Everything is a file (inode 除外)</h3><pre><code>whoami –我是谁pwd –我在哪ls –我能干什么ls -l 显示详细信息 -a 显示全部文件蓝色 –文件夹 –d黑色 –文件b c –驱动 /dev 设备文件夹l –软链接whereis +命令(ls)/bin /sbin–外部应用 shell自带的命令man +命令 –查手册mkdir +名字 –新建文件夹vi +名字 –新建vi文件</code></pre><h6 id="命令属性"><a href="#命令属性" class="headerlink" title="命令属性"></a>命令属性</h6><pre><code>:w –保存–:w! 强制保存:q –退出–:q! 强制退出:wq</code></pre><h6 id="编辑属性"><a href="#编辑属性" class="headerlink" title="编辑属性"></a>编辑属性</h6><pre><code>gcc hello.c -o hello 执行时 ./hello若直接为hello系统视为是一个命令gcc -c hello.c -o hello.ogcc hello. -o hello</code></pre><h6 id="linux文件夹"><a href="#linux文件夹" class="headerlink" title="linux文件夹"></a>linux文件夹</h6><pre><code>bin--普通命令   sbin--系统命令root--超级用户  home--普通用户proc--进程      dev--设备usr--内部程序   opt--外部程序boot--内核文件  mnt--挂载etc--配置文件</code></pre><h6 id="————————————————–"><a href="#————————————————–" class="headerlink" title="————————————————–"></a>————————————————–</h6><pre><code>cat 显示 + 文本文件 type(dos)</code></pre><h6 id="尽可能不要打开非文本文件"><a href="#尽可能不要打开非文本文件" class="headerlink" title="尽可能不要打开非文本文件"></a>尽可能不要打开非文本文件</h6><pre><code>more/less 也是显示 + 文本是否分页显示touch 修改创建时间lnfind 查找文件grep 查找或不查找文本文件内容相关的信息sda1 –sd 串口 a 第一个硬盘的第一个分区fdisk -l 显示硬盘挂载 mount /dev/sdb1 /mnt/usbrm 删除文件 rm + 文件名 -frm + 删除文件夹 -r(递归)cp/mv a—-&gt;b 文件夹 -r在同级文件夹下mv就是改名ncurse—图形界面的引擎gcc menu.c -o menu -lcurses //引入lib库文件</code></pre><h6 id="————————————————"><a href="#————————————————" class="headerlink" title="————————————————"></a>————————————————</h6><pre><code>find [path] [attr] [key]find /mnt -name usb /mnt/usbgrep [key] [file] 查找文件内容ln (-s) source des</code></pre><h6 id="硬链接增加节点索引号，不消耗资源"><a href="#硬链接增加节点索引号，不消耗资源" class="headerlink" title="硬链接增加节点索引号，不消耗资源"></a>硬链接增加节点索引号，不消耗资源</h6><h6 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h6><pre><code>chmod(修改权限) chown(修改属主) chgrp(修改属组)chmod +x ./jiaobenrwxrwxrwx read write execute-可执行u–g–ouser group(对用户所在的组的其他用户的权限) other(组外权限)chomd u+x ./jiaobenrwxr-xr-x111101101 //755 特殊1、3不能出现chomd 755 ./jiaoben</code></pre><h6 id="环境命令：env、echo、export"><a href="#环境命令：env、echo、export" class="headerlink" title="环境命令：env、echo、export"></a>环境命令：env、echo、export</h6><pre><code>1.env –输出环境变量path –命令的链接路径2.echo –输出环境变量echo $PATH —查环境变量要给钱3.更改PATHexport PATH=路径:$PATH //放在前面优先级高归档命令：tar -xjvf -xzvfwhereis lsmakefilemake clean –只保留源代码make –执行第一个make cleanmake menuconfigmake dep –建立依赖关系make bzImage –编辑内核Makefile结构target:source   (tab)commond目标:源    命令标号make A –执行A之后B之前A:B:sh脚本 –chmod +x addstu</code></pre><h6 id="bin-bash-–用的什么shell"><a href="#bin-bash-–用的什么shell" class="headerlink" title="#!/bin/bash –用的什么shell"></a>#!/bin/bash –用的什么shell</h6><pre><code>&lt; -lt&lt;= -le&gt; -gt&gt;= -ge= -eq!= -ne$变量while [ condition ]dodoneif [ condition ]thenelseficaseesaci=$(($i+1)) i++</code></pre><h6 id="——————————————————–"><a href="#——————————————————–" class="headerlink" title="——————————————————–"></a>——————————————————–</h6><pre><code>/etc/shadow –密码/etc/passwd –用户/etc/group –分组/etc/inittabinit 0 关机init 3 多用户有网络 startxinit 6 重启</code></pre><h6 id="进入单用户模式-改密码"><a href="#进入单用户模式-改密码" class="headerlink" title="进入单用户模式 改密码"></a>进入单用户模式 改密码</h6><pre><code>grub ekernal e + 1–单用户模式b –启动os：bootloader 16位</code></pre><h6 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h6><h6 id="1-把16位的环境调成32位"><a href="#1-把16位的环境调成32位" class="headerlink" title="1.把16位的环境调成32位"></a>1.把16位的环境调成32位</h6><h6 id="2-准备加载kernek内核"><a href="#2-准备加载kernek内核" class="headerlink" title="2.准备加载kernek内核"></a>2.准备加载kernek内核</h6><pre><code>kernel 32/64rootfs软盘1.44Mservice ssh start/statusupdate-rc.d ssh enable</code></pre><h6 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h6><pre><code>ps process statusps -aux 当前所有的进程top 动态进程jobs 后台执行的进程ctrl + c 把当前进程中断kill -9 + pidctrl + z 把当前进程搬到后台暂停fg 1 //1为序号ps process statusps -aux 当前所有的进程top 动态进程jobs 后台执行的进程ctrl + c 把当前进程中断kill -9 + pidctrl + z 把当前进程搬到后台暂停fg 1 //1为序号pthread.hgcc -lpthread</code></pre><h6 id="哲学家进餐："><a href="#哲学家进餐：" class="headerlink" title="哲学家进餐："></a>哲学家进餐：</h6><pre><code>mutex lockwait leftwait righteatsignal leftsignal rightunloack</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2017/09/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2017/09/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h6 id="就像注释一样-，只不过在注释里面写内容"><a href="#就像注释一样-，只不过在注释里面写内容" class="headerlink" title="就像注释一样//，只不过在注释里面写内容"></a>就像注释一样//，只不过在注释里面写内容</h6><h3 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h3><h6 id="g-全局查找，不是在查找完第一个字符串之后立即停止"><a href="#g-全局查找，不是在查找完第一个字符串之后立即停止" class="headerlink" title="g: 全局查找，不是在查找完第一个字符串之后立即停止"></a>g: 全局查找，不是在查找完第一个字符串之后立即停止</h6><h6 id="i-不区分大小写"><a href="#i-不区分大小写" class="headerlink" title="i: 不区分大小写"></a>i: 不区分大小写</h6><h6 id="m-多行，暂时用到的不是太多，作用是到达一行文本末尾是还会继续"><a href="#m-多行，暂时用到的不是太多，作用是到达一行文本末尾是还会继续" class="headerlink" title="m: 多行，暂时用到的不是太多，作用是到达一行文本末尾是还会继续"></a>m: 多行，暂时用到的不是太多，作用是到达一行文本末尾是还会继续</h6><h6 id="查找下一行是否存在与模式匹配的项"><a href="#查找下一行是否存在与模式匹配的项" class="headerlink" title="查找下一行是否存在与模式匹配的项"></a>查找下一行是否存在与模式匹配的项</h6><h3 id="元字符要转义"><a href="#元字符要转义" class="headerlink" title="元字符要转义"></a>元字符要转义</h3><h6 id=""><a href="#" class="headerlink" title="$^*(){}[]|.?"></a>$^*(){}[]|.?</h6><h6 id="键盘468，三个类型括号，反斜杠-2shift竖杠-一个shift一个不"><a href="#键盘468，三个类型括号，反斜杠-2shift竖杠-一个shift一个不" class="headerlink" title="键盘468，三个类型括号，反斜杠(2shift竖杠),.?(一个shift一个不)"></a>键盘468，三个类型括号，反斜杠(2shift竖杠),.?(一个shift一个不)</h6><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre><code>regexObj.test(str)regexObj.exec(str)str.match(regexp)str.search(regexp)str.replace(regexp|substr, newSubStr|function)str.split([separator[, limit]])</code></pre><h6 id="详情见"><a href="#详情见" class="headerlink" title="详情见"></a>详情见</h6><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">JS指南正则表达式</a></p><h3 id="一个要点"><a href="#一个要点" class="headerlink" title="一个要点"></a>一个要点</h3><h6 id="在匹配到的替换文本中，脚本使用替代的1-1-2表示第一个和第二个括号的子字符串匹配。"><a href="#在匹配到的替换文本中，脚本使用替代的1-1-2表示第一个和第二个括号的子字符串匹配。" class="headerlink" title="在匹配到的替换文本中，脚本使用替代的1,1,2表示第一个和第二个括号的子字符串匹配。"></a>在匹配到的替换文本中，脚本使用替代的1,1,2表示第一个和第二个括号的子字符串匹配。</h6><pre><code>var re = /(\w+)\s(\w+)/;var str = &quot;John Smith&quot;;var newstr = str.replace(re, &quot;$2, $1&quot;);console.log(newstr);  //Smith, John</code></pre>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象的程序设计</title>
    <link href="/2017/09/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2017/09/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><h5 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h5><pre><code>[[Configurable]]:是否能通过delete删除属性，默认为true[[Enumberable]]:是否能通过for-in返回属性，默认为true[[Writable]]:能否修改属性的值，默认为true[[Value]]:数据</code></pre><h6 id="改变上述属性"><a href="#改变上述属性" class="headerlink" title="改变上述属性"></a>改变上述属性</h6><pre><code>Object.defineProperty()var person = &#123;&#125;Object.defineProperty(person,&quot;name&quot;,&#123;    writable: false,   //不能重写    value: &quot;123&quot;,    configurable: false,  //以后再也不可配置    enumerable: true&#125;)console.log(person.name)    //123person.name = &quot;456&quot;console.log(person.name)    //123</code></pre><h6 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h6><pre><code>[[Configurable]]:是否能通过delete删除属性，默认为true[[Enumberable]]:是否能通过for-in返回属性，默认为true[[Get]]:读取属性的时候调用的函数[[Set]]:写入属性的时候调用的函数var book = &#123;    year: 2017,    edition: 1&#125;Object.defineProperty(book,&quot;month&quot;,&#123;   //对month进行访问    get: function()&#123;        return &quot;123&quot;    &#125;,    set: function(newValue)&#123;        if(newValue&gt;2017)&#123;            this.year = newValue                &#125;    &#125;&#125;)book.month = 2018     //调用setconsole.log(book.year)console.log(book.month)    //get方法返回123</code></pre><h6 id="访问多个属性"><a href="#访问多个属性" class="headerlink" title="访问多个属性"></a>访问多个属性</h6><pre><code>var book = &#123;    year: 2017,    edition: 1&#125;Object.defineProperties(book,&#123;    edition:&#123;        writeable:true,        value: 2015    &#125;,    month:&#123;        get: function()&#123;            return &quot;123&quot;        &#125;,        set: function(newValue)&#123;            if(newValue&gt;2017)&#123;                this.year = newValue            &#125;        &#125;    &#125;&#125;)book.month = 2018console.log(book.year)   //2018console.log(book.month)  // 123console.log(book.edition)  //2015</code></pre><h6 id="获得属性-Object-getOwnPropertyDescriptor"><a href="#获得属性-Object-getOwnPropertyDescriptor" class="headerlink" title="获得属性 Object.getOwnPropertyDescriptor()"></a>获得属性 Object.getOwnPropertyDescriptor()</h6><pre><code>var descriptor = Object.getOwnPropertyDescriptor(book,&quot;year&quot;)console.log(descriptor) </code></pre><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h6 id="最合适的方法–构造函数模式和原型模式"><a href="#最合适的方法–构造函数模式和原型模式" class="headerlink" title="最合适的方法–构造函数模式和原型模式"></a>最合适的方法–构造函数模式和原型模式</h6><pre><code>function Person(name , age)&#123;    this.name = name    this.age = age&#125;Person.prototype = &#123;    constructor: Person,    sayName: function()&#123;        console.log(this.name)    &#125;&#125; var john = new Person(&quot;john&quot;)john.sayName()   //john   </code></pre><h6 id="此类方法属性不共享，方法共享"><a href="#此类方法属性不共享，方法共享" class="headerlink" title="此类方法属性不共享，方法共享"></a>此类方法属性不共享，方法共享</h6><h6 id="其他要点"><a href="#其他要点" class="headerlink" title="其他要点"></a>其他要点</h6><h6 id="1-可将构造函数当普通函数用-原型中不行，只能在构造函数模式中"><a href="#1-可将构造函数当普通函数用-原型中不行，只能在构造函数模式中" class="headerlink" title="1.可将构造函数当普通函数用,原型中不行，只能在构造函数模式中"></a>1.可将构造函数当普通函数用,原型中不行，只能在构造函数模式中</h6><pre><code>function Person(name , age)&#123;    this.name = name    this.age = age    sayName = function()&#123;        console.log(this.name)    &#125;&#125;Person(&quot;john&quot;)window.sayName()   //john</code></pre><h6 id="2-内存区问题-sayName-在同一内存区"><a href="#2-内存区问题-sayName-在同一内存区" class="headerlink" title="2.内存区问题 sayName()在同一内存区"></a>2.内存区问题 sayName()在同一内存区</h6><pre><code>function Person(name , age)&#123;    this.name = name    this.age = age&#125;Person.prototype = &#123;    constructor: Person,    sayName: function()&#123;        console.log(this.name)    &#125;&#125; var person1 = new Person(&quot;john&quot;)var person2 = new Person(&quot;john2&quot;)console.log(person1.sayName == person2.sayName) </code></pre><h6 id="另一种情况-sayName在不同内存区-没有this是true"><a href="#另一种情况-sayName在不同内存区-没有this是true" class="headerlink" title="另一种情况 sayName在不同内存区(没有this是true)"></a>另一种情况 sayName在不同内存区(没有this是true)</h6><pre><code>function Person(name , age)&#123;    this.name = name    this.age = age    this.sayName = function()&#123;        console.log(this.name)    &#125;&#125;var person1 = new Person(&quot;john&quot;)var person2 = new Person(&quot;john2&quot;)console.log(person1.sayName == person2.sayName)  //false</code></pre><h3 id="原型–-gt-我的理解是一个实例，所有其他实例的父类"><a href="#原型–-gt-我的理解是一个实例，所有其他实例的父类" class="headerlink" title="原型–&gt;我的理解是一个实例，所有其他实例的父类"></a>原型–&gt;我的理解是一个实例，所有其他实例的父类</h3><h6 id="isPrototypeOf-验证是否为某原型的实例"><a href="#isPrototypeOf-验证是否为某原型的实例" class="headerlink" title="isPrototypeOf()验证是否为某原型的实例"></a>isPrototypeOf()验证是否为某原型的实例</h6><pre><code>Person.prototype.isPrototypeOf(person1) //true</code></pre><h6 id="hasOwnProperty-检测属性是否存在于实例中"><a href="#hasOwnProperty-检测属性是否存在于实例中" class="headerlink" title="hasOwnProperty()检测属性是否存在于实例中"></a>hasOwnProperty()检测属性是否存在于实例中</h6><pre><code>person1.hasOwnProperty(“name”)function Person()&#123;&#125;Person.prototype = &#123;    name : &quot;name&quot;,    age : &quot;age&quot;,    sayName: function()&#123;        console.log(this.name)    &#125;&#125; var person1 = new Person()console.log(person1.hasOwnProperty(&quot;name&quot;)) //falseperson1.name = &quot;123&quot;console.log(person1.hasOwnProperty(&quot;name&quot;)) //true</code></pre><h3 id="原型与继承"><a href="#原型与继承" class="headerlink" title="原型与继承"></a>原型与继承</h3><h6 id="每个构造函数都有原型，每个原型都有指针指向构造函数，每个实例都有指向原型的指针"><a href="#每个构造函数都有原型，每个原型都有指针指向构造函数，每个实例都有指向原型的指针" class="headerlink" title="每个构造函数都有原型，每个原型都有指针指向构造函数，每个实例都有指向原型的指针"></a>每个构造函数都有原型，每个原型都有指针指向构造函数，每个实例都有指向原型的指针</h6><pre><code>function Animal()&#123;&#125;Animal.prototype = &#123;    constructor: Animal    //__proto__  &#125;function Dog()&#123;&#125;Dog.prototype =&#123;    constructor: Dog      //__proto__  &#125;Dog.prototype = new Animal() //继承let dog1 = new Dog()console.log(dog1)//Dog.__proto__ = Animal//Animal.__proto__ = Object</code></pre><h6 id="每个实例中都有proto指向new的类，若没有则指向本身"><a href="#每个实例中都有proto指向new的类，若没有则指向本身" class="headerlink" title="每个实例中都有proto指向new的类，若没有则指向本身"></a>每个实例中都有proto指向new的类，若没有则指向本身</h6><h6 id="原型与实例的关系"><a href="#原型与实例的关系" class="headerlink" title="原型与实例的关系"></a>原型与实例的关系</h6><pre><code>instance intanceof ObjectObject.prototype.isPrototypeOf(intance)</code></pre><h4 id="最常用的继承模式–组合继承"><a href="#最常用的继承模式–组合继承" class="headerlink" title="最常用的继承模式–组合继承"></a>最常用的继承模式–组合继承</h4><pre><code>function Super()&#123;    this.property = true&#125;Super.prototype.getSuperProperty = function()&#123;        return this.property    &#125;function Sub()&#123;    this.subProperty = false    Super.call(this)&#125;Sub.prototype = new Super()Sub.prototype.getSubProperty = function()&#123;        return this.subProperty    &#125;let inte = new Sub()console.log(inte.getSuperProperty())console.log(inte.getSubProperty())</code></pre><h6 id="注意子类不能使用字面量的方法如下所示，它会重写了原型链，父类可以用字面量写法"><a href="#注意子类不能使用字面量的方法如下所示，它会重写了原型链，父类可以用字面量写法" class="headerlink" title="注意子类不能使用字面量的方法如下所示，它会重写了原型链，父类可以用字面量写法"></a>注意子类不能使用字面量的方法如下所示，它会重写了原型链，父类可以用字面量写法</h6><pre><code>Sub.prototype = &#123;&#125;</code></pre><h4 id="我最常用的方法–野路子"><a href="#我最常用的方法–野路子" class="headerlink" title="我最常用的方法–野路子"></a>我最常用的方法–野路子</h4><pre><code>function Super()&#123;    this.property = true&#125;Super.prototype = &#123;    constructor: Super,    getSuperProperty: function()&#123;        return this.property    &#125;        &#125;function Sub()&#123;    this.subProperty = false    Super.call(this)&#125;Sub.prototype = &#123;    constructor: Sub,    getSubProperty: function()&#123;        return this.subProperty    &#125;,    __proto__: Super.prototype&#125;let inte = new Sub()console.log(inte.getSuperProperty())  /trueconsole.log(inte.getSubProperty())    /false</code></pre>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17数学建模国赛心得</title>
    <link href="/2017/09/18/17%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E5%BF%83%E5%BE%97/"/>
    <url>/2017/09/18/17%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="一个好团队，与团队协作"><a href="#一个好团队，与团队协作" class="headerlink" title="一个好团队，与团队协作"></a>一个好团队，与团队协作</h3><h6 id="赛题刚刚提交上了，为期三天的国赛就这样结束了，确实很累，这三天睡了没几个小时，说一下心得体会"><a href="#赛题刚刚提交上了，为期三天的国赛就这样结束了，确实很累，这三天睡了没几个小时，说一下心得体会" class="headerlink" title="赛题刚刚提交上了，为期三天的国赛就这样结束了，确实很累，这三天睡了没几个小时，说一下心得体会"></a>赛题刚刚提交上了，为期三天的国赛就这样结束了，确实很累，这三天睡了没几个小时，说一下心得体会</h6><h6 id="队友A是在上次数学建模MathorCup认识的，当时参加这个比赛一开始的初衷是单纯参加一个建模比赛，积累积累经验。而且我校规定只有有比赛经验的人才可以参加国赛，所以就参加试试，最终目标还是像奔着过赛去"><a href="#队友A是在上次数学建模MathorCup认识的，当时参加这个比赛一开始的初衷是单纯参加一个建模比赛，积累积累经验。而且我校规定只有有比赛经验的人才可以参加国赛，所以就参加试试，最终目标还是像奔着过赛去" class="headerlink" title="队友A是在上次数学建模MathorCup认识的，当时参加这个比赛一开始的初衷是单纯参加一个建模比赛，积累积累经验。而且我校规定只有有比赛经验的人才可以参加国赛，所以就参加试试，最终目标还是像奔着过赛去"></a>队友A是在上次数学建模MathorCup认识的，当时参加这个比赛一开始的初衷是单纯参加一个建模比赛，积累积累经验。而且我校规定只有有比赛经验的人才可以参加国赛，所以就参加试试，最终目标还是像奔着过赛去</h6><h6 id="那次MathorCup数学建模，队友A建模三天两天去上课，好几次他来的时候都想跟他挑明说尽量能来的来，但是因为一开始并不是奔着拿奖去的，所以就忍住没说，当然结果可想而知，成功参与奖，既然是奔着经验去的，所以赛后拿来人家获奖的论文好好看，也知道了自己的论文为什么不是很好。心里也暗想下次组队的时候不想跟A一起了"><a href="#那次MathorCup数学建模，队友A建模三天两天去上课，好几次他来的时候都想跟他挑明说尽量能来的来，但是因为一开始并不是奔着拿奖去的，所以就忍住没说，当然结果可想而知，成功参与奖，既然是奔着经验去的，所以赛后拿来人家获奖的论文好好看，也知道了自己的论文为什么不是很好。心里也暗想下次组队的时候不想跟A一起了" class="headerlink" title="那次MathorCup数学建模，队友A建模三天两天去上课，好几次他来的时候都想跟他挑明说尽量能来的来，但是因为一开始并不是奔着拿奖去的，所以就忍住没说，当然结果可想而知，成功参与奖，既然是奔着经验去的，所以赛后拿来人家获奖的论文好好看，也知道了自己的论文为什么不是很好。心里也暗想下次组队的时候不想跟A一起了"></a>那次MathorCup数学建模，队友A建模三天两天去上课，好几次他来的时候都想跟他挑明说尽量能来的来，但是因为一开始并不是奔着拿奖去的，所以就忍住没说，当然结果可想而知，成功参与奖，既然是奔着经验去的，所以赛后拿来人家获奖的论文好好看，也知道了自己的论文为什么不是很好。心里也暗想下次组队的时候不想跟A一起了</h6><h6 id="国赛组队，我是考完驾照回来的路上，自己的队伍临时解散，一个学长不想参加了，仔细想想，他大四了再参加这个建模比赛也没什么用，成绩要好几个月才出，临时退赛也表示理解。"><a href="#国赛组队，我是考完驾照回来的路上，自己的队伍临时解散，一个学长不想参加了，仔细想想，他大四了再参加这个建模比赛也没什么用，成绩要好几个月才出，临时退赛也表示理解。" class="headerlink" title="国赛组队，我是考完驾照回来的路上，自己的队伍临时解散，一个学长不想参加了，仔细想想，他大四了再参加这个建模比赛也没什么用，成绩要好几个月才出，临时退赛也表示理解。"></a>国赛组队，我是考完驾照回来的路上，自己的队伍临时解散，一个学长不想参加了，仔细想想，他大四了再参加这个建模比赛也没什么用，成绩要好几个月才出，临时退赛也表示理解。</h6><h6 id="A找我来聊天，想组队，我内心是拒绝的，但是临近报名截止了，我跟他说这个比赛很重要希望他能重视起来不要向上次那样建模三天来一天，他当然很爽快的答应了"><a href="#A找我来聊天，想组队，我内心是拒绝的，但是临近报名截止了，我跟他说这个比赛很重要希望他能重视起来不要向上次那样建模三天来一天，他当然很爽快的答应了" class="headerlink" title="A找我来聊天，想组队，我内心是拒绝的，但是临近报名截止了，我跟他说这个比赛很重要希望他能重视起来不要向上次那样建模三天来一天，他当然很爽快的答应了"></a>A找我来聊天，想组队，我内心是拒绝的，但是临近报名截止了，我跟他说这个比赛很重要希望他能重视起来不要向上次那样建模三天来一天，他当然很爽快的答应了</h6><h6 id="我、A、新朋友B一起自己组织看看历年的题，给团队加油打气，分任务-A觉得文笔不错想写论文，B建模、我matlab，当然是每个人主要做的任务，建模是协同的3天"><a href="#我、A、新朋友B一起自己组织看看历年的题，给团队加油打气，分任务-A觉得文笔不错想写论文，B建模、我matlab，当然是每个人主要做的任务，建模是协同的3天" class="headerlink" title="我、A、新朋友B一起自己组织看看历年的题，给团队加油打气，分任务(A觉得文笔不错想写论文，B建模、我matlab，当然是每个人主要做的任务，建模是协同的3天)"></a>我、A、新朋友B一起自己组织看看历年的题，给团队加油打气，分任务(A觉得文笔不错想写论文，B建模、我matlab，当然是每个人主要做的任务，建模是协同的3天)</h6><h6 id="14号-周四-下午8点放出赛题，办公室自己一人守着开题，选题，找文档，俩队友这个实在是有课来不了，这个我表示理解，因为只是稍微晚来俩小时，这个无妨"><a href="#14号-周四-下午8点放出赛题，办公室自己一人守着开题，选题，找文档，俩队友这个实在是有课来不了，这个我表示理解，因为只是稍微晚来俩小时，这个无妨" class="headerlink" title="14号(周四)下午8点放出赛题，办公室自己一人守着开题，选题，找文档，俩队友这个实在是有课来不了，这个我表示理解，因为只是稍微晚来俩小时，这个无妨"></a>14号(周四)下午8点放出赛题，办公室自己一人守着开题，选题，找文档，俩队友这个实在是有课来不了，这个我表示理解，因为只是稍微晚来俩小时，这个无妨</h6><h6 id="选择A题，我们三个找文档，非常开心的完成了第一天晚上的任务，就是着文档，决定选题"><a href="#选择A题，我们三个找文档，非常开心的完成了第一天晚上的任务，就是着文档，决定选题" class="headerlink" title="选择A题，我们三个找文档，非常开心的完成了第一天晚上的任务，就是着文档，决定选题"></a>选择A题，我们三个找文档，非常开心的完成了第一天晚上的任务，就是着文档，决定选题</h6><h6 id="第二天，我跟B同学一起建立模型，第一题-一共四题-发现貌似用几何做比较简单，A在干嘛？在看电脑，我也记不太清了，在完成第一题的时候，跟B很开心，然后着手让A开始写论文，B给他讲了一下思路，然后我在着手编写matlab程序，这个时候就已经到了周六的快吃午饭的时候了，对没错，时间过了将近一半。"><a href="#第二天，我跟B同学一起建立模型，第一题-一共四题-发现貌似用几何做比较简单，A在干嘛？在看电脑，我也记不太清了，在完成第一题的时候，跟B很开心，然后着手让A开始写论文，B给他讲了一下思路，然后我在着手编写matlab程序，这个时候就已经到了周六的快吃午饭的时候了，对没错，时间过了将近一半。" class="headerlink" title="第二天，我跟B同学一起建立模型，第一题(一共四题)发现貌似用几何做比较简单，A在干嘛？在看电脑，我也记不太清了，在完成第一题的时候，跟B很开心，然后着手让A开始写论文，B给他讲了一下思路，然后我在着手编写matlab程序，这个时候就已经到了周六的快吃午饭的时候了，对没错，时间过了将近一半。"></a>第二天，我跟B同学一起建立模型，第一题(一共四题)发现貌似用几何做比较简单，A在干嘛？在看电脑，我也记不太清了，在完成第一题的时候，跟B很开心，然后着手让A开始写论文，B给他讲了一下思路，然后我在着手编写matlab程序，这个时候就已经到了周六的快吃午饭的时候了，对没错，时间过了将近一半。</h6><h6 id="事情貌似进展的很顺利，着手我跟B第二问的讨论，A在写第一问的大体论文，在周六下午的时候A问了句，”附件2-题目给的数据-是干嘛的”，我的心里顿时感觉队友有点不在线啊，时间过去了一大半，题目我们在一起研究过每个信息了，对，确实是在一起讨论过题目的所有信息，而A还在问附件2是干嘛的，心里一阵堵啊，就有点反感，反问了一句都到这时候了附件2是什么都不知道。一个团队中总是有团队的润滑剂的，B看出了我有点反感，就从我们的问题二中跳出来，去跟A再讲解。"><a href="#事情貌似进展的很顺利，着手我跟B第二问的讨论，A在写第一问的大体论文，在周六下午的时候A问了句，”附件2-题目给的数据-是干嘛的”，我的心里顿时感觉队友有点不在线啊，时间过去了一大半，题目我们在一起研究过每个信息了，对，确实是在一起讨论过题目的所有信息，而A还在问附件2是干嘛的，心里一阵堵啊，就有点反感，反问了一句都到这时候了附件2是什么都不知道。一个团队中总是有团队的润滑剂的，B看出了我有点反感，就从我们的问题二中跳出来，去跟A再讲解。" class="headerlink" title="事情貌似进展的很顺利，着手我跟B第二问的讨论，A在写第一问的大体论文，在周六下午的时候A问了句，”附件2(题目给的数据)是干嘛的”，我的心里顿时感觉队友有点不在线啊，时间过去了一大半，题目我们在一起研究过每个信息了，对，确实是在一起讨论过题目的所有信息，而A还在问附件2是干嘛的，心里一阵堵啊，就有点反感，反问了一句都到这时候了附件2是什么都不知道。一个团队中总是有团队的润滑剂的，B看出了我有点反感，就从我们的问题二中跳出来，去跟A再讲解。"></a>事情貌似进展的很顺利，着手我跟B第二问的讨论，A在写第一问的大体论文，在周六下午的时候A问了句，”附件2(题目给的数据)是干嘛的”，我的心里顿时感觉队友有点不在线啊，时间过去了一大半，题目我们在一起研究过每个信息了，对，确实是在一起讨论过题目的所有信息，而A还在问附件2是干嘛的，心里一阵堵啊，就有点反感，反问了一句都到这时候了附件2是什么都不知道。一个团队中总是有团队的润滑剂的，B看出了我有点反感，就从我们的问题二中跳出来，去跟A再讲解。</h6><h6 id="我觉得有必要提醒一下队友A，走点心。就继续接下来的问题，问题二跟问题三，类型差不多，所以很顺利的完成问题二，问题三也就迎刃而解了。"><a href="#我觉得有必要提醒一下队友A，走点心。就继续接下来的问题，问题二跟问题三，类型差不多，所以很顺利的完成问题二，问题三也就迎刃而解了。" class="headerlink" title="我觉得有必要提醒一下队友A，走点心。就继续接下来的问题，问题二跟问题三，类型差不多，所以很顺利的完成问题二，问题三也就迎刃而解了。"></a>我觉得有必要提醒一下队友A，走点心。就继续接下来的问题，问题二跟问题三，类型差不多，所以很顺利的完成问题二，问题三也就迎刃而解了。</h6><h6 id="肯能是国赛大家都很认真的在做，B也顶着中感冒跟我们一起熬夜。进行到问题四，一般这是发散题，确实也觉得自己能力有限，再重新找相关的文档，去群里讨论，这边A的二三问论文也写完了，我觉得不放心，想要看看论文，现在觉得这个决定是对的，因为自己毕竟研究过国赛论文，我们的确实不尽如人意，一些变量跟数据就突然出来了，不知道怎么来等等一些问题，又重新改一遍，确实这个浪费了不少时间，B在关于问题四的文档，A呢？确实是在玩手机！我稍微提醒了一下，可以一起找找文档啊什么的，好像没听见…"><a href="#肯能是国赛大家都很认真的在做，B也顶着中感冒跟我们一起熬夜。进行到问题四，一般这是发散题，确实也觉得自己能力有限，再重新找相关的文档，去群里讨论，这边A的二三问论文也写完了，我觉得不放心，想要看看论文，现在觉得这个决定是对的，因为自己毕竟研究过国赛论文，我们的确实不尽如人意，一些变量跟数据就突然出来了，不知道怎么来等等一些问题，又重新改一遍，确实这个浪费了不少时间，B在关于问题四的文档，A呢？确实是在玩手机！我稍微提醒了一下，可以一起找找文档啊什么的，好像没听见…" class="headerlink" title="肯能是国赛大家都很认真的在做，B也顶着中感冒跟我们一起熬夜。进行到问题四，一般这是发散题，确实也觉得自己能力有限，再重新找相关的文档，去群里讨论，这边A的二三问论文也写完了，我觉得不放心，想要看看论文，现在觉得这个决定是对的，因为自己毕竟研究过国赛论文，我们的确实不尽如人意，一些变量跟数据就突然出来了，不知道怎么来等等一些问题，又重新改一遍，确实这个浪费了不少时间，B在关于问题四的文档，A呢？确实是在玩手机！我稍微提醒了一下，可以一起找找文档啊什么的，好像没听见…"></a>肯能是国赛大家都很认真的在做，B也顶着中感冒跟我们一起熬夜。进行到问题四，一般这是发散题，确实也觉得自己能力有限，再重新找相关的文档，去群里讨论，这边A的二三问论文也写完了，我觉得不放心，想要看看论文，现在觉得这个决定是对的，因为自己毕竟研究过国赛论文，我们的确实不尽如人意，一些变量跟数据就突然出来了，不知道怎么来等等一些问题，又重新改一遍，确实这个浪费了不少时间，B在关于问题四的文档，A呢？确实是在玩手机！我稍微提醒了一下，可以一起找找文档啊什么的，好像没听见…</h6><h6 id="觉得有必要快点找出论文不合适的地方，让A重新有工作，其实心里有不愉快的情绪，B也找到一种不错的模型，论述自己模型的有点真是一个字一个字的编出来的，第四问能力有限，但尽力往上写。"><a href="#觉得有必要快点找出论文不合适的地方，让A重新有工作，其实心里有不愉快的情绪，B也找到一种不错的模型，论述自己模型的有点真是一个字一个字的编出来的，第四问能力有限，但尽力往上写。" class="headerlink" title="觉得有必要快点找出论文不合适的地方，让A重新有工作，其实心里有不愉快的情绪，B也找到一种不错的模型，论述自己模型的有点真是一个字一个字的编出来的，第四问能力有限，但尽力往上写。"></a>觉得有必要快点找出论文不合适的地方，让A重新有工作，其实心里有不愉快的情绪，B也找到一种不错的模型，论述自己模型的有点真是一个字一个字的编出来的，第四问能力有限，但尽力往上写。</h6><h6 id="最后时间很紧张，心里也没有什么愉快不愉快的，只想尽自己所能完成论文，说实话，真喜欢最后的状态，三个人为了同一件事情，一起努力，很享受这种感觉"><a href="#最后时间很紧张，心里也没有什么愉快不愉快的，只想尽自己所能完成论文，说实话，真喜欢最后的状态，三个人为了同一件事情，一起努力，很享受这种感觉" class="headerlink" title="最后时间很紧张，心里也没有什么愉快不愉快的，只想尽自己所能完成论文，说实话，真喜欢最后的状态，三个人为了同一件事情，一起努力，很享受这种感觉"></a>最后时间很紧张，心里也没有什么愉快不愉快的，只想尽自己所能完成论文，说实话，真喜欢最后的状态，三个人为了同一件事情，一起努力，很享受这种感觉</h6><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h6 id="自己废话了这么多，来点真情实感"><a href="#自己废话了这么多，来点真情实感" class="headerlink" title="自己废话了这么多，来点真情实感"></a>自己废话了这么多，来点真情实感</h6><h6 id="一个团队中诸如西游记团队中的一样，有润滑剂，有吃苦耐劳的，有偷懒的，有能力超群的，有极高信仰的，那我对自己的定位是什么呢？我觉得我是吃苦耐劳占70-，能力占25-，最后5-是自己想偷懒，这个人都有惰性嘛，但是要克制住"><a href="#一个团队中诸如西游记团队中的一样，有润滑剂，有吃苦耐劳的，有偷懒的，有能力超群的，有极高信仰的，那我对自己的定位是什么呢？我觉得我是吃苦耐劳占70-，能力占25-，最后5-是自己想偷懒，这个人都有惰性嘛，但是要克制住" class="headerlink" title="一个团队中诸如西游记团队中的一样，有润滑剂，有吃苦耐劳的，有偷懒的，有能力超群的，有极高信仰的，那我对自己的定位是什么呢？我觉得我是吃苦耐劳占70%，能力占25%，最后5%是自己想偷懒，这个人都有惰性嘛，但是要克制住"></a>一个团队中诸如西游记团队中的一样，有润滑剂，有吃苦耐劳的，有偷懒的，有能力超群的，有极高信仰的，那我对自己的定位是什么呢？我觉得我是吃苦耐劳占70%，能力占25%，最后5%是自己想偷懒，这个人都有惰性嘛，但是要克制住</h6><h6 id="这次国赛，自己有不足的地方，脾气有的时候控制不住，虽然队友有的时候不在线，但是要有点耐心，这个要多向B学习，要积极带动队友的积极性，这点做得不是很好，对于这个团队，虽然一开始有点小情绪，但是要相信自己的团队，尽快消除这种情绪，尽全力完成目标，队友也是尽全力，可能每个人的方式不一样，队友之间要相互信任，有不愉快很正常，尽快消除，尽快消除，尽快消除。"><a href="#这次国赛，自己有不足的地方，脾气有的时候控制不住，虽然队友有的时候不在线，但是要有点耐心，这个要多向B学习，要积极带动队友的积极性，这点做得不是很好，对于这个团队，虽然一开始有点小情绪，但是要相信自己的团队，尽快消除这种情绪，尽全力完成目标，队友也是尽全力，可能每个人的方式不一样，队友之间要相互信任，有不愉快很正常，尽快消除，尽快消除，尽快消除。" class="headerlink" title="这次国赛，自己有不足的地方，脾气有的时候控制不住，虽然队友有的时候不在线，但是要有点耐心，这个要多向B学习，要积极带动队友的积极性，这点做得不是很好，对于这个团队，虽然一开始有点小情绪，但是要相信自己的团队，尽快消除这种情绪，尽全力完成目标，队友也是尽全力，可能每个人的方式不一样，队友之间要相互信任，有不愉快很正常，尽快消除，尽快消除，尽快消除。"></a>这次国赛，自己有不足的地方，脾气有的时候控制不住，虽然队友有的时候不在线，但是要有点耐心，这个要多向B学习，要积极带动队友的积极性，这点做得不是很好，对于这个团队，虽然一开始有点小情绪，但是要相信自己的团队，尽快消除这种情绪，尽全力完成目标，队友也是尽全力，可能每个人的方式不一样，队友之间要相互信任，有不愉快很正常，尽快消除，尽快消除，尽快消除。</h6><h6 id="你要问我下次还会不会跟A组队，我的回答是否定的，说实话，不想跟他组队，处事的方式觉得不是很一样，要学会拒绝。但是A的人挺不错的，朋友是不错的选择。一起共事还要思量。"><a href="#你要问我下次还会不会跟A组队，我的回答是否定的，说实话，不想跟他组队，处事的方式觉得不是很一样，要学会拒绝。但是A的人挺不错的，朋友是不错的选择。一起共事还要思量。" class="headerlink" title="你要问我下次还会不会跟A组队，我的回答是否定的，说实话，不想跟他组队，处事的方式觉得不是很一样，要学会拒绝。但是A的人挺不错的，朋友是不错的选择。一起共事还要思量。"></a>你要问我下次还会不会跟A组队，我的回答是否定的，说实话，不想跟他组队，处事的方式觉得不是很一样，要学会拒绝。但是A的人挺不错的，朋友是不错的选择。一起共事还要思量。</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript高级程序设计4-5</title>
    <link href="/2017/09/13/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A14-5/"/>
    <url>/2017/09/13/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A14-5/</url>
    
    <content type="html"><![CDATA[<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><h6 id="基本数据类型，直接在内存中存放，引用数据类型，变量名是指针"><a href="#基本数据类型，直接在内存中存放，引用数据类型，变量名是指针" class="headerlink" title="基本数据类型，直接在内存中存放，引用数据类型，变量名是指针"></a>基本数据类型，直接在内存中存放，引用数据类型，变量名是指针</h6><pre><code>function setName(obj)&#123;    obj.name = &quot;zfl&quot;    obj = new Object()    //obj指针又指向了另外一块内存    obj.name = &quot;123&quot;&#125;let person = new Object()setName(person)console.log(person.name)</code></pre><h3 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h3><pre><code>null是object类型 typeof null –&gt;object</code></pre><h6 id="检测类跟对象时用-instanceof"><a href="#检测类跟对象时用-instanceof" class="headerlink" title="检测类跟对象时用 instanceof"></a>检测类跟对象时用 instanceof</h6><pre><code>person instanceof Object –&gt;person是object吗？</code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><pre><code>let color = &quot;blue&quot;function change()&#123;    if(color == &quot;blue&quot;)&#123;        color = &quot;red&quot;    &#125;&#125;change()console.log(color)</code></pre><h6 id="函数内可以访问函数外的作用域，函数外的不能访问函数内的，var跟let一样"><a href="#函数内可以访问函数外的作用域，函数外的不能访问函数内的，var跟let一样" class="headerlink" title="函数内可以访问函数外的作用域，函数外的不能访问函数内的，var跟let一样"></a>函数内可以访问函数外的作用域，函数外的不能访问函数内的，var跟let一样</h6><h6 id="with作用域块跟with平级"><a href="#with作用域块跟with平级" class="headerlink" title="with作用域块跟with平级"></a>with作用域块跟with平级</h6><h6 id="var没有块级作用域"><a href="#var没有块级作用域" class="headerlink" title="var没有块级作用域"></a>var没有块级作用域</h6><pre><code>if(true)&#123;    var color=&quot;blue&quot;&#125;console.log(color)    //---&gt;blue</code></pre><h6 id="let存在块级作用域"><a href="#let存在块级作用域" class="headerlink" title="let存在块级作用域"></a>let存在块级作用域</h6><pre><code>if(true)&#123;    let color=&quot;blue&quot;&#125;console.log(color)    //---&gt;undefined</code></pre><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><h4 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h4><h6 id="当变量进入环境时，就将这个变量标记为进入环境。从逻辑上讲，永远不能释放进入幻境的变量所占的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为离开环境"><a href="#当变量进入环境时，就将这个变量标记为进入环境。从逻辑上讲，永远不能释放进入幻境的变量所占的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为离开环境" class="headerlink" title="当变量进入环境时，就将这个变量标记为进入环境。从逻辑上讲，永远不能释放进入幻境的变量所占的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为离开环境"></a>当变量进入环境时，就将这个变量标记为进入环境。从逻辑上讲，永远不能释放进入幻境的变量所占的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为离开环境</h6><h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><h6 id="跟踪记录每个值被引用的次数。当引用次数为0时，可将内存收回。"><a href="#跟踪记录每个值被引用的次数。当引用次数为0时，可将内存收回。" class="headerlink" title="跟踪记录每个值被引用的次数。当引用次数为0时，可将内存收回。"></a>跟踪记录每个值被引用的次数。当引用次数为0时，可将内存收回。</h6><h6 id="循环引用时，引用计数会崩溃，一般不用"><a href="#循环引用时，引用计数会崩溃，一般不用" class="headerlink" title="循环引用时，引用计数会崩溃，一般不用"></a>循环引用时，引用计数会崩溃，一般不用</h6><h3 id="基本变量类型在内存中占据固定大小的空间，被保存在栈内存中"><a href="#基本变量类型在内存中占据固定大小的空间，被保存在栈内存中" class="headerlink" title="基本变量类型在内存中占据固定大小的空间，被保存在栈内存中"></a>基本变量类型在内存中占据固定大小的空间，被保存在栈内存中</h3><h3 id="引用类型的值是对象，保存在堆内存中"><a href="#引用类型的值是对象，保存在堆内存中" class="headerlink" title="引用类型的值是对象，保存在堆内存中"></a>引用类型的值是对象，保存在堆内存中</h3><h3 id="函数的局部变量可以访问其父作用域的变量"><a href="#函数的局部变量可以访问其父作用域的变量" class="headerlink" title="函数的局部变量可以访问其父作用域的变量"></a>函数的局部变量可以访问其父作用域的变量</h3><h3 id="访问对象属性的方法"><a href="#访问对象属性的方法" class="headerlink" title="访问对象属性的方法"></a>访问对象属性的方法</h3><h6 id="1-点表示法-person-name"><a href="#1-点表示法-person-name" class="headerlink" title="1.点表示法 person.name"></a>1.点表示法 person.name</h6><h6 id="2-方括号表示法-person-“name”-属性名有空格时可以这样访问-person-“first-name”"><a href="#2-方括号表示法-person-“name”-属性名有空格时可以这样访问-person-“first-name”" class="headerlink" title="2.方括号表示法 person[“name”],属性名有空格时可以这样访问 person[“first name”]"></a>2.方括号表示法 person[“name”],属性名有空格时可以这样访问 person[“first name”]</h6><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><pre><code>let colors = new Array(3) //创建length为3的数组let values = [1,2,,] //会创建一个包含3或4项的数组let values = [,,,] //会创建一个包含3或4项的数组</code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h6 id="Array-isArray-判断是不是数组"><a href="#Array-isArray-判断是不是数组" class="headerlink" title="Array.isArray()判断是不是数组"></a>Array.isArray()判断是不是数组</h6><h6 id="valueOf-、toString"><a href="#valueOf-、toString" class="headerlink" title="valueOf()、toString()"></a>valueOf()、toString()</h6><h6 id="valueOf-返回的还是数组、toString-返回的是字符串"><a href="#valueOf-返回的还是数组、toString-返回的是字符串" class="headerlink" title="valueOf()返回的还是数组、toString()返回的是字符串"></a>valueOf()返回的还是数组、toString()返回的是字符串</h6><h6 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h6><h6 id="使用不同的分隔符来构建字符串"><a href="#使用不同的分隔符来构建字符串" class="headerlink" title="使用不同的分隔符来构建字符串"></a>使用不同的分隔符来构建字符串</h6><pre><code>var value = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]value.join(&quot;|&quot;)console.log(value.join(&quot;|&quot;))  //  1|2|3</code></pre><h6 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h6><h6 id="push-、pop-数组尾"><a href="#push-、pop-数组尾" class="headerlink" title="push()、pop() 数组尾"></a>push()、pop() 数组尾</h6><h6 id="shift-、unshift-数组头"><a href="#shift-、unshift-数组头" class="headerlink" title="shift()、unshift() 数组头"></a>shift()、unshift() 数组头</h6><h6 id="reverse-反转排序"><a href="#reverse-反转排序" class="headerlink" title="reverse()反转排序"></a>reverse()反转排序</h6><h6 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h6><h6 id="按照升序排序，但是排的是字符串"><a href="#按照升序排序，但是排的是字符串" class="headerlink" title="按照升序排序，但是排的是字符串"></a>按照升序排序，但是排的是字符串</h6><pre><code>var values = [0,1,5,10,15]var aftersort = values.sort()console.log(aftersort)               //0 1 10 15 5     var aftercomp = values.sort(function (value1, value2)&#123;    if(value1 &gt; value2)&#123;        return 1    &#125;else if(value1 &lt; value2)&#123;        return -1    &#125;else&#123;        return 0    &#125;&#125;)orvar aftercomp = values.sort(function (value1, value2)&#123;    return value2- value1&#125;)console.log(aftercomp)  // 0 1 5 10 15</code></pre><h6 id="本来想去找找js原生库函数的源代码，只在ecmascript-js里找到了定义-实际上在v8编辑器里，在"><a href="#本来想去找找js原生库函数的源代码，只在ecmascript-js里找到了定义-实际上在v8编辑器里，在" class="headerlink" title="本来想去找找js原生库函数的源代码，只在ecmascript.js里找到了定义,实际上在v8编辑器里，在"></a>本来想去找找js原生库函数的源代码，只在ecmascript.js里找到了定义,实际上在v8编辑器里，在</h6><p><a href="https://developer.mozilla.org/en-US/search?q=sort">https://developer.mozilla.org/en-US/search?q=sort</a>里，给出了详细的用法，这里就不说了。有时间看看v8源码</p><h6 id="concat-连接，返回连接后的数组，不影响原数组"><a href="#concat-连接，返回连接后的数组，不影响原数组" class="headerlink" title="concat()连接，返回连接后的数组，不影响原数组"></a>concat()连接，返回连接后的数组，不影响原数组</h6><h6 id="slice-接受一个或者两个参数，即要返回项的起始位置和结束位置-不包括结束位"><a href="#slice-接受一个或者两个参数，即要返回项的起始位置和结束位置-不包括结束位" class="headerlink" title="slice()接受一个或者两个参数，即要返回项的起始位置和结束位置(不包括结束位)"></a>slice()接受一个或者两个参数，即要返回项的起始位置和结束位置(不包括结束位)</h6><pre><code>var values = [0,1,2,3]var value1 = values.slice(1)var value2 = values.slice(1,3)console.log(value1)  // 1 2 3console.log(value2)  // 1 2</code></pre><h6 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h6><h6 id="两个参数-要删除的第一项和要删除的项数"><a href="#两个参数-要删除的第一项和要删除的项数" class="headerlink" title="两个参数:要删除的第一项和要删除的项数"></a>两个参数:要删除的第一项和要删除的项数</h6><h6 id="三个参数-起始位置、要删除的项数、要插入的项数"><a href="#三个参数-起始位置、要删除的项数、要插入的项数" class="headerlink" title="三个参数:起始位置、要删除的项数、要插入的项数"></a>三个参数:起始位置、要删除的项数、要插入的项数</h6><pre><code>var values = [0,1,2,3]values.splice(0,1)console.log(values)     // [1, 2, 3]values.splice(0,0,&quot;c1&quot;,&quot;c2&quot;)console.log(values)     // [&quot;c1&quot;, &quot;c2&quot;, 1, 2, 3]values.splice(0,1,&quot;s1&quot;,&quot;s2&quot;)console.log(values)     // [&quot;c1&quot;, &quot;c2&quot;, 1, 2, 3]</code></pre><h6 id="位置方法indexOf-lastIndexOf"><a href="#位置方法indexOf-lastIndexOf" class="headerlink" title="位置方法indexOf() lastIndexOf()"></a>位置方法indexOf() lastIndexOf()</h6><pre><code>var person = &#123;name:&quot;zfl&quot;&#125;var people = [&#123;name:&quot;zfl&quot;&#125;]var morepeople = [people]console.log(morepeople)console.log(people.indexOf(person))   //-1 //查找项必须严格相等  ===  没有返回-1console.log(morepeople.indexOf(people)) // 0</code></pre><h6 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h6><h6 id="every-对于每一项运行给定函数，若每一项都返回true，则返回true"><a href="#every-对于每一项运行给定函数，若每一项都返回true，则返回true" class="headerlink" title="every():对于每一项运行给定函数，若每一项都返回true，则返回true"></a>every():对于每一项运行给定函数，若每一项都返回true，则返回true</h6><h6 id="filter-返回true项给组成的数组"><a href="#filter-返回true项给组成的数组" class="headerlink" title="filter():返回true项给组成的数组"></a>filter():返回true项给组成的数组</h6><h6 id="forEach-每项运行给定函数-无返回值"><a href="#forEach-每项运行给定函数-无返回值" class="headerlink" title="forEach(): 每项运行给定函数,无返回值"></a>forEach(): 每项运行给定函数,无返回值</h6><h6 id="map-返回每次调用函数返回的结果组成的数组"><a href="#map-返回每次调用函数返回的结果组成的数组" class="headerlink" title="map(): 返回每次调用函数返回的结果组成的数组"></a>map(): 返回每次调用函数返回的结果组成的数组</h6><h6 id="some-若某项返回true，则返回true"><a href="#some-若某项返回true，则返回true" class="headerlink" title="some(): 若某项返回true，则返回true"></a>some(): 若某项返回true，则返回true</h6><pre><code>var value = [1,2,3,4,5,6]var everyResult = value.every(function (item, index, array)&#123;  //值 项数 数组    return item&gt;2&#125;) console.log(everyResult)   //falsevar filterResult = value.filter(function (item, index, array)&#123;  //值 项数 数组    return item&gt;2&#125;)console.log(filterResult)  //[3, 4, 5, 6]var mapResult = value.map(function (item, index, array)&#123;  //值 项数 数组    return item = item +2&#125;)console.log(mapResult)   //[3, 4, 5, 6]var forEachResult = value.forEach(function (item, index, array)&#123;  //值 项数 数组    return item = item + 2&#125;)console.log(forEachResult)  //undefined</code></pre><h3 id="Date"><a href="#Date" class="headerlink" title="Date()"></a>Date()</h3><h6 id="Date-parse"><a href="#Date-parse" class="headerlink" title="Date.parse()"></a>Date.parse()</h6><h6 id="接受一个表示日期的字符串参数，然后尝试根据这个字符串返回相应的日期毫秒数"><a href="#接受一个表示日期的字符串参数，然后尝试根据这个字符串返回相应的日期毫秒数" class="headerlink" title="接受一个表示日期的字符串参数，然后尝试根据这个字符串返回相应的日期毫秒数"></a>接受一个表示日期的字符串参数，然后尝试根据这个字符串返回相应的日期毫秒数</h6><h6 id="时间戳转日期"><a href="#时间戳转日期" class="headerlink" title="时间戳转日期"></a>时间戳转日期</h6><h6 id="详情可见如下链接，将此方法携程管道函数来执行"><a href="#详情可见如下链接，将此方法携程管道函数来执行" class="headerlink" title="详情可见如下链接，将此方法携程管道函数来执行"></a>详情可见如下链接，将此方法携程管道函数来执行</h6><p><a href="https://gitee.com/UPCmvc/front_student/blob/master/src/config/date.js">链接</a></p><h3 id="关于Function的几个要点"><a href="#关于Function的几个要点" class="headerlink" title="关于Function的几个要点"></a>关于Function的几个要点</h3><h6 id="函数实际上是个对象"><a href="#函数实际上是个对象" class="headerlink" title="函数实际上是个对象"></a>函数实际上是个对象</h6><h6 id="函数名仅仅是指向对象的指针"><a href="#函数名仅仅是指向对象的指针" class="headerlink" title="函数名仅仅是指向对象的指针"></a>函数名仅仅是指向对象的指针</h6><h6 id="用function-name-定义的会存在变量提升，而let-name-function-则不会"><a href="#用function-name-定义的会存在变量提升，而let-name-function-则不会" class="headerlink" title="用function name(){}定义的会存在变量提升，而let name = function(){}则不会"></a>用function name(){}定义的会存在变量提升，而let name = function(){}则不会</h6><h6 id="没有重载、没有重载、没有重载"><a href="#没有重载、没有重载、没有重载" class="headerlink" title="没有重载、没有重载、没有重载"></a>没有重载、没有重载、没有重载</h6><h6 id="函数名本身就是变量可以作为参数传递"><a href="#函数名本身就是变量可以作为参数传递" class="headerlink" title="函数名本身就是变量可以作为参数传递"></a>函数名本身就是变量可以作为参数传递</h6><h6 id="函数内部的固有属性arguments和this，arguments除了保存函数的参数，有一个callee的属性，这个属性是个指针指向拥有这个arguments对象的函数-还有一个caller保存调用这个函数的引用"><a href="#函数内部的固有属性arguments和this，arguments除了保存函数的参数，有一个callee的属性，这个属性是个指针指向拥有这个arguments对象的函数-还有一个caller保存调用这个函数的引用" class="headerlink" title="函数内部的固有属性arguments和this，arguments除了保存函数的参数，有一个callee的属性，这个属性是个指针指向拥有这个arguments对象的函数,还有一个caller保存调用这个函数的引用"></a>函数内部的固有属性arguments和this，arguments除了保存函数的参数，有一个callee的属性，这个属性是个指针指向拥有这个arguments对象的函数,还有一个caller保存调用这个函数的引用</h6><h6 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h6><pre><code>function f()&#123;    if(num&lt;=1)&#123;        return 1    &#125;else&#123;        return num*arguments.callee(num-1)   //为了降低耦合性    &#125;&#125;</code></pre><h6 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h6><pre><code>function outer()&#123;    inner()&#125;function inner()&#123;    console.log(arguments.callee.caller)&#125;outer()   //ƒ outer()&#123;inner()&#125;</code></pre><h6 id="bind-用于绑定作用域，this值会被绑定到bind-函数的值"><a href="#bind-用于绑定作用域，this值会被绑定到bind-函数的值" class="headerlink" title="bind()用于绑定作用域，this值会被绑定到bind()函数的值"></a>bind()用于绑定作用域，this值会被绑定到bind()函数的值</h6><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><h6 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h6><pre><code>toFixed(2) 保留两位小数toExponential(1) 10–&gt;1.0e1返回指数形式并保留1位小数toPrecision() 返回某个数值最合适的格式</code></pre><h6 id="string"><a href="#string" class="headerlink" title="string"></a>string</h6><pre><code>trim() 去掉前后空格toUpperCase() toLocaleLowerCase() 返回大小写replace() 代替，可以匹配正则</code></pre><h6 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h6><pre><code>var date = &quot;2017/09/27&quot;date = date.replace(/\//g,&quot;-&quot;)  console.log(date)   //2017-09-27</code></pre><h6 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h6><pre><code>function rep(text)&#123;return text.replace(/[&lt;&gt;&quot;]/g, function (match, pos, originalText)&#123;    switch(match)&#123;        case &quot;&lt;&quot;:            return &quot;小于&quot;        case &quot;&gt;&quot;:            return &quot;大于&quot;        case &quot;\&quot;&quot;:            return &quot;引号&quot;    &#125;&#125;)&#125;var text = &quot;&lt;&gt;\&quot;&quot;text = rep(text)console.log(text)   //小于大于引号</code></pre><h6 id="match-返回数组"><a href="#match-返回数组" class="headerlink" title="match() 返回数组"></a>match() 返回数组</h6><pre><code>var date = &quot;2017/09/27&quot;var matches = date.match(/..\//g)  console.log(matches) //(2) [&quot;17/&quot;, &quot;09/&quot;]</code></pre><h6 id="如果要用RegExp对象的exec-要将字符串作为参数"><a href="#如果要用RegExp对象的exec-要将字符串作为参数" class="headerlink" title="如果要用RegExp对象的exec()要将字符串作为参数"></a>如果要用RegExp对象的exec()要将字符串作为参数</h6><h6 id="search-找到某元素的位置可以为正则"><a href="#search-找到某元素的位置可以为正则" class="headerlink" title="search()找到某元素的位置可以为正则"></a>search()找到某元素的位置可以为正则</h6><h6 id="split-分割字符串，一个参数就按参数分割，两个参数，第二个参数是个数字，返回第二个参数长度的数组"><a href="#split-分割字符串，一个参数就按参数分割，两个参数，第二个参数是个数字，返回第二个参数长度的数组" class="headerlink" title="split()分割字符串，一个参数就按参数分割，两个参数，第二个参数是个数字，返回第二个参数长度的数组"></a>split()分割字符串，一个参数就按参数分割，两个参数，第二个参数是个数字，返回第二个参数长度的数组</h6><h3 id="单体内置对象"><a href="#单体内置对象" class="headerlink" title="单体内置对象"></a>单体内置对象</h3><h6 id="encodeURI-用于整个URI，encodeURIComponent对部分URI"><a href="#encodeURI-用于整个URI，encodeURIComponent对部分URI" class="headerlink" title="encodeURI()用于整个URI，encodeURIComponent对部分URI"></a>encodeURI()用于整个URI，encodeURIComponent对部分URI</h6><h6 id="decodeURI-decodeURIComponent分别对上述两个进行解码"><a href="#decodeURI-decodeURIComponent分别对上述两个进行解码" class="headerlink" title="decodeURI(),decodeURIComponent分别对上述两个进行解码"></a>decodeURI(),decodeURIComponent分别对上述两个进行解码</h6><h6 id="eval-只知道会改变作用域链就ok"><a href="#eval-只知道会改变作用域链就ok" class="headerlink" title="eval() 只知道会改变作用域链就ok"></a>eval() 只知道会改变作用域链就ok</h6><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h6 id="Math-ceil-向上四舍五入"><a href="#Math-ceil-向上四舍五入" class="headerlink" title="Math.ceil() 向上四舍五入"></a>Math.ceil() 向上四舍五入</h6><h6 id="Math-floor-向下四舍五入"><a href="#Math-floor-向下四舍五入" class="headerlink" title="Math.floor() 向下四舍五入"></a>Math.floor() 向下四舍五入</h6><h6 id="Math-round-标准四舍五入"><a href="#Math-round-标准四舍五入" class="headerlink" title="Math.round() 标准四舍五入"></a>Math.round() 标准四舍五入</h6><h6 id="Math-random-产生一个0——1的随机数"><a href="#Math-random-产生一个0——1的随机数" class="headerlink" title="Math.random() 产生一个0——1的随机数"></a>Math.random() 产生一个0——1的随机数</h6>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript高级程序设计1-3</title>
    <link href="/2017/09/10/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A11-3/"/>
    <url>/2017/09/10/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A11-3/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="这是javascript高级程序设计1-3章一些零碎的知识点"><a href="#这是javascript高级程序设计1-3章一些零碎的知识点" class="headerlink" title="这是javascript高级程序设计1-3章一些零碎的知识点"></a>这是javascript高级程序设计1-3章一些零碎的知识点</h6><pre><code>javacript = ECMAscript + BOM(浏览器对象模型) + DOM</code></pre><h3 id="DOM级别"><a href="#DOM级别" class="headerlink" title="DOM级别"></a>DOM级别</h3><h6 id="DOM1级由两个模块组成：DOM核心-DOM-Core-和DOM-HTML"><a href="#DOM1级由两个模块组成：DOM核心-DOM-Core-和DOM-HTML" class="headerlink" title="DOM1级由两个模块组成：DOM核心(DOM Core)和DOM HTML"></a>DOM1级由两个模块组成：DOM核心(DOM Core)和DOM HTML</h6><h6 id="DOM核心规定的是如何映射基于XML的文档结构；DOM-HTML模块则在DOM核心上扩展"><a href="#DOM核心规定的是如何映射基于XML的文档结构；DOM-HTML模块则在DOM核心上扩展" class="headerlink" title="DOM核心规定的是如何映射基于XML的文档结构；DOM HTML模块则在DOM核心上扩展"></a>DOM核心规定的是如何映射基于XML的文档结构；DOM HTML模块则在DOM核心上扩展</h6><h6 id="DOM2级在DOM1级的基础上扩展了鼠标和用户界面事件、范围、遍历等细分模块，增加了对CSS的支持"><a href="#DOM2级在DOM1级的基础上扩展了鼠标和用户界面事件、范围、遍历等细分模块，增加了对CSS的支持" class="headerlink" title="DOM2级在DOM1级的基础上扩展了鼠标和用户界面事件、范围、遍历等细分模块，增加了对CSS的支持"></a>DOM2级在DOM1级的基础上扩展了鼠标和用户界面事件、范围、遍历等细分模块，增加了对CSS的支持</h6><h6 id="DOM3级：引入了DOM加载和DON保存，新增DOM验证"><a href="#DOM3级：引入了DOM加载和DON保存，新增DOM验证" class="headerlink" title="DOM3级：引入了DOM加载和DON保存，新增DOM验证"></a>DOM3级：引入了DOM加载和DON保存，新增DOM验证</h6><h3 id="标签对的使用"><a href="#标签对的使用" class="headerlink" title="标签对的使用"></a>标签对的使用</h3><pre><code>&lt;script&gt;    function sayScript()&#123;        alert(&quot;&lt;\/script&gt;&quot;)     //用转义符号否则会被当作&lt;/script&gt;    &#125;&lt;/script&gt;</code></pre><h6 id="位置在后，如果在里意味着JS代码都被下载、解析和执行完成才显示页面内容，会导致延迟"><a href="#位置在后，如果在里意味着JS代码都被下载、解析和执行完成才显示页面内容，会导致延迟" class="headerlink" title="位置在后，如果在里意味着JS代码都被下载、解析和执行完成才显示页面内容，会导致延迟"></a>位置在后，如果在里意味着JS代码都被下载、解析和执行完成才显示页面内容，会导致延迟</h6><h3 id="延迟脚本"><a href="#延迟脚本" class="headerlink" title="延迟脚本"></a>延迟脚本</h3><pre><code>&lt;head&gt;    &lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code></pre><p>######包含延迟脚本defer先下载后执行，在遇到后才执行,defer属性只适用于外部脚本</p><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><pre><code>&lt;head&gt;    &lt;script type=&quot;text/javascript&quot; async src=&quot;example1.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/javascript&quot; async src=&quot;example2.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code></pre><h6 id="异步加载不保证执行顺序"><a href="#异步加载不保证执行顺序" class="headerlink" title="异步加载不保证执行顺序"></a>异步加载不保证执行顺序</h6><h3 id="XHTML用法"><a href="#XHTML用法" class="headerlink" title="XHTML用法"></a>XHTML用法</h3><h6 id="在XHTML代码解析执行的时候，-lt-小于-会被认为是-lt-gt-标签对的一个，所以用下列写法"><a href="#在XHTML代码解析执行的时候，-lt-小于-会被认为是-lt-gt-标签对的一个，所以用下列写法" class="headerlink" title="在XHTML代码解析执行的时候，&lt;(小于) 会被认为是 &lt;&gt; 标签对的一个，所以用下列写法"></a>在XHTML代码解析执行的时候，&lt;(小于) 会被认为是 &lt;&gt; 标签对的一个，所以用下列写法</h6><pre><code>&lt;script&gt;&lt;![CDATA[    function()&#123;        if(a &lt; b)&#123;        &#125;    &#125;]]&gt;&lt;/script&gt;</code></pre><h6 id="有些浏览器不支持cdata写法，可以注释掉"><a href="#有些浏览器不支持cdata写法，可以注释掉" class="headerlink" title="有些浏览器不支持cdata写法，可以注释掉"></a>有些浏览器不支持cdata写法，可以注释掉</h6><pre><code>&lt;script&gt;//&lt;![CDATA[    function()&#123;        if(a &lt; b)&#123;        &#125;    &#125;//]]&gt;&lt;/script&gt;</code></pre><h6 id="还可以使用HTML实体来完成-lt-—-gt-lt"><a href="#还可以使用HTML实体来完成-lt-—-gt-lt" class="headerlink" title="还可以使用HTML实体来完成 &lt; —&gt; &lt;"></a>还可以使用HTML实体来完成 &lt; —&gt; &lt;</h6><pre><code>&lt;script&gt;    function()&#123;        if(a &amp;lt; b)&#123;        &#125;    &#125;&gt;&lt;/script&gt;</code></pre><h6 id="不过到目前为止-我还没遇到XHTML解析问题出现的bug"><a href="#不过到目前为止-我还没遇到XHTML解析问题出现的bug" class="headerlink" title="不过到目前为止,我还没遇到XHTML解析问题出现的bug"></a>不过到目前为止,我还没遇到XHTML解析问题出现的bug</h6><h3 id="JS区分大小写，而且一些函数名不能与关键字和保留字相同"><a href="#JS区分大小写，而且一些函数名不能与关键字和保留字相同" class="headerlink" title="JS区分大小写，而且一些函数名不能与关键字和保留字相同"></a>JS区分大小写，而且一些函数名不能与关键字和保留字相同</h3><h3 id="typeof-的使用"><a href="#typeof-的使用" class="headerlink" title="typeof 的使用"></a>typeof 的使用</h3><h6 id="用于鉴别给定的变量的数据类型"><a href="#用于鉴别给定的变量的数据类型" class="headerlink" title="用于鉴别给定的变量的数据类型"></a>用于鉴别给定的变量的数据类型</h6><h6 id="JS有5种基本数据类型null、undefinded、Boolean、Number、String"><a href="#JS有5种基本数据类型null、undefinded、Boolean、Number、String" class="headerlink" title="JS有5种基本数据类型null、undefinded、Boolean、Number、String"></a>JS有5种基本数据类型null、undefinded、Boolean、Number、String</h6><h6 id="1种复杂类型Object"><a href="#1种复杂类型Object" class="headerlink" title="1种复杂类型Object"></a>1种复杂类型Object</h6><pre><code>function test()&#123;    message = &#39;hi&#39;    //未用var，为全局变量，不推荐这样写&#125;test()alert(message)    //  &#39;hi&#39;alert(typeof message)  // &quot;string&quot;alert(typeof test)    // &quot;function&quot;alert(typeof test())   //undefined  无返回值</code></pre><h3 id="Number数值"><a href="#Number数值" class="headerlink" title="Number数值"></a>Number数值</h3><h6 id="正无穷Infinity-负无穷-Infinity"><a href="#正无穷Infinity-负无穷-Infinity" class="headerlink" title="正无穷Infinity,负无穷-Infinity"></a>正无穷Infinity,负无穷-Infinity</h6><h6 id="能保存的最大的数值Number-MAX-VALUE—-gt-1-7976931348623157e-308-最小的数值Number-MIN-VALUE—-gt-5e-324"><a href="#能保存的最大的数值Number-MAX-VALUE—-gt-1-7976931348623157e-308-最小的数值Number-MIN-VALUE—-gt-5e-324" class="headerlink" title="能保存的最大的数值Number.MAX_VALUE—&gt;1.7976931348623157e+308,最小的数值Number.MIN_VALUE—-&gt;5e-324"></a>能保存的最大的数值Number.MAX_VALUE—&gt;1.7976931348623157e+308,最小的数值Number.MIN_VALUE—-&gt;5e-324</h6><h6 id="NaN–-gt-非数值-not-a-number-NaN与任何值都不相等-包括本身"><a href="#NaN–-gt-非数值-not-a-number-NaN与任何值都不相等-包括本身" class="headerlink" title="NaN–&gt;非数值,not a number,NaN与任何值都不相等,包括本身"></a>NaN–&gt;非数值,not a number,NaN与任何值都不相等,包括本身</h6><h6 id="isNaN-函数判断是不是非数值，在接收参数后尝试把参数转化为数值，不能被转的返回true，否则为false"><a href="#isNaN-函数判断是不是非数值，在接收参数后尝试把参数转化为数值，不能被转的返回true，否则为false" class="headerlink" title="isNaN()函数判断是不是非数值，在接收参数后尝试把参数转化为数值，不能被转的返回true，否则为false"></a>isNaN()函数判断是不是非数值，在接收参数后尝试把参数转化为数值，不能被转的返回true，否则为false</h6><pre><code>isNaN(NaN)  //trueisNaN(&quot;10&quot;)  //false--&gt;&quot;10&quot;被转化为10isNaN(true)  //false  true--&gt;1,false--&gt;0isNaN(&quot;String&quot;)  //trueconsole.log(isNaN(null))  //false   null--&gt;0console.log(isNaN(undefined)) //true  undefined--&gt;NaN</code></pre><h6 id="数制转化"><a href="#数制转化" class="headerlink" title="数制转化"></a>数制转化</h6><pre><code>num1 = parseInt(&quot;123blue&quot;)  //123num2 = parseInt(&quot;100&quot;,2)  //  100按二进制解析结果为4num2 = parseInt(&quot;100&quot;,8)  //  100按八进制解析结果为64  </code></pre><h6 id="同理有parseFloat"><a href="#同理有parseFloat" class="headerlink" title="同理有parseFloat()"></a>同理有parseFloat()</h6><h3 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h3><h6 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h6><h6 id="constructor-保存着用于创建对象的函数"><a href="#constructor-保存着用于创建对象的函数" class="headerlink" title="constructor:保存着用于创建对象的函数"></a>constructor:保存着用于创建对象的函数</h6><h6 id="hasOwnProperty-propertyName-用于检查属性在当前对象中是否存在-而不是实例原型"><a href="#hasOwnProperty-propertyName-用于检查属性在当前对象中是否存在-而不是实例原型" class="headerlink" title="hasOwnProperty(propertyName):用于检查属性在当前对象中是否存在(而不是实例原型)"></a>hasOwnProperty(propertyName):用于检查属性在当前对象中是否存在(而不是实例原型)</h6><h6 id="isPrototypeOf-object-用于检查传入的对象是否是当前对象的原型"><a href="#isPrototypeOf-object-用于检查传入的对象是否是当前对象的原型" class="headerlink" title="isPrototypeOf(object):用于检查传入的对象是否是当前对象的原型"></a>isPrototypeOf(object):用于检查传入的对象是否是当前对象的原型</h6><h6 id="valueOf-返回对象的字符串、数值或boolean表示与toString-相同"><a href="#valueOf-返回对象的字符串、数值或boolean表示与toString-相同" class="headerlink" title="valueOf():返回对象的字符串、数值或boolean表示与toString()相同"></a>valueOf():返回对象的字符串、数值或boolean表示与toString()相同</h6><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><pre><code>var num1 = 20var num2 = --num1  //此时num2=19  num1=19var num3 = num1-- //此时num3=19 num1=18  num2=19var num4 = num1-- + num2  //此时num4=18+19  num1=17</code></pre><h6 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h6><pre><code>var s1 = &#39;Z&#39;s1--  //NaNvar o = &#123;    valueOf:function()&#123;        return -1    &#125;&#125;o--  //-2</code></pre><h6 id="位操作符，全都化成二进制做-都存的是补码"><a href="#位操作符，全都化成二进制做-都存的是补码" class="headerlink" title="位操作符，全都化成二进制做,都存的是补码"></a>位操作符，全都化成二进制做,都存的是补码</h6><h6 id="非NOT"><a href="#非NOT" class="headerlink" title="非NOT ~"></a>非NOT ~</h6><pre><code>var num1 = 25   //二进制 0001001var num2 = ~num1  //num2=1110110--&gt;-26</code></pre><h6 id="与AND-amp"><a href="#与AND-amp" class="headerlink" title="与AND &amp;"></a>与AND &amp;</h6><pre><code>var num1 = 25 &amp; 3    分析  00011001      00000011&amp;     00000001---&gt;结果为1</code></pre><h6 id="或OR"><a href="#或OR" class="headerlink" title="或OR |"></a>或OR |</h6><h6 id="异或-XOR-相同为0不同为1"><a href="#异或-XOR-相同为0不同为1" class="headerlink" title="异或 XOR ^ 相同为0不同为1"></a>异或 XOR ^ 相同为0不同为1</h6><h6 id="左移-lt-lt"><a href="#左移-lt-lt" class="headerlink" title="左移 &lt;&lt;"></a>左移 &lt;&lt;</h6><h6 id="有符号右移-gt-gt"><a href="#有符号右移-gt-gt" class="headerlink" title="有符号右移 &gt;&gt;"></a>有符号右移 &gt;&gt;</h6><h6 id="无符号右移-gt-gt-gt-高位补0"><a href="#无符号右移-gt-gt-gt-高位补0" class="headerlink" title="无符号右移 &gt;&gt;&gt; 高位补0"></a>无符号右移 &gt;&gt;&gt; 高位补0</h6><h6 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h6><h6 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h6><pre><code>!&quot;blue&quot;  false!0       true!&quot;&quot;      true!123     false!NaN     true!null    true</code></pre><h3 id="逻辑与-amp-amp"><a href="#逻辑与-amp-amp" class="headerlink" title="逻辑与 &amp;&amp;"></a>逻辑与 &amp;&amp;</h3><h6 id="如果第一个操作数是对象，返回第二个操作数"><a href="#如果第一个操作数是对象，返回第二个操作数" class="headerlink" title="如果第一个操作数是对象，返回第二个操作数"></a>如果第一个操作数是对象，返回第二个操作数</h6><h6 id="如果第二个操作数是对象，只有在第一个为true的情况下才返回第二个操作数对象"><a href="#如果第二个操作数是对象，只有在第一个为true的情况下才返回第二个操作数对象" class="headerlink" title="如果第二个操作数是对象，只有在第一个为true的情况下才返回第二个操作数对象"></a>如果第二个操作数是对象，只有在第一个为true的情况下才返回第二个操作数对象</h6><h6 id="如果两个操作数都是对象则，返回第二个"><a href="#如果两个操作数都是对象则，返回第二个" class="headerlink" title="如果两个操作数都是对象则，返回第二个"></a>如果两个操作数都是对象则，返回第二个</h6><h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或 ||"></a>逻辑或 ||</h3><h6 id="看第一个如果为true就返回true"><a href="#看第一个如果为true就返回true" class="headerlink" title="看第一个如果为true就返回true"></a>看第一个如果为true就返回true</h6><h6 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h6><pre><code>Infinity*0 –&gt;NaN</code></pre><h6 id="操作数不是number，则后台先调用Number"><a href="#操作数不是number，则后台先调用Number" class="headerlink" title="操作数不是number，则后台先调用Number()"></a>操作数不是number，则后台先调用Number()</h6><pre><code>5+”5” –&gt;555-true –&gt;4var num1 = 5var num2 = 10&quot;the number is&quot; + num1 + num2   //the number is 510&quot;the number is&quot; + (num1 + num2)  // the number is 15 </code></pre><h3 id="比较大小问题"><a href="#比较大小问题" class="headerlink" title="比较大小问题"></a>比较大小问题</h3><pre><code>null == undefined  //true&quot;23&quot;&lt;3   //false   &quot;23&quot;--&gt;23&quot;23&quot;&lt;&quot;3&quot;  //true&quot;a&quot; &lt; 3   //false  &quot;a&quot;--&gt;NaN   NaN与任何比较都是falseNaN == NaN //falseundefined == 0 //falsenull == 0 //false</code></pre><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h3><pre><code>var num = (5, 1, 4, 8, 0)  //num = 0 赋值最后一个label加break、continuelabel+breakvar num = 0outermost:for(var i =0;i&lt;10;i++)&#123;    for(var j = 0; j&lt;10;j++)&#123;        if(i==5&amp;&amp;j==5)&#123;            break coutermost        &#125;        num++    &#125;&#125;console.log(num)   //55label+continuevar num = 0outermost:for(var i =0;i&lt;10;i++)&#123;    for(var j = 0; j&lt;10;j++)&#123;        if(i==5&amp;&amp;j==5)&#123;            continue coutermost        &#125;        num++    &#125;&#125;console.log(num)   //95</code></pre><h3 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h3><pre><code>var a = 1var qs=localtion.search.substring(1)var hostname = location.hostnamevar url = localhost.href</code></pre><h6 id="全部可以简写为"><a href="#全部可以简写为" class="headerlink" title="全部可以简写为"></a>全部可以简写为</h6><pre><code>var a = 1with(localtion)&#123;    var qs=search.substring(1)    var hostname = hostname    var url = href&#125;</code></pre><h6 id="a与qs作用于是同级的"><a href="#a与qs作用于是同级的" class="headerlink" title="a与qs作用于是同级的"></a>a与qs作用于是同级的</h6><h3 id="参数–-gt-arguments"><a href="#参数–-gt-arguments" class="headerlink" title="参数–&gt;arguments"></a>参数–&gt;arguments</h3><pre><code>function test()&#123;    console.log(arguments.length)   //参数的个数&#125; test()        //0test(&quot;1&quot;)     //1test(&quot;1&quot;,&quot;2&quot;)   //2test(&#123;name:&quot;zfl&quot;&#125;)  //1</code></pre>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax全总结</title>
    <link href="/2017/09/06/Ajax%E5%85%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2017/09/06/Ajax%E5%85%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="这篇是在看过JS高级程序设计以及自己以前的一些项目所做的总结"><a href="#这篇是在看过JS高级程序设计以及自己以前的一些项目所做的总结" class="headerlink" title="这篇是在看过JS高级程序设计以及自己以前的一些项目所做的总结"></a>这篇是在看过JS高级程序设计以及自己以前的一些项目所做的总结</h6><pre><code>let xhr = new XMLHttpRequest()</code></pre><h3 id="xhr用法"><a href="#xhr用法" class="headerlink" title="xhr用法"></a>xhr用法</h3><h6 id="open-有三个参数"><a href="#open-有三个参数" class="headerlink" title="open() 有三个参数"></a>open() 有三个参数</h6><h6 id="1-请求类型-2-URL-3-是否为异步发送请求"><a href="#1-请求类型-2-URL-3-是否为异步发送请求" class="headerlink" title="1.请求类型 2.URL 3.是否为异步发送请求"></a>1.请求类型 2.URL 3.是否为异步发送请求</h6><pre><code>xhr.open(‘get’, URL, false)</code></pre><h6 id="注意：它不会发送请求当调用send-时才会发送请求"><a href="#注意：它不会发送请求当调用send-时才会发送请求" class="headerlink" title="注意：它不会发送请求当调用send()时才会发送请求"></a>注意：它不会发送请求当调用send()时才会发送请求</h6><pre><code>send(data) </code></pre><h6 id="data-要发送的数据"><a href="#data-要发送的数据" class="headerlink" title="data:要发送的数据"></a>data:要发送的数据</h6><h6 id="不需要发送数据时必须传入null"><a href="#不需要发送数据时必须传入null" class="headerlink" title="不需要发送数据时必须传入null"></a>不需要发送数据时必须传入null</h6><h6 id="响应的数据"><a href="#响应的数据" class="headerlink" title="响应的数据"></a>响应的数据</h6><h6 id="xhr-responseText-返回主体"><a href="#xhr-responseText-返回主体" class="headerlink" title="xhr.responseText 返回主体"></a>xhr.responseText 返回主体</h6><h6 id="xhr-responseXML"><a href="#xhr-responseXML" class="headerlink" title="xhr.responseXML"></a>xhr.responseXML</h6><h6 id="xhr-status-响应的HTTP状态"><a href="#xhr-status-响应的HTTP状态" class="headerlink" title="xhr.status 响应的HTTP状态"></a>xhr.status 响应的HTTP状态</h6><h6 id="xhr-readyState"><a href="#xhr-readyState" class="headerlink" title="xhr.readyState"></a>xhr.readyState</h6><h6 id="0：-未初始化-未调用open"><a href="#0：-未初始化-未调用open" class="headerlink" title="0： 未初始化 未调用open()"></a>0： 未初始化 未调用open()</h6><h6 id="1-启动-已经调用open-未调用send"><a href="#1-启动-已经调用open-未调用send" class="headerlink" title="1:  启动 已经调用open() 未调用send()"></a>1:  启动 已经调用open() 未调用send()</h6><h6 id="2-发送-已经调用send-未收到响应"><a href="#2-发送-已经调用send-未收到响应" class="headerlink" title="2:  发送 已经调用send() 未收到响应"></a>2:  发送 已经调用send() 未收到响应</h6><h6 id="3：-接受-接受部分响应数据-–用于检测http流"><a href="#3：-接受-接受部分响应数据-–用于检测http流" class="headerlink" title="3： 接受 接受部分响应数据   –用于检测http流"></a>3： 接受 接受部分响应数据   –用于检测http流</h6><h6 id="4：-完成"><a href="#4：-完成" class="headerlink" title="4： 完成"></a>4： 完成</h6><pre><code>xhr.onreadystatechange = function()&#123;    if(xhr.readStatus == 4)&#123;        if((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304)&#123;            console.log(&quot;success&quot;)        &#125;else&#123;            console.log(&quot;error&quot;)        &#125;    &#125;&#125;xhr.open()xhr.send(null)xhr.abort() 取消异步请求xhr.setRequestHeader(‘myHeader’, ‘myValue’) 设置头信息xhr.getAllResponseHeaders() 得到头部信息</code></pre><h3 id="超时设定"><a href="#超时设定" class="headerlink" title="超时设定"></a>超时设定</h3><pre><code>xhr.timeout = 1000 (毫秒)xhr.ontimeout = function()&#123;&#125;</code></pre><h6 id="overrideMimeType-重写XHR响应的MIME类型-必须在send-之前"><a href="#overrideMimeType-重写XHR响应的MIME类型-必须在send-之前" class="headerlink" title="overrideMimeType() 重写XHR响应的MIME类型 必须在send()之前"></a>overrideMimeType() 重写XHR响应的MIME类型 必须在send()之前</h6><h6 id="xhr-overrideMimeType-“text-xml”-强迫xhr对象将响应当作XML处理"><a href="#xhr-overrideMimeType-“text-xml”-强迫xhr对象将响应当作XML处理" class="headerlink" title="xhr.overrideMimeType(“text/xml”)  强迫xhr对象将响应当作XML处理"></a>xhr.overrideMimeType(“text/xml”)  强迫xhr对象将响应当作XML处理</h6><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><h6 id="1-amp-分隔符"><a href="#1-amp-分隔符" class="headerlink" title="1.&amp;分隔符"></a>1.&amp;分隔符</h6><h6 id="2-查询字符串中每个参数的名和值都必须用encodeURIComponent-进行编码"><a href="#2-查询字符串中每个参数的名和值都必须用encodeURIComponent-进行编码" class="headerlink" title="2.查询字符串中每个参数的名和值都必须用encodeURIComponent()进行编码"></a>2.查询字符串中每个参数的名和值都必须用encodeURIComponent()进行编码</h6><h6 id="在URL后能看见字符串参数"><a href="#在URL后能看见字符串参数" class="headerlink" title="在URL后能看见字符串参数"></a>在URL后能看见字符串参数</h6><pre><code>function addURLParam(url, name, value)&#123;    url += (url.indexOf(&quot;?&quot;) == -1 ? &quot;?&quot; : &quot;&amp;&quot;);    url += encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(value);    return url;&#125;let url = &quot;example.php&quot;url = addURLParam(url, &quot;name&quot; , &quot;zfl&quot;)xhr.open(&#39;get&#39;, url, false)</code></pre><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><pre><code>let URL = &quot;http://localhost:8080/getWeather&quot;let xhr = new XMLHttpRequest();// URL = addURLParam(URL, &quot;city&quot;, data)xhr.open(&quot;get&quot;, URL, false)xhr.send(null)if((xhr.status&gt;=200 &amp;&amp; xhr.status &lt;300) || xhr.status == 304)&#123;    console.log(xhr.responseText);&#125;let resp = JSON.parse(xhr.responseText)console.log(resp.city)document.querySelector(&#39;.city&#39;).innerHTML = resp.citydocument.querySelector(&#39;.weather&#39;).innerHTML = resp.weather</code></pre><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><h6 id="不限传输长度和格式-base64上传图片就必须用post-get传输的太短"><a href="#不限传输长度和格式-base64上传图片就必须用post-get传输的太短" class="headerlink" title="不限传输长度和格式(base64上传图片就必须用post,get传输的太短)"></a>不限传输长度和格式(base64上传图片就必须用post,get传输的太短)</h6><h6 id="post和提交web表单不一样"><a href="#post和提交web表单不一样" class="headerlink" title="post和提交web表单不一样"></a>post和提交web表单不一样</h6><h6 id="将表单数据序列化传到服务器"><a href="#将表单数据序列化传到服务器" class="headerlink" title="将表单数据序列化传到服务器"></a>将表单数据序列化传到服务器</h6><pre><code>let form = document.getElementById(&quot;myform&quot;)xhr.send(serialize(form))</code></pre><h6 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h6><pre><code>let form = new FormData(document.getElementById(&quot;myform&quot;))xhr.send(form)</code></pre><h6 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h6><h6 id="loadstart-在接收第一个字节时触发"><a href="#loadstart-在接收第一个字节时触发" class="headerlink" title="loadstart: 在接收第一个字节时触发"></a>loadstart: 在接收第一个字节时触发</h6><h6 id="progress：周期性的触发"><a href="#progress：周期性的触发" class="headerlink" title="progress：周期性的触发"></a>progress：周期性的触发</h6><pre><code>xhr.onprogress = function(event)&#123;    if(event.lengthComputable)&#123;  //进度信息是否可用        event.position  //已经接受的字节数        event.totalSize  //根据Content-Length响应头部去顶的预期字节数    &#125;&#125;</code></pre><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><h6 id="CORES"><a href="#CORES" class="headerlink" title="CORES"></a>CORES</h6><h6 id="本质上是使用自定义的HTTP头部让浏览器与服务器沟通，从而决定是否响应成功"><a href="#本质上是使用自定义的HTTP头部让浏览器与服务器沟通，从而决定是否响应成功" class="headerlink" title="本质上是使用自定义的HTTP头部让浏览器与服务器沟通，从而决定是否响应成功"></a>本质上是使用自定义的HTTP头部让浏览器与服务器沟通，从而决定是否响应成功</h6><pre><code>Origin: http://123.com   //浏览器Access-Control-Allow-Origin: http://123.com</code></pre><h6 id="通过将withCredentials-设置为true可以指定某请求发送凭据"><a href="#通过将withCredentials-设置为true可以指定某请求发送凭据" class="headerlink" title="通过将withCredentials 设置为true可以指定某请求发送凭据"></a>通过将withCredentials 设置为true可以指定某请求发送凭据</h6><pre><code>Access-Control-Allow-Credentials: true  //浏览器</code></pre><h6 id="以下情况在服务器端设定好了"><a href="#以下情况在服务器端设定好了" class="headerlink" title="以下情况在服务器端设定好了"></a>以下情况在服务器端设定好了</h6><pre><code>Access-Control-Allow-Origin: *Access-Control-Allow-Credentials : true</code></pre><h6 id="vue实现跨域请求–以vue-cli为例"><a href="#vue实现跨域请求–以vue-cli为例" class="headerlink" title="vue实现跨域请求–以vue-cli为例"></a>vue实现跨域请求–以vue-cli为例</h6><h6 id="在vue-cli生成的时候会给你引入vueresource如果没有的话可以参照项目自己引入进去"><a href="#在vue-cli生成的时候会给你引入vueresource如果没有的话可以参照项目自己引入进去" class="headerlink" title="在vue-cli生成的时候会给你引入vueresource如果没有的话可以参照项目自己引入进去"></a>在vue-cli生成的时候会给你引入vueresource如果没有的话可以参照项目自己引入进去</h6><h6 id="只需在router-index-js里面加入"><a href="#只需在router-index-js里面加入" class="headerlink" title="只需在router/index.js里面加入"></a>只需在router/index.js里面加入</h6><pre><code>Vue.http.options.emulateJSON = true</code></pre><h6 id="这样在每次进行get、post的时候就不用都写入-emulateJSON-true"><a href="#这样在每次进行get、post的时候就不用都写入-emulateJSON-true" class="headerlink" title="这样在每次进行get、post的时候就不用都写入{emulateJSON: true}"></a>这样在每次进行get、post的时候就不用都写入{emulateJSON: true}</h6><h6 id="善用-let-self-this"><a href="#善用-let-self-this" class="headerlink" title="善用 let self = this"></a>善用 let self = this</h6><h6 id="不会出现在自己未知的情况下this指针作用域发生变化而导致的bug"><a href="#不会出现在自己未知的情况下this指针作用域发生变化而导致的bug" class="headerlink" title="不会出现在自己未知的情况下this指针作用域发生变化而导致的bug"></a>不会出现在自己未知的情况下this指针作用域发生变化而导致的bug</h6><h6 id="两个例子是在17年暑期实践的时候给队友写的这边就直接拿来了"><a href="#两个例子是在17年暑期实践的时候给队友写的这边就直接拿来了" class="headerlink" title="两个例子是在17年暑期实践的时候给队友写的这边就直接拿来了"></a>两个例子是在17年暑期实践的时候给队友写的这边就直接拿来了</h6><pre><code>initGet()&#123;  let self = this    self.$http.get(API.testGet).then((response)=&gt; &#123;        console.log(response)    &#125;,()=&gt;&#123;        console.log(&quot;error&quot;)    &#125;)&#125;,initPost()&#123;  let self = this  let data = &#123;      a:&#39;test&#39;  &#125;  self.$http.post(API.testPost,data).then((response)=&gt; &#123;    console.log()  &#125;,()=&gt;&#123;    console.log(&quot;error&quot;)  &#125;)&#125;</code></pre><h3 id="ng1的跨域问题"><a href="#ng1的跨域问题" class="headerlink" title="ng1的跨域问题"></a>ng1的跨域问题</h3><h6 id="用yeoman生成的angular的脚手架-在16年的暑假黑客马拉松写的易二手轻应用"><a href="#用yeoman生成的angular的脚手架-在16年的暑假黑客马拉松写的易二手轻应用" class="headerlink" title="用yeoman生成的angular的脚手架,在16年的暑假黑客马拉松写的易二手轻应用"></a>用yeoman生成的angular的脚手架,在16年的暑假黑客马拉松写的易二手轻应用</h6><h6 id="在app-js里的config里加入"><a href="#在app-js里的config里加入" class="headerlink" title="在app.js里的config里加入"></a>在app.js里的config里加入</h6><pre><code>$httpProvider.defaults.withCredentials = true;</code></pre><h6 id="其他就正常调用get、post方法即可"><a href="#其他就正常调用get、post方法即可" class="headerlink" title="其他就正常调用get、post方法即可"></a>其他就正常调用get、post方法即可</h6><h6 id="ng2的跨域到目前为止，我只是粗略的走过ng2的教程并没有用ng2写过项目，但是跨域的重点在于前后端的http头匹配问题，也就是前后端设定相同的http头，其他的就没什么大问题了"><a href="#ng2的跨域到目前为止，我只是粗略的走过ng2的教程并没有用ng2写过项目，但是跨域的重点在于前后端的http头匹配问题，也就是前后端设定相同的http头，其他的就没什么大问题了" class="headerlink" title="ng2的跨域到目前为止，我只是粗略的走过ng2的教程并没有用ng2写过项目，但是跨域的重点在于前后端的http头匹配问题，也就是前后端设定相同的http头，其他的就没什么大问题了"></a>ng2的跨域到目前为止，我只是粗略的走过ng2的教程并没有用ng2写过项目，但是跨域的重点在于前后端的http头匹配问题，也就是前后端设定相同的http头，其他的就没什么大问题了</h6><h3 id="其他跨域方法"><a href="#其他跨域方法" class="headerlink" title="其他跨域方法"></a>其他跨域方法</h3><h6 id="图像ping"><a href="#图像ping" class="headerlink" title="图像ping"></a>图像ping</h6><p>######利用的核心思想是一个网页可以从任何网页加载图像而不需要担心跨域的问题图像ping是与服务器进行简单的、单向的苦于通信，浏览器得不到任何数据，而且只能发送get请求<br>    let img = new Image()<br>    img.onload = img.onerror = function(){}<br>    img.src = ‘<a href="http://www.example.com/?name">http://www.example.com?name</a> = zfl’   //设定路径的那一刻发送get请求</p><h3 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h3><h6 id="通过script标签"><a href="#通过script标签" class="headerlink" title="通过script标签"></a>通过script标签</h6><pre><code>function showData (result) &#123;    var data = JSON.stringify(result); //json对象转成字符串&#125;$(&quot;#btn&quot;).click(function () &#123;    $(&quot;head&quot;).append(&quot;&lt;script src=&#39;http://www.expample.com?callback=showData&#39;&gt;&lt;\/script&gt;&quot;);   &#125;)</code></pre><h6 id="在服务器端"><a href="#在服务器端" class="headerlink" title="在服务器端"></a>在服务器端</h6><pre><code>List&lt;Student&gt; studentList = getStudentList();JSONArray jsonArray = JSONArray.fromObject(studentList);String result = jsonArray.toString();//前端传过来的回调函数名称String callback = request.getParameter(&quot;callback&quot;);   //用回调函数名称包裹返回数据，这样，返回数据就作为回调函数的参数传回去了result = callback + &quot;(&quot; + result + &quot;)&quot;;response.getWriter().write(result)</code></pre><h6 id="特别注意：JSONP只能是get方法"><a href="#特别注意：JSONP只能是get方法" class="headerlink" title="特别注意：JSONP只能是get方法"></a>特别注意：JSONP只能是get方法</h6><h3 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h3><h6 id="服务器向页面推送数据的技术"><a href="#服务器向页面推送数据的技术" class="headerlink" title="服务器向页面推送数据的技术"></a>服务器向页面推送数据的技术</h6><h6 id="1-长轮询：浏览器定时发送请求，是否有数据"><a href="#1-长轮询：浏览器定时发送请求，是否有数据" class="headerlink" title="1.长轮询：浏览器定时发送请求，是否有数据"></a>1.长轮询：浏览器定时发送请求，是否有数据</h6><h6 id="2-短轮询：浏览器发送一次请求，服务器保持请求，直到有数据发送"><a href="#2-短轮询：浏览器发送一次请求，服务器保持请求，直到有数据发送" class="headerlink" title="2.短轮询：浏览器发送一次请求，服务器保持请求，直到有数据发送"></a>2.短轮询：浏览器发送一次请求，服务器保持请求，直到有数据发送</h6><h6 id="3-HTTP流：浏览器发送一次请求，服务器保持请求，并周期性的发送一个数据"><a href="#3-HTTP流：浏览器发送一次请求，服务器保持请求，并周期性的发送一个数据" class="headerlink" title="3.HTTP流：浏览器发送一次请求，服务器保持请求，并周期性的发送一个数据"></a>3.HTTP流：浏览器发送一次请求，服务器保持请求，并周期性的发送一个数据</h6><pre><code>function createStreamingClient(url, progress, finished)&#123;    let xhr = new XMLHttpRequest(),        received = 0;    xhr.open(&#39;get&#39;, url, true);    xhr.onreadystatechange = function()&#123;        let result;        if(xhr.readyState == 3)&#123;            reault = xhr.reaponseText.substring(received);            received += result.length;            progress(result)        &#125;else if(xhr.readyState == 4)&#123;            finished(xhr.responseText)        &#125;    &#125;&#125;let client = createStreamingClient(&quot;example.com&quot;,function(data)&#123;        alert(&quot;received:&quot; + data);    &#125;,function(data)&#123;        alert(&quot;Done!&quot;);    &#125;)</code></pre><h3 id="服务器发送事件"><a href="#服务器发送事件" class="headerlink" title="服务器发送事件"></a>服务器发送事件</h3><h6 id="1-SSE-适合长轮询和http流"><a href="#1-SSE-适合长轮询和http流" class="headerlink" title="1.SSE 适合长轮询和http流"></a>1.SSE 适合长轮询和http流</h6><pre><code>let source = new EventSource(“example.com”) 断开始: source.close()</code></pre><h5 id="必须为同源，有三个事件open、message、error"><a href="#必须为同源，有三个事件open、message、error" class="headerlink" title="必须为同源，有三个事件open、message、error"></a>必须为同源，有三个事件open、message、error</h5><pre><code>source.onmessage = function(event)&#123;    console.log(event.data)  //返回的数据在event.data里&#125;</code></pre><h3 id="2-事件流"><a href="#2-事件流" class="headerlink" title="2.事件流"></a>2.事件流</h3><h6 id="响应的MIME类型为”text-event-stream”-结果在event-data里"><a href="#响应的MIME类型为”text-event-stream”-结果在event-data里" class="headerlink" title="响应的MIME类型为”text/event-stream” 结果在event.data里"></a>响应的MIME类型为”text/event-stream” 结果在event.data里</h6><pre><code>data: foo    //&quot;foo&quot;data: bar    //&quot;bar&quot;data: foodata: bar     //&quot;foo/nbar&quot;</code></pre><h3 id="websockets—全双工、双向通信"><a href="#websockets—全双工、双向通信" class="headerlink" title="websockets—全双工、双向通信"></a>websockets—全双工、双向通信</h3><h6 id="它不使用http-、https-协议，有自己的ws-、wss-协议"><a href="#它不使用http-、https-协议，有自己的ws-、wss-协议" class="headerlink" title="它不使用http://、https://协议，有自己的ws://、wss://协议"></a>它不使用http://、https://协议，有自己的ws://、wss://协议</h6><pre><code>let socket = new WebSocket(&quot;ws://example.com&quot;)</code></pre><h6 id="同源策略不适用所以可以传入任何站点链接-只要服务器端认可-实例化对象后马上尝试建立链接"><a href="#同源策略不适用所以可以传入任何站点链接-只要服务器端认可-实例化对象后马上尝试建立链接" class="headerlink" title="同源策略不适用所以可以传入任何站点链接,只要服务器端认可,实例化对象后马上尝试建立链接"></a>同源策略不适用所以可以传入任何站点链接,只要服务器端认可,实例化对象后马上尝试建立链接</h6><pre><code>readyState属性WebSocket.OPENING(0)  :正在建立连接WebSocket.OPEN(1) : 已经建立连接WebSocket.CLOSING(2) : 正在关闭连接WebSocket.CLOSE(3) :  已经关闭连接</code></pre><h6 id="其他事件跟xhr一样"><a href="#其他事件跟xhr一样" class="headerlink" title="其他事件跟xhr一样"></a>其他事件跟xhr一样</h6><h3 id="web安全"><a href="#web安全" class="headerlink" title="web安全"></a>web安全</h3><h4 id="sql注入原理"><a href="#sql注入原理" class="headerlink" title="sql注入原理"></a>sql注入原理</h4><h6 id="在提交表单时，把sql语句提交上去"><a href="#在提交表单时，把sql语句提交上去" class="headerlink" title="在提交表单时，把sql语句提交上去"></a>在提交表单时，把sql语句提交上去</h6><h6 id="1-永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。"><a href="#1-永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。" class="headerlink" title="1.永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。"></a>1.永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。</h6><h6 id="2-永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。"><a href="#2-永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。" class="headerlink" title="2.永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。"></a>2.永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。</h6><h6 id="3-永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。"><a href="#3-永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。" class="headerlink" title="3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。"></a>3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</h6><h6 id="4-不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息"><a href="#4-不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息" class="headerlink" title="4.不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息"></a>4.不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息</h6><h6 id="xxs-跨站脚本攻击-Cross-Site-Scripting-，恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的-html代码-javascript代码-会被执行，从而达到恶意攻击用户的特殊目的。"><a href="#xxs-跨站脚本攻击-Cross-Site-Scripting-，恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的-html代码-javascript代码-会被执行，从而达到恶意攻击用户的特殊目的。" class="headerlink" title="xxs 跨站脚本攻击(Cross Site Scripting)，恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的 (html代码/javascript代码) 会被执行，从而达到恶意攻击用户的特殊目的。"></a>xxs 跨站脚本攻击(Cross Site Scripting)，恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的 (html代码/javascript代码) 会被执行，从而达到恶意攻击用户的特殊目的。</h6><h6 id="最终目的是为了获取用户信息，网站存在xxs，csrf就无从谈起"><a href="#最终目的是为了获取用户信息，网站存在xxs，csrf就无从谈起" class="headerlink" title="最终目的是为了获取用户信息，网站存在xxs，csrf就无从谈起"></a>最终目的是为了获取用户信息，网站存在xxs，csrf就无从谈起</h6><p>防范</p><h6 id="首先代码里对用户输入的地方和变量都需要仔细检查长度和对”-lt-”-”-gt-”-”-”-”’”等字符做过滤；"><a href="#首先代码里对用户输入的地方和变量都需要仔细检查长度和对”-lt-”-”-gt-”-”-”-”’”等字符做过滤；" class="headerlink" title="首先代码里对用户输入的地方和变量都需要仔细检查长度和对”&lt;”,”&gt;”,”;”,”’”等字符做过滤；"></a>首先代码里对用户输入的地方和变量都需要仔细检查长度和对”&lt;”,”&gt;”,”;”,”’”等字符做过滤；</h6><h6 id="其次任何内容写到页面之前都必须加以encode，避免不小心把html-tag弄出来。这一个层面做好，至少可以堵住超过一半的XSS-攻击。"><a href="#其次任何内容写到页面之前都必须加以encode，避免不小心把html-tag弄出来。这一个层面做好，至少可以堵住超过一半的XSS-攻击。" class="headerlink" title="其次任何内容写到页面之前都必须加以encode，避免不小心把html tag弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击。"></a>其次任何内容写到页面之前都必须加以encode，避免不小心把html tag弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击。</h6><h6 id="避免直接在cookie-中泄露用户隐私，例如email、密码等等。"><a href="#避免直接在cookie-中泄露用户隐私，例如email、密码等等。" class="headerlink" title="避免直接在cookie 中泄露用户隐私，例如email、密码等等。"></a>避免直接在cookie 中泄露用户隐私，例如email、密码等等。</h6><h6 id="通过使cookie-和系统ip-绑定来降低cookie-泄露后的危险。这样攻击者得到的cookie-没有实际价值，不可能拿来重放。"><a href="#通过使cookie-和系统ip-绑定来降低cookie-泄露后的危险。这样攻击者得到的cookie-没有实际价值，不可能拿来重放。" class="headerlink" title="通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。"></a>通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。</h6><h6 id="如果网站不需要再浏览器端对cookie-进行操作，可以在Set-Cookie-末尾加上HttpOnly-来防止javascript-代码直接获取cookie-。"><a href="#如果网站不需要再浏览器端对cookie-进行操作，可以在Set-Cookie-末尾加上HttpOnly-来防止javascript-代码直接获取cookie-。" class="headerlink" title="如果网站不需要再浏览器端对cookie 进行操作，可以在Set-Cookie 末尾加上HttpOnly 来防止javascript 代码直接获取cookie 。"></a>如果网站不需要再浏览器端对cookie 进行操作，可以在Set-Cookie 末尾加上HttpOnly 来防止javascript 代码直接获取cookie 。</h6><h6 id="尽量采用POST-而非GET-提交表单"><a href="#尽量采用POST-而非GET-提交表单" class="headerlink" title="尽量采用POST 而非GET 提交表单"></a>尽量采用POST 而非GET 提交表单</h6><h3 id="CSRF-伪造用户身份去干事情"><a href="#CSRF-伪造用户身份去干事情" class="headerlink" title="CSRF 伪造用户身份去干事情"></a>CSRF 伪造用户身份去干事情</h3><h6 id="检查referer-X-Requested-With-Orign头"><a href="#检查referer-X-Requested-With-Orign头" class="headerlink" title="检查referer, X-Requested-With, Orign头"></a>检查referer, X-Requested-With, Orign头</h6><h6 id="使用POST代替GET"><a href="#使用POST代替GET" class="headerlink" title="使用POST代替GET"></a>使用POST代替GET</h6><h6 id="添加校验Token至表单中"><a href="#添加校验Token至表单中" class="headerlink" title="添加校验Token至表单中"></a>添加校验Token至表单中</h6><h6 id="添加验证码或其他人机验证手段，如-Google-的-recaptcha"><a href="#添加验证码或其他人机验证手段，如-Google-的-recaptcha" class="headerlink" title="添加验证码或其他人机验证手段，如 Google 的 recaptcha"></a>添加验证码或其他人机验证手段，如 Google 的 recaptcha</h6><h6 id="把Token放到自定义的HTTP-Header-Cookie-to-Header-Token"><a href="#把Token放到自定义的HTTP-Header-Cookie-to-Header-Token" class="headerlink" title="把Token放到自定义的HTTP Header, Cookie-to-Header Token"></a>把Token放到自定义的HTTP Header, Cookie-to-Header Token</h6>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-picture-upload</title>
    <link href="/2017/08/26/vue-picture-upload/"/>
    <url>/2017/08/26/vue-picture-upload/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="base64编码上传图片的vue组件"><a href="#base64编码上传图片的vue组件" class="headerlink" title="base64编码上传图片的vue组件"></a>base64编码上传图片的vue组件</h6><h6 id="通过-npm-install-picture-upload-–save-安装到相应的项目下"><a href="#通过-npm-install-picture-upload-–save-安装到相应的项目下" class="headerlink" title="通过 npm install picture-upload –save 安装到相应的项目下"></a>通过 npm install picture-upload –save 安装到相应的项目下</h6><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><h6 id="需要用到该组件时-下面是一个demo"><a href="#需要用到该组件时-下面是一个demo" class="headerlink" title="需要用到该组件时(下面是一个demo)"></a>需要用到该组件时(下面是一个demo)</h6><pre><code>&lt;template&gt;&lt;div class=&quot;demo&quot;&gt;    &lt;PictureUpload v-on:imgInfo = &#39;getInfo&#39;&gt;&lt;/PictureUpload&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;  import PictureUpload from &#39;picture-upload&#39;  import Css from &#39;picture-upload/dist/picture-upload.min.css&#39;  export default &#123;  name: &#39;demo&#39;,  data () &#123;    return &#123;    &#125;  &#125;,  components:&#123;    PictureUpload  &#125;,  methods:&#123;    getInfo(imgInfo)&#123;      console.log(imgInfo)    &#125;  &#125;&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><h3 id="demo讲解"><a href="#demo讲解" class="headerlink" title="demo讲解"></a>demo讲解</h3><h6 id="getInfo方法的参数imginfo是一个json数组"><a href="#getInfo方法的参数imginfo是一个json数组" class="headerlink" title="getInfo方法的参数imginfo是一个json数组"></a>getInfo方法的参数imginfo是一个json数组</h6><h6 id="各参数如下"><a href="#各参数如下" class="headerlink" title="各参数如下"></a>各参数如下</h6><h6 id="‘format’-format-转化后的格式"><a href="#‘format’-format-转化后的格式" class="headerlink" title="‘format’: format, //转化后的格式"></a>‘format’: format, //转化后的格式</h6><h6 id="‘base’-base-转化后的base码"><a href="#‘base’-base-转化后的base码" class="headerlink" title="‘base’ : base, //转化后的base码"></a>‘base’ : base, //转化后的base码</h6><h6 id="‘fullInfo’-fullInfo-全部信息"><a href="#‘fullInfo’-fullInfo-全部信息" class="headerlink" title="‘fullInfo’: fullInfo //全部信息"></a>‘fullInfo’: fullInfo //全部信息</h6><h6 id="必要时可以在控制台打印出来看一下"><a href="#必要时可以在控制台打印出来看一下" class="headerlink" title="必要时可以在控制台打印出来看一下"></a>必要时可以在控制台打印出来看一下</h6><p><a href="https://github.com/zhangfuli/picture-upload">项目地址</a></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017小学期--6.29</title>
    <link href="/2017/08/24/%E5%85%94%E5%AD%90%E6%8C%82%E8%BD%BD%E5%99%A8/"/>
    <url>/2017/08/24/%E5%85%94%E5%AD%90%E6%8C%82%E8%BD%BD%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="英雄联盟玩家自制皮肤挂载教程"><a href="#英雄联盟玩家自制皮肤挂载教程" class="headerlink" title="英雄联盟玩家自制皮肤挂载教程"></a>英雄联盟玩家自制皮肤挂载教程</h4><p><a href="http://huangtuzi1314.lofter.com/post/1e97fda3_10f249bd">教程</a></p><h4 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h4><h4 id="链接：http-pan-baidu-com-s-1jIn9JLW-密码：r7yy"><a href="#链接：http-pan-baidu-com-s-1jIn9JLW-密码：r7yy" class="headerlink" title="链接：http://pan.baidu.com/s/1jIn9JLW 密码：r7yy"></a>链接：<a href="http://pan.baidu.com/s/1jIn9JLW">http://pan.baidu.com/s/1jIn9JLW</a> 密码：r7yy</h4>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017小学期--6.30</title>
    <link href="/2017/06/30/2017%E5%B0%8F%E5%AD%A6%E6%9C%9F-6-30/"/>
    <url>/2017/06/30/2017%E5%B0%8F%E5%AD%A6%E6%9C%9F-6-30/</url>
    
    <content type="html"><![CDATA[<h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><h6 id="Java的反射机制是在编译时并不确定是哪个类被加载了，而是在程序运行的时候才加载、探知、自审。使用的是在编译期并不知道的类。这样的编译特点就是java反射。"><a href="#Java的反射机制是在编译时并不确定是哪个类被加载了，而是在程序运行的时候才加载、探知、自审。使用的是在编译期并不知道的类。这样的编译特点就是java反射。" class="headerlink" title="Java的反射机制是在编译时并不确定是哪个类被加载了，而是在程序运行的时候才加载、探知、自审。使用的是在编译期并不知道的类。这样的编译特点就是java反射。"></a>Java的反射机制是在编译时并不确定是哪个类被加载了，而是在程序运行的时候才加载、探知、自审。使用的是在编译期并不知道的类。这样的编译特点就是java反射。</h6><h6 id="要正确使用Java反射机制就得使用java-lang-Class这个类。它是Java反射机制的起源。当一个类被加载以后，Java虚拟机就会自动产生一个Class对象。通过这个Class对象我们就能获得加载到虚拟机当中这个Class对象对应的方法、成员以及构造方法的声明和定义等信息。"><a href="#要正确使用Java反射机制就得使用java-lang-Class这个类。它是Java反射机制的起源。当一个类被加载以后，Java虚拟机就会自动产生一个Class对象。通过这个Class对象我们就能获得加载到虚拟机当中这个Class对象对应的方法、成员以及构造方法的声明和定义等信息。" class="headerlink" title="要正确使用Java反射机制就得使用java.lang.Class这个类。它是Java反射机制的起源。当一个类被加载以后，Java虚拟机就会自动产生一个Class对象。通过这个Class对象我们就能获得加载到虚拟机当中这个Class对象对应的方法、成员以及构造方法的声明和定义等信息。"></a>要正确使用Java反射机制就得使用java.lang.Class这个类。它是Java反射机制的起源。当一个类被加载以后，Java虚拟机就会自动产生一个Class对象。通过这个Class对象我们就能获得加载到虚拟机当中这个Class对象对应的方法、成员以及构造方法的声明和定义等信息。</h6><h6 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h6><h6 id="servlet"><a href="#servlet" class="headerlink" title="servlet *"></a>servlet *</h6><h6 id="public-class-Class"><a href="#public-class-Class" class="headerlink" title="public class Class"></a>public class Class</h6><h6 id="Class-Dog类的类对象永不回收——模板"><a href="#Class-Dog类的类对象永不回收——模板" class="headerlink" title="Class Dog类的类对象永不回收——模板"></a>Class Dog类的类对象永不回收——模板</h6><h6 id="Dog类很多实例对象，很多方法。只需将方法实例化为类对象，属性各自存"><a href="#Dog类很多实例对象，很多方法。只需将方法实例化为类对象，属性各自存" class="headerlink" title="Dog类很多实例对象，很多方法。只需将方法实例化为类对象，属性各自存"></a>Dog类很多实例对象，很多方法。只需将方法实例化为类对象，属性各自存</h6><h6 id="传来http请求–-gt-封装成servlet对象–-gt-找method方法–-gt-对应的doGet-doPost…"><a href="#传来http请求–-gt-封装成servlet对象–-gt-找method方法–-gt-对应的doGet-doPost…" class="headerlink" title="传来http请求–&gt;封装成servlet对象–&gt;找method方法–&gt;对应的doGet(doPost…)"></a>传来http请求–&gt;封装成servlet对象–&gt;找method方法–&gt;对应的doGet(doPost…)</h6><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><h6 id="请求响应模型-request-response"><a href="#请求响应模型-request-response" class="headerlink" title="请求响应模型: request response"></a>请求响应模型: request response</h6><p>######轮巡，长链接(Netty)</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017小学期--7.2</title>
    <link href="/2017/06/30/2017%E5%B0%8F%E5%AD%A6%E6%9C%9F-7-2/"/>
    <url>/2017/06/30/2017%E5%B0%8F%E5%AD%A6%E6%9C%9F-7-2/</url>
    
    <content type="html"><![CDATA[<h3 id="JSP-html-servlet"><a href="#JSP-html-servlet" class="headerlink" title="JSP = html + servlet"></a>JSP = html + servlet</h3><h3 id="jsp生命周期"><a href="#jsp生命周期" class="headerlink" title="jsp生命周期"></a>jsp生命周期</h3><h6 id="jsp–-gt-转译-jsp语法错误-–-gt-Servlet–-gt-编译-java编译失败-–-gt-字节码文件–-gt-加载–-gt-实例化–-gt-初始化–-gt-服务–-gt-destroy"><a href="#jsp–-gt-转译-jsp语法错误-–-gt-Servlet–-gt-编译-java编译失败-–-gt-字节码文件–-gt-加载–-gt-实例化–-gt-初始化–-gt-服务–-gt-destroy" class="headerlink" title="jsp–&gt;转译(jsp语法错误)–&gt;Servlet–&gt;编译(java编译失败)–&gt;字节码文件–&gt;加载–&gt;实例化–&gt;初始化–&gt;服务–&gt;destroy"></a>jsp–&gt;转译(jsp语法错误)–&gt;Servlet–&gt;编译(java编译失败)–&gt;字节码文件–&gt;加载–&gt;实例化–&gt;初始化–&gt;服务–&gt;destroy</h6><h6 id="服务器根据后缀名分静态跟动态网站"><a href="#服务器根据后缀名分静态跟动态网站" class="headerlink" title="服务器根据后缀名分静态跟动态网站"></a>服务器根据后缀名分静态跟动态网站</h6><h3 id="控制器："><a href="#控制器：" class="headerlink" title="控制器："></a>控制器：</h3><h6 id="接受请求对象和响应对象"><a href="#接受请求对象和响应对象" class="headerlink" title="接受请求对象和响应对象"></a>接受请求对象和响应对象</h6><h6 id="提取表单数据"><a href="#提取表单数据" class="headerlink" title="提取表单数据"></a>提取表单数据</h6><h6 id="pojo中处理对话、调用模型"><a href="#pojo中处理对话、调用模型" class="headerlink" title="pojo中处理对话、调用模型"></a>pojo中处理对话、调用模型</h6><h6 id="根据第5步的结果调用jsp"><a href="#根据第5步的结果调用jsp" class="headerlink" title="根据第5步的结果调用jsp"></a>根据第5步的结果调用jsp</h6><h3 id="模型层："><a href="#模型层：" class="headerlink" title="模型层："></a>模型层：</h3><h6 id="数据检查"><a href="#数据检查" class="headerlink" title="数据检查"></a>数据检查</h6><h6 id="处理sql"><a href="#处理sql" class="headerlink" title="处理sql"></a>处理sql</h6><h6 id="执行业务"><a href="#执行业务" class="headerlink" title="执行业务"></a>执行业务</h6><h6 id="处理数据业务"><a href="#处理数据业务" class="headerlink" title="处理数据业务"></a>处理数据业务</h6><h6 id="返回执行结果"><a href="#返回执行结果" class="headerlink" title="返回执行结果"></a>返回执行结果</h6><h3 id="jsp："><a href="#jsp：" class="headerlink" title="jsp："></a>jsp：</h3><h6 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h6><h3 id="线程作用域"><a href="#线程作用域" class="headerlink" title="线程作用域"></a>线程作用域</h3><h6 id="requestScope"><a href="#requestScope" class="headerlink" title="requestScope"></a>requestScope</h6><h6 id="sessionScope–同一个会话的多个servlet"><a href="#sessionScope–同一个会话的多个servlet" class="headerlink" title="sessionScope–同一个会话的多个servlet"></a>sessionScope–同一个会话的多个servlet</h6><h3 id="URL"><a href="#URL" class="headerlink" title="URL:"></a>URL:</h3><h6 id="统一资源定位器一个页面的名字"><a href="#统一资源定位器一个页面的名字" class="headerlink" title="统一资源定位器一个页面的名字"></a>统一资源定位器一个页面的名字</h6><h6 id="协议-IP-port-filename-xxx-queryString"><a href="#协议-IP-port-filename-xxx-queryString" class="headerlink" title="协议://IP:port//filename.xxx[?queryString]"></a>协议://IP:port//filename.xxx[?queryString]</h6><h6 id=""><a href="#" class="headerlink" title="/"></a>/</h6><h6 id="对于IE代表的是—-gt-http-ip-port"><a href="#对于IE代表的是—-gt-http-ip-port" class="headerlink" title="对于IE代表的是—&gt;http://ip:port/"></a>对于IE代表的是—&gt;<a href="http://ip:port/">http://ip:port/</a></h6><h6 id="对于web容器而言—-gt-本应用程序的根"><a href="#对于web容器而言—-gt-本应用程序的根" class="headerlink" title="对于web容器而言—&gt;本应用程序的根"></a>对于web容器而言—&gt;本应用程序的根</h6><h6 id="servlet页面跳转的方法"><a href="#servlet页面跳转的方法" class="headerlink" title="servlet页面跳转的方法:"></a>servlet页面跳转的方法:</h6><h6 id="站内转发：-req-getRequestDispatcher-“url”-forward-req-resp"><a href="#站内转发：-req-getRequestDispatcher-“url”-forward-req-resp" class="headerlink" title="站内转发： req.getRequestDispatcher(“url”).forward(req,resp)"></a>站内转发： req.getRequestDispatcher(“url”).forward(req,resp)</h6><h6 id="重定向-resp-sendRedirect"><a href="#重定向-resp-sendRedirect" class="headerlink" title="重定向: resp.sendRedirect()"></a>重定向: resp.sendRedirect()</h6><h3 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP(面向切面编程)"></a>AOP(面向切面编程)</h3><h6 id="切面："><a href="#切面：" class="headerlink" title="切面："></a>切面：</h6><h6 id="通知："><a href="#通知：" class="headerlink" title="通知："></a>通知：</h6><h6 id="web部署描述符"><a href="#web部署描述符" class="headerlink" title="web部署描述符"></a>web部署描述符</h6><h6 id="根据filter-mapping决定执行顺序"><a href="#根据filter-mapping决定执行顺序" class="headerlink" title="根据filter-mapping决定执行顺序"></a>根据filter-mapping决定执行顺序</h6><h6 id="struts2-按需导包"><a href="#struts2-按需导包" class="headerlink" title="struts2 按需导包"></a>struts2 按需导包</h6><h6 id="加载jar包"><a href="#加载jar包" class="headerlink" title="加载jar包"></a>加载jar包</h6><h6 id="拦截请求"><a href="#拦截请求" class="headerlink" title="拦截请求"></a>拦截请求</h6><h6 id="定义xml文件"><a href="#定义xml文件" class="headerlink" title="定义xml文件"></a>定义xml文件</h6><h6 id="编写action"><a href="#编写action" class="headerlink" title="编写action"></a>编写action</h6><h6 id="做页面跳转"><a href="#做页面跳转" class="headerlink" title="做页面跳转"></a>做页面跳转</h6><h6 id="action是MVC的model"><a href="#action是MVC的model" class="headerlink" title="action是MVC的model"></a>action是MVC的model</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017小学期--6.29</title>
    <link href="/2017/06/29/2017%E5%B0%8F%E5%AD%A6%E6%9C%9F-6-29/"/>
    <url>/2017/06/29/2017%E5%B0%8F%E5%AD%A6%E6%9C%9F-6-29/</url>
    
    <content type="html"><![CDATA[<h3 id="软件以数据驱动"><a href="#软件以数据驱动" class="headerlink" title="软件以数据驱动"></a>软件以数据驱动</h3><h3 id="主键选择原则：非空、唯一、稳定-很难满足"><a href="#主键选择原则：非空、唯一、稳定-很难满足" class="headerlink" title="主键选择原则：非空、唯一、稳定(很难满足)"></a>主键选择原则：非空、唯一、稳定(很难满足)</h3><h6 id="在设计表时，额外增加无意义的序列作为主键-自动递增"><a href="#在设计表时，额外增加无意义的序列作为主键-自动递增" class="headerlink" title="在设计表时，额外增加无意义的序列作为主键,自动递增"></a>在设计表时，额外增加无意义的序列作为主键,自动递增</h6><h6 id="生产中没有外键"><a href="#生产中没有外键" class="headerlink" title="生产中没有外键"></a>生产中没有外键</h6><h3 id="sql语句执行步骤"><a href="#sql语句执行步骤" class="headerlink" title="sql语句执行步骤"></a>sql语句执行步骤</h3><h6 id="语法检查、编译、优化、存储-增加效率-、执行"><a href="#语法检查、编译、优化、存储-增加效率-、执行" class="headerlink" title="语法检查、编译、优化、存储(增加效率)、执行"></a>语法检查、编译、优化、存储(增加效率)、执行</h6><h6 id="优先取效率"><a href="#优先取效率" class="headerlink" title="优先取效率"></a>优先取效率</h6><h3 id="from子句跟的是左侧表"><a href="#from子句跟的是左侧表" class="headerlink" title="from子句跟的是左侧表"></a>from子句跟的是左侧表</h3><h6 id="内连接查询-两重for循环"><a href="#内连接查询-两重for循环" class="headerlink" title="内连接查询(两重for循环)"></a>内连接查询(两重for循环)</h6><pre><code>select e.empno,e.ename,d.namefrom dept dinner join emp eon d.deptno = e.deptnowhere e.</code></pre><h6 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h6><pre><code>select *from dept dleft outer join emp eon d.deptno = e.deptno</code></pre><h6 id="左侧表都出来，右侧表只出现满足on条件的"><a href="#左侧表都出来，右侧表只出现满足on条件的" class="headerlink" title="左侧表都出来，右侧表只出现满足on条件的"></a>左侧表都出来，右侧表只出现满足on条件的</h6><pre><code>select *from dept dright outer join emp eon d.deptno = e.deptno</code></pre><h6 id="右侧表都出来，左侧表只出现满足on条件的"><a href="#右侧表都出来，左侧表只出现满足on条件的" class="headerlink" title="右侧表都出来，左侧表只出现满足on条件的"></a>右侧表都出来，左侧表只出现满足on条件的</h6><pre><code>select *from dept dfull outer join emp eon d.deptno = e.deptno</code></pre><h6 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h6><pre><code>insert into emp()values</code></pre><h3 id="JDBC框架"><a href="#JDBC框架" class="headerlink" title="JDBC框架"></a>JDBC框架</h3><h6 id="框架：一组可复用的功能相近的代码的总称"><a href="#框架：一组可复用的功能相近的代码的总称" class="headerlink" title="框架：一组可复用的功能相近的代码的总称"></a>框架：一组可复用的功能相近的代码的总称</h6><h6 id="static静态代码块，自动的只执行一次，位置可以随便放，它不在任何的方法体内"><a href="#static静态代码块，自动的只执行一次，位置可以随便放，它不在任何的方法体内" class="headerlink" title="static静态代码块，自动的只执行一次，位置可以随便放，它不在任何的方法体内"></a>static静态代码块，自动的只执行一次，位置可以随便放，它不在任何的方法体内</h6><pre><code>static&#123;&#125;</code></pre><h6 id="static对象可以在它的任何对象创建之前访问，无需引用任何对象。"><a href="#static对象可以在它的任何对象创建之前访问，无需引用任何对象。" class="headerlink" title="static对象可以在它的任何对象创建之前访问，无需引用任何对象。"></a>static对象可以在它的任何对象创建之前访问，无需引用任何对象。</h6><h6 id="用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。"><a href="#用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。" class="headerlink" title="用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。"></a>用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。</h6><h6 id="静态变量在内存中只有一个拷贝（节省内存）"><a href="#静态变量在内存中只有一个拷贝（节省内存）" class="headerlink" title="静态变量在内存中只有一个拷贝（节省内存）"></a>静态变量在内存中只有一个拷贝（节省内存）</h6><h6 id="静态方法中不能用this和super关键字"><a href="#静态方法中不能用this和super关键字" class="headerlink" title="静态方法中不能用this和super关键字"></a>静态方法中不能用this和super关键字</h6><h6 id="static-final用来修饰成员变量和成员方法，可简单理解为“全局常量”"><a href="#static-final用来修饰成员变量和成员方法，可简单理解为“全局常量”" class="headerlink" title="static final用来修饰成员变量和成员方法，可简单理解为“全局常量”"></a>static final用来修饰成员变量和成员方法，可简单理解为“全局常量”</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017小学期--6.28</title>
    <link href="/2017/06/28/2017%E5%B0%8F%E5%AD%A6%E6%9C%9F-6-28/"/>
    <url>/2017/06/28/2017%E5%B0%8F%E5%AD%A6%E6%9C%9F-6-28/</url>
    
    <content type="html"><![CDATA[<h3 id="相同代码不写两遍"><a href="#相同代码不写两遍" class="headerlink" title="相同代码不写两遍"></a>相同代码不写两遍</h3><h3 id="类库的使用能力"><a href="#类库的使用能力" class="headerlink" title="类库的使用能力"></a>类库的使用能力</h3><h3 id="类"><a href="#类" class="headerlink" title="类:"></a>类:</h3><h5 id="1-组织基本单位"><a href="#1-组织基本单位" class="headerlink" title="1.组织基本单位"></a>1.组织基本单位</h5><h5 id="2-现实事物的抽象-一种-—–-gt-1-名-2-功能-方法-3-信息-属性"><a href="#2-现实事物的抽象-一种-—–-gt-1-名-2-功能-方法-3-信息-属性" class="headerlink" title="2.现实事物的抽象 一种 —–&gt; 1.名 2.功能(方法) 3.信息(属性)"></a>2.现实事物的抽象 一种 —–&gt; 1.名 2.功能(方法) 3.信息(属性)</h5><h5 id="3-类是对象的模板-决定了对象的一切-实例化"><a href="#3-类是对象的模板-决定了对象的一切-实例化" class="headerlink" title="3.类是对象的模板,决定了对象的一切(实例化)"></a>3.类是对象的模板,决定了对象的一切(实例化)</h5><h5 id="4-对象-存在于计算机内存中，用于模拟客观世界事物的个体"><a href="#4-对象-存在于计算机内存中，用于模拟客观世界事物的个体" class="headerlink" title="4.对象:存在于计算机内存中，用于模拟客观世界事物的个体"></a>4.对象:存在于计算机内存中，用于模拟客观世界事物的个体</h5><h5 id="构造方法：对所欲属性赋值为0"><a href="#构造方法：对所欲属性赋值为0" class="headerlink" title="构造方法：对所欲属性赋值为0"></a>构造方法：对所欲属性赋值为0</h5><h5 id="重载：解决方法方法名的难题，是一种现象，在一个类的内部，方法名"><a href="#重载：解决方法方法名的难题，是一种现象，在一个类的内部，方法名" class="headerlink" title="重载：解决方法方法名的难题，是一种现象，在一个类的内部，方法名"></a>重载：解决方法方法名的难题，是一种现象，在一个类的内部，方法名</h5><h5 id="相同，参数列表不同。"><a href="#相同，参数列表不同。" class="headerlink" title="相同，参数列表不同。"></a>相同，参数列表不同。</h5><h5 id="注意：满足以上三个条件的现象叫做方法重载ii，与返回类型无关"><a href="#注意：满足以上三个条件的现象叫做方法重载ii，与返回类型无关" class="headerlink" title="注意：满足以上三个条件的现象叫做方法重载ii，与返回类型无关"></a>注意：满足以上三个条件的现象叫做方法重载ii，与返回类型无关</h5><h6 id="方法重写："><a href="#方法重写：" class="headerlink" title="方法重写："></a>方法重写：</h6><h6 id="1-方法覆盖，存在于子父类之间-父类方法不是抽象，super-name"><a href="#1-方法覆盖，存在于子父类之间-父类方法不是抽象，super-name" class="headerlink" title="1.方法覆盖，存在于子父类之间(父类方法不是抽象，super.name)"></a>1.方法覆盖，存在于子父类之间(父类方法不是抽象，super.name)</h6><h6 id="2-方法重写，重新改写，父类方法是抽象的"><a href="#2-方法重写，重新改写，父类方法是抽象的" class="headerlink" title="2.方法重写，重新改写，父类方法是抽象的"></a>2.方法重写，重新改写，父类方法是抽象的</h6><h6 id="面向对象三大特征：封装、继承、多态、-抽象"><a href="#面向对象三大特征：封装、继承、多态、-抽象" class="headerlink" title="面向对象三大特征：封装、继承、多态、(抽象)"></a>面向对象三大特征：封装、继承、多态、(抽象)</h6><h6 id="封装：细节隐藏、封装使同一个类的多个对象之间是相互独立的个体"><a href="#封装：细节隐藏、封装使同一个类的多个对象之间是相互独立的个体" class="headerlink" title="封装：细节隐藏、封装使同一个类的多个对象之间是相互独立的个体"></a>封装：细节隐藏、封装使同一个类的多个对象之间是相互独立的个体</h6><h6 id="org-共享-、com-基础"><a href="#org-共享-、com-基础" class="headerlink" title="org(共享)、com(基础)"></a>org(共享)、com(基础)</h6><h6 id="抽象类：用abstract修饰的，防止实例化。"><a href="#抽象类：用abstract修饰的，防止实例化。" class="headerlink" title="抽象类：用abstract修饰的，防止实例化。"></a>抽象类：用abstract修饰的，防止实例化。</h6><h6 id="接口：特殊的抽象类，所有方法都是抽象方法。约束实现类的行为，弥补java单继承的不足，属性都是常量"><a href="#接口：特殊的抽象类，所有方法都是抽象方法。约束实现类的行为，弥补java单继承的不足，属性都是常量" class="headerlink" title="接口：特殊的抽象类，所有方法都是抽象方法。约束实现类的行为，弥补java单继承的不足，属性都是常量"></a>接口：特殊的抽象类，所有方法都是抽象方法。约束实现类的行为，弥补java单继承的不足，属性都是常量</h6><h6 id="final修饰的是常量也可以不是常量，final方法不能被覆盖，final类不能被继承，final形参，final临时变量"><a href="#final修饰的是常量也可以不是常量，final方法不能被覆盖，final类不能被继承，final形参，final临时变量" class="headerlink" title="final修饰的是常量也可以不是常量，final方法不能被覆盖，final类不能被继承，final形参，final临时变量"></a>final修饰的是常量也可以不是常量，final方法不能被覆盖，final类不能被继承，final形参，final临时变量</h6><h6 id="多态：对同一个类的不同对象的相同方法的调用，产生不同的结果"><a href="#多态：对同一个类的不同对象的相同方法的调用，产生不同的结果" class="headerlink" title="多态：对同一个类的不同对象的相同方法的调用，产生不同的结果"></a>多态：对同一个类的不同对象的相同方法的调用，产生不同的结果</h6><h6 id="软件开发：本质–-gt-应对持续变化的需求"><a href="#软件开发：本质–-gt-应对持续变化的需求" class="headerlink" title="软件开发：本质–&gt;应对持续变化的需求"></a>软件开发：本质–&gt;应对持续变化的需求</h6><h6 id="1-继承-构造"><a href="#1-继承-构造" class="headerlink" title="1.继承 构造"></a>1.继承 构造</h6><h6 id="2-f-float-f-f-double-f-f-1"><a href="#2-f-float-f-f-double-f-f-1" class="headerlink" title="2.f(float f) f(double f) f(1)"></a>2.f(float f) f(double f) f(1)</h6><h6 id="3-俩接口方法名相同，一个类继承这两个接口，调用这个方法"><a href="#3-俩接口方法名相同，一个类继承这两个接口，调用这个方法" class="headerlink" title="3.俩接口方法名相同，一个类继承这两个接口，调用这个方法"></a>3.俩接口方法名相同，一个类继承这两个接口，调用这个方法</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos配置ss</title>
    <link href="/2017/05/21/centos%E9%85%8D%E7%BD%AEss/"/>
    <url>/2017/05/21/centos%E9%85%8D%E7%BD%AEss/</url>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>pip install shadowsocks</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="新建-etc-shadowsocks-json-并写入"><a href="#新建-etc-shadowsocks-json-并写入" class="headerlink" title="新建/etc/shadowsocks.json,并写入"></a>新建/etc/shadowsocks.json,并写入</h4><pre><code>&#123;&quot;server&quot;:&quot;XXXX&quot;,   &quot;server_port&quot;:443,    &quot;local_address&quot;: &quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;password&quot;:&quot;XXXX&quot;, &quot;timeout&quot;:600,           &quot;method&quot;:&quot;aes-256-cfb&quot;,   &quot;fast_open&quot;: false</code></pre><p>}</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre><code>ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d start</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>geckodriver</title>
    <link href="/2017/05/16/geckodriver/"/>
    <url>/2017/05/16/geckodriver/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是geckodriver"><a href="#什么是geckodriver" class="headerlink" title="什么是geckodriver"></a>什么是geckodriver</h3><h6 id="geckodriver用来驱动firefox"><a href="#geckodriver用来驱动firefox" class="headerlink" title="geckodriver用来驱动firefox"></a>geckodriver用来驱动firefox</h6><h6 id="安装Xvfb"><a href="#安装Xvfb" class="headerlink" title="安装Xvfb"></a>安装Xvfb</h6><pre><code>yum updateyum install Xvfbyum -install libXfontyum install xorg-x11-fonts*</code></pre><h6 id="安装selenium、pyvirtualdisplay"><a href="#安装selenium、pyvirtualdisplay" class="headerlink" title="安装selenium、pyvirtualdisplay"></a>安装selenium、pyvirtualdisplay</h6><pre><code>pip install seleniumpip install pyvirtualdisplay</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h6 id="geckodriver是配合selenium来用的，我在centos7服务器上把下载下来的geckodriver放在在firefox的根目录里了。并且我也把它放在了-usr-local-bin-geckodriver"><a href="#geckodriver是配合selenium来用的，我在centos7服务器上把下载下来的geckodriver放在在firefox的根目录里了。并且我也把它放在了-usr-local-bin-geckodriver" class="headerlink" title="geckodriver是配合selenium来用的，我在centos7服务器上把下载下来的geckodriver放在在firefox的根目录里了。并且我也把它放在了/usr/local/bin/geckodriver"></a>geckodriver是配合selenium来用的，我在centos7服务器上把下载下来的geckodriver放在在firefox的根目录里了。并且我也把它放在了/usr/local/bin/geckodriver</h6><h6 id="如果没有放它会出现"><a href="#如果没有放它会出现" class="headerlink" title="如果没有放它会出现"></a>如果没有放它会出现</h6><pre><code>Message: &#39;geckodriver&#39; executable needs to be in PATH. </code></pre><h6 id="其实很早就做到这一步了，然后运行发现了这个错误"><a href="#其实很早就做到这一步了，然后运行发现了这个错误" class="headerlink" title="其实很早就做到这一步了，然后运行发现了这个错误"></a>其实很早就做到这一步了，然后运行发现了这个错误</h6><pre><code>selenium: &#39;geckodriver&#39; executable may have wrong permissions</code></pre><h6 id="这个问题确实困扰了很长时间，加上现在一直在考试，脑核疼啊…"><a href="#这个问题确实困扰了很长时间，加上现在一直在考试，脑核疼啊…" class="headerlink" title="这个问题确实困扰了很长时间，加上现在一直在考试，脑核疼啊…"></a>这个问题确实困扰了很长时间，加上现在一直在考试，脑核疼啊…</h6><h6 id="最终还是找到了解决方案，运行一下，给geckodriver执行权限"><a href="#最终还是找到了解决方案，运行一下，给geckodriver执行权限" class="headerlink" title="最终还是找到了解决方案，运行一下，给geckodriver执行权限"></a>最终还是找到了解决方案，运行一下，给geckodriver执行权限</h6><pre><code>chmod +x /usr/local/bin/geckodriver</code></pre><h6 id="我的天，竟然没执行"><a href="#我的天，竟然没执行" class="headerlink" title="我的天，竟然没执行"></a>我的天，竟然没执行</h6><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre><code>import seleniumfrom selenium import webdriver      from pyvirtualdisplay import Display #无浏览器配置display = Display(visible = 0,size=(800,600))display.start()print &quot;display.start()&quot;driver = webdriver.Firefox()driver.get(&quot;http://www.baidu.com&quot;)print driver.current_url</code></pre>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular子页面</title>
    <link href="/2017/04/30/angular%E5%AD%90%E9%A1%B5%E9%9D%A2/"/>
    <url>/2017/04/30/angular%E5%AD%90%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="很多时候遇到从主页到子页面的情况，子页面只是信息不一样，而格式是完全一样的"><a href="#很多时候遇到从主页到子页面的情况，子页面只是信息不一样，而格式是完全一样的" class="headerlink" title="很多时候遇到从主页到子页面的情况，子页面只是信息不一样，而格式是完全一样的"></a>很多时候遇到从主页到子页面的情况，子页面只是信息不一样，而格式是完全一样的</h3><h4 id="方法一：通过a标签传递"><a href="#方法一：通过a标签传递" class="headerlink" title="方法一：通过a标签传递"></a>方法一：通过a标签传递</h4><h5 id="主页面是可以拿到一些子页面的信息的，这里比如说拿到了id"><a href="#主页面是可以拿到一些子页面的信息的，这里比如说拿到了id" class="headerlink" title="主页面是可以拿到一些子页面的信息的，这里比如说拿到了id"></a>主页面是可以拿到一些子页面的信息的，这里比如说拿到了id</h5><pre><code>&lt;a href=&quot;./discuss.html#foodid=&#123;&#123;this.food.id&#125;&#125;&quot;&gt;详情&amp;评论&lt;/a&gt;</code></pre><h5 id="在子页面中就可以对这个url进行字符串的切割或者正则匹配，就完全可以拿到id，可以加载进一步的操作"><a href="#在子页面中就可以对这个url进行字符串的切割或者正则匹配，就完全可以拿到id，可以加载进一步的操作" class="headerlink" title="在子页面中就可以对这个url进行字符串的切割或者正则匹配，就完全可以拿到id，可以加载进一步的操作"></a>在子页面中就可以对这个url进行字符串的切割或者正则匹配，就完全可以拿到id，可以加载进一步的操作</h5><h5 id="当然这种方法是非常笨的一种方法"><a href="#当然这种方法是非常笨的一种方法" class="headerlink" title="当然这种方法是非常笨的一种方法"></a>当然这种方法是非常笨的一种方法</h5><h4 id="方法二：XXXX-id"><a href="#方法二：XXXX-id" class="headerlink" title="方法二：XXXX:/id"></a>方法二：XXXX:/id</h4><h5 id="这是通过路由配置的，比如用-routeProvide配置路由"><a href="#这是通过路由配置的，比如用-routeProvide配置路由" class="headerlink" title="这是通过路由配置的，比如用$routeProvide配置路由"></a>这是通过路由配置的，比如用$routeProvide配置路由</h5><pre><code> .when(&#39;/:id&#39;, &#123;    templateUrl: &#39;XXXX&#39;,    controller: &#39;XXXX&#39;  &#125;)</code></pre><h5 id="同样，调用的时候"><a href="#同样，调用的时候" class="headerlink" title="同样，调用的时候"></a>同样，调用的时候</h5><pre><code>&lt;a href=&quot;/#/&#123;&#123;food.id&#125;&#125;&quot; class=&quot;noneunderline&quot;&gt;进去看看&lt;/a&gt;</code></pre><h5 id="在子页面中调用的时候就可以"><a href="#在子页面中调用的时候就可以" class="headerlink" title="在子页面中调用的时候就可以"></a>在子页面中调用的时候就可以</h5><pre><code>$routeParams.id</code></pre><h5 id="直接拿到id"><a href="#直接拿到id" class="headerlink" title="直接拿到id"></a>直接拿到id</h5><h5 id="通常都是用这种方法"><a href="#通常都是用这种方法" class="headerlink" title="通常都是用这种方法"></a>通常都是用这种方法</h5>]]></content>
    
    
    <categories>
      
      <category>angularjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angularjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>none&amp;&amp;undefined</title>
    <link href="/2017/04/24/none-undefined/"/>
    <url>/2017/04/24/none-undefined/</url>
    
    <content type="html"><![CDATA[<h3 id="总结一下null和undefined的区别"><a href="#总结一下null和undefined的区别" class="headerlink" title="总结一下null和undefined的区别"></a>总结一下null和undefined的区别</h3><h4 id="JavaScript两个都表示”无”。"><a href="#JavaScript两个都表示”无”。" class="headerlink" title="JavaScript两个都表示”无”。"></a>JavaScript两个都表示”无”。</h4><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><h5 id="将一个变量赋值为undefined或null，几乎没区别"><a href="#将一个变量赋值为undefined或null，几乎没区别" class="headerlink" title="将一个变量赋值为undefined或null，几乎没区别"></a>将一个变量赋值为undefined或null，几乎没区别</h5><pre><code>var a = null;var a = undefined;</code></pre><h5 id="undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等"><a href="#undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等" class="headerlink" title="undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等"></a>undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等</h5><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><h5 id="null表示”没有对象”，即该处不应该有值"><a href="#null表示”没有对象”，即该处不应该有值" class="headerlink" title="null表示”没有对象”，即该处不应该有值"></a>null表示”没有对象”，即该处不应该有值</h5><h5 id="undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。"><a href="#undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。" class="headerlink" title="undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。"></a>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。</h5><h4 id="null的特殊用法"><a href="#null的特殊用法" class="headerlink" title="null的特殊用法"></a>null的特殊用法</h4><h5 id="null被设计成可以自动转为0"><a href="#null被设计成可以自动转为0" class="headerlink" title="null被设计成可以自动转为0"></a>null被设计成可以自动转为0</h5><pre><code>null+1</code></pre><h4 id="结果为1"><a href="#结果为1" class="headerlink" title="结果为1"></a>结果为1</h4><pre><code>Number(null)</code></pre><h4 id="结果为0"><a href="#结果为0" class="headerlink" title="结果为0"></a>结果为0</h4>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ng2引入bootstrap、jquery</title>
    <link href="/2017/04/16/ng2%E5%BC%95%E5%85%A5bootstrap%E3%80%81jquery/"/>
    <url>/2017/04/16/ng2%E5%BC%95%E5%85%A5bootstrap%E3%80%81jquery/</url>
    
    <content type="html"><![CDATA[<h3 id="ng2笔记-angular-cli"><a href="#ng2笔记-angular-cli" class="headerlink" title="ng2笔记(angular-cli)"></a>ng2笔记(angular-cli)</h3><h6 id="ng2引入bootstrap、jquery"><a href="#ng2引入bootstrap、jquery" class="headerlink" title="ng2引入bootstrap、jquery"></a>ng2引入bootstrap、jquery</h6><pre><code>npm install ng2-bootstrap bootstrap --savenpm install jquery --save</code></pre><h6 id="在angular-cli-json里引入"><a href="#在angular-cli-json里引入" class="headerlink" title="在angular-cli.json里引入"></a>在angular-cli.json里引入</h6><pre><code>&quot;styles&quot;: [    &quot;styles.css&quot;,    &quot;../node_modules/bootstrap/dist/css/bootstrap.min.css&quot;  ], &quot;scripts&quot;: [    &quot;../node_modules/jquery/dist/jquery.min.js&quot;,    &quot;../node_modules/bootstrap/dist/js/bootstrap.min.js&quot; ]</code></pre>]]></content>
    
    
    <categories>
      
      <category>angularjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angularjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ng2的钩子函数</title>
    <link href="/2017/04/16/ng2%E7%9A%84%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    <url>/2017/04/16/ng2%E7%9A%84%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="ng2笔记"><a href="#ng2笔记" class="headerlink" title="ng2笔记"></a>ng2笔记</h3><h6 id="组件中存在很多声明周期钩子函数"><a href="#组件中存在很多声明周期钩子函数" class="headerlink" title="组件中存在很多声明周期钩子函数"></a>组件中存在很多声明周期钩子函数</h6><h6 id="ngOnChanges"><a href="#ngOnChanges" class="headerlink" title="ngOnChanges"></a>ngOnChanges</h6><h6 id="ngOnInit"><a href="#ngOnInit" class="headerlink" title="ngOnInit"></a>ngOnInit</h6><h6 id="ngOnDestroy"><a href="#ngOnDestroy" class="headerlink" title="ngOnDestroy"></a>ngOnDestroy</h6><h6 id="ngDoCheck"><a href="#ngDoCheck" class="headerlink" title="ngDoCheck"></a>ngDoCheck</h6><h6 id="ngAfterContentInit"><a href="#ngAfterContentInit" class="headerlink" title="ngAfterContentInit"></a>ngAfterContentInit</h6><h6 id="ngAfterContentChecked"><a href="#ngAfterContentChecked" class="headerlink" title="ngAfterContentChecked"></a>ngAfterContentChecked</h6><h6 id="ngAfterViewInit"><a href="#ngAfterViewInit" class="headerlink" title="ngAfterViewInit"></a>ngAfterViewInit</h6><h6 id="ngAfterViewChecked"><a href="#ngAfterViewChecked" class="headerlink" title="ngAfterViewChecked"></a>ngAfterViewChecked</h6><h6 id="它们的生命周期就跟英语意思一样，不需要多解释"><a href="#它们的生命周期就跟英语意思一样，不需要多解释" class="headerlink" title="它们的生命周期就跟英语意思一样，不需要多解释"></a>它们的生命周期就跟英语意思一样，不需要多解释</h6>]]></content>
    
    
    <categories>
      
      <category>angularjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angularjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ng不同controller之间传参</title>
    <link href="/2017/04/10/ng%E4%B8%8D%E5%90%8Ccontroller%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%8F%82/"/>
    <url>/2017/04/10/ng%E4%B8%8D%E5%90%8Ccontroller%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<h4 id="父作用域与子作用域"><a href="#父作用域与子作用域" class="headerlink" title="父作用域与子作用域"></a>父作用域与子作用域</h4><pre><code>&lt;div ng-controller=&quot;parent&quot;&gt;  &lt;p&gt;data in parent controller : &#123;&#123;data.name&#125;&#125;&lt;/p&gt;  &lt;div ng-controller=&quot;child&quot;&gt;    &lt;input type=&quot;text&quot; ng-model=&quot;data.name&quot;&gt;  &lt;/div&gt;&lt;/div&gt;var myApp = angular.module(&#39;myApp&#39;, []);    myApp.controller(&#39;parent&#39;, function  ($scope) &#123;         $scope.data = &#123;            name: &#39;123&#39;        &#125;    &#125;);     myApp.controller(&#39;child&#39;, function  ($scope) &#123;        $scope.name = &#39;&#39;;    &#125;); </code></pre><h4 id="平行作用域"><a href="#平行作用域" class="headerlink" title="平行作用域"></a>平行作用域</h4><h4 id="方法一、使用-rootScope直接绑定，这个就比较简单了，之前我的一篇博文也讲过"><a href="#方法一、使用-rootScope直接绑定，这个就比较简单了，之前我的一篇博文也讲过" class="headerlink" title="方法一、使用$rootScope直接绑定，这个就比较简单了，之前我的一篇博文也讲过"></a>方法一、使用$rootScope直接绑定，这个就比较简单了，之前我的一篇博文也讲过</h4><h4 id="方法二、注入服务"><a href="#方法二、注入服务" class="headerlink" title="方法二、注入服务"></a>方法二、注入服务</h4><pre><code>&lt;div ng-controller=&quot;first&quot;&gt;      &lt;input type=&quot;text&quot; ng-model=&quot;name&quot;&gt;           value:&#123;&#123;name&#125;&#125;       &lt;button ng-click=&quot;set()&quot;&gt;set&lt;/button&gt;&lt;/div&gt;&lt;div ng-controller=&quot;second&quot;&gt;    value:&#123;&#123;name&#125;&#125;&lt;/div&gt;var myApp = angular.module(&#39;myApp&#39;, []);    myApp.factory(&#39;myService&#39;, function() &#123;        var savedData = &#39;&#39;;        function set(data) &#123;           savedData = data;        &#125;        function get() &#123;             return savedData;        &#125;        return &#123;          set: set,          get: get        &#125;    &#125;);    myApp.controller(&#39;first&#39;, function ($scope, myService, $rootScope)&#123;        $scope.name = &#39;&#39;;        $scope.set = function ()&#123;            myService.set($scope.name);            console.log($scope.name);            $rootScope.$broadcast(&#39;send&#39;);        &#125;            &#125;);    myApp.controller(&#39;second&#39;, function ($scope, myService, $rootScope)&#123;        $rootScope.$on(&#39;send&#39;, function ()&#123;            $scope.name = myService.get();            &#125;);            &#125;);</code></pre><h4 id="方法三、基于localStorage"><a href="#方法三、基于localStorage" class="headerlink" title="方法三、基于localStorage"></a>方法三、基于localStorage</h4><pre><code>&lt;div ng-controller=&quot;first&quot;&gt;      &lt;/div&gt;&lt;div ng-controller=&quot;second&quot;&gt;    value:&#123;&#123;value&#125;&#125;&lt;/div&gt;var myApp = angular.module(&#39;myApp&#39;, []);    myApp.controller(&#39;first&#39;, function ($scope) &#123;      localStorage.setItem(&quot;key&quot;,&quot;value&quot;);    &#125;);    myApp.controller(&#39;second&#39;, function ($scope)&#123;        $scope.value = localStorage.getItem(&#39;key&#39;);    &#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>angularjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angularjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个js、网页之间的通信</title>
    <link href="/2017/04/08/%E4%B8%A4%E4%B8%AAjs%E3%80%81%E7%BD%91%E9%A1%B5%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <url>/2017/04/08/%E4%B8%A4%E4%B8%AAjs%E3%80%81%E7%BD%91%E9%A1%B5%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="两个js之间的通信–笔记"><a href="#两个js之间的通信–笔记" class="headerlink" title="两个js之间的通信–笔记"></a>两个js之间的通信–笔记</h3><h6 id="两个js之间通信，其中一个是写了一些全局-window-XXX-的或者经常用的数据，比如后台地址，这种情况。"><a href="#两个js之间通信，其中一个是写了一些全局-window-XXX-的或者经常用的数据，比如后台地址，这种情况。" class="headerlink" title="两个js之间通信，其中一个是写了一些全局(window.XXX)的或者经常用的数据，比如后台地址，这种情况。"></a>两个js之间通信，其中一个是写了一些全局(window.XXX)的或者经常用的数据，比如后台地址，这种情况。</h6><h6 id="平行文件夹下，新建一个config-js，里面定义一个数据，如："><a href="#平行文件夹下，新建一个config-js，里面定义一个数据，如：" class="headerlink" title="平行文件夹下，新建一个config.js，里面定义一个数据，如："></a>平行文件夹下，新建一个config.js，里面定义一个数据，如：</h6><pre><code>var url = &quot;http://XXXXXXXXXX&quot;</code></pre><h6 id="在你要调用的js下，直接url就可以了-其实不用在同级文件夹下建立就可以"><a href="#在你要调用的js下，直接url就可以了-其实不用在同级文件夹下建立就可以" class="headerlink" title="在你要调用的js下，直接url就可以了,其实不用在同级文件夹下建立就可以,"></a>在你要调用的js下，直接url就可以了,其实不用在同级文件夹下建立就可以,</h6><p>只要在html中引入js时config.js在你要调用数据的js前面就可以了</p><h6 id="在angular下，我通常情况下是把变量写在rootScope根作用域下"><a href="#在angular下，我通常情况下是把变量写在rootScope根作用域下" class="headerlink" title="在angular下，我通常情况下是把变量写在rootScope根作用域下"></a>在angular下，我通常情况下是把变量写在rootScope根作用域下</h6><h3 id="两个html之间的通信"><a href="#两个html之间的通信" class="headerlink" title="两个html之间的通信"></a>两个html之间的通信</h3><h6 id="网上有很多版本，比如写在session或localstorage里面，但是我试过，两个相互独立的页面是不能调用的，单页面应用才可以"><a href="#网上有很多版本，比如写在session或localstorage里面，但是我试过，两个相互独立的页面是不能调用的，单页面应用才可以" class="headerlink" title="网上有很多版本，比如写在session或localstorage里面，但是我试过，两个相互独立的页面是不能调用的，单页面应用才可以"></a>网上有很多版本，比如写在session或localstorage里面，但是我试过，两个相互独立的页面是不能调用的，单页面应用才可以</h6><h6 id="我是将把要传送的数据卸载链接里面，当然是小数据，如"><a href="#我是将把要传送的数据卸载链接里面，当然是小数据，如" class="headerlink" title="我是将把要传送的数据卸载链接里面，当然是小数据，如"></a>我是将把要传送的数据卸载链接里面，当然是小数据，如</h6><pre><code>&lt;a href=&quot;./discuss.html#id=123&quot; class=&quot;read&quot;&gt;详情&amp;评论&lt;/a&gt;</code></pre><h6 id="在另外一个页面里只需要对自己的url进行字符串或者正则切割就可以切割出想要的数据"><a href="#在另外一个页面里只需要对自己的url进行字符串或者正则切割就可以切割出想要的数据" class="headerlink" title="在另外一个页面里只需要对自己的url进行字符串或者正则切割就可以切割出想要的数据"></a>在另外一个页面里只需要对自己的url进行字符串或者正则切割就可以切割出想要的数据</h6>]]></content>
    
    
    <categories>
      
      <category>HTML CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二校企合作总结</title>
    <link href="/2017/03/22/%E5%A4%A7%E4%BA%8C%E6%A0%A1%E4%BC%81%E5%90%88%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <url>/2017/03/22/%E5%A4%A7%E4%BA%8C%E6%A0%A1%E4%BC%81%E5%90%88%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="把困难的是事情最小化，分解成自己可以解决的步骤"><a href="#把困难的是事情最小化，分解成自己可以解决的步骤" class="headerlink" title="把困难的是事情最小化，分解成自己可以解决的步骤"></a>把困难的是事情最小化，分解成自己可以解决的步骤</h3><h6 id="这是大二上学期的寒假，留校参加学校与澳氏企业的培训。从早晨8点到晚上9点不间断的20天左右。"><a href="#这是大二上学期的寒假，留校参加学校与澳氏企业的培训。从早晨8点到晚上9点不间断的20天左右。" class="headerlink" title="这是大二上学期的寒假，留校参加学校与澳氏企业的培训。从早晨8点到晚上9点不间断的20天左右。"></a>这是大二上学期的寒假，留校参加学校与澳氏企业的培训。从早晨8点到晚上9点不间断的20天左右。</h6><h6 id="一开始确实挺艰难的，全部的英文的论文，让我知道了英语确实是很重要的，我的英语底蕴确实"><a href="#一开始确实挺艰难的，全部的英文的论文，让我知道了英语确实是很重要的，我的英语底蕴确实" class="headerlink" title="一开始确实挺艰难的，全部的英文的论文，让我知道了英语确实是很重要的，我的英语底蕴确实"></a>一开始确实挺艰难的，全部的英文的论文，让我知道了英语确实是很重要的，我的英语底蕴确实</h6><p>要提高很多。第一次接触python，第一次用前端驱动做项目，第一次连续熬夜到凌晨3点。</p><h6 id="现在，总结一下吧，校企合作期间也很长时间没有写博客了。"><a href="#现在，总结一下吧，校企合作期间也很长时间没有写博客了。" class="headerlink" title="现在，总结一下吧，校企合作期间也很长时间没有写博客了。"></a>现在，总结一下吧，校企合作期间也很长时间没有写博客了。</h6><h6 id="英语很重要，很重要很重要！今年6月份的6级要考480以上！！"><a href="#英语很重要，很重要很重要！今年6月份的6级要考480以上！！" class="headerlink" title="英语很重要，很重要很重要！今年6月份的6级要考480以上！！"></a>英语很重要，很重要很重要！今年6月份的6级要考480以上！！</h6><h6 id="从零开始做的python，因为要处理很多数据-52w-，一开始想着用matlab做，但是为了挑战一下自己还是选择了python，因为以前没有做过类似于嵌入式的开发，所以很难着手。串口连接，处理图形，生成可执行文件等等。自己一点点查文档，要做一些波形的处理，要算一下功率谱密度-psd-……"><a href="#从零开始做的python，因为要处理很多数据-52w-，一开始想着用matlab做，但是为了挑战一下自己还是选择了python，因为以前没有做过类似于嵌入式的开发，所以很难着手。串口连接，处理图形，生成可执行文件等等。自己一点点查文档，要做一些波形的处理，要算一下功率谱密度-psd-……" class="headerlink" title="从零开始做的python，因为要处理很多数据(52w)，一开始想着用matlab做，但是为了挑战一下自己还是选择了python，因为以前没有做过类似于嵌入式的开发，所以很难着手。串口连接，处理图形，生成可执行文件等等。自己一点点查文档，要做一些波形的处理，要算一下功率谱密度(psd)……"></a>从零开始做的python，因为要处理很多数据(52w)，一开始想着用matlab做，但是为了挑战一下自己还是选择了python，因为以前没有做过类似于嵌入式的开发，所以很难着手。串口连接，处理图形，生成可执行文件等等。自己一点点查文档，要做一些波形的处理，要算一下功率谱密度(psd)……</h6><h6 id="一开始只是用lebview计算数据，自己也采集了很多组数据，跟参考专利基本一致。"><a href="#一开始只是用lebview计算数据，自己也采集了很多组数据，跟参考专利基本一致。" class="headerlink" title="一开始只是用lebview计算数据，自己也采集了很多组数据，跟参考专利基本一致。"></a>一开始只是用lebview计算数据，自己也采集了很多组数据，跟参考专利基本一致。</h6><h6 id="当然，在做完这些时，确实自己做的程序存在数据不准确的情况，自己也找出了bug所在，就是因为调用plt-psd-时，窗口-应该为blackman-没有选对。导致了数据出错，以为在这一步骤的后面还有大量的计算公式，例如要归一化，算出SFM-踝肱指数-，要算CI等。"><a href="#当然，在做完这些时，确实自己做的程序存在数据不准确的情况，自己也找出了bug所在，就是因为调用plt-psd-时，窗口-应该为blackman-没有选对。导致了数据出错，以为在这一步骤的后面还有大量的计算公式，例如要归一化，算出SFM-踝肱指数-，要算CI等。" class="headerlink" title="当然，在做完这些时，确实自己做的程序存在数据不准确的情况，自己也找出了bug所在，就是因为调用plt.psd()时，窗口(应该为blackman)没有选对。导致了数据出错，以为在这一步骤的后面还有大量的计算公式，例如要归一化，算出SFM(踝肱指数)，要算CI等。"></a>当然，在做完这些时，确实自己做的程序存在数据不准确的情况，自己也找出了bug所在，就是因为调用plt.psd()时，窗口(应该为blackman)没有选对。导致了数据出错，以为在这一步骤的后面还有大量的计算公式，例如要归一化，算出SFM(踝肱指数)，要算CI等。</h6><h6 id="离校答辩的时间也很近了，数据还是不准确，所以自己决定采用数据更准确的lebview计算，lebview自己也没有接触过，所以又得熬夜打通lebview的程序。总的来说分成两大块，串口通信和处理数据。串口通信程序按照文档还有网上搜集的大神的程序总算写出来了，但是还是遇到了监听不到串口的情况。把我自己写的lebview程序拿给老师看，老师那边确确实实可以监听到串口。自己很纳闷，仔细分析了自己的电脑跟老师的电脑的差异，一开始是怀疑自己的lebview版本的问题，因为我用的是2012版本的，但是现在最新的已经出到了2016。这只是怀疑，其实这次项目学到的最主要的还是一开始的那句话。仔细想想版本没有问题，自己没有DAQ驱动，因为这个驱动是数据采集驱动，自己也确实没有装过，安装好DAQ驱动后，确实可以监听到串口的数据了"><a href="#离校答辩的时间也很近了，数据还是不准确，所以自己决定采用数据更准确的lebview计算，lebview自己也没有接触过，所以又得熬夜打通lebview的程序。总的来说分成两大块，串口通信和处理数据。串口通信程序按照文档还有网上搜集的大神的程序总算写出来了，但是还是遇到了监听不到串口的情况。把我自己写的lebview程序拿给老师看，老师那边确确实实可以监听到串口。自己很纳闷，仔细分析了自己的电脑跟老师的电脑的差异，一开始是怀疑自己的lebview版本的问题，因为我用的是2012版本的，但是现在最新的已经出到了2016。这只是怀疑，其实这次项目学到的最主要的还是一开始的那句话。仔细想想版本没有问题，自己没有DAQ驱动，因为这个驱动是数据采集驱动，自己也确实没有装过，安装好DAQ驱动后，确实可以监听到串口的数据了" class="headerlink" title="离校答辩的时间也很近了，数据还是不准确，所以自己决定采用数据更准确的lebview计算，lebview自己也没有接触过，所以又得熬夜打通lebview的程序。总的来说分成两大块，串口通信和处理数据。串口通信程序按照文档还有网上搜集的大神的程序总算写出来了，但是还是遇到了监听不到串口的情况。把我自己写的lebview程序拿给老师看，老师那边确确实实可以监听到串口。自己很纳闷，仔细分析了自己的电脑跟老师的电脑的差异，一开始是怀疑自己的lebview版本的问题，因为我用的是2012版本的，但是现在最新的已经出到了2016。这只是怀疑，其实这次项目学到的最主要的还是一开始的那句话。仔细想想版本没有问题，自己没有DAQ驱动，因为这个驱动是数据采集驱动，自己也确实没有装过，安装好DAQ驱动后，确实可以监听到串口的数据了"></a>离校答辩的时间也很近了，数据还是不准确，所以自己决定采用数据更准确的lebview计算，lebview自己也没有接触过，所以又得熬夜打通lebview的程序。总的来说分成两大块，串口通信和处理数据。串口通信程序按照文档还有网上搜集的大神的程序总算写出来了，但是还是遇到了监听不到串口的情况。把我自己写的lebview程序拿给老师看，老师那边确确实实可以监听到串口。自己很纳闷，仔细分析了自己的电脑跟老师的电脑的差异，一开始是怀疑自己的lebview版本的问题，因为我用的是2012版本的，但是现在最新的已经出到了2016。这只是怀疑，其实这次项目学到的最主要的还是一开始的那句话。仔细想想版本没有问题，自己没有DAQ驱动，因为这个驱动是数据采集驱动，自己也确实没有装过，安装好DAQ驱动后，确实可以监听到串口的数据了</h6><h6 id="监听到串口的数据，处理数据这一方面就比较简单了。在这之后，我跟小组成员测试数据并不准确，程序这方面90-的可能是没有错误，找来找去是做电工的同学的电路AD转化的问题。因为，这个项目要求采集速率很高要20k-s，可是AD转化的速率只有800-s，远远达不到这个要求。这边问题其实还是挺大的，采集出来的数据并不准确。所以我们决定还是程序这边每隔5ms监听串口采集数据。因为这样也并不改变采集出来的波形的数学特性，就大大减少了点的个数，但是这样必须得严格控制采样的时间，减少数据的波动。"><a href="#监听到串口的数据，处理数据这一方面就比较简单了。在这之后，我跟小组成员测试数据并不准确，程序这方面90-的可能是没有错误，找来找去是做电工的同学的电路AD转化的问题。因为，这个项目要求采集速率很高要20k-s，可是AD转化的速率只有800-s，远远达不到这个要求。这边问题其实还是挺大的，采集出来的数据并不准确。所以我们决定还是程序这边每隔5ms监听串口采集数据。因为这样也并不改变采集出来的波形的数学特性，就大大减少了点的个数，但是这样必须得严格控制采样的时间，减少数据的波动。" class="headerlink" title="监听到串口的数据，处理数据这一方面就比较简单了。在这之后，我跟小组成员测试数据并不准确，程序这方面90%的可能是没有错误，找来找去是做电工的同学的电路AD转化的问题。因为，这个项目要求采集速率很高要20k/s，可是AD转化的速率只有800/s，远远达不到这个要求。这边问题其实还是挺大的，采集出来的数据并不准确。所以我们决定还是程序这边每隔5ms监听串口采集数据。因为这样也并不改变采集出来的波形的数学特性，就大大减少了点的个数，但是这样必须得严格控制采样的时间，减少数据的波动。"></a>监听到串口的数据，处理数据这一方面就比较简单了。在这之后，我跟小组成员测试数据并不准确，程序这方面90%的可能是没有错误，找来找去是做电工的同学的电路AD转化的问题。因为，这个项目要求采集速率很高要20k/s，可是AD转化的速率只有800/s，远远达不到这个要求。这边问题其实还是挺大的，采集出来的数据并不准确。所以我们决定还是程序这边每隔5ms监听串口采集数据。因为这样也并不改变采集出来的波形的数学特性，就大大减少了点的个数，但是这样必须得严格控制采样的时间，减少数据的波动。</h6><h6 id="前端驱动，这个就对于我而言就很简单了，自己也学了很长时间的node，处理波形也可以调用chartjs。但是由于自己决定放弃采用python采集数据处理，所以自己老早写完就搁置在那里了-那时候AD转化和放大电路没有完成-。"><a href="#前端驱动，这个就对于我而言就很简单了，自己也学了很长时间的node，处理波形也可以调用chartjs。但是由于自己决定放弃采用python采集数据处理，所以自己老早写完就搁置在那里了-那时候AD转化和放大电路没有完成-。" class="headerlink" title="前端驱动，这个就对于我而言就很简单了，自己也学了很长时间的node，处理波形也可以调用chartjs。但是由于自己决定放弃采用python采集数据处理，所以自己老早写完就搁置在那里了(那时候AD转化和放大电路没有完成)。"></a>前端驱动，这个就对于我而言就很简单了，自己也学了很长时间的node，处理波形也可以调用chartjs。但是由于自己决定放弃采用python采集数据处理，所以自己老早写完就搁置在那里了(那时候AD转化和放大电路没有完成)。</h6>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>express跨域</title>
    <link href="/2017/03/07/express%E8%B7%A8%E5%9F%9F/"/>
    <url>/2017/03/07/express%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="cors代码库"><a href="#cors代码库" class="headerlink" title="cors代码库"></a>cors代码库</h3><h6 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h6><pre><code>npm install cors --save-dev</code></pre><h6 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h6><pre><code>var express = require(&#39;express&#39;),    cors = require(&#39;cors&#39;),    app = express();app.use(cors());app.listen(80, function()&#123;    console.log(&#39;The serve is running&#39;);&#125;);app.get(&#39;/data&#39; , function(req, res, next)&#123;    res.json(&#123;msg:&quot;enabled for all originas&quot;&#125;);&#125;);</code></pre><h6 id="angular前端跨域就简单了，只需在config里加入"><a href="#angular前端跨域就简单了，只需在config里加入" class="headerlink" title="angular前端跨域就简单了，只需在config里加入"></a>angular前端跨域就简单了，只需在config里加入</h6><pre><code>$httpProvider.defaults.withCredentials = true;</code></pre>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编码与乱码</title>
    <link href="/2017/03/01/%E7%BC%96%E7%A0%81%E4%B8%8E%E4%B9%B1%E7%A0%81/"/>
    <url>/2017/03/01/%E7%BC%96%E7%A0%81%E4%B8%8E%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="编码与乱码的问题经常见到"><a href="#编码与乱码的问题经常见到" class="headerlink" title="编码与乱码的问题经常见到"></a>编码与乱码的问题经常见到</h6><h6 id="先介绍几种编码方式"><a href="#先介绍几种编码方式" class="headerlink" title="先介绍几种编码方式"></a>先介绍几种编码方式</h6><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><h6 id="计算机发明之后需要使用0和1来表示字符，于是美国人在50年代发明了-ASCII-美国标准信息交换代码-American-Standard-Code-for-Information-Interchange-码。它由128个字符组成，包括大小写字母、数字0-9、标点符号、非打印字符（换行符、制表符等4个）以及控制字符（退格、响铃等）组成，每个字符占7位（1字节是8位）。比如-‘a’的-ASCII码10进制是97，二进制是-01100001。"><a href="#计算机发明之后需要使用0和1来表示字符，于是美国人在50年代发明了-ASCII-美国标准信息交换代码-American-Standard-Code-for-Information-Interchange-码。它由128个字符组成，包括大小写字母、数字0-9、标点符号、非打印字符（换行符、制表符等4个）以及控制字符（退格、响铃等）组成，每个字符占7位（1字节是8位）。比如-‘a’的-ASCII码10进制是97，二进制是-01100001。" class="headerlink" title="计算机发明之后需要使用0和1来表示字符，于是美国人在50年代发明了 ASCII (美国标准信息交换代码,American Standard Code for Information Interchange) 码。它由128个字符组成，包括大小写字母、数字0-9、标点符号、非打印字符（换行符、制表符等4个）以及控制字符（退格、响铃等）组成，每个字符占7位（1字节是8位）。比如 ‘a’的 ASCII码10进制是97，二进制是 01100001。"></a>计算机发明之后需要使用0和1来表示字符，于是美国人在50年代发明了 ASCII (美国标准信息交换代码,American Standard Code for Information Interchange) 码。它由128个字符组成，包括大小写字母、数字0-9、标点符号、非打印字符（换行符、制表符等4个）以及控制字符（退格、响铃等）组成，每个字符占7位（1字节是8位）。比如 ‘a’的 ASCII码10进制是97，二进制是 01100001。</h6><h3 id="UNICODE"><a href="#UNICODE" class="headerlink" title="UNICODE"></a>UNICODE</h3><h6 id="后来计算机不断发展扩展到亚洲非洲，如何用计算机使用的二进制表示这些语言又成了问题。ISOLatin-1的8位字符集只能表示256个字符，而仅汉语就有80000以上个字符。如何把地球上绝大多数语言用一种编码方式表示出来呢-于是发明了UNICODE编码，只用2个字节-16位-就可以编码地球上几乎所有地区的文字。"><a href="#后来计算机不断发展扩展到亚洲非洲，如何用计算机使用的二进制表示这些语言又成了问题。ISOLatin-1的8位字符集只能表示256个字符，而仅汉语就有80000以上个字符。如何把地球上绝大多数语言用一种编码方式表示出来呢-于是发明了UNICODE编码，只用2个字节-16位-就可以编码地球上几乎所有地区的文字。" class="headerlink" title="后来计算机不断发展扩展到亚洲非洲，如何用计算机使用的二进制表示这些语言又成了问题。ISOLatin-1的8位字符集只能表示256个字符，而仅汉语就有80000以上个字符。如何把地球上绝大多数语言用一种编码方式表示出来呢?于是发明了UNICODE编码，只用2个字节(16位)就可以编码地球上几乎所有地区的文字。"></a>后来计算机不断发展扩展到亚洲非洲，如何用计算机使用的二进制表示这些语言又成了问题。ISOLatin-1的8位字符集只能表示256个字符，而仅汉语就有80000以上个字符。如何把地球上绝大多数语言用一种编码方式表示出来呢?于是发明了UNICODE编码，只用2个字节(16位)就可以编码地球上几乎所有地区的文字。</h6><h6 id="但是，UNICODE只是理论上的编码方式，相当于给世界上每个文字打了个编号，但这编号具体如何在计算机里面存储，可以有多种实现方式。比如utf-8和gbk。"><a href="#但是，UNICODE只是理论上的编码方式，相当于给世界上每个文字打了个编号，但这编号具体如何在计算机里面存储，可以有多种实现方式。比如utf-8和gbk。" class="headerlink" title="但是，UNICODE只是理论上的编码方式，相当于给世界上每个文字打了个编号，但这编号具体如何在计算机里面存储，可以有多种实现方式。比如utf-8和gbk。"></a>但是，UNICODE只是理论上的编码方式，相当于给世界上每个文字打了个编号，但这编号具体如何在计算机里面存储，可以有多种实现方式。比如utf-8和gbk。</h6><h6 id="前面说了UNICODE只是给每个文字打了个编号，为啥不把这个编号直接转化成二进制存储在计算机里面呢？-比如英文字母s的编号是115-用二进制表示是00000000-1110011-中文”日”的编号是26085-16进制是65e5-，二进制是11001011-1100101。老外才没那么傻，对于老外这种日常纯粹是用英文字符的人来说明明之前1个字节就能存储一个字母，现在为了全球大一统非要存储为2个字节，相当于一个之前一个1M的文档，现在变为2M。于是老外耍了赖，英文字母s是115没错，但我就用1个字节1110011表示，而你中文”日”是26085号也没错，但是你不能在使用2个表示，而是用2个甚至6个字节表示。（为了英文的特权，牺牲其他语言的存储空间的便利），这个编码方式就是UTF-8。"><a href="#前面说了UNICODE只是给每个文字打了个编号，为啥不把这个编号直接转化成二进制存储在计算机里面呢？-比如英文字母s的编号是115-用二进制表示是00000000-1110011-中文”日”的编号是26085-16进制是65e5-，二进制是11001011-1100101。老外才没那么傻，对于老外这种日常纯粹是用英文字符的人来说明明之前1个字节就能存储一个字母，现在为了全球大一统非要存储为2个字节，相当于一个之前一个1M的文档，现在变为2M。于是老外耍了赖，英文字母s是115没错，但我就用1个字节1110011表示，而你中文”日”是26085号也没错，但是你不能在使用2个表示，而是用2个甚至6个字节表示。（为了英文的特权，牺牲其他语言的存储空间的便利），这个编码方式就是UTF-8。" class="headerlink" title="前面说了UNICODE只是给每个文字打了个编号，为啥不把这个编号直接转化成二进制存储在计算机里面呢？ 比如英文字母s的编号是115, 用二进制表示是00000000 1110011, 中文”日”的编号是26085 (16进制是65e5) ，二进制是11001011 1100101。老外才没那么傻，对于老外这种日常纯粹是用英文字符的人来说明明之前1个字节就能存储一个字母，现在为了全球大一统非要存储为2个字节，相当于一个之前一个1M的文档，现在变为2M。于是老外耍了赖，英文字母s是115没错，但我就用1个字节1110011表示，而你中文”日”是26085号也没错，但是你不能在使用2个表示，而是用2个甚至6个字节表示。（为了英文的特权，牺牲其他语言的存储空间的便利），这个编码方式就是UTF-8。"></a>前面说了UNICODE只是给每个文字打了个编号，为啥不把这个编号直接转化成二进制存储在计算机里面呢？ 比如英文字母s的编号是115, 用二进制表示是00000000 1110011, 中文”日”的编号是26085 (16进制是65e5) ，二进制是11001011 1100101。老外才没那么傻，对于老外这种日常纯粹是用英文字符的人来说明明之前1个字节就能存储一个字母，现在为了全球大一统非要存储为2个字节，相当于一个之前一个1M的文档，现在变为2M。于是老外耍了赖，英文字母s是115没错，但我就用1个字节1110011表示，而你中文”日”是26085号也没错，但是你不能在使用2个表示，而是用2个甚至6个字节表示。（为了英文的特权，牺牲其他语言的存储空间的便利），这个编码方式就是UTF-8。</h6><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><h6 id="UTF-8（8-bit-Unicode-Transformation-Format）是一种针对Unicode的可变长度字符编码，又称万国码。UTF-8用1到6个字节编码UNICODE字符。用在网页上可以同一页面显示中文简体繁体及其它语言（如英文，日文，韩文）。"><a href="#UTF-8（8-bit-Unicode-Transformation-Format）是一种针对Unicode的可变长度字符编码，又称万国码。UTF-8用1到6个字节编码UNICODE字符。用在网页上可以同一页面显示中文简体繁体及其它语言（如英文，日文，韩文）。" class="headerlink" title="UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，又称万国码。UTF-8用1到6个字节编码UNICODE字符。用在网页上可以同一页面显示中文简体繁体及其它语言（如英文，日文，韩文）。"></a>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，又称万国码。UTF-8用1到6个字节编码UNICODE字符。用在网页上可以同一页面显示中文简体繁体及其它语言（如英文，日文，韩文）。</h6><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><h6 id="这时候中国人不干了，为啥你制定了全球大一统的规则，却为了自己的便利又破坏规则，连这点小便宜都不放过-典型的美国人作风-？-明明用2个字节就能表示中文一个汉字，现在UTF-8编码中文竟然需要2个甚至4个字节来表示。于是中国制定一套自己的规则，于是用2个字节来表示一个汉字，总共可以覆盖2万多个文字。-对于英文，好吧让一步，还保留和你UTF-8同样的方式使用一个字节来表示。"><a href="#这时候中国人不干了，为啥你制定了全球大一统的规则，却为了自己的便利又破坏规则，连这点小便宜都不放过-典型的美国人作风-？-明明用2个字节就能表示中文一个汉字，现在UTF-8编码中文竟然需要2个甚至4个字节来表示。于是中国制定一套自己的规则，于是用2个字节来表示一个汉字，总共可以覆盖2万多个文字。-对于英文，好吧让一步，还保留和你UTF-8同样的方式使用一个字节来表示。" class="headerlink" title="这时候中国人不干了，为啥你制定了全球大一统的规则，却为了自己的便利又破坏规则，连这点小便宜都不放过(典型的美国人作风)？ 明明用2个字节就能表示中文一个汉字，现在UTF-8编码中文竟然需要2个甚至4个字节来表示。于是中国制定一套自己的规则，于是用2个字节来表示一个汉字，总共可以覆盖2万多个文字。 对于英文，好吧让一步，还保留和你UTF-8同样的方式使用一个字节来表示。"></a>这时候中国人不干了，为啥你制定了全球大一统的规则，却为了自己的便利又破坏规则，连这点小便宜都不放过(典型的美国人作风)？ 明明用2个字节就能表示中文一个汉字，现在UTF-8编码中文竟然需要2个甚至4个字节来表示。于是中国制定一套自己的规则，于是用2个字节来表示一个汉字，总共可以覆盖2万多个文字。 对于英文，好吧让一步，还保留和你UTF-8同样的方式使用一个字节来表示。</h6><h3 id="网页乱码如何产生的呢"><a href="#网页乱码如何产生的呢" class="headerlink" title="网页乱码如何产生的呢?"></a>网页乱码如何产生的呢?</h3><h6 id="下面这个流程是我们写入文件到展示文件的简单描述："><a href="#下面这个流程是我们写入文件到展示文件的简单描述：" class="headerlink" title="下面这个流程是我们写入文件到展示文件的简单描述："></a>下面这个流程是我们写入文件到展示文件的简单描述：</h6><h6 id="我们使用编辑器编写-HTML-文件"><a href="#我们使用编辑器编写-HTML-文件" class="headerlink" title="我们使用编辑器编写 HTML 文件"></a>我们使用编辑器编写 HTML 文件</h6><h6 id="保存编写的HTML文件"><a href="#保存编写的HTML文件" class="headerlink" title="保存编写的HTML文件"></a>保存编写的HTML文件</h6><h6 id="使用浏览器打开HTML文件"><a href="#使用浏览器打开HTML文件" class="headerlink" title="使用浏览器打开HTML文件"></a>使用浏览器打开HTML文件</h6><h6 id="HTML文件在浏览器展示"><a href="#HTML文件在浏览器展示" class="headerlink" title="HTML文件在浏览器展示"></a>HTML文件在浏览器展示</h6><h6 id="乱码产生的根源就在与第2步骤和第4步。两种文件的编码与解码的方式不同"><a href="#乱码产生的根源就在与第2步骤和第4步。两种文件的编码与解码的方式不同" class="headerlink" title="乱码产生的根源就在与第2步骤和第4步。两种文件的编码与解码的方式不同"></a>乱码产生的根源就在与第2步骤和第4步。两种文件的编码与解码的方式不同</h6><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h6 id="在文件保存的时候你自己要清楚是用哪种编码方式保存的。如果你的文件是保存为utf-8格式，那么一定要在html-的-head里添加"><a href="#在文件保存的时候你自己要清楚是用哪种编码方式保存的。如果你的文件是保存为utf-8格式，那么一定要在html-的-head里添加" class="headerlink" title="在文件保存的时候你自己要清楚是用哪种编码方式保存的。如果你的文件是保存为utf-8格式，那么一定要在html 的 head里添加"></a>在文件保存的时候你自己要清楚是用哪种编码方式保存的。如果你的文件是保存为utf-8格式，那么一定要在html 的 head里添加</h6><pre><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></pre><h6 id="这句话的意思是告诉浏览器在打开这个页面的时候不要去猜了，直接用utf-8去解码。-同理，如果你的文件保存为gbk格式，一定在文件里添加"><a href="#这句话的意思是告诉浏览器在打开这个页面的时候不要去猜了，直接用utf-8去解码。-同理，如果你的文件保存为gbk格式，一定在文件里添加" class="headerlink" title="这句话的意思是告诉浏览器在打开这个页面的时候不要去猜了，直接用utf-8去解码。 同理，如果你的文件保存为gbk格式，一定在文件里添加"></a>这句话的意思是告诉浏览器在打开这个页面的时候不要去猜了，直接用utf-8去解码。 同理，如果你的文件保存为gbk格式，一定在文件里添加</h6><pre><code>&lt;meta charset=&#39;gbk&#39;&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>HTML CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python跨域</title>
    <link href="/2017/01/13/python%E8%B7%A8%E5%9F%9F/"/>
    <url>/2017/01/13/python%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h5 id="要做挑战杯，从0开始用python写后台，串口通讯"><a href="#要做挑战杯，从0开始用python写后台，串口通讯" class="headerlink" title="要做挑战杯，从0开始用python写后台，串口通讯"></a>要做挑战杯，从0开始用python写后台，串口通讯</h5><h5 id="本来想用python的GUI来写的，但是觉得太丑了，于是乎，就用老办法python做后台，然后写前端"><a href="#本来想用python的GUI来写的，但是觉得太丑了，于是乎，就用老办法python做后台，然后写前端" class="headerlink" title="本来想用python的GUI来写的，但是觉得太丑了，于是乎，就用老办法python做后台，然后写前端"></a>本来想用python的GUI来写的，但是觉得太丑了，于是乎，就用老办法python做后台，然后写前端</h5><h5 id="迎面而来的，就是跨域问题。从网上找了好长时间也没有什么办法解决"><a href="#迎面而来的，就是跨域问题。从网上找了好长时间也没有什么办法解决" class="headerlink" title="迎面而来的，就是跨域问题。从网上找了好长时间也没有什么办法解决"></a>迎面而来的，就是跨域问题。从网上找了好长时间也没有什么办法解决</h5><h5 id="看到一个还算合适的，感谢他"><a href="#看到一个还算合适的，感谢他" class="headerlink" title="看到一个还算合适的，感谢他"></a>看到一个还算合适的，感谢他</h5><p><a href="https://segmentfault.com/a/1190000000753690">我的参考</a></p><h5 id="可是写上之后并没有解决问题，但是问题已经换掉了，变成了"><a href="#可是写上之后并没有解决问题，但是问题已经换掉了，变成了" class="headerlink" title="可是写上之后并没有解决问题，但是问题已经换掉了，变成了"></a>可是写上之后并没有解决问题，但是问题已经换掉了，变成了</h5><h5 id="Credentials-flag-is-‘true’-but-the-‘Access-Control-Allow-Credentials’-header-is-‘’-It-must-be-‘true’-to-allow-credentials"><a href="#Credentials-flag-is-‘true’-but-the-‘Access-Control-Allow-Credentials’-header-is-‘’-It-must-be-‘true’-to-allow-credentials" class="headerlink" title="Credentials flag is ‘true’, but the ‘Access-Control-Allow-Credentials’ header is ‘’. It must be ‘true’ to allow credentials"></a>Credentials flag is ‘true’, but the ‘Access-Control-Allow-Credentials’ header is ‘’. It must be ‘true’ to allow credentials</h5><h5 id="原先没写过python，加上这两天写numpy头要炸了，自己试着摸索一下吧。"><a href="#原先没写过python，加上这两天写numpy头要炸了，自己试着摸索一下吧。" class="headerlink" title="原先没写过python，加上这两天写numpy头要炸了，自己试着摸索一下吧。"></a>原先没写过python，加上这两天写numpy头要炸了，自己试着摸索一下吧。</h5><pre><code>rst.headers[&#39;Access-Control-Allow-Credentials&#39;] = &#39;true&#39;</code></pre><h5 id="加上了这一句，没想到，成了！接着就是angularjs请求了。嘿嘿"><a href="#加上了这一句，没想到，成了！接着就是angularjs请求了。嘿嘿" class="headerlink" title="加上了这一句，没想到，成了！接着就是angularjs请求了。嘿嘿"></a>加上了这一句，没想到，成了！接着就是angularjs请求了。嘿嘿</h5><h5 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h5><pre><code>from functools import wrapsfrom flask import make_responsedef allow_cross_domain(fun):    @wraps(fun)    def wrapper_fun(*args, **kwargs):        rst = make_response(fun(*args, **kwargs))        rst.headers[&#39;Access-Control-Allow-Origin&#39;] = &#39;*&#39;        rst.headers[&#39;Access-Control-Allow-Methods&#39;] = &#39;PUT,GET,POST,DELETE&#39;        allow_headers = &quot;Referer,Accept,Origin,User-Agent&quot;        rst.headers[&#39;Access-Control-Allow-Headers&#39;] = allow_headers        return rst    return wrapper_fun@app.route(&#39;/hosts/&#39;)@allow_cross_domaindef domains():    pass</code></pre>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>$interval和$timeout服务实现定时器</title>
    <link href="/2017/01/05/interval%E5%92%8C-timeout%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/2017/01/05/interval%E5%92%8C-timeout%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="AngularJS的-interval-和-timeout-服务，是你能把代码执行过程延迟一定的时间。这些服务与js中的setInterval和setTimeout的功能互交。但在angular的框架内进行"><a href="#AngularJS的-interval-和-timeout-服务，是你能把代码执行过程延迟一定的时间。这些服务与js中的setInterval和setTimeout的功能互交。但在angular的框架内进行" class="headerlink" title="AngularJS的$interval()和$timeout()服务，是你能把代码执行过程延迟一定的时间。这些服务与js中的setInterval和setTimeout的功能互交。但在angular的框架内进行"></a>AngularJS的$interval()和$timeout()服务，是你能把代码执行过程延迟一定的时间。这些服务与js中的setInterval和setTimeout的功能互交。但在angular的框架内进行</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>$interval(callback ,delay , [count] , [invokeApply]);$timeout(callback ,delay , [invokeApply]);</code></pre><h4 id="callback-回调函数"><a href="#callback-回调函数" class="headerlink" title="callback:回调函数"></a>callback:回调函数</h4><h4 id="delay-毫秒数"><a href="#delay-毫秒数" class="headerlink" title="delay: 毫秒数"></a>delay: 毫秒数</h4><h4 id="count-时间间隔的重复次数"><a href="#count-时间间隔的重复次数" class="headerlink" title="count: 时间间隔的重复次数"></a>count: 时间间隔的重复次数</h4><h4 id="invokeApply-boolean-默认为true"><a href="#invokeApply-boolean-默认为true" class="headerlink" title="invokeApply:boolean 默认为true"></a>invokeApply:boolean 默认为true</h4><h4 id="true导致函数只在angular事件循环的-apply-块中执行"><a href="#true导致函数只在angular事件循环的-apply-块中执行" class="headerlink" title="true导致函数只在angular事件循环的$apply()块中执行"></a>true导致函数只在angular事件循环的$apply()块中执行</h4><pre><code>var myInterval = $interval(function()&#123;$scope.seconds++;&#125; , 1000, 10, true);...$interval.cancel(myInterval);</code></pre><h3 id="如果使用-interval或-timeout建立超时时间或时间间隔，则必须在scope或element指令被销毁时显式的使用cancel-销毁它们。"><a href="#如果使用-interval或-timeout建立超时时间或时间间隔，则必须在scope或element指令被销毁时显式的使用cancel-销毁它们。" class="headerlink" title="如果使用$interval或$timeout建立超时时间或时间间隔，则必须在scope或element指令被销毁时显式的使用cancel()销毁它们。"></a>如果使用$interval或$timeout建立超时时间或时间间隔，则必须在scope或element指令被销毁时显式的使用cancel()销毁它们。</h3><pre><code>$scope.$on(&#39;$detory&#39; ,function ()&#123;    $scope.cancel(myInterval);&#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>angularjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angularjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>digest</title>
    <link href="/2016/12/25/digest/"/>
    <url>/2016/12/25/digest/</url>
    
    <content type="html"><![CDATA[<h3 id="scope-digest"><a href="#scope-digest" class="headerlink" title="$scope.$digest()"></a>$scope.$digest()</h3><h6 id="这里digest不是消化的意思。。"><a href="#这里digest不是消化的意思。。" class="headerlink" title="这里digest不是消化的意思。。"></a>这里digest不是消化的意思。。</h6><h6 id="这个当一个作用域初始化时，创建阶段产生。启动应用程序会创建根作用域。当遇到ng-controller或ng-repeat指令时，则链接创建子作用域的模板。"><a href="#这个当一个作用域初始化时，创建阶段产生。启动应用程序会创建根作用域。当遇到ng-controller或ng-repeat指令时，则链接创建子作用域的模板。" class="headerlink" title="这个当一个作用域初始化时，创建阶段产生。启动应用程序会创建根作用域。当遇到ng-controller或ng-repeat指令时，则链接创建子作用域的模板。"></a>这个当一个作用域初始化时，创建阶段产生。启动应用程序会创建根作用域。当遇到ng-controller或ng-repeat指令时，则链接创建子作用域的模板。</h6><h6 id="在创建阶段，创建了一个digest循环与浏览器事件循环互动。digest循环负责把对模型的更改更新到DOM元素，并且执行任何已注册的监视函数。虽然你不需要手动执行digest循环，但你可以通过在作用域执行-digest-方法这样做。例如"><a href="#在创建阶段，创建了一个digest循环与浏览器事件循环互动。digest循环负责把对模型的更改更新到DOM元素，并且执行任何已注册的监视函数。虽然你不需要手动执行digest循环，但你可以通过在作用域执行-digest-方法这样做。例如" class="headerlink" title="在创建阶段，创建了一个digest循环与浏览器事件循环互动。digest循环负责把对模型的更改更新到DOM元素，并且执行任何已注册的监视函数。虽然你不需要手动执行digest循环，但你可以通过在作用域执行$digest()方法这样做。例如"></a>在创建阶段，创建了一个digest循环与浏览器事件循环互动。digest循环负责把对模型的更改更新到DOM元素，并且执行任何已注册的监视函数。虽然你不需要手动执行digest循环，但你可以通过在作用域执行$digest()方法这样做。例如</h6><pre><code>$scope.$digest()</code></pre>]]></content>
    
    
    <categories>
      
      <category>angularjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angularjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb_find</title>
    <link href="/2016/12/12/mongodb-find/"/>
    <url>/2016/12/12/mongodb-find/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="自己也敲了几天express-mongodb了，觉得应该做一下总结"><a href="#自己也敲了几天express-mongodb了，觉得应该做一下总结" class="headerlink" title="自己也敲了几天express-mongodb了，觉得应该做一下总结"></a>自己也敲了几天express-mongodb了，觉得应该做一下总结</h4><h4 id="最主要的是从mongodb数据库里面find数据，至于插入数据可以有图形化的界面操作，这里不详细介绍了"><a href="#最主要的是从mongodb数据库里面find数据，至于插入数据可以有图形化的界面操作，这里不详细介绍了" class="headerlink" title="最主要的是从mongodb数据库里面find数据，至于插入数据可以有图形化的界面操作，这里不详细介绍了"></a>最主要的是从mongodb数据库里面find数据，至于插入数据可以有图形化的界面操作，这里不详细介绍了</h4><h3 id="query对象"><a href="#query对象" class="headerlink" title="query对象"></a>query对象</h3><h4 id="mongodb定义了请求返回结果的query对象运算符，这个可以从晚上查文档"><a href="#mongodb定义了请求返回结果的query对象运算符，这个可以从晚上查文档" class="headerlink" title="mongodb定义了请求返回结果的query对象运算符，这个可以从晚上查文档"></a>mongodb定义了请求返回结果的query对象运算符，这个可以从晚上查文档</h4><pre><code>words.find(&#123;first:&#123;$in : [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]&#125;&#125;,function(err , cursor)&#123;        if(err) throw err;        displayWords(&quot;Words starting with a,b,c :&quot; ,cursor);&#125;);</code></pre><h4 id="其中，words是一个collection对象，first是json数据里的某条数据。"><a href="#其中，words是一个collection对象，first是json数据里的某条数据。" class="headerlink" title="其中，words是一个collection对象，first是json数据里的某条数据。"></a>其中，words是一个collection对象，first是json数据里的某条数据。</h4><h4 id="作用是查找first内含有a、b、c的数据"><a href="#作用是查找first内含有a、b、c的数据" class="headerlink" title="作用是查找first内含有a、b、c的数据"></a>作用是查找first内含有a、b、c的数据</h4><h3 id="options对象"><a href="#options对象" class="headerlink" title="options对象"></a>options对象</h3><h4 id="同query对象一样，mongodb还包括options对象，最长用的就是limit、sort、fields等"><a href="#同query对象一样，mongodb还包括options对象，最长用的就是limit、sort、fields等" class="headerlink" title="同query对象一样，mongodb还包括options对象，最长用的就是limit、sort、fields等"></a>同query对象一样，mongodb还包括options对象，最长用的就是limit、sort、fields等</h4><pre><code>words.find(&#123;&#39;last&#39;:&#39;w&#39;&#125;,&#123;limit : 4&#125;,&#123; sort : [[&#39;word&#39; , 1]]&#125; ,function(err ,cursor)&#123;&#125;);</code></pre><h4 id="其中，last、word是json数组的某条数据，limit限制总长数为5，sort-里面1为升序-、-1为降序"><a href="#其中，last、word是json数组的某条数据，limit限制总长数为5，sort-里面1为升序-、-1为降序" class="headerlink" title="其中，last、word是json数组的某条数据，limit限制总长数为5，sort 里面1为升序 、-1为降序"></a>其中，last、word是json数组的某条数据，limit限制总长数为5，sort 里面1为升序 、-1为降序</h4><h4 id="当然findOne的用法跟这个一样"><a href="#当然findOne的用法跟这个一样" class="headerlink" title="当然findOne的用法跟这个一样"></a>当然findOne的用法跟这个一样</h4>]]></content>
    
    
    <categories>
      
      <category>mongodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NoSQL Manager for MongoDB 破解</title>
    <link href="/2016/12/04/NoSQL-Manager-for-MongoDB-%E7%A0%B4%E8%A7%A3/"/>
    <url>/2016/12/04/NoSQL-Manager-for-MongoDB-%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h6 id="PS-此博文参考自"><a href="#PS-此博文参考自" class="headerlink" title="PS:此博文参考自"></a>PS:此博文参考自</h6><p><a href="http://m.blog.csdn.net/article/details?id=50803705">CSDN博客</a></p><h5 id="删除两个东西"><a href="#删除两个东西" class="headerlink" title="删除两个东西"></a>删除两个东西</h5><h6 id="运行-–-gt-regedit"><a href="#运行-–-gt-regedit" class="headerlink" title="运行 –&gt;regedit"></a>运行 –&gt;regedit</h6><h6 id="HKEY-CURRENT-USER-Software-NoSQL-Manager-Group"><a href="#HKEY-CURRENT-USER-Software-NoSQL-Manager-Group" class="headerlink" title="HKEY_CURRENT_USER\Software\NoSQL Manager Group"></a>HKEY_CURRENT_USER\Software\NoSQL Manager Group</h6><h6 id="删除该文件夹"><a href="#删除该文件夹" class="headerlink" title="删除该文件夹"></a>删除该文件夹</h6><h6 id="C-ProgramData-NoSQL-Manager-Group"><a href="#C-ProgramData-NoSQL-Manager-Group" class="headerlink" title="C:\ProgramData\NoSQL Manager Group"></a>C:\ProgramData\NoSQL Manager Group</h6><h6 id="NoSQL-Manager-for-Cassand"><a href="#NoSQL-Manager-for-Cassand" class="headerlink" title="NoSQL Manager for Cassand"></a>NoSQL Manager for Cassand</h6><h6 id="重启，继续免费试用30天"><a href="#重启，继续免费试用30天" class="headerlink" title="重启，继续免费试用30天"></a>重启，继续免费试用30天</h6><h6 id="亲身试验过挺管用的"><a href="#亲身试验过挺管用的" class="headerlink" title="亲身试验过挺管用的"></a>亲身试验过挺管用的</h6>]]></content>
    
    
    <categories>
      
      <category>mongodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb文档</title>
    <link href="/2016/11/30/mongodb%E6%96%87%E6%A1%A3/"/>
    <url>/2016/11/30/mongodb%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><h4 id="是不是觉得用命令插入很麻烦。我也有同感，介绍一个小技巧吧"><a href="#是不是觉得用命令插入很麻烦。我也有同感，介绍一个小技巧吧" class="headerlink" title="是不是觉得用命令插入很麻烦。我也有同感，介绍一个小技巧吧"></a>是不是觉得用命令插入很麻烦。我也有同感，介绍一个小技巧吧</h4><h4 id="创建一个yourfile-js在里面写入你要插入的文档"><a href="#创建一个yourfile-js在里面写入你要插入的文档" class="headerlink" title="创建一个yourfile.js在里面写入你要插入的文档"></a>创建一个yourfile.js在里面写入你要插入的文档</h4><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><pre><code>document=(&#123;title: &#39;test&#39;, description: &#39;This is a test&#39;,&#125;);</code></pre><h4 id="然后按照正常步骤打开mongo-shell后"><a href="#然后按照正常步骤打开mongo-shell后" class="headerlink" title="然后按照正常步骤打开mongo shell后"></a>然后按照正常步骤打开mongo shell后</h4><pre><code>load(&quot;yourfile.js&quot;)   </code></pre><h4 id="注意这里路径要对"><a href="#注意这里路径要对" class="headerlink" title="注意这里路径要对"></a>注意这里路径要对</h4><h4 id="这时会返回一个true，ok你就可以按照正常步插入文档了"><a href="#这时会返回一个true，ok你就可以按照正常步插入文档了" class="headerlink" title="这时会返回一个true，ok你就可以按照正常步插入文档了"></a>这时会返回一个true，ok你就可以按照正常步插入文档了</h4><pre><code>db.col.insert(document)</code></pre><h4 id="显示所有文档"><a href="#显示所有文档" class="headerlink" title="显示所有文档"></a>显示所有文档</h4><pre><code>db.col.find()</code></pre><h3 id="更改文档"><a href="#更改文档" class="headerlink" title="更改文档"></a>更改文档</h3><h4 id="命令1"><a href="#命令1" class="headerlink" title="命令1"></a>命令1</h4><pre><code>db.col.update(&#123;&#39;title&#39;:&#39;test&#39;&#125;,&#123;&#39;title&#39;:&#39;MongoDB&#39;&#125;)</code></pre><h4 id="这样会把整个改成title-MongoDB，没有了description"><a href="#这样会把整个改成title-MongoDB，没有了description" class="headerlink" title="这样会把整个改成title:MongoDB，没有了description"></a>这样会把整个改成title:MongoDB，没有了description</h4><h4 id="命令2"><a href="#命令2" class="headerlink" title="命令2"></a>命令2</h4><pre><code>db.col.update(&#123;&#39;title&#39;:&#39;test&#39;&#125;,&#123;$set:&#123;&#39;title&#39;:&#39;MongoDB&#39;&#125;&#125;)</code></pre><h4 id="这样只会改title，description还在"><a href="#这样只会改title，description还在" class="headerlink" title="这样只会改title，description还在"></a>这样只会改title，description还在</h4><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><h4 id="删除一条"><a href="#删除一条" class="headerlink" title="删除一条"></a>删除一条</h4><pre><code>db.col.remove(&#123;&#39;title&#39;:&#39;test&#39;&#125;)</code></pre><h4 id="删除所有"><a href="#删除所有" class="headerlink" title="删除所有"></a>删除所有</h4><pre><code>db.col.remove(&#123;&#125;)</code></pre><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><pre><code>db.col.find()</code></pre><h4 id="当然还有易读方式"><a href="#当然还有易读方式" class="headerlink" title="当然还有易读方式"></a>当然还有易读方式</h4><pre><code>db.col.find().pretty()</code></pre>]]></content>
    
    
    <categories>
      
      <category>mongodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb</title>
    <link href="/2016/11/29/mongodb/"/>
    <url>/2016/11/29/mongodb/</url>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="1-下载并解压缩mongodb文件"><a href="#1-下载并解压缩mongodb文件" class="headerlink" title="1.下载并解压缩mongodb文件"></a>1.下载并解压缩mongodb文件</h4><h4 id="把-bin目录添加到系统路径"><a href="#把-bin目录添加到系统路径" class="headerlink" title="把/bin目录添加到系统路径"></a>把<mongo_data_location>/bin目录添加到系统路径</h4><h4 id="创建数据文件目录-data-bin"><a href="#创建数据文件目录-data-bin" class="headerlink" title="创建数据文件目录/data/bin"></a>创建数据文件目录<mongo_data_location>/data/bin</h4><h4 id="在控制台启动mongodb"><a href="#在控制台启动mongodb" class="headerlink" title="在控制台启动mongodb"></a>在控制台启动mongodb</h4><pre><code>mongod --dbpath &lt;mongo_data_location&gt;/data/db</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="用port和dbpath参数启动mongodb"><a href="#用port和dbpath参数启动mongodb" class="headerlink" title="用port和dbpath参数启动mongodb"></a>用port和dbpath参数启动mongodb</h4><pre><code>mongod --dbpath &lt;mongo_data_location&gt;/data/db</code></pre><h4 id="在新的cmd下-这里踩了好多坑"><a href="#在新的cmd下-这里踩了好多坑" class="headerlink" title="在新的cmd下(这里踩了好多坑)"></a>在新的cmd下(这里踩了好多坑)</h4><pre><code>mongo</code></pre><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><pre><code>mongouse admindb.shudownServer()</code></pre><h4 id="这里注意-执行完上述命令后会出现-trying-reconnect-to-127-0-0-1-27017-127-0-0-1-failed"><a href="#这里注意-执行完上述命令后会出现-trying-reconnect-to-127-0-0-1-27017-127-0-0-1-failed" class="headerlink" title="这里注意,执行完上述命令后会出现 trying reconnect to 127.0.0.1:27017 (127.0.0.1) failed"></a>这里注意,执行完上述命令后会出现 trying reconnect to 127.0.0.1:27017 (127.0.0.1) failed</h4><h4 id="但是你回到启动的cmd会发现-服务已经关闭"><a href="#但是你回到启动的cmd会发现-服务已经关闭" class="headerlink" title="但是你回到启动的cmd会发现,服务已经关闭"></a>但是你回到启动的cmd会发现,服务已经关闭</h4>]]></content>
    
    
    <categories>
      
      <category>mongodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RESTful</title>
    <link href="/2016/11/21/restful/"/>
    <url>/2016/11/21/restful/</url>
    
    <content type="html"><![CDATA[<h4 id="要了解什么叫restful-起码得知道restful的全称。Representational-State-Transfer"><a href="#要了解什么叫restful-起码得知道restful的全称。Representational-State-Transfer" class="headerlink" title="要了解什么叫restful,起码得知道restful的全称。Representational State Transfer"></a>要了解什么叫restful,起码得知道restful的全称。Representational State Transfer</h4><p>直译过来叫”表现形式状态转换”,很多大神的博客里都是这么写的。na这个究竟是什么呢</p><h4 id="下面是我自己作为小白的理解"><a href="#下面是我自己作为小白的理解" class="headerlink" title="下面是我自己作为小白的理解"></a>下面是我自己作为小白的理解</h4><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><h4 id="“资源”-顾名思义就是网络上的资源。包括文本、图片、音频等等。所谓的上网浏览就是各种资源的共享。各种资源从client到server之间进行传输。"><a href="#“资源”-顾名思义就是网络上的资源。包括文本、图片、音频等等。所谓的上网浏览就是各种资源的共享。各种资源从client到server之间进行传输。" class="headerlink" title="“资源”,顾名思义就是网络上的资源。包括文本、图片、音频等等。所谓的上网浏览就是各种资源的共享。各种资源从client到server之间进行传输。"></a>“资源”,顾名思义就是网络上的资源。包括文本、图片、音频等等。所谓的上网浏览就是各种资源的共享。各种资源从client到server之间进行传输。</h4><h3 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h3><h4 id="“表现形式”-这个表现形式是什么的表现形式呢？当然是资源啊-web开发中最重要的是资源-没有资源的话-前端各种绚丽的动画-后台各种并发式、各种多线程什么的都是扯淡了。那这种表现形式有哪些呢？我最近做的项目都是用的JSON进行前后端的资源传输-当然还有很多其他形式包括xml、html、甚至是二进制形式。"><a href="#“表现形式”-这个表现形式是什么的表现形式呢？当然是资源啊-web开发中最重要的是资源-没有资源的话-前端各种绚丽的动画-后台各种并发式、各种多线程什么的都是扯淡了。那这种表现形式有哪些呢？我最近做的项目都是用的JSON进行前后端的资源传输-当然还有很多其他形式包括xml、html、甚至是二进制形式。" class="headerlink" title="“表现形式”,这个表现形式是什么的表现形式呢？当然是资源啊,web开发中最重要的是资源,没有资源的话,前端各种绚丽的动画,后台各种并发式、各种多线程什么的都是扯淡了。那这种表现形式有哪些呢？我最近做的项目都是用的JSON进行前后端的资源传输,当然还有很多其他形式包括xml、html、甚至是二进制形式。"></a>“表现形式”,这个表现形式是什么的表现形式呢？当然是资源啊,web开发中最重要的是资源,没有资源的话,前端各种绚丽的动画,后台各种并发式、各种多线程什么的都是扯淡了。那这种表现形式有哪些呢？我最近做的项目都是用的JSON进行前后端的资源传输,当然还有很多其他形式包括xml、html、甚至是二进制形式。</h4><h3 id="State-Transfer"><a href="#State-Transfer" class="headerlink" title="State Transfer"></a>State Transfer</h3><h4 id="“状态转化”-如果客户端想要操作服务器-必须通过某种手段-让服务器端发生”状态转化”。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。"><a href="#“状态转化”-如果客户端想要操作服务器-必须通过某种手段-让服务器端发生”状态转化”。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。" class="headerlink" title="“状态转化”,如果客户端想要操作服务器,必须通过某种手段,让服务器端发生”状态转化”。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。"></a>“状态转化”,如果客户端想要操作服务器,必须通过某种手段,让服务器端发生”状态转化”。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</h4><p>想要发生状态转化有四种方法GET、POST、PUT、DELETE,这四种HTTP协议手段。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="就是设计一种规范-方便不同的前端设备与后端进行通信。"><a href="#就是设计一种规范-方便不同的前端设备与后端进行通信。" class="headerlink" title="就是设计一种规范,方便不同的前端设备与后端进行通信。"></a>就是设计一种规范,方便不同的前端设备与后端进行通信。</h4><h4 id="借用知乎大神的话来说"><a href="#借用知乎大神的话来说" class="headerlink" title="借用知乎大神的话来说"></a>借用知乎大神的话来说</h4><h4 id="看Url就知道要什么"><a href="#看Url就知道要什么" class="headerlink" title="看Url就知道要什么"></a>看Url就知道要什么</h4><h4 id="看http-method就知道干什么"><a href="#看http-method就知道干什么" class="headerlink" title="看http method就知道干什么"></a>看http method就知道干什么</h4><h4 id="看http-status-code就知道结果如何"><a href="#看http-status-code就知道结果如何" class="headerlink" title="看http status code就知道结果如何"></a>看http status code就知道结果如何</h4>]]></content>
    
    
    <categories>
      
      <category>探究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>探究</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/2016/11/19/%E9%97%AD%E5%8C%85/"/>
    <url>/2016/11/19/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h6 id="闭包是js的术语，它表示变量被绑定到一个函数的作用域，但不绑定到它的父函数的作用域。"><a href="#闭包是js的术语，它表示变量被绑定到一个函数的作用域，但不绑定到它的父函数的作用域。" class="headerlink" title="闭包是js的术语，它表示变量被绑定到一个函数的作用域，但不绑定到它的父函数的作用域。"></a>闭包是js的术语，它表示变量被绑定到一个函数的作用域，但不绑定到它的父函数的作用域。</h6><pre><code>function logCar(logMsg,callback)&#123;    process.nextTick(function()&#123;        callback(logMsg);    &#125;);&#125;var cars = [&quot;car1&quot;,&quot;car2&quot;,&quot;car3&quot;];for(var idx in cars)&#123;    var message = &quot;Saw a &quot;+ cars[idx];    logCar(message,function()&#123;        console.log(&quot;callback:&quot;+message);    &#125;)&#125;</code></pre><h6 id="为了实现真正的异步，要使用process-nextTick-方法来调用回调函数"><a href="#为了实现真正的异步，要使用process-nextTick-方法来调用回调函数" class="headerlink" title="为了实现真正的异步，要使用process.nextTick()方法来调用回调函数"></a>为了实现真正的异步，要使用process.nextTick()方法来调用回调函数</h6>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs监听</title>
    <link href="/2016/11/18/nodejs%E7%9B%91%E5%90%AC/"/>
    <url>/2016/11/18/nodejs%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="将定义事件添加到js对象"><a href="#将定义事件添加到js对象" class="headerlink" title="将定义事件添加到js对象"></a>将定义事件添加到js对象</h3><h4 id="事件使用EventEmitter对象来发出。这个对象包含在events模块中。"><a href="#事件使用EventEmitter对象来发出。这个对象包含在events模块中。" class="headerlink" title="事件使用EventEmitter对象来发出。这个对象包含在events模块中。"></a>事件使用EventEmitter对象来发出。这个对象包含在events模块中。</h4><pre><code>var events = require(&#39;events&#39;);var emitter = new events.EventEmitter();emitter.emit(&quot;simpleEvent&quot;);</code></pre><h4 id="emit是一个发射器-当遇见simpleEvent时发射"><a href="#emit是一个发射器-当遇见simpleEvent时发射" class="headerlink" title="emit是一个发射器,当遇见simpleEvent时发射"></a>emit是一个发射器,当遇见simpleEvent时发射</h4><h4 id="将事件添加到js对象"><a href="#将事件添加到js对象" class="headerlink" title="将事件添加到js对象"></a>将事件添加到js对象</h4><pre><code>function Obj()&#123;    Events.EventEmitter.call(this);&#125;Obj.prototype._proto_ = events.EventEmitter.prototype;var obj = new Obj();obj.emit(&quot;someEvent&quot;);</code></pre><h3 id="把事件监听器添加到对象"><a href="#把事件监听器添加到对象" class="headerlink" title="把事件监听器添加到对象"></a>把事件监听器添加到对象</h3><h4 id="addListener-eventName-callback-将回调函数附加到对象的监听器中。每当eventName事件被触发时，回调函数被放置在队列中"><a href="#addListener-eventName-callback-将回调函数附加到对象的监听器中。每当eventName事件被触发时，回调函数被放置在队列中" class="headerlink" title=".addListener(eventName,callback) : 将回调函数附加到对象的监听器中。每当eventName事件被触发时，回调函数被放置在队列中"></a>.addListener(eventName,callback) : 将回调函数附加到对象的监听器中。每当eventName事件被触发时，回调函数被放置在队列中</h4><h4 id="on-eventName-callback-同-addListener"><a href="#on-eventName-callback-同-addListener" class="headerlink" title=".on(eventName,callback) : 同 .addListener()"></a>.on(eventName,callback) : 同 .addListener()</h4><h4 id="once-eventName-callback-只有eventName事件第一次被触发时-才执行回调"><a href="#once-eventName-callback-只有eventName事件第一次被触发时-才执行回调" class="headerlink" title=".once(eventName,callback) : 只有eventName事件第一次被触发时,才执行回调"></a>.once(eventName,callback) : 只有eventName事件第一次被触发时,才执行回调</h4><h3 id="从对象中删除监听器"><a href="#从对象中删除监听器" class="headerlink" title="从对象中删除监听器"></a>从对象中删除监听器</h3><h4 id="listeners-eventName-返回一个连接到eventName事件的监听器函数的数组"><a href="#listeners-eventName-返回一个连接到eventName事件的监听器函数的数组" class="headerlink" title=".listeners(eventName) :返回一个连接到eventName事件的监听器函数的数组"></a>.listeners(eventName) :返回一个连接到eventName事件的监听器函数的数组</h4><h4 id="setMaxListeners-n-如果多于n的监听器都加入到EventEmitter对象-就触发警报。他的默认值是10"><a href="#setMaxListeners-n-如果多于n的监听器都加入到EventEmitter对象-就触发警报。他的默认值是10" class="headerlink" title=".setMaxListeners(n) : 如果多于n的监听器都加入到EventEmitter对象,就触发警报。他的默认值是10"></a>.setMaxListeners(n) : 如果多于n的监听器都加入到EventEmitter对象,就触发警报。他的默认值是10</h4><h4 id="removeListener-eventName-callback-将callback函数从EventEmitter对象的eventName移除"><a href="#removeListener-eventName-callback-将callback函数从EventEmitter对象的eventName移除" class="headerlink" title=".removeListener(eventName,callback) : 将callback函数从EventEmitter对象的eventName移除"></a>.removeListener(eventName,callback) : 将callback函数从EventEmitter对象的eventName移除</h4><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><pre><code>// 引入 events 模块var events = require(&#39;events&#39;);// 创建 eventEmitter 对象var eventEmitter = new events.EventEmitter();// 创建事件处理程序var connectHandler = function connected() &#123;   console.log(&#39;连接成功。&#39;);     // 触发 data_received 事件    eventEmitter.emit(&#39;data_received&#39;);&#125;// 绑定 connection 事件处理程序eventEmitter.on(&#39;connection&#39;, connectHandler); // 使用匿名函数绑定 data_received 事件eventEmitter.on(&#39;data_received&#39;, function()&#123;   console.log(&#39;数据接收成功。&#39;);&#125;);// 触发 connection 事件 eventEmitter.emit(&#39;connection&#39;);console.log(&quot;程序执行完毕。&quot;);</code></pre><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><pre><code>var events = require(&#39;events&#39;);var eventEmitter = new events.EventEmitter();function Obj()&#123;    this.num = 0;    this.getNum = function()&#123;        eventEmitter.emit(&quot;callback&quot;);        console.log(&quot;This is obj.getNum&quot;);    &#125;&#125;Obj.prototype._proto_ = events.EventEmitter.prototype;function callback()&#123;    console.log(&quot;This is callback&quot;);&#125;var obj = new Obj();eventEmitter.on(&quot;callback&quot;,callback);obj.getNum();</code></pre>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript对象</title>
    <link href="/2016/11/17/javascript%E5%AF%B9%E8%B1%A1/"/>
    <url>/2016/11/17/javascript%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="javascript对象"><a href="#javascript对象" class="headerlink" title="javascript对象"></a>javascript对象</h3><h6 id="js有很多内置的对象-比如Number、Array、String、Date、Math-调用他们的时候语法很简单"><a href="#js有很多内置的对象-比如Number、Array、String、Date、Math-调用他们的时候语法很简单" class="headerlink" title="js有很多内置的对象,比如Number、Array、String、Date、Math.调用他们的时候语法很简单"></a>js有很多内置的对象,比如Number、Array、String、Date、Math.调用他们的时候语法很简单</h6><pre><code>var x = new Number(&quot;5&quot;);</code></pre><h3 id="创建js对象"><a href="#创建js对象" class="headerlink" title="创建js对象"></a>创建js对象</h3><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><pre><code>function User(first,last)&#123;    this.first = first;    this.last = last;    this.getName = function()&#123;        return this.first + &quot;,&quot; +this.last;    &#125;;&#125;</code></pre><h6 id="调用跟上面一样"><a href="#调用跟上面一样" class="headerlink" title="调用跟上面一样"></a>调用跟上面一样</h6><pre><code>var myuser = new User(&quot;Brad&quot;,&quot;Dayley&quot;);console.log(myuser.getName());</code></pre><h3 id="使用原型对象模式"><a href="#使用原型对象模式" class="headerlink" title="使用原型对象模式"></a>使用原型对象模式</h3><h6 id="每一个对象中的方法并不一定在创建的时候就写全-可以写在函数的外面。这样还有一个优点-创建原型函数，只在js加载时创建一次，而不是每穿件对象是被创建"><a href="#每一个对象中的方法并不一定在创建的时候就写全-可以写在函数的外面。这样还有一个优点-创建原型函数，只在js加载时创建一次，而不是每穿件对象是被创建" class="headerlink" title="每一个对象中的方法并不一定在创建的时候就写全,可以写在函数的外面。这样还有一个优点,创建原型函数，只在js加载时创建一次，而不是每穿件对象是被创建"></a>每一个对象中的方法并不一定在创建的时候就写全,可以写在函数的外面。这样还有一个优点,创建原型函数，只在js加载时创建一次，而不是每穿件对象是被创建</h6><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><pre><code>function User(first,last)&#123;    this.first = first;    this.last = last;&#125;User.prototype._getName = function()&#123;    return this.first + &quot;,&quot; +this.last;&#125;</code></pre><h6 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h6><pre><code>User.prototype = &#123;    _getName : function ()&#123;        return this.first + &quot;,&quot; +this.last;    &#125;&#125;</code></pre><h6 id="调用的时候跟写在类内部一样调用"><a href="#调用的时候跟写在类内部一样调用" class="headerlink" title="调用的时候跟写在类内部一样调用"></a>调用的时候跟写在类内部一样调用</h6>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>script标签位置</title>
    <link href="/2016/11/12/script%E6%A0%87%E7%AD%BE%E4%BD%8D%E7%BD%AE/"/>
    <url>/2016/11/12/script%E6%A0%87%E7%AD%BE%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h3><h6 id="1、浏览器请求html代码-然后并行发起image-css-js下载请求-无论在不在head里-包括display-none的节点-因为这个时候样式还没有生效"><a href="#1、浏览器请求html代码-然后并行发起image-css-js下载请求-无论在不在head里-包括display-none的节点-因为这个时候样式还没有生效" class="headerlink" title="1、浏览器请求html代码,然后并行发起image,css,js下载请求(无论在不在head里).包括display:none的节点,因为这个时候样式还没有生效."></a>1、浏览器请求html代码,然后并行发起image,css,js下载请求(无论在不在head里).包括display:none的节点,因为这个时候样式还没有生效.</h6><h6 id="2、读取css样式。"><a href="#2、读取css样式。" class="headerlink" title="2、读取css样式。"></a>2、读取css样式。</h6><h6 id="3、html文档解析-把html和css结合起来。"><a href="#3、html文档解析-把html和css结合起来。" class="headerlink" title="3、html文档解析,把html和css结合起来。"></a>3、html文档解析,把html和css结合起来。</h6><h6 id="4、解析并执行脚本代码-加载图片等外部文件"><a href="#4、解析并执行脚本代码-加载图片等外部文件" class="headerlink" title="4、解析并执行脚本代码,加载图片等外部文件"></a>4、解析并执行脚本代码,加载图片等外部文件</h6><h6 id="5、加载完毕"><a href="#5、加载完毕" class="headerlink" title="5、加载完毕"></a>5、加载完毕</h6><h3 id="script位置问题"><a href="#script位置问题" class="headerlink" title="script位置问题"></a>script位置问题</h3><h6 id="其实浏览器解析你的html是从头到尾一步步来的-有那么几种放script标签的方式"><a href="#其实浏览器解析你的html是从头到尾一步步来的-有那么几种放script标签的方式" class="headerlink" title="其实浏览器解析你的html是从头到尾一步步来的,有那么几种放script标签的方式"></a>其实浏览器解析你的html是从头到尾一步步来的,有那么几种放script标签的方式</h6><h6 id="1、head内"><a href="#1、head内" class="headerlink" title="1、head内"></a>1、head内</h6><h6 id="head内一般是引入外部的脚本，放在一起容易管理。而且JavaScript-代码都被下载、解析和执行完成以后，才能开始呈现页面的内容"><a href="#head内一般是引入外部的脚本，放在一起容易管理。而且JavaScript-代码都被下载、解析和执行完成以后，才能开始呈现页面的内容" class="headerlink" title="head内一般是引入外部的脚本，放在一起容易管理。而且JavaScript 代码都被下载、解析和执行完成以后，才能开始呈现页面的内容"></a>head内一般是引入外部的脚本，放在一起容易管理。而且JavaScript 代码都被下载、解析和执行完成以后，才能开始呈现页面的内容</h6><h6 id="在head中时，所代表的functions只加载而不执行，执行是在某一事件触发后才开始。"><a href="#在head中时，所代表的functions只加载而不执行，执行是在某一事件触发后才开始。" class="headerlink" title="在head中时，所代表的functions只加载而不执行，执行是在某一事件触发后才开始。"></a>在head中时，所代表的functions只加载而不执行，执行是在某一事件触发后才开始。</h6><h6 id="2、body中"><a href="#2、body中" class="headerlink" title="2、body中"></a>2、body中</h6><h6 id="在body中时，js直接加载并执行。而且为了出现浏览器一片空白的问题，现代Web应用程序一般都把全部JavaScript引用放在body中，放在页面的内容后面。这样就感觉到打开页面速度加快了。"><a href="#在body中时，js直接加载并执行。而且为了出现浏览器一片空白的问题，现代Web应用程序一般都把全部JavaScript引用放在body中，放在页面的内容后面。这样就感觉到打开页面速度加快了。" class="headerlink" title="在body中时，js直接加载并执行。而且为了出现浏览器一片空白的问题，现代Web应用程序一般都把全部JavaScript引用放在body中，放在页面的内容后面。这样就感觉到打开页面速度加快了。"></a>在body中时，js直接加载并执行。而且为了出现浏览器一片空白的问题，现代Web应用程序一般都把全部JavaScript引用放在body中，放在页面的内容后面。这样就感觉到打开页面速度加快了。</h6><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><h6 id="外链放在head里，自己写的放在body内，当然用yeoman-骨架生成器-的话自动会提示你script放在什么地方"><a href="#外链放在head里，自己写的放在body内，当然用yeoman-骨架生成器-的话自动会提示你script放在什么地方" class="headerlink" title="外链放在head里，自己写的放在body内，当然用yeoman(骨架生成器)的话自动会提示你script放在什么地方"></a>外链放在head里，自己写的放在body内，当然用yeoman(骨架生成器)的话自动会提示你script放在什么地方</h6>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs爬虫</title>
    <link href="/2016/11/04/nodejs%E7%88%AC%E8%99%AB/"/>
    <url>/2016/11/04/nodejs%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h4 id="一直想写一个爬虫玩玩，试过python，这个语法太难搞，对于深谙C、JS的人来说一不小心就写错。"><a href="#一直想写一个爬虫玩玩，试过python，这个语法太难搞，对于深谙C、JS的人来说一不小心就写错。" class="headerlink" title="一直想写一个爬虫玩玩，试过python，这个语法太难搞，对于深谙C、JS的人来说一不小心就写错。"></a>一直想写一个爬虫玩玩，试过python，这个语法太难搞，对于深谙C、JS的人来说一不小心就写错。</h4><h4 id="还好JS的强大，nodejs可以操作各种文件流，而且nodejs可以操作DOM节点-cheerio-，这样做一个简单的爬虫就比较简单了"><a href="#还好JS的强大，nodejs可以操作各种文件流，而且nodejs可以操作DOM节点-cheerio-，这样做一个简单的爬虫就比较简单了" class="headerlink" title="还好JS的强大，nodejs可以操作各种文件流，而且nodejs可以操作DOM节点(cheerio)，这样做一个简单的爬虫就比较简单了"></a>还好JS的强大，nodejs可以操作各种文件流，而且nodejs可以操作DOM节点(cheerio)，这样做一个简单的爬虫就比较简单了</h4><h4 id="这里我们需要配置一下环境-当然node是必须的"><a href="#这里我们需要配置一下环境-当然node是必须的" class="headerlink" title="这里我们需要配置一下环境(当然node是必须的)"></a>这里我们需要配置一下环境(当然node是必须的)</h4><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><h4 id="这是nodejs的一个框架-安装的话执行"><a href="#这是nodejs的一个框架-安装的话执行" class="headerlink" title="这是nodejs的一个框架,安装的话执行"></a>这是nodejs的一个框架,安装的话执行</h4><pre><code>npm install -g express</code></pre><h4 id="安装完成之后，执行"><a href="#安装完成之后，执行" class="headerlink" title="安装完成之后，执行"></a>安装完成之后，执行</h4><pre><code>express spider(项目名)</code></pre><h4 id="它会自动给你写好配置文件-配置好了之后执行"><a href="#它会自动给你写好配置文件-配置好了之后执行" class="headerlink" title="它会自动给你写好配置文件,配置好了之后执行"></a>它会自动给你写好配置文件,配置好了之后执行</h4><pre><code>npm install</code></pre><h4 id="毕竟你会需要一些包-而这些包名都会在package-json里面写好"><a href="#毕竟你会需要一些包-而这些包名都会在package-json里面写好" class="headerlink" title="毕竟你会需要一些包,而这些包名都会在package.json里面写好"></a>毕竟你会需要一些包,而这些包名都会在package.json里面写好</h4><h3 id="cheerio"><a href="#cheerio" class="headerlink" title="cheerio"></a>cheerio</h3><h4 id="这是nodejs的一个包-快速、灵活和精益核心jQuery专门为服务器的实现。"><a href="#这是nodejs的一个包-快速、灵活和精益核心jQuery专门为服务器的实现。" class="headerlink" title="这是nodejs的一个包,快速、灵活和精益核心jQuery专门为服务器的实现。"></a>这是nodejs的一个包,快速、灵活和精益核心jQuery专门为服务器的实现。</h4><h4 id="其实就我的理解-nodejs是不会操作DOM的。JS才是操作DOM和浏览器的。"><a href="#其实就我的理解-nodejs是不会操作DOM的。JS才是操作DOM和浏览器的。" class="headerlink" title="其实就我的理解,nodejs是不会操作DOM的。JS才是操作DOM和浏览器的。"></a>其实就我的理解,nodejs是不会操作DOM的。JS才是操作DOM和浏览器的。</h4><h4 id="cheerio只是写方法-类似于jq而已"><a href="#cheerio只是写方法-类似于jq而已" class="headerlink" title="cheerio只是写方法$,类似于jq而已"></a>cheerio只是写方法$,类似于jq而已</h4><h4 id="在工程中执行"><a href="#在工程中执行" class="headerlink" title="在工程中执行"></a>在工程中执行</h4><pre><code>npm install cheerio --save-dev</code></pre><h4 id="那–save-dev是什么意思呢？就是把cheerio写入你的工程，通过这些命令，我们会得到一个新的package-json。而且这些包也会写入node-modules"><a href="#那–save-dev是什么意思呢？就是把cheerio写入你的工程，通过这些命令，我们会得到一个新的package-json。而且这些包也会写入node-modules" class="headerlink" title="那–save-dev是什么意思呢？就是把cheerio写入你的工程，通过这些命令，我们会得到一个新的package.json。而且这些包也会写入node_modules"></a>那–save-dev是什么意思呢？就是把cheerio写入你的工程，通过这些命令，我们会得到一个新的package.json。而且这些包也会写入node_modules</h4><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><h4 id="这个就是nodejs很平常的一个包了-用于发送请求的-同样，执行"><a href="#这个就是nodejs很平常的一个包了-用于发送请求的-同样，执行" class="headerlink" title="这个就是nodejs很平常的一个包了,用于发送请求的,同样，执行"></a>这个就是nodejs很平常的一个包了,用于发送请求的,同样，执行</h4><pre><code>npm install request --save-dev</code></pre><h4 id="把request写入工程"><a href="#把request写入工程" class="headerlink" title="把request写入工程"></a>把request写入工程</h4><h3 id="开始写爬虫"><a href="#开始写爬虫" class="headerlink" title="开始写爬虫"></a>开始写爬虫</h3><h4 id="把express生成的工程的app-js里面的东西删掉-毕竟我们也不需要这么多的包。引入必要的request、cheerio-然后就可以写爬虫了"><a href="#把express生成的工程的app-js里面的东西删掉-毕竟我们也不需要这么多的包。引入必要的request、cheerio-然后就可以写爬虫了" class="headerlink" title="把express生成的工程的app.js里面的东西删掉,毕竟我们也不需要这么多的包。引入必要的request、cheerio,然后就可以写爬虫了"></a>把express生成的工程的app.js里面的东西删掉,毕竟我们也不需要这么多的包。引入必要的request、cheerio,然后就可以写爬虫了</h4><h4 id="大家如果不知道request、cheerio的用法可以去npmjs官网查看"><a href="#大家如果不知道request、cheerio的用法可以去npmjs官网查看" class="headerlink" title="大家如果不知道request、cheerio的用法可以去npmjs官网查看"></a>大家如果不知道request、cheerio的用法可以去npmjs官网查看</h4><h4 id="扒下来的网页用cheerio切割就可以-有些html代码用cheerio不好切-就要用到正则了"><a href="#扒下来的网页用cheerio切割就可以-有些html代码用cheerio不好切-就要用到正则了" class="headerlink" title="扒下来的网页用cheerio切割就可以,有些html代码用cheerio不好切,就要用到正则了"></a>扒下来的网页用cheerio切割就可以,有些html代码用cheerio不好切,就要用到正则了</h4><h3 id="robot协定"><a href="#robot协定" class="headerlink" title="robot协定"></a>robot协定</h3><h4 id="有些网页是不能随便乱扒的"><a href="#有些网页是不能随便乱扒的" class="headerlink" title="有些网页是不能随便乱扒的"></a>有些网页是不能随便乱扒的</h4><h4 id="在网址上输入你想扒的网页的网址的主页-robot-txt仔细看看什么不能扒-小心违反相关法律。"><a href="#在网址上输入你想扒的网页的网址的主页-robot-txt仔细看看什么不能扒-小心违反相关法律。" class="headerlink" title="在网址上输入你想扒的网页的网址的主页+robot.txt仔细看看什么不能扒,小心违反相关法律。"></a>在网址上输入你想扒的网页的网址的主页+robot.txt仔细看看什么不能扒,小心违反相关法律。</h4>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css常用的定位方式</title>
    <link href="/2016/10/27/css%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AE%9A%E4%BD%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2016/10/27/css%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AE%9A%E4%BD%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="浮动定位"><a href="#浮动定位" class="headerlink" title="浮动定位"></a>浮动定位</h3><h6 id="浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，它会影响周围的元素对齐进行环绕。"><a href="#浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，它会影响周围的元素对齐进行环绕。" class="headerlink" title="浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，它会影响周围的元素对齐进行环绕。"></a>浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，它会影响周围的元素对齐进行环绕。</h6><h6 id="浮动可以让页面元素并排显示，浮动可以让元素一个挨着一个。浮动可以创建一个自然流布局，同时充许元素设置自身尺寸和其父元素容器的尺寸大小。"><a href="#浮动可以让页面元素并排显示，浮动可以让元素一个挨着一个。浮动可以创建一个自然流布局，同时充许元素设置自身尺寸和其父元素容器的尺寸大小。" class="headerlink" title="浮动可以让页面元素并排显示，浮动可以让元素一个挨着一个。浮动可以创建一个自然流布局，同时充许元素设置自身尺寸和其父元素容器的尺寸大小。"></a>浮动可以让页面元素并排显示，浮动可以让元素一个挨着一个。浮动可以创建一个自然流布局，同时充许元素设置自身尺寸和其父元素容器的尺寸大小。</h6><h6 id="for-example"><a href="#for-example" class="headerlink" title="for example"></a>for example</h6><h6 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h6><pre><code>&lt;div class=&quot;father&quot;&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;&lt;/div&gt;</code></pre><h6 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h6><pre><code>.father&#123;    width:150px;    background:#e8eae9;&#125;.box&#123;    width:30px;    height:30px;    margin:10px;    background:#8ec63f;    float: left;&#125;</code></pre><h6 id="DEMO演示效果-这里就不插入html了，markdown编译时自动换行影响效果"><a href="#DEMO演示效果-这里就不插入html了，markdown编译时自动换行影响效果" class="headerlink" title="DEMO演示效果(这里就不插入html了，markdown编译时自动换行影响效果)"></a>DEMO演示效果(这里就不插入html了，markdown编译时自动换行影响效果)</h6><img src="images/float_demo.png" alt="演示1"><h3 id="clear属性"><a href="#clear属性" class="headerlink" title="clear属性"></a>clear属性</h3><h6 id="有的时候，我们不希望一些元素会被旁边的浮动元素影响到，这个时候就需要用到clear属性了。"><a href="#有的时候，我们不希望一些元素会被旁边的浮动元素影响到，这个时候就需要用到clear属性了。" class="headerlink" title="有的时候，我们不希望一些元素会被旁边的浮动元素影响到，这个时候就需要用到clear属性了。"></a>有的时候，我们不希望一些元素会被旁边的浮动元素影响到，这个时候就需要用到clear属性了。</h6><h6 id="clear属性：确保当前元素的左右两侧不会有浮动元素。"><a href="#clear属性：确保当前元素的左右两侧不会有浮动元素。" class="headerlink" title="clear属性：确保当前元素的左右两侧不会有浮动元素。"></a>clear属性：确保当前元素的左右两侧不会有浮动元素。</h6><h6 id="使用clear属性的时候要记住：clear只对元素本身的布局起作用-clear属性只适用于块级元素"><a href="#使用clear属性的时候要记住：clear只对元素本身的布局起作用-clear属性只适用于块级元素" class="headerlink" title="使用clear属性的时候要记住：clear只对元素本身的布局起作用,clear属性只适用于块级元素"></a>使用clear属性的时候要记住：clear只对元素本身的布局起作用,clear属性只适用于块级元素</h6><h6 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h6><pre><code>&lt;div class=&quot;father&quot;&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;  &lt;div class=&quot;box cl&quot;&gt;Box&lt;/div&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;&lt;/div&gt;</code></pre><h6 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h6><pre><code>.father&#123;    width:150px;    background:#e8eae9;&#125;.box&#123;    width:30px;    height:30px;    margin:10px;    background:#8ec63f;    float: left;&#125;.cl&#123;    clear:left;&#125;</code></pre><h6 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h6><img src="images/clear_demo.png" alt="演示2"><h6 id="当然，你的第二个box也可以另写一个class没有浮动"><a href="#当然，你的第二个box也可以另写一个class没有浮动" class="headerlink" title="当然，你的第二个box也可以另写一个class没有浮动"></a>当然，你的第二个box也可以另写一个class没有浮动</h6><h3 id="overflow-hidden"><a href="#overflow-hidden" class="headerlink" title="overflow:hidden"></a>overflow:hidden</h3><h6 id="这个方法的关键在于触发了BFC"><a href="#这个方法的关键在于触发了BFC" class="headerlink" title="这个方法的关键在于触发了BFC"></a>这个方法的关键在于触发了BFC</h6><h6 id="BFC-BFC是一个名词，是一个独立的布局环境，我们可以理解为一个箱子（实际上是看不见摸不着的），箱子里面物品的摆放是不受外界的影响的。转换为BFC的理解则是：BFC中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响。）并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。"><a href="#BFC-BFC是一个名词，是一个独立的布局环境，我们可以理解为一个箱子（实际上是看不见摸不着的），箱子里面物品的摆放是不受外界的影响的。转换为BFC的理解则是：BFC中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响。）并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。" class="headerlink" title="BFC:BFC是一个名词，是一个独立的布局环境，我们可以理解为一个箱子（实际上是看不见摸不着的），箱子里面物品的摆放是不受外界的影响的。转换为BFC的理解则是：BFC中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响。）并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。"></a>BFC:BFC是一个名词，是一个独立的布局环境，我们可以理解为一个箱子（实际上是看不见摸不着的），箱子里面物品的摆放是不受外界的影响的。转换为BFC的理解则是：BFC中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响。）并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</h6><h6 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h6><pre><code>&lt;div class=&quot;top_bottom&quot;&gt;&lt;/div&gt;&lt;div class=&quot;father&quot;&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;top_bottom&quot;&gt;&lt;/div&gt;</code></pre><h6 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS"></a>CSS</h6><pre><code>.top_bottom&#123;    width:50px;    height:50px;    background:#000;&#125;.father&#123;    width:150px;    background:#e8eae9;    overflow:hidden;&#125;.box&#123;    width:30px;    height:30px;    margin:10px;    background:#8ec63f;    float: left;&#125;</code></pre><h6 id="DEMO-1"><a href="#DEMO-1" class="headerlink" title="DEMO"></a>DEMO</h6><img src="images/overflow_demo.png" alt="演示3"><h6 id="这里也许看来了，overflow-hidden使父元素不被折叠。-颜色为灰色，仔细看还是能看出来的"><a href="#这里也许看来了，overflow-hidden使父元素不被折叠。-颜色为灰色，仔细看还是能看出来的" class="headerlink" title="这里也许看来了，overflow:hidden使父元素不被折叠。(颜色为灰色，仔细看还是能看出来的)"></a>这里也许看来了，overflow:hidden使父元素不被折叠。(颜色为灰色，仔细看还是能看出来的)</h6><h3 id="overflow扩展"><a href="#overflow扩展" class="headerlink" title="overflow扩展"></a>overflow扩展</h3><h6 id="overflow有四种属性分别是visible-hidden-scroll-auto"><a href="#overflow有四种属性分别是visible-hidden-scroll-auto" class="headerlink" title="overflow有四种属性分别是visible,hidden,scroll,auto"></a>overflow有四种属性分别是visible,hidden,scroll,auto</h6><h6 id="overflow的默认属性是visible-可见的"><a href="#overflow的默认属性是visible-可见的" class="headerlink" title="overflow的默认属性是visible,可见的"></a>overflow的默认属性是visible,可见的</h6><h6 id="hidden是当你盒模型超出的时候会被隐藏，当然常常被用于消除浮动"><a href="#hidden是当你盒模型超出的时候会被隐藏，当然常常被用于消除浮动" class="headerlink" title="hidden是当你盒模型超出的时候会被隐藏，当然常常被用于消除浮动"></a>hidden是当你盒模型超出的时候会被隐藏，当然常常被用于消除浮动</h6><h6 id="scroll和auto有类似的用法，就是出现滚动条"><a href="#scroll和auto有类似的用法，就是出现滚动条" class="headerlink" title="scroll和auto有类似的用法，就是出现滚动条"></a>scroll和auto有类似的用法，就是出现滚动条</h6><h3 id="after伪元素"><a href="#after伪元素" class="headerlink" title="after伪元素"></a>after伪元素</h3><h6 id="这种方法是生成一个元素来消除浮动，只是这个元素不可见，是假的"><a href="#这种方法是生成一个元素来消除浮动，只是这个元素不可见，是假的" class="headerlink" title="这种方法是生成一个元素来消除浮动，只是这个元素不可见，是假的"></a>这种方法是生成一个元素来消除浮动，只是这个元素不可见，是假的</h6><h6 id="HTML-3"><a href="#HTML-3" class="headerlink" title="HTML"></a>HTML</h6><pre><code>&lt;div class=&quot;top_bottom&quot;&gt;&lt;/div&gt;&lt;div class=&quot;father&quot;&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;  &lt;div class=&quot;box&quot;&gt;Box&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;top_bottom&quot;&gt;&lt;/div&gt;</code></pre><h6 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS"></a>CSS</h6><pre><code>.top_bottom&#123;    width:50px;    height:50px;    background:#000;&#125;.father&#123;    width:150px;    background:#e8eae9;&#125;.box&#123;    width:30px;    height:30px;    margin:10px;    background:#8ec63f;    float: left;&#125;.father:after&#123;    content: &quot;&quot;;     visibility: hidden;     display: block;     height: 0px;     clear: both;&#125;</code></pre><h6 id="当然这里实现的demo和上面的是一样的"><a href="#当然这里实现的demo和上面的是一样的" class="headerlink" title="当然这里实现的demo和上面的是一样的"></a>当然这里实现的demo和上面的是一样的</h6><h3 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h3><h6 id="position五大属性static、absolute、fixed、relative、inherit"><a href="#position五大属性static、absolute、fixed、relative、inherit" class="headerlink" title="position五大属性static、absolute、fixed、relative、inherit"></a>position五大属性static、absolute、fixed、relative、inherit</h6><h3 id="static-默认"><a href="#static-默认" class="headerlink" title="static(默认)"></a>static(默认)</h3><h6 id="当你没有为一个元素-例如div-指定定位方式时，默认为static，也就是按照文档的流式-flow-定位。除非你想覆盖从父元素继承来的定位系统。"><a href="#当你没有为一个元素-例如div-指定定位方式时，默认为static，也就是按照文档的流式-flow-定位。除非你想覆盖从父元素继承来的定位系统。" class="headerlink" title="当你没有为一个元素(例如div)指定定位方式时，默认为static，也就是按照文档的流式(flow)定位。除非你想覆盖从父元素继承来的定位系统。"></a>当你没有为一个元素(例如div)指定定位方式时，默认为static，也就是按照文档的流式(flow)定位。除非你想覆盖从父元素继承来的定位系统。</h6><h3 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute(绝对定位)"></a>absolute(绝对定位)</h3><h6 id="绝对定位会使元素从文档流中被删除，结果就是该元素原本占据的空间被其它元素所填充。"><a href="#绝对定位会使元素从文档流中被删除，结果就是该元素原本占据的空间被其它元素所填充。" class="headerlink" title="绝对定位会使元素从文档流中被删除，结果就是该元素原本占据的空间被其它元素所填充。"></a>绝对定位会使元素从文档流中被删除，结果就是该元素原本占据的空间被其它元素所填充。</h6><h6 id="需要设置position-absolute-表示绝对定位-，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。"><a href="#需要设置position-absolute-表示绝对定位-，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。" class="headerlink" title="需要设置position:absolute(表示绝对定位)，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。"></a>需要设置position:absolute(表示绝对定位)，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。</h6><h6 id="HTML-4"><a href="#HTML-4" class="headerlink" title="HTML"></a>HTML</h6><pre><code>&lt;div class=&quot;father&quot;&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><h6 id="CSS-4"><a href="#CSS-4" class="headerlink" title="CSS"></a>CSS</h6><pre><code>.father&#123;    width: 50px;    height: 50px;    background: green;    margin-top:10px;     position: relative;&#125;.box&#123;    width: 50px;    height: 50px;    border: red 10px solid;    position: absolute;    top: 70px;&#125;</code></pre><h6 id="DEMO-2"><a href="#DEMO-2" class="headerlink" title="DEMO"></a>DEMO</h6><img src="images/position_demo.png" alt="演示4"><h6 id="注意-相对于最近的一个父本"><a href="#注意-相对于最近的一个父本" class="headerlink" title="注意:相对于最近的一个父本"></a>注意:相对于最近的一个父本</h6><h3 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative(相对定位)"></a>relative(相对定位)</h3><h6 id="，需要设置position-relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。"><a href="#，需要设置position-relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。" class="headerlink" title="，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。"></a>，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。</h6><h6 id="相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。还在文件流中"><a href="#相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。还在文件流中" class="headerlink" title="相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。还在文件流中"></a>相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。还在文件流中</h6><h6 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML"></a>HTML</h6><pre><code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></pre><h6 id="CSS-5"><a href="#CSS-5" class="headerlink" title="CSS"></a>CSS</h6><pre><code>.box&#123;    width: 50px;    height: 50px;    border: red 10px solid;    position: relative;    top: 70px;&#125;</code></pre><h6 id="DEMO-3"><a href="#DEMO-3" class="headerlink" title="DEMO"></a>DEMO</h6><img src="images/relative_demo.png" alt="演示5"><h6 id="注意-这里是相对自己原来的位置-若不加relative则顶着浏览器上面"><a href="#注意-这里是相对自己原来的位置-若不加relative则顶着浏览器上面" class="headerlink" title="注意:这里是相对自己原来的位置,若不加relative则顶着浏览器上面"></a>注意:这里是相对自己原来的位置,若不加relative则顶着浏览器上面</h6><h3 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed(固定定位)"></a>fixed(固定定位)</h3><h6 id="相对于浏览器屏幕的定位-不会随滚动条的滚动而变化"><a href="#相对于浏览器屏幕的定位-不会随滚动条的滚动而变化" class="headerlink" title="相对于浏览器屏幕的定位,不会随滚动条的滚动而变化"></a>相对于浏览器屏幕的定位,不会随滚动条的滚动而变化</h6><h6 id="这里就不给DEMO了-相信你一定有体会-百度搜索出来的东西-无论怎么滚滚动条-广告怎么拉都不走"><a href="#这里就不给DEMO了-相信你一定有体会-百度搜索出来的东西-无论怎么滚滚动条-广告怎么拉都不走" class="headerlink" title="这里就不给DEMO了,相信你一定有体会,百度搜索出来的东西,无论怎么滚滚动条,广告怎么拉都不走"></a>这里就不给DEMO了,相信你一定有体会,百度搜索出来的东西,无论怎么滚滚动条,广告怎么拉都不走</h6>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yoursite</title>
    <link href="/2016/10/17/yoursite/"/>
    <url>/2016/10/17/yoursite/</url>
    
    <content type="html"><![CDATA[<h6 id="唔-，自从上次换了一个hexo主题-现在的主题是Next-。问题来了"><a href="#唔-，自从上次换了一个hexo主题-现在的主题是Next-。问题来了" class="headerlink" title="唔~，自从上次换了一个hexo主题(现在的主题是Next)。问题来了"></a>唔~，自从上次换了一个hexo主题(现在的主题是Next)。问题来了</h6><h6 id="总所周知，Next有一个搜索功能，但是我的搜素总是不成功，搜索出来结果"><a href="#总所周知，Next有一个搜索功能，但是我的搜素总是不成功，搜索出来结果" class="headerlink" title="总所周知，Next有一个搜索功能，但是我的搜素总是不成功，搜索出来结果"></a>总所周知，Next有一个搜索功能，但是我的搜素总是不成功，搜索出来结果</h6><pre><code>http://yoursite.com/....</code></pre><h6 id="我的天啊，找了半天hexo-generator-search里的配置文件每次需要手改"><a href="#我的天啊，找了半天hexo-generator-search里的配置文件每次需要手改" class="headerlink" title="我的天啊，找了半天hexo-generator-search里的配置文件每次需要手改"></a>我的天啊，找了半天hexo-generator-search里的配置文件每次需要手改</h6><h6 id="这怎么可能呢，肯定没找对呀"><a href="#这怎么可能呢，肯定没找对呀" class="headerlink" title="这怎么可能呢，肯定没找对呀"></a>这怎么可能呢，肯定没找对呀</h6><h6 id="最后，终于让我找到了，我一直以为是hexo-generator-search里的配置文件的问题"><a href="#最后，终于让我找到了，我一直以为是hexo-generator-search里的配置文件的问题" class="headerlink" title="最后，终于让我找到了，我一直以为是hexo-generator-search里的配置文件的问题"></a>最后，终于让我找到了，我一直以为是hexo-generator-search里的配置文件的问题</h6><h6 id="原来，是config-yml的配置问题-hexo配置文件"><a href="#原来，是config-yml的配置问题-hexo配置文件" class="headerlink" title="原来，是config.yml的配置问题(hexo配置文件)"></a>原来，是config.yml的配置问题(hexo配置文件)</h6><h6 id="把图中的url改成你的网址就好了，，照着Next主题做下来还是有点缺陷的"><a href="#把图中的url改成你的网址就好了，，照着Next主题做下来还是有点缺陷的" class="headerlink" title="把图中的url改成你的网址就好了，，照着Next主题做下来还是有点缺陷的"></a>把图中的url改成你的网址就好了，，照着Next主题做下来还是有点缺陷的</h6>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>响应式页面</title>
    <link href="/2016/10/13/%E5%93%8D%E5%BA%94%E5%BC%8F%E9%A1%B5%E9%9D%A2/"/>
    <url>/2016/10/13/%E5%93%8D%E5%BA%94%E5%BC%8F%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是响应式页面？"><a href="#什么是响应式页面？" class="headerlink" title="什么是响应式页面？"></a>什么是响应式页面？</h4><h6 id="首先，你得了解响应"><a href="#首先，你得了解响应" class="headerlink" title="首先，你得了解响应"></a>首先，你得了解响应</h6><h6 id="响应式页面就是随着设备属性（如宽高）的变化，网页也随着变化"><a href="#响应式页面就是随着设备属性（如宽高）的变化，网页也随着变化" class="headerlink" title="响应式页面就是随着设备属性（如宽高）的变化，网页也随着变化"></a>响应式页面就是随着设备属性（如宽高）的变化，网页也随着变化</h6><h4 id="响应式页面用到哪些技术？"><a href="#响应式页面用到哪些技术？" class="headerlink" title="响应式页面用到哪些技术？"></a>响应式页面用到哪些技术？</h4><h6 id="主要是css的技术："><a href="#主要是css的技术：" class="headerlink" title="主要是css的技术："></a>主要是css的技术：</h6><h6 id="1-多用max-width、min-width，不写死宽度"><a href="#1-多用max-width、min-width，不写死宽度" class="headerlink" title="1.多用max-width、min-width，不写死宽度"></a>1.多用max-width、min-width，不写死宽度</h6><h6 id="2-使用media查询来响应不同分辨率"><a href="#2-使用media查询来响应不同分辨率" class="headerlink" title="2.使用media查询来响应不同分辨率"></a>2.使用media查询来响应不同分辨率</h6><h6 id="3-使用动态REM方案保证手机端的效果"><a href="#3-使用动态REM方案保证手机端的效果" class="headerlink" title="3.使用动态REM方案保证手机端的效果"></a>3.使用动态REM方案保证手机端的效果</h6><h4 id="响应式和自适应的区别"><a href="#响应式和自适应的区别" class="headerlink" title="响应式和自适应的区别"></a>响应式和自适应的区别</h4><h6 id="自适应页面是指网页的宽度不固定。跟响应式没什么关系"><a href="#自适应页面是指网页的宽度不固定。跟响应式没什么关系" class="headerlink" title="自适应页面是指网页的宽度不固定。跟响应式没什么关系"></a>自适应页面是指网页的宽度不固定。跟响应式没什么关系</h6><h6 id="自适应页面强调“不写死宽度”，响应式页面强调“响应”。"><a href="#自适应页面强调“不写死宽度”，响应式页面强调“响应”。" class="headerlink" title="自适应页面强调“不写死宽度”，响应式页面强调“响应”。"></a>自适应页面强调“不写死宽度”，响应式页面强调“响应”。</h6><h4 id="响应式页面的写法"><a href="#响应式页面的写法" class="headerlink" title="响应式页面的写法"></a>响应式页面的写法</h4><h6 id="这个宝宝都是参考bootstrap，然后yeoman的框架含有专门写响应式的代码区域"><a href="#这个宝宝都是参考bootstrap，然后yeoman的框架含有专门写响应式的代码区域" class="headerlink" title="这个宝宝都是参考bootstrap，然后yeoman的框架含有专门写响应式的代码区域"></a>这个宝宝都是参考bootstrap，然后yeoman的框架含有专门写响应式的代码区域</h6><h6 id="注：本博文参考自知乎大神–方应杭"><a href="#注：本博文参考自知乎大神–方应杭" class="headerlink" title="注：本博文参考自知乎大神–方应杭"></a>注：本博文参考自知乎大神–方应杭</h6>]]></content>
    
    
    <categories>
      
      <category>HTML CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>winginx--php环境搭建</title>
    <link href="/2016/10/09/winginx/"/>
    <url>/2016/10/09/winginx/</url>
    
    <content type="html"><![CDATA[<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><h6 id="一直想做一个更改图片大小的脚本，用nodejs导入sharp包也没有成功-可能是我系统的原因-唔··-现在从装系统了-待会儿再试试"><a href="#一直想做一个更改图片大小的脚本，用nodejs导入sharp包也没有成功-可能是我系统的原因-唔··-现在从装系统了-待会儿再试试" class="headerlink" title="一直想做一个更改图片大小的脚本，用nodejs导入sharp包也没有成功(可能是我系统的原因,唔··,现在从装系统了,待会儿再试试)"></a>一直想做一个更改图片大小的脚本，用nodejs导入sharp包也没有成功(可能是我系统的原因,唔··,现在从装系统了,待会儿再试试)</h6><h6 id="放弃了nodejs试试php，对于一个php小白来说配置环境太难了-服务器-数据库-php-头都炸啦"><a href="#放弃了nodejs试试php，对于一个php小白来说配置环境太难了-服务器-数据库-php-头都炸啦" class="headerlink" title="放弃了nodejs试试php，对于一个php小白来说配置环境太难了,服务器,数据库,php,头都炸啦"></a>放弃了nodejs试试php，对于一个php小白来说配置环境太难了,服务器,数据库,php,头都炸啦</h6><h6 id="还好问了一下同学-下载了一个xampp-但是服务器一直打不开"><a href="#还好问了一下同学-下载了一个xampp-但是服务器一直打不开" class="headerlink" title="还好问了一下同学,下载了一个xampp,但是服务器一直打不开"></a>还好问了一下同学,下载了一个xampp,但是服务器一直打不开</h6><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h6 id="峰回路转-还好有winginx-内带着服务器、数据库、php的两个版本"><a href="#峰回路转-还好有winginx-内带着服务器、数据库、php的两个版本" class="headerlink" title="峰回路转,还好有winginx,内带着服务器、数据库、php的两个版本"></a>峰回路转,还好有winginx,内带着服务器、数据库、php的两个版本</h6><h6 id="那怎么用呢？"><a href="#那怎么用呢？" class="headerlink" title="那怎么用呢？"></a>那怎么用呢？</h6><h6 id="编辑好你的php文件打开服务器后-将你的-php文件放入wingx-Winginx-home-localhost-public-html这个目录下面"><a href="#编辑好你的php文件打开服务器后-将你的-php文件放入wingx-Winginx-home-localhost-public-html这个目录下面" class="headerlink" title="编辑好你的php文件打开服务器后,将你的.php文件放入wingx\Winginx\home\localhost\public_html这个目录下面"></a>编辑好你的php文件打开服务器后,将你的.php文件放入wingx\Winginx\home\localhost\public_html这个目录下面</h6><h6 id="浏览器运行localhost就可以了"><a href="#浏览器运行localhost就可以了" class="headerlink" title="浏览器运行localhost就可以了"></a>浏览器运行localhost就可以了</h6><h6 id="这是localhost"><a href="#这是localhost" class="headerlink" title="这是localhost"></a>这是localhost</h6><h6 id="localhost-文件名-php就是你的页面"><a href="#localhost-文件名-php就是你的页面" class="headerlink" title="localhost/文件名.php就是你的页面"></a>localhost/文件名.php就是你的页面</h6><h6 id="localhost-81-——数据库界面"><a href="#localhost-81-——数据库界面" class="headerlink" title="localhost:81     ——数据库界面"></a>localhost:81     ——数据库界面</h6><h6 id="用户名：root"><a href="#用户名：root" class="headerlink" title="用户名：root"></a>用户名：root</h6><h6 id="密码：-—没有密码"><a href="#密码：-—没有密码" class="headerlink" title="密码：       —没有密码"></a>密码：       —没有密码</h6><h6 id="localhost-82-超级数据库管理界面"><a href="#localhost-82-超级数据库管理界面" class="headerlink" title="localhost:82     超级数据库管理界面"></a>localhost:82     超级数据库管理界面</h6>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo源文件生成html乱码问题</title>
    <link href="/2016/10/07/hexo%E6%BA%90%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90html%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <url>/2016/10/07/hexo%E6%BA%90%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90html%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="前一段时间手贱，把我存放博客的盘给格式化了"><a href="#前一段时间手贱，把我存放博客的盘给格式化了" class="headerlink" title="前一段时间手贱，把我存放博客的盘给格式化了"></a>前一段时间手贱，把我存放博客的盘给格式化了</h6><h6 id="接着就是恢复各种博文"><a href="#接着就是恢复各种博文" class="headerlink" title="接着就是恢复各种博文"></a>接着就是恢复各种博文</h6><h6 id="还好github仓库里不存在丢失问题"><a href="#还好github仓库里不存在丢失问题" class="headerlink" title="还好github仓库里不存在丢失问题"></a>还好github仓库里不存在丢失问题</h6><h6 id="接着就一步步ctrl-c-ctrl-v"><a href="#接着就一步步ctrl-c-ctrl-v" class="headerlink" title="接着就一步步ctrl+c  ctrl+v"></a>接着就一步步ctrl+c  ctrl+v</h6><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h6 id="可是问题出现了，当运行编译成html文件的时候，变成了乱码"><a href="#可是问题出现了，当运行编译成html文件的时候，变成了乱码" class="headerlink" title="可是问题出现了，当运行编译成html文件的时候，变成了乱码"></a>可是问题出现了，当运行编译成html文件的时候，变成了乱码</h6><h6 id="当时就觉得是hexo编译的问题，查了好多也没找到"><a href="#当时就觉得是hexo编译的问题，查了好多也没找到" class="headerlink" title="当时就觉得是hexo编译的问题，查了好多也没找到"></a>当时就觉得是hexo编译的问题，查了好多也没找到</h6><h6 id="那是不是文本编辑器保存格式问题呢-用的是markdown语法，不能像html那样声明utf-8"><a href="#那是不是文本编辑器保存格式问题呢-用的是markdown语法，不能像html那样声明utf-8" class="headerlink" title="那是不是文本编辑器保存格式问题呢(用的是markdown语法，不能像html那样声明utf-8)"></a>那是不是文本编辑器保存格式问题呢(用的是markdown语法，不能像html那样声明utf-8)</h6><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h6 id="找了找，问题解决了"><a href="#找了找，问题解决了" class="headerlink" title="找了找，问题解决了"></a>找了找，问题解决了</h6><h6 id="我用的是sublimetext编辑器，windpws"><a href="#我用的是sublimetext编辑器，windpws" class="headerlink" title="我用的是sublimetext编辑器，windpws"></a>我用的是sublimetext编辑器，windpws</h6><h6 id="文件-保存编码-选择utf-8就好了"><a href="#文件-保存编码-选择utf-8就好了" class="headerlink" title="文件-保存编码-选择utf-8就好了"></a>文件-保存编码-选择utf-8就好了</h6><h6 id="如果你还不放心"><a href="#如果你还不放心" class="headerlink" title="如果你还不放心"></a>如果你还不放心</h6><h6 id="文件-设置文件编码-选择utf-8就ok了"><a href="#文件-设置文件编码-选择utf-8就ok了" class="headerlink" title="文件-设置文件编码-选择utf-8就ok了"></a>文件-设置文件编码-选择utf-8就ok了</h6>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yeoman-前端框架</title>
    <link href="/2016/10/06/yeoman-%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <url>/2016/10/06/yeoman-%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h6 id="首先在电脑上安装yeoman，在此之前你要先装nodejs、npm"><a href="#首先在电脑上安装yeoman，在此之前你要先装nodejs、npm" class="headerlink" title="首先在电脑上安装yeoman，在此之前你要先装nodejs、npm"></a>首先在电脑上安装yeoman，在此之前你要先装nodejs、npm</h6><h6 id="如果你能翻墙的话，再好不过。不能翻墙，先下一个npm淘宝镜像"><a href="#如果你能翻墙的话，再好不过。不能翻墙，先下一个npm淘宝镜像" class="headerlink" title="如果你能翻墙的话，再好不过。不能翻墙，先下一个npm淘宝镜像"></a>如果你能翻墙的话，再好不过。不能翻墙，先下一个npm淘宝镜像</h6><h6 id="直接复制这个到cmd（推荐用管理员模式）中就好了"><a href="#直接复制这个到cmd（推荐用管理员模式）中就好了" class="headerlink" title="直接复制这个到cmd（推荐用管理员模式）中就好了"></a>直接复制这个到cmd（推荐用管理员模式）中就好了</h6><pre><code>$ npm install -g cnpm –registry=https://registry.npm.taobao.org</code></pre><h6 id="如果不行就进去找一下"><a href="#如果不行就进去找一下" class="headerlink" title="如果不行就进去找一下"></a>如果不行就进去找一下</h6><h6 id="淘宝镜像地址"><a href="#淘宝镜像地址" class="headerlink" title="淘宝镜像地址"></a>淘宝镜像地址</h6><h6 id="下面装yeoman，依次输入"><a href="#下面装yeoman，依次输入" class="headerlink" title="下面装yeoman，依次输入"></a>下面装yeoman，依次输入</h6><pre><code>$ npm install -g yo$ npm install -g generator-webapp$ npm install –global yo gulp-cli bower</code></pre><h6 id="静等安装"><a href="#静等安装" class="headerlink" title="静等安装"></a>静等安装</h6><h6 id="安装完成后，进入一个文件夹"><a href="#安装完成后，进入一个文件夹" class="headerlink" title="安装完成后，进入一个文件夹"></a>安装完成后，进入一个文件夹</h6><pre><code>$ yo</code></pre><h6 id="选择webapp回车"><a href="#选择webapp回车" class="headerlink" title="选择webapp回车"></a>选择webapp回车</h6><h6 id="后面的你可以自己仔细看看需不需要选择"><a href="#后面的你可以自己仔细看看需不需要选择" class="headerlink" title="后面的你可以自己仔细看看需不需要选择"></a>后面的你可以自己仔细看看需不需要选择</h6><h6 id="一路生成后"><a href="#一路生成后" class="headerlink" title="一路生成后"></a>一路生成后</h6><h6 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h6><pre><code>$ gulp serve</code></pre><h6 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h6>]]></content>
    
    
    <categories>
      
      <category>HTML CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片翻转</title>
    <link href="/2016/10/05/%E5%9B%BE%E7%89%87%E7%BF%BB%E8%BD%AC/"/>
    <url>/2016/10/05/%E5%9B%BE%E7%89%87%E7%BF%BB%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h4 id="利用css3效果实现图片翻转效果"><a href="#利用css3效果实现图片翻转效果" class="headerlink" title="利用css3效果实现图片翻转效果"></a>利用css3效果实现图片翻转效果</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><p><a href="https://github.com/zhangfuli/coding-js">click here</a></p><h4 id="里面的overturn"><a href="#里面的overturn" class="headerlink" title="里面的overturn"></a>里面的overturn</h4><pre><code>&lt;style&gt;    .fanzhuan1&#123;        position: absolute;        -webkit-animation: turn 2s infinite;        animation: turn 2s infinite;    &#125;    .fanzhuan2&#123;        z-index: 5;        -webkit-backface-visibility: hidden;        backface-visibility: hidden;    &#125;    @-webkit-keyframes turn &#123;      to &#123;        -webkit-transform: rotateY(360deg);      &#125;    &#125;    @keyframes turn &#123;      to &#123;        transform: rotateY(360deg);      &#125;    &#125;&lt;/style&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>HTML CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>input排序</title>
    <link href="/2016/10/05/input%E6%8E%92%E5%BA%8F/"/>
    <url>/2016/10/05/input%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h6 id="如果想要把input的值排序"><a href="#如果想要把input的值排序" class="headerlink" title="如果想要把input的值排序"></a>如果想要把input的值排序</h6><h6 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h6><p><a href="https://github.com/zhangfuli/coding-js">click here</a></p><h6 id="里面的sort文件夹"><a href="#里面的sort文件夹" class="headerlink" title="里面的sort文件夹"></a>里面的sort文件夹</h6>]]></content>
    
    
    <categories>
      
      <category>HTML CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>find the value of table</title>
    <link href="/2016/10/05/find-the-value-of-table/"/>
    <url>/2016/10/05/find-the-value-of-table/</url>
    
    <content type="html"><![CDATA[<h4 id="如果想要找一个table中的某个td值"><a href="#如果想要找一个table中的某个td值" class="headerlink" title="如果想要找一个table中的某个td值"></a>如果想要找一个table中的某个td值</h4><pre><code>var t=document.getElementById(&#39;tbody&#39;);var rows=t.rows;for(var i=0;i&lt;rows.length;i++)&#123;    var cell=rows[i].cells[1];        if(cell.innerHTML&lt;60)&#123;            rows[i].bgColor=&#39;#ff3333&#39;;        &#125;        else&#123;            rows[i].bgColor=&#39;green&#39;;        &#125;&#125;</code></pre><h4 id="这是js代码-其中”tbody”是tbody的id"><a href="#这是js代码-其中”tbody”是tbody的id" class="headerlink" title="这是js代码,其中”tbody”是tbody的id"></a>这是js代码,其中”tbody”是tbody的id</h4><h4 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h4><p><a href="https://github.com/zhangfuli/changetablebgcolor/blob/master/index.html">click here</a></p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shutdown脚本，用于windows关机</title>
    <link href="/2016/10/05/shutdown/"/>
    <url>/2016/10/05/shutdown/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="你是不是也遇到了这样的情况，点击关机后电脑没有关上，只是类似于休眠状态"><a href="#你是不是也遇到了这样的情况，点击关机后电脑没有关上，只是类似于休眠状态" class="headerlink" title="你是不是也遇到了这样的情况，点击关机后电脑没有关上，只是类似于休眠状态"></a>你是不是也遇到了这样的情况，点击关机后电脑没有关上，只是类似于休眠状态</h6><h6 id="你是不是也遇到了这样的情况，点击了关机后电脑并没有关上，只是类似于休眠的状态。"><a href="#你是不是也遇到了这样的情况，点击了关机后电脑并没有关上，只是类似于休眠的状态。" class="headerlink" title="你是不是也遇到了这样的情况，点击了关机后电脑并没有关上，只是类似于休眠的状态。"></a>你是不是也遇到了这样的情况，点击了关机后电脑并没有关上，只是类似于休眠的状态。</h6><h6 id="其实，我找了很多办法都没有解决，但是我发现在cmd下，电脑可以真关。"><a href="#其实，我找了很多办法都没有解决，但是我发现在cmd下，电脑可以真关。" class="headerlink" title="其实，我找了很多办法都没有解决，但是我发现在cmd下，电脑可以真关。"></a>其实，我找了很多办法都没有解决，但是我发现在cmd下，电脑可以真关。</h6><h3 id="机智如我"><a href="#机智如我" class="headerlink" title="机智如我"></a>机智如我</h3><h6 id="每次都要在cmd下输入”shutdown-s-f-t-0”，是很麻烦的一件事。我决定把它做成一个小脚本，只要鼠标一点，就可以执行cmd关机命令。"><a href="#每次都要在cmd下输入”shutdown-s-f-t-0”，是很麻烦的一件事。我决定把它做成一个小脚本，只要鼠标一点，就可以执行cmd关机命令。" class="headerlink" title="每次都要在cmd下输入”shutdown -s -f -t 0”，是很麻烦的一件事。我决定把它做成一个小脚本，只要鼠标一点，就可以执行cmd关机命令。"></a>每次都要在cmd下输入”shutdown -s -f -t 0”，是很麻烦的一件事。我决定把它做成一个小脚本，只要鼠标一点，就可以执行cmd关机命令。</h6><h6 id="其实很简单。"><a href="#其实很简单。" class="headerlink" title="其实很简单。"></a>其实很简单。</h6><h6 id="在桌面上新建一个text文件，打开后写入这么一段代码保存一下"><a href="#在桌面上新建一个text文件，打开后写入这么一段代码保存一下" class="headerlink" title="在桌面上新建一个text文件，打开后写入这么一段代码保存一下"></a>在桌面上新建一个text文件，打开后写入这么一段代码保存一下</h6><h6 id="echo-off"><a href="#echo-off" class="headerlink" title="@echo off"></a>@echo off</h6><h6 id="shutdown-s-t-0-f"><a href="#shutdown-s-t-0-f" class="headerlink" title="@shutdown /s /t 0 /f"></a>@shutdown /s /t 0 /f</h6><h6 id="最后，将text文件夹的后缀名-txt改成-bat就可以了"><a href="#最后，将text文件夹的后缀名-txt改成-bat就可以了" class="headerlink" title="最后，将text文件夹的后缀名.txt改成.bat就可以了"></a>最后，将text文件夹的后缀名.txt改成.bat就可以了</h6><h6 id="最后，是这样的。"><a href="#最后，是这样的。" class="headerlink" title="最后，是这样的。"></a>最后，是这样的。</h6>]]></content>
    
    
    <categories>
      
      <category>探究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>探究</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闪屏问题</title>
    <link href="/2016/09/28/shanping/"/>
    <url>/2016/09/28/shanping/</url>
    
    <content type="html"><![CDATA[<h3 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h3><h6 id="自己重新装了SSD和加了一个内存条之后，屏幕不定时的闪。。"><a href="#自己重新装了SSD和加了一个内存条之后，屏幕不定时的闪。。" class="headerlink" title="自己重新装了SSD和加了一个内存条之后，屏幕不定时的闪。。"></a>自己重新装了SSD和加了一个内存条之后，屏幕不定时的闪。。</h6><h6 id="自己检查了一下，觉得屏幕没有坏，系统也没有问题。到底是怎么回事呢？-tip-内存条的型号都没错-。"><a href="#自己检查了一下，觉得屏幕没有坏，系统也没有问题。到底是怎么回事呢？-tip-内存条的型号都没错-。" class="headerlink" title="自己检查了一下，觉得屏幕没有坏，系统也没有问题。到底是怎么回事呢？(tip:内存条的型号都没错)。"></a>自己检查了一下，觉得屏幕没有坏，系统也没有问题。到底是怎么回事呢？(tip:内存条的型号都没错)。</h6><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h6 id="经过学长们的指点，发现两个内存条的电压不稳定，虽然型号完全没错，而且我一个2G和4G。2G的是1-5V的电压，4G的是1-35V电压。明明问过店家说1-35V的可以用。我自己又买了一个4G1-5V的内存条，把1-35V的换下。屏幕闪的频率明显降低了，我只装4G1-5V-跟我电脑的电压配-的内存条，到现在没有闪过。店家的话不能信呀！！"><a href="#经过学长们的指点，发现两个内存条的电压不稳定，虽然型号完全没错，而且我一个2G和4G。2G的是1-5V的电压，4G的是1-35V电压。明明问过店家说1-35V的可以用。我自己又买了一个4G1-5V的内存条，把1-35V的换下。屏幕闪的频率明显降低了，我只装4G1-5V-跟我电脑的电压配-的内存条，到现在没有闪过。店家的话不能信呀！！" class="headerlink" title="经过学长们的指点，发现两个内存条的电压不稳定，虽然型号完全没错，而且我一个2G和4G。2G的是1.5V的电压，4G的是1.35V电压。明明问过店家说1.35V的可以用。我自己又买了一个4G1.5V的内存条，把1.35V的换下。屏幕闪的频率明显降低了，我只装4G1.5V(跟我电脑的电压配)的内存条，到现在没有闪过。店家的话不能信呀！！"></a>经过学长们的指点，发现两个内存条的电压不稳定，虽然型号完全没错，而且我一个2G和4G。2G的是1.5V的电压，4G的是1.35V电压。明明问过店家说1.35V的可以用。我自己又买了一个4G1.5V的内存条，把1.35V的换下。屏幕闪的频率明显降低了，我只装4G1.5V(跟我电脑的电压配)的内存条，到现在没有闪过。店家的话不能信呀！！</h6><h6 id="真心建议，两条内存条容量一样，电压必须和自己的电脑配合的来。不要相信别人说电压不同也可以。"><a href="#真心建议，两条内存条容量一样，电压必须和自己的电脑配合的来。不要相信别人说电压不同也可以。" class="headerlink" title="真心建议，两条内存条容量一样，电压必须和自己的电脑配合的来。不要相信别人说电压不同也可以。"></a>真心建议，两条内存条容量一样，电压必须和自己的电脑配合的来。不要相信别人说电压不同也可以。</h6>]]></content>
    
    
    <categories>
      
      <category>硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更改GPT格式</title>
    <link href="/2015/10/27/gpt/"/>
    <url>/2015/10/27/gpt/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="windows无法安装，分区不是GPT格式。当你面对这句话的时候心里不要不要的，系统没法装。下面我就告诉你怎么不进系统把磁盘设置成GPT格式"><a href="#windows无法安装，分区不是GPT格式。当你面对这句话的时候心里不要不要的，系统没法装。下面我就告诉你怎么不进系统把磁盘设置成GPT格式" class="headerlink" title="windows无法安装，分区不是GPT格式。当你面对这句话的时候心里不要不要的，系统没法装。下面我就告诉你怎么不进系统把磁盘设置成GPT格式"></a>windows无法安装，分区不是GPT格式。当你面对这句话的时候心里不要不要的，系统没法装。下面我就告诉你怎么不进系统把磁盘设置成GPT格式</h6><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h6 id="在系统提示无法安装的那一步按住“shift-F10”，cmd命令窗口就会出现"><a href="#在系统提示无法安装的那一步按住“shift-F10”，cmd命令窗口就会出现" class="headerlink" title="在系统提示无法安装的那一步按住“shift+F10”，cmd命令窗口就会出现"></a>在系统提示无法安装的那一步按住“shift+F10”，cmd命令窗口就会出现</h6><h6 id="依次输入"><a href="#依次输入" class="headerlink" title="依次输入"></a>依次输入</h6><pre><code>diskpartlist diskselect disk 0cleanconvert gpt</code></pre><h6 id="这样磁盘就成为gpt格式的了，简单吧"><a href="#这样磁盘就成为gpt格式的了，简单吧" class="headerlink" title="这样磁盘就成为gpt格式的了，简单吧"></a>这样磁盘就成为gpt格式的了，简单吧</h6><h6 id="不过宝宝遇到一个问题，这样也没办法搞。如果磁盘中没有重要文件就全部格式化，再按照步骤来一遍吧。"><a href="#不过宝宝遇到一个问题，这样也没办法搞。如果磁盘中没有重要文件就全部格式化，再按照步骤来一遍吧。" class="headerlink" title="不过宝宝遇到一个问题，这样也没办法搞。如果磁盘中没有重要文件就全部格式化，再按照步骤来一遍吧。"></a>不过宝宝遇到一个问题，这样也没办法搞。如果磁盘中没有重要文件就全部格式化，再按照步骤来一遍吧。</h6>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMD命令</title>
    <link href="/2015/06/20/cmd/"/>
    <url>/2015/06/20/cmd/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="身为一个程序员，命令行是必须要熟悉的。下面介绍一下cmd的命令行"><a href="#身为一个程序员，命令行是必须要熟悉的。下面介绍一下cmd的命令行" class="headerlink" title="身为一个程序员，命令行是必须要熟悉的。下面介绍一下cmd的命令行"></a>身为一个程序员，命令行是必须要熟悉的。下面介绍一下cmd的命令行</h6><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h6 id="ASSOC-显示或修改文件扩展名关联。"><a href="#ASSOC-显示或修改文件扩展名关联。" class="headerlink" title="ASSOC    显示或修改文件扩展名关联。"></a>ASSOC    显示或修改文件扩展名关联。</h6><h6 id="ATTRIB-显示或更改文件属性。"><a href="#ATTRIB-显示或更改文件属性。" class="headerlink" title="ATTRIB    显示或更改文件属性。"></a>ATTRIB    显示或更改文件属性。</h6><h6 id="BREAK-设置或清除扩展式-CTRL-C-检查。"><a href="#BREAK-设置或清除扩展式-CTRL-C-检查。" class="headerlink" title="BREAK    设置或清除扩展式 CTRL+C 检查。"></a>BREAK    设置或清除扩展式 CTRL+C 检查。</h6><h6 id="BOOTCFG-设置-boot-ini-文件的属性以便控制启动加载。"><a href="#BOOTCFG-设置-boot-ini-文件的属性以便控制启动加载。" class="headerlink" title="BOOTCFG    设置 boot.ini 文件的属性以便控制启动加载。"></a>BOOTCFG    设置 boot.ini 文件的属性以便控制启动加载。</h6><h6 id="CACLS-显示或修改文件的访问控制列表-ACL-。"><a href="#CACLS-显示或修改文件的访问控制列表-ACL-。" class="headerlink" title="CACLS    显示或修改文件的访问控制列表(ACL)。"></a>CACLS    显示或修改文件的访问控制列表(ACL)。</h6><h6 id="CALL-从另一个批处理程序调用这一个。"><a href="#CALL-从另一个批处理程序调用这一个。" class="headerlink" title="CALL    从另一个批处理程序调用这一个。"></a>CALL    从另一个批处理程序调用这一个。</h6><h6 id="CD-显示当前目录的名称或将其更改。"><a href="#CD-显示当前目录的名称或将其更改。" class="headerlink" title="CD    显示当前目录的名称或将其更改。"></a>CD    显示当前目录的名称或将其更改。</h6><h6 id="CHCP-显示或设置活动代码页数。"><a href="#CHCP-显示或设置活动代码页数。" class="headerlink" title="CHCP    显示或设置活动代码页数。"></a>CHCP    显示或设置活动代码页数。</h6><h6 id="CHDIR-显示当前目录的名称或将其更改。"><a href="#CHDIR-显示当前目录的名称或将其更改。" class="headerlink" title="CHDIR    显示当前目录的名称或将其更改。"></a>CHDIR    显示当前目录的名称或将其更改。</h6><h6 id="CHKDSK-检查磁盘并显示状态报告。"><a href="#CHKDSK-检查磁盘并显示状态报告。" class="headerlink" title="CHKDSK    检查磁盘并显示状态报告。"></a>CHKDSK    检查磁盘并显示状态报告。</h6><h6 id="CHKNTFS-显示或修改启动时间磁盘检查。"><a href="#CHKNTFS-显示或修改启动时间磁盘检查。" class="headerlink" title="CHKNTFS    显示或修改启动时间磁盘检查。"></a>CHKNTFS    显示或修改启动时间磁盘检查。</h6><h6 id="CLS-清除屏幕。"><a href="#CLS-清除屏幕。" class="headerlink" title="CLS    清除屏幕。"></a>CLS    清除屏幕。</h6><h6 id="CMD-打开另一个-Windows-命令解释程序窗口。"><a href="#CMD-打开另一个-Windows-命令解释程序窗口。" class="headerlink" title="CMD    打开另一个 Windows 命令解释程序窗口。"></a>CMD    打开另一个 Windows 命令解释程序窗口。</h6><h6 id="COLOR-设置默认控制台前景和背景颜色。"><a href="#COLOR-设置默认控制台前景和背景颜色。" class="headerlink" title="COLOR    设置默认控制台前景和背景颜色。"></a>COLOR    设置默认控制台前景和背景颜色。</h6><h6 id="COMP-比较两个或两套文件的内容。"><a href="#COMP-比较两个或两套文件的内容。" class="headerlink" title="COMP    比较两个或两套文件的内容。"></a>COMP    比较两个或两套文件的内容。</h6><h6 id="COMPACT-显示或更改-NTFS-分区上文件的压缩。"><a href="#COMPACT-显示或更改-NTFS-分区上文件的压缩。" class="headerlink" title="COMPACT    显示或更改 NTFS 分区上文件的压缩。"></a>COMPACT    显示或更改 NTFS 分区上文件的压缩。</h6><h6 id="CONVERT-将-FAT-卷转换成-NTFS。您不能转换-当前驱动器。"><a href="#CONVERT-将-FAT-卷转换成-NTFS。您不能转换-当前驱动器。" class="headerlink" title="CONVERT    将 FAT 卷转换成 NTFS。您不能转换 当前驱动器。"></a>CONVERT    将 FAT 卷转换成 NTFS。您不能转换 当前驱动器。</h6><h6 id="COPY-将至少一个文件复制到另一个位置。"><a href="#COPY-将至少一个文件复制到另一个位置。" class="headerlink" title="COPY    将至少一个文件复制到另一个位置。"></a>COPY    将至少一个文件复制到另一个位置。</h6><h6 id="DATE-显示或设置日期。"><a href="#DATE-显示或设置日期。" class="headerlink" title="DATE    显示或设置日期。"></a>DATE    显示或设置日期。</h6><h6 id="DEL-删除至少一个文件。"><a href="#DEL-删除至少一个文件。" class="headerlink" title="DEL    删除至少一个文件。"></a>DEL    删除至少一个文件。</h6><h6 id="DIR-显示一个目录中的文件和子目录。"><a href="#DIR-显示一个目录中的文件和子目录。" class="headerlink" title="DIR    显示一个目录中的文件和子目录。"></a>DIR    显示一个目录中的文件和子目录。</h6><h6 id="DISKCOMP-比较两个软盘的内容。"><a href="#DISKCOMP-比较两个软盘的内容。" class="headerlink" title="DISKCOMP    比较两个软盘的内容。"></a>DISKCOMP    比较两个软盘的内容。</h6><h6 id="DISKCOPY-将一个软盘的内容复制到另一个软盘。"><a href="#DISKCOPY-将一个软盘的内容复制到另一个软盘。" class="headerlink" title="DISKCOPY    将一个软盘的内容复制到另一个软盘。"></a>DISKCOPY    将一个软盘的内容复制到另一个软盘。</h6><h6 id="DISKPART-显示或配置磁盘分区属性。"><a href="#DISKPART-显示或配置磁盘分区属性。" class="headerlink" title="DISKPART    显示或配置磁盘分区属性。"></a>DISKPART    显示或配置磁盘分区属性。</h6><h6 id="DOSKEY-编辑命令行、调用-Windows-命令并创建宏。"><a href="#DOSKEY-编辑命令行、调用-Windows-命令并创建宏。" class="headerlink" title="DOSKEY    编辑命令行、调用 Windows 命令并创建宏。"></a>DOSKEY    编辑命令行、调用 Windows 命令并创建宏。</h6><h6 id="DRIVERQUE-RY-显示当前设备驱动程序状态和属性。"><a href="#DRIVERQUE-RY-显示当前设备驱动程序状态和属性。" class="headerlink" title="DRIVERQUE    RY 显示当前设备驱动程序状态和属性。"></a>DRIVERQUE    RY 显示当前设备驱动程序状态和属性。</h6><h6 id="ECHO-显示消息，或将命令回显打开或关上。"><a href="#ECHO-显示消息，或将命令回显打开或关上。" class="headerlink" title="ECHO    显示消息，或将命令回显打开或关上。"></a>ECHO    显示消息，或将命令回显打开或关上。</h6><h6 id="ENDLOCAL-结束批文件中环境更改的本地化。"><a href="#ENDLOCAL-结束批文件中环境更改的本地化。" class="headerlink" title="ENDLOCAL    结束批文件中环境更改的本地化。"></a>ENDLOCAL    结束批文件中环境更改的本地化。</h6><h6 id="ERASE-删除一个或多个文件。"><a href="#ERASE-删除一个或多个文件。" class="headerlink" title="ERASE    删除一个或多个文件。"></a>ERASE    删除一个或多个文件。</h6><h6 id="EVENTQUER-Y-显示指定准则的事件日志项目。"><a href="#EVENTQUER-Y-显示指定准则的事件日志项目。" class="headerlink" title="EVENTQUER    Y 显示指定准则的事件日志项目。"></a>EVENTQUER    Y 显示指定准则的事件日志项目。</h6><h6 id="EXIT-退出-CMD-EXE-程序-命令解释程序-。"><a href="#EXIT-退出-CMD-EXE-程序-命令解释程序-。" class="headerlink" title="EXIT    退出 CMD.EXE 程序(命令解释程序)。"></a>EXIT    退出 CMD.EXE 程序(命令解释程序)。</h6><h6 id="FC-比较两个文件或两个文件集并显示它们之间的不同。"><a href="#FC-比较两个文件或两个文件集并显示它们之间的不同。" class="headerlink" title="FC    比较两个文件或两个文件集并显示它们之间的不同。"></a>FC    比较两个文件或两个文件集并显示它们之间的不同。</h6><h6 id="FIND-在一个或多个文件中搜索一个文字字符串。"><a href="#FIND-在一个或多个文件中搜索一个文字字符串。" class="headerlink" title="FIND    在一个或多个文件中搜索一个文字字符串。"></a>FIND    在一个或多个文件中搜索一个文字字符串。</h6><h6 id="FINDSTR-在多个文件中搜索字符串。"><a href="#FINDSTR-在多个文件中搜索字符串。" class="headerlink" title="FINDSTR    在多个文件中搜索字符串。"></a>FINDSTR    在多个文件中搜索字符串。</h6><h6 id="FOR-为一套文件中的每个文件运行一个指定的命令。"><a href="#FOR-为一套文件中的每个文件运行一个指定的命令。" class="headerlink" title="FOR    为一套文件中的每个文件运行一个指定的命令。"></a>FOR    为一套文件中的每个文件运行一个指定的命令。</h6><h6 id="FORMAT-格式化磁盘，以便跟-Windows-使用。"><a href="#FORMAT-格式化磁盘，以便跟-Windows-使用。" class="headerlink" title="FORMAT    格式化磁盘，以便跟 Windows 使用。"></a>FORMAT    格式化磁盘，以便跟 Windows 使用。</h6><h6 id="FSUTIL-显示或配置文件系统的属性。"><a href="#FSUTIL-显示或配置文件系统的属性。" class="headerlink" title="FSUTIL    显示或配置文件系统的属性。"></a>FSUTIL    显示或配置文件系统的属性。</h6><h6 id="FTYPE-显示或修改用在文件扩展名关联的文件类型。"><a href="#FTYPE-显示或修改用在文件扩展名关联的文件类型。" class="headerlink" title="FTYPE    显示或修改用在文件扩展名关联的文件类型。"></a>FTYPE    显示或修改用在文件扩展名关联的文件类型。</h6><h6 id="GOTO-将-Windows-命令解释程序指向批处理程序-中某个带标签的行。"><a href="#GOTO-将-Windows-命令解释程序指向批处理程序-中某个带标签的行。" class="headerlink" title="GOTO    将 Windows 命令解释程序指向批处理程序 中某个带标签的行。"></a>GOTO    将 Windows 命令解释程序指向批处理程序 中某个带标签的行。</h6><h6 id="GPRESULT-显示机器或用户的组策略信息。"><a href="#GPRESULT-显示机器或用户的组策略信息。" class="headerlink" title="GPRESULT    显示机器或用户的组策略信息。"></a>GPRESULT    显示机器或用户的组策略信息。</h6><h6 id="GRAFTABL-启用-Windows-在图形模式显示扩展字符集。"><a href="#GRAFTABL-启用-Windows-在图形模式显示扩展字符集。" class="headerlink" title="GRAFTABL    启用 Windows 在图形模式显示扩展字符集。"></a>GRAFTABL    启用 Windows 在图形模式显示扩展字符集。</h6><h6 id="HELP-提供-Windows-命令的帮助信息。"><a href="#HELP-提供-Windows-命令的帮助信息。" class="headerlink" title="HELP    提供 Windows 命令的帮助信息。"></a>HELP    提供 Windows 命令的帮助信息。</h6><h6 id="IF-在批处理程序中执行有条件的处理过程。"><a href="#IF-在批处理程序中执行有条件的处理过程。" class="headerlink" title="IF    在批处理程序中执行有条件的处理过程。"></a>IF    在批处理程序中执行有条件的处理过程。</h6><h6 id="LABEL-创建、更改或删除磁盘的卷标。"><a href="#LABEL-创建、更改或删除磁盘的卷标。" class="headerlink" title="LABEL    创建、更改或删除磁盘的卷标。"></a>LABEL    创建、更改或删除磁盘的卷标。</h6><h6 id="MD-创建一个目录。"><a href="#MD-创建一个目录。" class="headerlink" title="MD    创建一个目录。"></a>MD    创建一个目录。</h6><h6 id="MKDIR-创建一个目录。"><a href="#MKDIR-创建一个目录。" class="headerlink" title="MKDIR    创建一个目录。"></a>MKDIR    创建一个目录。</h6><h6 id="MODE-配置系统设备。"><a href="#MODE-配置系统设备。" class="headerlink" title="MODE    配置系统设备。"></a>MODE    配置系统设备。</h6><h6 id="MORE-逐屏显示输出。"><a href="#MORE-逐屏显示输出。" class="headerlink" title="MORE    逐屏显示输出。"></a>MORE    逐屏显示输出。</h6><h6 id="MOVE-将一个或多个文件从一个目录移动到另一个目录。"><a href="#MOVE-将一个或多个文件从一个目录移动到另一个目录。" class="headerlink" title="MOVE    将一个或多个文件从一个目录移动到另一个目录。"></a>MOVE    将一个或多个文件从一个目录移动到另一个目录。</h6><h6 id="OPENFILES-显示远程用户为了文件共享而打开的文件。"><a href="#OPENFILES-显示远程用户为了文件共享而打开的文件。" class="headerlink" title="OPENFILES    显示远程用户为了文件共享而打开的文件。"></a>OPENFILES    显示远程用户为了文件共享而打开的文件。</h6><h6 id="PAGEFILEC-ONFIG-显示或配置页面文件的属性。"><a href="#PAGEFILEC-ONFIG-显示或配置页面文件的属性。" class="headerlink" title="PAGEFILEC    ONFIG 显示或配置页面文件的属性。"></a>PAGEFILEC    ONFIG 显示或配置页面文件的属性。</h6><h6 id="PATH-为可执行文件显示或设置搜索路径。"><a href="#PATH-为可执行文件显示或设置搜索路径。" class="headerlink" title="PATH    为可执行文件显示或设置搜索路径。"></a>PATH    为可执行文件显示或设置搜索路径。</h6><h6 id="PAUSE-停止批处理文件的处理并显示信息。"><a href="#PAUSE-停止批处理文件的处理并显示信息。" class="headerlink" title="PAUSE    停止批处理文件的处理并显示信息。"></a>PAUSE    停止批处理文件的处理并显示信息。</h6><h6 id="POPD-还原由-PUSHD-保存的当前目录上一次的值。"><a href="#POPD-还原由-PUSHD-保存的当前目录上一次的值。" class="headerlink" title="POPD    还原由 PUSHD 保存的当前目录上一次的值。"></a>POPD    还原由 PUSHD 保存的当前目录上一次的值。</h6><h6 id="PRINT-打印一个文本文件。"><a href="#PRINT-打印一个文本文件。" class="headerlink" title="PRINT    打印一个文本文件。"></a>PRINT    打印一个文本文件。</h6><h6 id="PROMPT-改变-Windows-命令提示。"><a href="#PROMPT-改变-Windows-命令提示。" class="headerlink" title="PROMPT    改变 Windows 命令提示。"></a>PROMPT    改变 Windows 命令提示。</h6><h6 id="PUSHD-保存当前目录，然后对其进行更改。"><a href="#PUSHD-保存当前目录，然后对其进行更改。" class="headerlink" title="PUSHD    保存当前目录，然后对其进行更改。"></a>PUSHD    保存当前目录，然后对其进行更改。</h6><h6 id="RD-删除目录。"><a href="#RD-删除目录。" class="headerlink" title="RD    删除目录。"></a>RD    删除目录。</h6><h6 id="RECOVER-从损坏的磁盘中恢复可读取的信息。"><a href="#RECOVER-从损坏的磁盘中恢复可读取的信息。" class="headerlink" title="RECOVER    从损坏的磁盘中恢复可读取的信息。"></a>RECOVER    从损坏的磁盘中恢复可读取的信息。</h6><h6 id="REM-记录批处理文件或-CONFIG-SYS-中的注释。"><a href="#REM-记录批处理文件或-CONFIG-SYS-中的注释。" class="headerlink" title="REM    记录批处理文件或 CONFIG.SYS 中的注释。"></a>REM    记录批处理文件或 CONFIG.SYS 中的注释。</h6><h6 id="REN-重新命名文件。"><a href="#REN-重新命名文件。" class="headerlink" title="REN    重新命名文件。"></a>REN    重新命名文件。</h6><h6 id="RENAME-重新命名文件。"><a href="#RENAME-重新命名文件。" class="headerlink" title="RENAME    重新命名文件。"></a>RENAME    重新命名文件。</h6><h6 id="REPLACE-替换文件。"><a href="#REPLACE-替换文件。" class="headerlink" title="REPLACE    替换文件。"></a>REPLACE    替换文件。</h6><h6 id="RMDIR-删除目录。"><a href="#RMDIR-删除目录。" class="headerlink" title="RMDIR    删除目录。"></a>RMDIR    删除目录。</h6><h6 id="SET-显示、设置或删除-Windows-环境变量。"><a href="#SET-显示、设置或删除-Windows-环境变量。" class="headerlink" title="SET    显示、设置或删除 Windows 环境变量。"></a>SET    显示、设置或删除 Windows 环境变量。</h6><h6 id="SETLOCAL-开始用批文件改变环境的本地化。"><a href="#SETLOCAL-开始用批文件改变环境的本地化。" class="headerlink" title="SETLOCAL    开始用批文件改变环境的本地化。"></a>SETLOCAL    开始用批文件改变环境的本地化。</h6><h6 id="SC-显示或配置服务-后台处理-。"><a href="#SC-显示或配置服务-后台处理-。" class="headerlink" title="SC    显示或配置服务(后台处理)。"></a>SC    显示或配置服务(后台处理)。</h6><h6 id="SCHTASKS-安排命令和程序在一部计算机上按计划运行。"><a href="#SCHTASKS-安排命令和程序在一部计算机上按计划运行。" class="headerlink" title="SCHTASKS    安排命令和程序在一部计算机上按计划运行。"></a>SCHTASKS    安排命令和程序在一部计算机上按计划运行。</h6><h6 id="SHIFT-调整批处理文件中可替换参数的位置。"><a href="#SHIFT-调整批处理文件中可替换参数的位置。" class="headerlink" title="SHIFT    调整批处理文件中可替换参数的位置。"></a>SHIFT    调整批处理文件中可替换参数的位置。</h6><h6 id="SHUTDOWN-让机器在本地或远程正确关闭。"><a href="#SHUTDOWN-让机器在本地或远程正确关闭。" class="headerlink" title="SHUTDOWN    让机器在本地或远程正确关闭。"></a>SHUTDOWN    让机器在本地或远程正确关闭。</h6><h6 id="SORT-将输入排序。"><a href="#SORT-将输入排序。" class="headerlink" title="SORT    将输入排序。"></a>SORT    将输入排序。</h6><h6 id="START-打开单独视窗运行指定程序或命令。"><a href="#START-打开单独视窗运行指定程序或命令。" class="headerlink" title="START    打开单独视窗运行指定程序或命令。"></a>START    打开单独视窗运行指定程序或命令。</h6><h6 id="SUBST-将驱动器号与路径关联。"><a href="#SUBST-将驱动器号与路径关联。" class="headerlink" title="SUBST    将驱动器号与路径关联。"></a>SUBST    将驱动器号与路径关联。</h6><h6 id="SYSTEMINF-O-显示机器的具体的属性和配置。"><a href="#SYSTEMINF-O-显示机器的具体的属性和配置。" class="headerlink" title="SYSTEMINF    O 显示机器的具体的属性和配置。"></a>SYSTEMINF    O 显示机器的具体的属性和配置。</h6><h6 id="TASKLIST-显示包括服务的所有当前运行的任务。"><a href="#TASKLIST-显示包括服务的所有当前运行的任务。" class="headerlink" title="TASKLIST    显示包括服务的所有当前运行的任务。"></a>TASKLIST    显示包括服务的所有当前运行的任务。</h6><h6 id="TASKKILL-终止正在运行的进程或应用程序。"><a href="#TASKKILL-终止正在运行的进程或应用程序。" class="headerlink" title="TASKKILL    终止正在运行的进程或应用程序。"></a>TASKKILL    终止正在运行的进程或应用程序。</h6><h6 id="TIME-显示或设置系统时间。"><a href="#TIME-显示或设置系统时间。" class="headerlink" title="TIME    显示或设置系统时间。"></a>TIME    显示或设置系统时间。</h6><h6 id="TITLE-设置-CMD-EXE-会话的窗口标题。"><a href="#TITLE-设置-CMD-EXE-会话的窗口标题。" class="headerlink" title="TITLE    设置 CMD.EXE 会话的窗口标题。"></a>TITLE    设置 CMD.EXE 会话的窗口标题。</h6><h6 id="TREE-以图形显示启动器或路径的目录结构。"><a href="#TREE-以图形显示启动器或路径的目录结构。" class="headerlink" title="TREE    以图形显示启动器或路径的目录结构。"></a>TREE    以图形显示启动器或路径的目录结构。</h6><h6 id="TYPE-显示文本文件的内容。"><a href="#TYPE-显示文本文件的内容。" class="headerlink" title="TYPE    显示文本文件的内容。"></a>TYPE    显示文本文件的内容。</h6><h6 id="VER-显示-Windows-的版本。"><a href="#VER-显示-Windows-的版本。" class="headerlink" title="VER    显示 Windows 的版本。"></a>VER    显示 Windows 的版本。</h6><h6 id="VERIFY-告诉-Windows-验证文件是否正确写入磁盘。"><a href="#VERIFY-告诉-Windows-验证文件是否正确写入磁盘。" class="headerlink" title="VERIFY    告诉 Windows 验证文件是否正确写入磁盘。"></a>VERIFY    告诉 Windows 验证文件是否正确写入磁盘。</h6><h6 id="VOL-显示磁盘卷标和序列号。"><a href="#VOL-显示磁盘卷标和序列号。" class="headerlink" title="VOL    显示磁盘卷标和序列号。"></a>VOL    显示磁盘卷标和序列号。</h6><h6 id="XCOPY-复制文件和目录树。"><a href="#XCOPY-复制文件和目录树。" class="headerlink" title="XCOPY    复制文件和目录树。"></a>XCOPY    复制文件和目录树。</h6><h6 id="WMIC-在交互命令外壳里显示-WMI-信息。-，请在联机帮助查看命令行参考。"><a href="#WMIC-在交互命令外壳里显示-WMI-信息。-，请在联机帮助查看命令行参考。" class="headerlink" title="WMIC    在交互命令外壳里显示 WMI 信息。 ，请在联机帮助查看命令行参考。"></a>WMIC    在交互命令外壳里显示 WMI 信息。 ，请在联机帮助查看命令行参考。</h6>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境VC++</title>
    <link href="/2015/06/14/%E7%8E%AF%E5%A2%83VC/"/>
    <url>/2015/06/14/%E7%8E%AF%E5%A2%83VC/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="今天终于有时间静下来看看ng2，写后台的哥们去陪媳妇了，吃在石大的项目暂且搁置"><a href="#今天终于有时间静下来看看ng2，写后台的哥们去陪媳妇了，吃在石大的项目暂且搁置" class="headerlink" title="今天终于有时间静下来看看ng2，写后台的哥们去陪媳妇了，吃在石大的项目暂且搁置"></a>今天终于有时间静下来看看ng2，写后台的哥们去陪媳妇了，吃在石大的项目暂且搁置</h6><h6 id="找了基本上一上午发现了你个不错的CLI工具angular-cli，其实原先也在yeoman下载过一些gengerators感觉不怎么顺手"><a href="#找了基本上一上午发现了你个不错的CLI工具angular-cli，其实原先也在yeoman下载过一些gengerators感觉不怎么顺手" class="headerlink" title="找了基本上一上午发现了你个不错的CLI工具angular-cli，其实原先也在yeoman下载过一些gengerators感觉不怎么顺手"></a>找了基本上一上午发现了你个不错的CLI工具angular-cli，其实原先也在yeoman下载过一些gengerators感觉不怎么顺手</h6><h6 id="ok，执行"><a href="#ok，执行" class="headerlink" title="ok，执行"></a>ok，执行</h6><pre><code>npm install -g angular-cli进行安装</code></pre><h6 id="error！！"><a href="#error！！" class="headerlink" title="error！！"></a>error！！</h6><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h6 id="又是VC-的问题，每次都是这样，我记得上一次解决过，但是没有记下来。后来又重装了电脑，然后就再次碰见了这个error。"><a href="#又是VC-的问题，每次都是这样，我记得上一次解决过，但是没有记下来。后来又重装了电脑，然后就再次碰见了这个error。" class="headerlink" title="又是VC++的问题，每次都是这样，我记得上一次解决过，但是没有记下来。后来又重装了电脑，然后就再次碰见了这个error。"></a>又是VC++的问题，每次都是这样，我记得上一次解决过，但是没有记下来。后来又重装了电脑，然后就再次碰见了这个error。</h6><h6 id="现在解决，管理员下"><a href="#现在解决，管理员下" class="headerlink" title="现在解决，管理员下"></a>现在解决，管理员下</h6><pre><code>npm install --global --production windows-build-tools</code></pre><h6 id="再不行就"><a href="#再不行就" class="headerlink" title="再不行就"></a>再不行就</h6><pre><code> npm update</code></pre><h6 id="讲真的，windows。。。。。。。。不说啥了"><a href="#讲真的，windows。。。。。。。。不说啥了" class="headerlink" title="讲真的，windows。。。。。。。。不说啥了"></a>讲真的，windows。。。。。。。。不说啥了</h6>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>困扰的环境</title>
    <link href="/2015/06/12/%E5%9B%B0%E6%89%B0%E7%9A%84%E7%8E%AF%E5%A2%83/"/>
    <url>/2015/06/12/%E5%9B%B0%E6%89%B0%E7%9A%84%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><h6 id="身为程序员，虽然不怕重新安装系统，可是真的怕配置环境。"><a href="#身为程序员，虽然不怕重新安装系统，可是真的怕配置环境。" class="headerlink" title="身为程序员，虽然不怕重新安装系统，可是真的怕配置环境。"></a>身为程序员，虽然不怕重新安装系统，可是真的怕配置环境。</h6><h6 id="这几天真是为了环境操碎了心"><a href="#这几天真是为了环境操碎了心" class="headerlink" title="这几天真是为了环境操碎了心"></a>这几天真是为了环境操碎了心</h6><h6 id="前几天，为了nodejs的sharp，最近几天为了yeoman下的angular2——app，都出现了一个问题"><a href="#前几天，为了nodejs的sharp，最近几天为了yeoman下的angular2——app，都出现了一个问题" class="headerlink" title="前几天，为了nodejs的sharp，最近几天为了yeoman下的angular2——app，都出现了一个问题"></a>前几天，为了nodejs的sharp，最近几天为了yeoman下的angular2——app，都出现了一个问题</h6><h6 id="1-vc-2-net-3-SDK"><a href="#1-vc-2-net-3-SDK" class="headerlink" title="1)vc  2).net  3)SDK"></a>1)vc  2).net  3)SDK</h6><h6 id="就这三个问题，windows…咳。。"><a href="#就这三个问题，windows…咳。。" class="headerlink" title="就这三个问题，windows…咳。。"></a>就这三个问题，windows…咳。。</h6><h6 id="虽然都装了，可是还是出现问题，早晚我要脱坑"><a href="#虽然都装了，可是还是出现问题，早晚我要脱坑" class="headerlink" title="虽然都装了，可是还是出现问题，早晚我要脱坑"></a>虽然都装了，可是还是出现问题，早晚我要脱坑</h6><h6 id="今天晚上，看了看今年阿里校招前端的要求，，有一条是学点别的后台语言java、php等"><a href="#今天晚上，看了看今年阿里校招前端的要求，，有一条是学点别的后台语言java、php等" class="headerlink" title="今天晚上，看了看今年阿里校招前端的要求，，有一条是学点别的后台语言java、php等"></a>今天晚上，看了看今年阿里校招前端的要求，，有一条是学点别的后台语言java、php等</h6><h6 id="虽然有java课，但还是想跟着同学学习一下spring-其实去年就想学了"><a href="#虽然有java课，但还是想跟着同学学习一下spring-其实去年就想学了" class="headerlink" title="虽然有java课，但还是想跟着同学学习一下spring(其实去年就想学了)"></a>虽然有java课，但还是想跟着同学学习一下spring(其实去年就想学了)</h6><p><a href="http://start.spring.io">SPRING INITIALIZR</a></p><h6 id="还好有上面的网站，生成spring项目很方便。。"><a href="#还好有上面的网站，生成spring项目很方便。。" class="headerlink" title="还好有上面的网站，生成spring项目很方便。。"></a>还好有上面的网站，生成spring项目很方便。。</h6><h6 id="问题接踵而至，idea可以自动下载需要的包，，这很好，但是maven还是出问题了，，"><a href="#问题接踵而至，idea可以自动下载需要的包，，这很好，但是maven还是出问题了，，" class="headerlink" title="问题接踵而至，idea可以自动下载需要的包，，这很好，但是maven还是出问题了，，"></a>问题接踵而至，idea可以自动下载需要的包，，这很好，但是maven还是出问题了，，</h6><h6 id="脑海怵然出现了一句“苍天饶过谁····”，去年就是maven导包导不过来，今年还是。。。"><a href="#脑海怵然出现了一句“苍天饶过谁····”，去年就是maven导包导不过来，今年还是。。。" class="headerlink" title="脑海怵然出现了一句“苍天饶过谁····”，去年就是maven导包导不过来，今年还是。。。"></a>脑海怵然出现了一句“苍天饶过谁····”，去年就是maven导包导不过来，今年还是。。。</h6><h6 id="难道我就注定与sprin无缘吗。。"><a href="#难道我就注定与sprin无缘吗。。" class="headerlink" title="难道我就注定与sprin无缘吗。。"></a>难道我就注定与sprin无缘吗。。</h6><h6 id="现在我正准备重新安装一下idea试一试。。希望能成功"><a href="#现在我正准备重新安装一下idea试一试。。希望能成功" class="headerlink" title="现在我正准备重新安装一下idea试一试。。希望能成功"></a>现在我正准备重新安装一下idea试一试。。希望能成功</h6><h6 id="早晚有一天，我要脱离windows的坑"><a href="#早晚有一天，我要脱离windows的坑" class="headerlink" title="早晚有一天，我要脱离windows的坑"></a>早晚有一天，我要脱离windows的坑</h6>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小白对maven、tomcat、spring的认识</title>
    <link href="/2015/06/10/%E5%B0%8F%E7%99%BD%E5%AF%B9maven%E3%80%81tomcat%E3%80%81spring%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
    <url>/2015/06/10/%E5%B0%8F%E7%99%BD%E5%AF%B9maven%E3%80%81tomcat%E3%80%81spring%E7%9A%84%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="好吧，自从昨天开始就一直配置springboot的环境"><a href="#好吧，自从昨天开始就一直配置springboot的环境" class="headerlink" title="好吧，自从昨天开始就一直配置springboot的环境"></a>好吧，自从昨天开始就一直配置springboot的环境</h6><h6 id="舍友们的都运行的好好的，唯独我的出问题"><a href="#舍友们的都运行的好好的，唯独我的出问题" class="headerlink" title="舍友们的都运行的好好的，唯独我的出问题"></a>舍友们的都运行的好好的，唯独我的出问题</h6><h6 id="对于一个小白而言，真是被maven、tomcat整的云里雾里"><a href="#对于一个小白而言，真是被maven、tomcat整的云里雾里" class="headerlink" title="对于一个小白而言，真是被maven、tomcat整的云里雾里"></a>对于一个小白而言，真是被maven、tomcat整的云里雾里</h6><h6 id="今天装了大半天，终于有所收获"><a href="#今天装了大半天，终于有所收获" class="headerlink" title="今天装了大半天，终于有所收获"></a>今天装了大半天，终于有所收获</h6><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><h6 id="一种包管理器，那何为包管理器呢？就我的理解，就是下载依赖包的、然后就是打打包啊之类的"><a href="#一种包管理器，那何为包管理器呢？就我的理解，就是下载依赖包的、然后就是打打包啊之类的" class="headerlink" title="一种包管理器，那何为包管理器呢？就我的理解，就是下载依赖包的、然后就是打打包啊之类的"></a>一种包管理器，那何为包管理器呢？就我的理解，就是下载依赖包的、然后就是打打包啊之类的</h6><h6 id="从start-spring-io下载下来的项目中的pom-xml就是maven下载的东西，就跟package-json里面的各种配置、插件的下载一样"><a href="#从start-spring-io下载下来的项目中的pom-xml就是maven下载的东西，就跟package-json里面的各种配置、插件的下载一样" class="headerlink" title="从start.spring.io下载下来的项目中的pom.xml就是maven下载的东西，就跟package.json里面的各种配置、插件的下载一样"></a>从start.spring.io下载下来的项目中的pom.xml就是maven下载的东西，就跟package.json里面的各种配置、插件的下载一样</h6><h6 id="那现在重点来了，前提是你必须先安装JDK。。配置好JDK，idea里面自带maven跟tomcat就不需要从网上再看教程安装了-可是，宝宝一开始并不知道。。乖乖安装了"><a href="#那现在重点来了，前提是你必须先安装JDK。。配置好JDK，idea里面自带maven跟tomcat就不需要从网上再看教程安装了-可是，宝宝一开始并不知道。。乖乖安装了" class="headerlink" title="那现在重点来了，前提是你必须先安装JDK。。配置好JDK，idea里面自带maven跟tomcat就不需要从网上再看教程安装了(可是，宝宝一开始并不知道。。乖乖安装了)"></a>那现在重点来了，前提是你必须先安装JDK。。配置好JDK，idea里面自带maven跟tomcat就不需要从网上再看教程安装了(可是，宝宝一开始并不知道。。乖乖安装了)</h6><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><h6 id="那什么是tomcat呢？Tom的猫？当然没有这么草率了。"><a href="#那什么是tomcat呢？Tom的猫？当然没有这么草率了。" class="headerlink" title="那什么是tomcat呢？Tom的猫？当然没有这么草率了。"></a>那什么是tomcat呢？Tom的猫？当然没有这么草率了。</h6><h6 id="我刚开始的时候maven把各种包下载下来了，自己写了一行代码想看看能不能在浏览器上输出。"><a href="#我刚开始的时候maven把各种包下载下来了，自己写了一行代码想看看能不能在浏览器上输出。" class="headerlink" title="我刚开始的时候maven把各种包下载下来了，自己写了一行代码想看看能不能在浏览器上输出。"></a>我刚开始的时候maven把各种包下载下来了，自己写了一行代码想看看能不能在浏览器上输出。</h6><h6 id="结果，spring自动终止，并不跑我写的线程，但是它没有报错，对，没有报错。。这就尴尬了"><a href="#结果，spring自动终止，并不跑我写的线程，但是它没有报错，对，没有报错。。这就尴尬了" class="headerlink" title="结果，spring自动终止，并不跑我写的线程，但是它没有报错，对，没有报错。。这就尴尬了"></a>结果，spring自动终止，并不跑我写的线程，但是它没有报错，对，没有报错。。这就尴尬了</h6><h6 id="ok-我就老老实实看教程，各种教程，都没有用，但是通过教程我知道了一件事"><a href="#ok-我就老老实实看教程，各种教程，都没有用，但是通过教程我知道了一件事" class="headerlink" title="ok,我就老老实实看教程，各种教程，都没有用，但是通过教程我知道了一件事"></a>ok,我就老老实实看教程，各种教程，都没有用，但是通过教程我知道了一件事</h6><h6 id="tomcat是跑localhost的，是一种服务器"><a href="#tomcat是跑localhost的，是一种服务器" class="headerlink" title="tomcat是跑localhost的，是一种服务器"></a>tomcat是跑localhost的，是一种服务器</h6><h6 id="那我忽然明白了，说不定是idea里的tomcat并没有跑，想从本地嵌入tomcat，可是，，并没有用"><a href="#那我忽然明白了，说不定是idea里的tomcat并没有跑，想从本地嵌入tomcat，可是，，并没有用" class="headerlink" title="那我忽然明白了，说不定是idea里的tomcat并没有跑，想从本地嵌入tomcat，可是，，并没有用"></a>那我忽然明白了，说不定是idea里的tomcat并没有跑，想从本地嵌入tomcat，可是，，并没有用</h6><h6 id="然后就找出错的原因。。发现maven下载的tomcat有错误"><a href="#然后就找出错的原因。。发现maven下载的tomcat有错误" class="headerlink" title="然后就找出错的原因。。发现maven下载的tomcat有错误"></a>然后就找出错的原因。。发现maven下载的tomcat有错误</h6><h3 id="m2"><a href="#m2" class="headerlink" title=".m2"></a>.m2</h3><h6 id="就在这时我发现原来maven下载的各种依赖在user里的-m2文件夹中，我就把舍友的-m2文件夹拷到我的电脑上，结果很完美。"><a href="#就在这时我发现原来maven下载的各种依赖在user里的-m2文件夹中，我就把舍友的-m2文件夹拷到我的电脑上，结果很完美。" class="headerlink" title="就在这时我发现原来maven下载的各种依赖在user里的.m2文件夹中，我就把舍友的.m2文件夹拷到我的电脑上，结果很完美。"></a>就在这时我发现原来maven下载的各种依赖在user里的.m2文件夹中，我就把舍友的.m2文件夹拷到我的电脑上，结果很完美。</h6><h6 id="PS：如果大家遇到了想我一样的问题可以试试把它下载下来放到user里面去"><a href="#PS：如果大家遇到了想我一样的问题可以试试把它下载下来放到user里面去" class="headerlink" title="PS：如果大家遇到了想我一样的问题可以试试把它下载下来放到user里面去"></a>PS：如果大家遇到了想我一样的问题可以试试把它下载下来放到user里面去</h6><p><a href="https://github.com/zhangfuli/spring--.m.git">.m2</a></p><h6 id="这是所有的依赖包，下载下来再结合从start-spring-io下载的项目试一下吧"><a href="#这是所有的依赖包，下载下来再结合从start-spring-io下载的项目试一下吧" class="headerlink" title="这是所有的依赖包，下载下来再结合从start.spring.io下载的项目试一下吧"></a>这是所有的依赖包，下载下来再结合从start.spring.io下载的项目试一下吧</h6><h3 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h3><h6 id="Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid-application-development）成为领导者。"><a href="#Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid-application-development）成为领导者。" class="headerlink" title="Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。"></a>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。</h6><h6 id="ok-上面的是我抄的，我的理解嘛"><a href="#ok-上面的是我抄的，我的理解嘛" class="headerlink" title="ok,上面的是我抄的，我的理解嘛"></a>ok,上面的是我抄的，我的理解嘛</h6><h6 id="springboot跟很多框架一样，封装了一些函数跟类，让你更方便的写代码"><a href="#springboot跟很多框架一样，封装了一些函数跟类，让你更方便的写代码" class="headerlink" title="springboot跟很多框架一样，封装了一些函数跟类，让你更方便的写代码"></a>springboot跟很多框架一样，封装了一些函数跟类，让你更方便的写代码</h6>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下的包管理器chocolatey</title>
    <link href="/2015/06/02/chocolatey/"/>
    <url>/2015/06/02/chocolatey/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="Linux安装软件都有软件包管理器，安装卸载软件很方便，比如ubuntu下只需要apt-get-install-php就可以等待php的安装完成与环境变量的注册。而win很多东西就很麻烦，尤其是和开发相关的，比如git，比如php，比如nginx的安装。"><a href="#Linux安装软件都有软件包管理器，安装卸载软件很方便，比如ubuntu下只需要apt-get-install-php就可以等待php的安装完成与环境变量的注册。而win很多东西就很麻烦，尤其是和开发相关的，比如git，比如php，比如nginx的安装。" class="headerlink" title="Linux安装软件都有软件包管理器，安装卸载软件很方便，比如ubuntu下只需要apt-get install         php就可以等待php的安装完成与环境变量的注册。而win很多东西就很麻烦，尤其是和开发相关的，比如git，比如php，比如nginx的安装。"></a>Linux安装软件都有软件包管理器，安装卸载软件很方便，比如ubuntu下只需要apt-get install         php就可以等待php的安装完成与环境变量的注册。而win很多东西就很麻烦，尤其是和开发相关的，比如git，比如php，比如nginx的安装。</h6><p>然后就有学长给我安装了chocolatey。win下的软件包管理器。<br>官网是：<a href="https://chocolatey.org/">https://chocolatey.org/</a>(不翻墙打开有点困难，好像是因为用了Google字体”)</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h6 id="在管理员模式cmd下复制这段代码就可以自动运行"><a href="#在管理员模式cmd下复制这段代码就可以自动运行" class="headerlink" title="在管理员模式cmd下复制这段代码就可以自动运行"></a>在管理员模式cmd下复制这段代码就可以自动运行</h6><pre><code>@&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</code></pre><h6 id="安装完成后，命令行安装的软件就可以了"><a href="#安装完成后，命令行安装的软件就可以了" class="headerlink" title="安装完成后，命令行安装的软件就可以了"></a>安装完成后，命令行安装的软件就可以了</h6><h6 id="以googlechrome为例"><a href="#以googlechrome为例" class="headerlink" title="以googlechrome为例"></a>以googlechrome为例</h6><pre><code>choco install googlechrome</code></pre>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用github和hexo搭建自己的博客</title>
    <link href="/2015/06/01/buildblog/"/>
    <url>/2015/06/01/buildblog/</url>
    
    <content type="html"><![CDATA[<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h6 id="首先，你要先自己注册一个Github的账户。自己去github官网注册个账号就ok了。"><a href="#首先，你要先自己注册一个Github的账户。自己去github官网注册个账号就ok了。" class="headerlink" title="首先，你要先自己注册一个Github的账户。自己去github官网注册个账号就ok了。"></a>首先，你要先自己注册一个Github的账户。自己去github官网注册个账号就ok了。</h6><h6 id="搭建环境-必须的-—Node和git"><a href="#搭建环境-必须的-—Node和git" class="headerlink" title="搭建环境(必须的)  —Node和git"></a>搭建环境(必须的)  —Node和git</h6><h6 id="利用choco在cmd-管理员模式-下安装很方便。choco在前面已经讲过。可以自己去chocolaty官网上自己查找。"><a href="#利用choco在cmd-管理员模式-下安装很方便。choco在前面已经讲过。可以自己去chocolaty官网上自己查找。" class="headerlink" title="利用choco在cmd(管理员模式)下安装很方便。choco在前面已经讲过。可以自己去chocolaty官网上自己查找。"></a>利用choco在cmd(管理员模式)下安装很方便。choco在前面已经讲过。可以自己去chocolaty官网上自己查找。</h6><h6 id="安装开始"><a href="#安装开始" class="headerlink" title="安装开始"></a>安装开始</h6><h6 id="执行如下命令"><a href="#执行如下命令" class="headerlink" title="执行如下命令"></a>执行如下命令</h6><pre><code>npm install -g hexo</code></pre><h6 id="进行安装"><a href="#进行安装" class="headerlink" title="进行安装"></a>进行安装</h6><pre><code>hexo init</code></pre><h6 id="进行初始化"><a href="#进行初始化" class="headerlink" title="进行初始化"></a>进行初始化</h6><h6 id="在Github里新建一个仓库，名字叫XXX-你Github的昵称-github-io"><a href="#在Github里新建一个仓库，名字叫XXX-你Github的昵称-github-io" class="headerlink" title="在Github里新建一个仓库，名字叫XXX(你Github的昵称).github.io"></a>在Github里新建一个仓库，名字叫XXX(你Github的昵称).github.io</h6><h6 id="下载安装Souretree-我用的是Souretree，你也可以选在别的软件"><a href="#下载安装Souretree-我用的是Souretree，你也可以选在别的软件" class="headerlink" title="下载安装Souretree(我用的是Souretree，你也可以选在别的软件)"></a>下载安装Souretree(我用的是Souretree，你也可以选在别的软件)</h6><h6 id="把XXX-github-io克隆到生成hexo的文件的public文件下-注：如果里面有文件的话先copy出来，让public为空文件夹-。"><a href="#把XXX-github-io克隆到生成hexo的文件的public文件下-注：如果里面有文件的话先copy出来，让public为空文件夹-。" class="headerlink" title="把XXX.github.io克隆到生成hexo的文件的public文件下(注：如果里面有文件的话先copy出来，让public为空文件夹)。"></a>把XXX.github.io克隆到生成hexo的文件的public文件下(注：如果里面有文件的话先copy出来，让public为空文件夹)。</h6><h6 id="OK，在网址上输入XXX-github-io，你的专属blog完成了。"><a href="#OK，在网址上输入XXX-github-io，你的专属blog完成了。" class="headerlink" title="OK，在网址上输入XXX.github.io，你的专属blog完成了。"></a>OK，在网址上输入XXX.github.io，你的专属blog完成了。</h6><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><h6 id="PS-需要运行在cmd下找到你的blog所在的文件夹运行hexo-g即可，如果想在本地看看你的页面hexo-s"><a href="#PS-需要运行在cmd下找到你的blog所在的文件夹运行hexo-g即可，如果想在本地看看你的页面hexo-s" class="headerlink" title="PS:需要运行在cmd下找到你的blog所在的文件夹运行hexo g即可，如果想在本地看看你的页面hexo s"></a>PS:需要运行在cmd下找到你的blog所在的文件夹运行hexo g即可，如果想在本地看看你的页面hexo s</h6>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Blog</title>
    <link href="/2015/06/01/hello-blog/"/>
    <url>/2015/06/01/hello-blog/</url>
    
    <content type="html"><![CDATA[<h5 id="沿用每一个程序员都写过的“Hello-world”-我也说一句”Hello-blog”"><a href="#沿用每一个程序员都写过的“Hello-world”-我也说一句”Hello-blog”" class="headerlink" title="沿用每一个程序员都写过的“Hello world”,我也说一句”Hello blog”"></a>沿用每一个程序员都写过的“Hello world”,我也说一句”Hello blog”</h5><img src="http://p4j7qpj9e.bkt.clouddn.com/helloblog.jpg" alt="">]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world</title>
    <link href="/2015/05/27/hello-world/"/>
    <url>/2015/05/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
